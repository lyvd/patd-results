{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/app.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 28,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(debug=os.environ.get('FLASK_DEBUG', True), host='0.0.0.0')\n",
                    "rendered": {
                      "text": "        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(debug=os.environ.get('FLASK_DEBUG', True), host='0.0.0.0')\n",
                      "markdown": "`        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(debug=os.environ.get('FLASK_DEBUG', True), host='0.0.0.0')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/app.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 21,
                  "endLine": 51,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(debug=os.environ.get('FLASK_DEBUG', True), host='0.0.0.0')\n",
                    "rendered": {
                      "text": "        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(debug=os.environ.get('FLASK_DEBUG', True), host='0.0.0.0')\n",
                      "markdown": "`        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(debug=os.environ.get('FLASK_DEBUG', True), host='0.0.0.0')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/app.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 21,
                  "endLine": 36,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        output_file_name = f\"{request_id}_treasure-hunt.md\"\n        output_file_path = os.path.join(app.config['PWD'], output_file_name)\n\n        # Execute the script to generate the clues\n        out, err, wait = stream_exec_file(SCRIPT_PATH, \"--locations \" + code + \" --outputfile \"+output_file_name)\n        print_output(out, err)\n        wait()\n",
                    "rendered": {
                      "text": "        output_file_name = f\"{request_id}_treasure-hunt.md\"\n        output_file_path = os.path.join(app.config['PWD'], output_file_name)\n\n        # Execute the script to generate the clues\n        out, err, wait = stream_exec_file(SCRIPT_PATH, \"--locations \" + code + \" --outputfile \"+output_file_name)\n        print_output(out, err)\n        wait()\n",
                      "markdown": "`        output_file_name = f\"{request_id}_treasure-hunt.md\"\n        output_file_path = os.path.join(app.config['PWD'], output_file_name)\n\n        # Execute the script to generate the clues\n        out, err, wait = stream_exec_file(SCRIPT_PATH, \"--locations \" + code + \" --outputfile \"+output_file_name)\n        print_output(out, err)\n        wait()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/Dockerfile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 24,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n",
                    "rendered": {
                      "text": "ENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n",
                      "markdown": "`ENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/Dockerfile"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 21,
                  "endColumn": 4,
                  "snippet": {
                    "text": "EXPOSE 5000\n\n# Set the environment variable\nENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n",
                    "rendered": {
                      "text": "EXPOSE 5000\n\n# Set the environment variable\nENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n",
                      "markdown": "`EXPOSE 5000\n\n# Set the environment variable\nENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/Dockerfile"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 20,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Expose the port\nEXPOSE 5000\n\n# Set the environment variable\nENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\n",
                    "rendered": {
                      "text": "# Expose the port\nEXPOSE 5000\n\n# Set the environment variable\nENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\n",
                      "markdown": "`# Expose the port\nEXPOSE 5000\n\n# Set the environment variable\nENV FLASK_APP=app.py\nENV FLASK_DEBUG=False  # Set this to True/False to enable/disable debugging.\n\n# Run app\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/Dockerfile"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 3,
                  "endLine": 11,
                  "endColumn": 8,
                  "snippet": {
                    "text": "COPY requirements.txt .\n\n# Install the Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the Flask app code\nCOPY . .\n",
                    "rendered": {
                      "text": "COPY requirements.txt .\n\n# Install the Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the Flask app code\nCOPY . .\n",
                      "markdown": "`COPY requirements.txt .\n\n# Install the Python dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the Flask app code\nCOPY . .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/treasure-hunt.gpt"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 61,
                  "endLine": 25,
                  "endColumn": 65,
                  "snippet": {
                    "text": "args: query: The query to search for\ntools: sys.http.html2text?\n\n1. For each of the location in $(locations), open Google Maps at the URL: \"https://www.google.com/maps/search/?api=1&query=${locations}\".\n2. Find the shortest route between the locations provided based on the order of places provided.\n3. Return the best mode of transport to reach from one location to another for each location in the order provided.\n",
                    "rendered": {
                      "text": "args: query: The query to search for\ntools: sys.http.html2text?\n\n1. For each of the location in $(locations), open Google Maps at the URL: \"https://www.google.com/maps/search/?api=1&query=${locations}\".\n2. Find the shortest route between the locations provided based on the order of places provided.\n3. Return the best mode of transport to reach from one location to another for each location in the order provided.\n",
                      "markdown": "`args: query: The query to search for\ntools: sys.http.html2text?\n\n1. For each of the location in $(locations), open Google Maps at the URL: \"https://www.google.com/maps/search/?api=1&query=${locations}\".\n2. Find the shortest route between the locations provided based on the order of places provided.\n3. Return the best mode of transport to reach from one location to another for each location in the order provided.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/treasure-hunt.gpt"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 60,
                  "endLine": 11,
                  "endColumn": 64,
                  "snippet": {
                    "text": "n's name or address. Try to use interesting trivia, facts, historical information, noteworthy personalities, or events that took place at that location.\n2. For the first clue, start with \"Your journey starts with/Your first location is...\"\n3. Be witty or funny when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, suggested modes of transport, and the distance.\n5. For the last clue, mention that it's the final one and that the user will find their final reward here.\n6. Do not sho",
                    "rendered": {
                      "text": "n's name or address. Try to use interesting trivia, facts, historical information, noteworthy personalities, or events that took place at that location.\n2. For the first clue, start with \"Your journey starts with/Your first location is...\"\n3. Be witty or funny when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, suggested modes of transport, and the distance.\n5. For the last clue, mention that it's the final one and that the user will find their final reward here.\n6. Do not sho",
                      "markdown": "`n's name or address. Try to use interesting trivia, facts, historical information, noteworthy personalities, or events that took place at that location.\n2. For the first clue, start with \"Your journey starts with/Your first location is...\"\n3. Be witty or funny when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, suggested modes of transport, and the distance.\n5. For the last clue, mention that it's the final one and that the user will find their final reward here.\n6. Do not sho`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/treasure-hunt.gpt"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 229,
                  "endLine": 9,
                  "endColumn": 233,
                  "snippet": {
                    "text": "without showing, using, or writing the location provided by the user:\n\n1. Generate a clue in the format \"Your next location is a/the...\" without including the location's name or address. Try to use interesting trivia, facts, historical information, noteworthy personalities, or events that took place at that location.\n2. For the first clue, start with \"Your journey starts with/Your first location is...\"\n3. Be witty or funny when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, su",
                    "rendered": {
                      "text": "without showing, using, or writing the location provided by the user:\n\n1. Generate a clue in the format \"Your next location is a/the...\" without including the location's name or address. Try to use interesting trivia, facts, historical information, noteworthy personalities, or events that took place at that location.\n2. For the first clue, start with \"Your journey starts with/Your first location is...\"\n3. Be witty or funny when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, su",
                      "markdown": "`without showing, using, or writing the location provided by the user:\n\n1. Generate a clue in the format \"Your next location is a/the...\" without including the location's name or address. Try to use interesting trivia, facts, historical information, noteworthy personalities, or events that took place at that location.\n2. For the first clue, start with \"Your journey starts with/Your first location is...\"\n3. Be witty or funny when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, su`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/treasure-hunt.gpt"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 2,
                  "endLine": 26,
                  "endColumn": 8,
                  "snippet": {
                    "text": "tools: sys.http.html2text?\n\n1. For each of the location in $(locations), open Google Maps at the URL: \"https://www.google.com/maps/search/?api=1&query=${locations}\".\n2. Find the shortest route between the locations provided based on the order of places provided.\n3. Return the best mode of transport to reach from one location to another for each location in the order provided.\n",
                    "rendered": {
                      "text": "tools: sys.http.html2text?\n\n1. For each of the location in $(locations), open Google Maps at the URL: \"https://www.google.com/maps/search/?api=1&query=${locations}\".\n2. Find the shortest route between the locations provided based on the order of places provided.\n3. Return the best mode of transport to reach from one location to another for each location in the order provided.\n",
                      "markdown": "`tools: sys.http.html2text?\n\n1. For each of the location in $(locations), open Google Maps at the URL: \"https://www.google.com/maps/search/?api=1&query=${locations}\".\n2. Find the shortest route between the locations provided based on the order of places provided.\n3. Return the best mode of transport to reach from one location to another for each location in the order provided.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/treasure-hunt.gpt"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 76,
                  "endLine": 13,
                  "endColumn": 82,
                  "snippet": {
                    "text": " when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, suggested modes of transport, and the distance.\n5. For the last clue, mention that it's the final one and that the user will find their final reward here.\n6. Do not show, write, or display the name of the specific location or the word \"clue\" anywhere in the output.\n7. Create a new md file named $(outputfile) with all the clues in order of the locations provided, along with a short welcome note to the player welcoming them to t",
                    "rendered": {
                      "text": " when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, suggested modes of transport, and the distance.\n5. For the last clue, mention that it's the final one and that the user will find their final reward here.\n6. Do not show, write, or display the name of the specific location or the word \"clue\" anywhere in the output.\n7. Create a new md file named $(outputfile) with all the clues in order of the locations provided, along with a short welcome note to the player welcoming them to t",
                      "markdown": "` when you give a clue, and ensure it has at least three hints for every location to help the user.\n4. The clue should also lead the user to the next location, with fun trivia, suggested modes of transport, and the distance.\n5. For the last clue, mention that it's the final one and that the user will find their final reward here.\n6. Do not show, write, or display the name of the specific location or the word \"clue\" anywhere in the output.\n7. Create a new md file named $(outputfile) with all the clues in order of the locations provided, along with a short welcome note to the player welcoming them to t`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/Bob/claude-3-5-sonnet-20240620-expected.json"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 36,
                  "endLine": 129,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/Bob/claude-3-5-sonnet-20240620-expected.json"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 36,
                  "endLine": 82,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/Bob/mistral-large-2402-expected.json"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 36,
                  "endLine": 129,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/Bob/mistral-large-2402-expected.json"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 36,
                  "endLine": 82,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v2.json"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 52,
                  "endLine": 33,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n",
                    "rendered": {
                      "text": "          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n",
                      "markdown": "`          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v2.json"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 59,
                  "endLine": 33,
                  "endColumn": 65,
                  "snippet": {
                    "text": "          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n",
                    "rendered": {
                      "text": "          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n",
                      "markdown": "`          {\n            \"name\": \"limit\",\n            \"in\": \"query\",\n            \"description\": \"How many items to return at one time (max 100)\",\n            \"required\": false,\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v3_no_operation_ids.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 47,
                  "endLine": 18,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                    "rendered": {
                      "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                      "markdown": "`      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v3_no_operation_ids.yaml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 54,
                  "endLine": 18,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                    "rendered": {
                      "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                      "markdown": "`      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 5,
                  "endLine": 143,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n\tnewEnv := runtimeEnv.AppendPath(env, venvBinPath)\n\tif runtime.GOOS == \"windows\" && os.Getenv(\"PYTHONIOENCODING\") == \"\" {\n\t\tnewEnv = append(newEnv, \"PYTHONIOENCODING=utf-8\")\n\t}\n\tnewEnv = append(newEnv, \"VIRTUAL_ENV=\"+venvPath)\n\n",
                    "rendered": {
                      "text": "\n\tnewEnv := runtimeEnv.AppendPath(env, venvBinPath)\n\tif runtime.GOOS == \"windows\" && os.Getenv(\"PYTHONIOENCODING\") == \"\" {\n\t\tnewEnv = append(newEnv, \"PYTHONIOENCODING=utf-8\")\n\t}\n\tnewEnv = append(newEnv, \"VIRTUAL_ENV=\"+venvPath)\n\n",
                      "markdown": "`\n\tnewEnv := runtimeEnv.AppendPath(env, venvBinPath)\n\tif runtime.GOOS == \"windows\" && os.Getenv(\"PYTHONIOENCODING\") == \"\" {\n\t\tnewEnv = append(newEnv, \"PYTHONIOENCODING=utf-8\")\n\t}\n\tnewEnv = append(newEnv, \"VIRTUAL_ENV=\"+venvPath)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 39,
                  "endLine": 142,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t}\n\n\tnewEnv := runtimeEnv.AppendPath(env, venvBinPath)\n\tif runtime.GOOS == \"windows\" && os.Getenv(\"PYTHONIOENCODING\") == \"\" {\n\t\tnewEnv = append(newEnv, \"PYTHONIOENCODING=utf-8\")\n\t}\n\tnewEnv = append(newEnv, \"VIRTUAL_ENV=\"+venvPath)\n",
                    "rendered": {
                      "text": "\t}\n\n\tnewEnv := runtimeEnv.AppendPath(env, venvBinPath)\n\tif runtime.GOOS == \"windows\" && os.Getenv(\"PYTHONIOENCODING\") == \"\" {\n\t\tnewEnv = append(newEnv, \"PYTHONIOENCODING=utf-8\")\n\t}\n\tnewEnv = append(newEnv, \"VIRTUAL_ENV=\"+venvPath)\n",
                      "markdown": "`\t}\n\n\tnewEnv := runtimeEnv.AppendPath(env, venvBinPath)\n\tif runtime.GOOS == \"windows\" && os.Getenv(\"PYTHONIOENCODING\") == \"\" {\n\t\tnewEnv = append(newEnv, \"PYTHONIOENCODING=utf-8\")\n\t}\n\tnewEnv = append(newEnv, \"VIRTUAL_ENV=\"+venvPath)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 43,
                  "endLine": 85,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\nfunc (r *Runtime) installVenv(ctx context.Context, binDir, venvPath string) error {\n\tlog.InfofCtx(ctx, \"Creating virtualenv in %s\", venvPath)\n\tcmd := debugcmd.New(ctx, uvBin(binDir), \"venv\", \"-p\", pythonCmd(binDir), venvPath)\n\treturn cmd.Run()\n}\n\n",
                    "rendered": {
                      "text": "\nfunc (r *Runtime) installVenv(ctx context.Context, binDir, venvPath string) error {\n\tlog.InfofCtx(ctx, \"Creating virtualenv in %s\", venvPath)\n\tcmd := debugcmd.New(ctx, uvBin(binDir), \"venv\", \"-p\", pythonCmd(binDir), venvPath)\n\treturn cmd.Run()\n}\n\n",
                      "markdown": "`\nfunc (r *Runtime) installVenv(ctx context.Context, binDir, venvPath string) error {\n\tlog.InfofCtx(ctx, \"Creating virtualenv in %s\", venvPath)\n\tcmd := debugcmd.New(ctx, uvBin(binDir), \"venv\", \"-p\", pythonCmd(binDir), venvPath)\n\treturn cmd.Run()\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc (r *Runtime) setupUV(ctx context.Context, tmp string) error {\n\tlog.InfofCtx(ctx, \"Install uv %s\", uvVersion)\n\tcmd := debugcmd.New(ctx, pythonCmd(tmp), \"-m\", \"pip\", \"install\", uvVersion)\n\treturn cmd.Run()\n}\n\n",
                    "rendered": {
                      "text": "\nfunc (r *Runtime) setupUV(ctx context.Context, tmp string) error {\n\tlog.InfofCtx(ctx, \"Install uv %s\", uvVersion)\n\tcmd := debugcmd.New(ctx, pythonCmd(tmp), \"-m\", \"pip\", \"install\", uvVersion)\n\treturn cmd.Run()\n}\n\n",
                      "markdown": "`\nfunc (r *Runtime) setupUV(ctx context.Context, tmp string) error {\n\tlog.InfofCtx(ctx, \"Install uv %s\", uvVersion)\n\tcmd := debugcmd.New(ctx, pythonCmd(tmp), \"-m\", \"pip\", \"install\", uvVersion)\n\treturn cmd.Run()\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 2,
                  "endLine": 221,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\tfor _, req := range []string{gptscriptRequirementsTxt, requirementsTxt} {\n\t\treqFile := filepath.Join(reqPath, req)\n\t\tif s, err := os.Stat(reqFile); err == nil && !s.IsDir() {\n\t\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\t\tcmd.Env = env\n\t\t\treturn cmd.Run()\n\t\t}\n",
                    "rendered": {
                      "text": "\tfor _, req := range []string{gptscriptRequirementsTxt, requirementsTxt} {\n\t\treqFile := filepath.Join(reqPath, req)\n\t\tif s, err := os.Stat(reqFile); err == nil && !s.IsDir() {\n\t\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\t\tcmd.Env = env\n\t\t\treturn cmd.Run()\n\t\t}\n",
                      "markdown": "`\tfor _, req := range []string{gptscriptRequirementsTxt, requirementsTxt} {\n\t\treqFile := filepath.Join(reqPath, req)\n\t\tif s, err := os.Stat(reqFile); err == nil && !s.IsDir() {\n\t\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\t\tcmd.Env = env\n\t\t\treturn cmd.Run()\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 1,
                  "endLine": 205,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\tif err := os.WriteFile(reqFile, []byte(content+\"\\n\"), 0644); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\tcmd.Env = env\n\t\treturn cmd.Run()\n\t}\n",
                    "rendered": {
                      "text": "\t\tif err := os.WriteFile(reqFile, []byte(content+\"\\n\"), 0644); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\tcmd.Env = env\n\t\treturn cmd.Run()\n\t}\n",
                      "markdown": "`\t\tif err := os.WriteFile(reqFile, []byte(content+\"\\n\"), 0644); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\tcmd.Env = env\n\t\treturn cmd.Run()\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc (r *Runtime) installVenv(ctx context.Context, binDir, venvPath string) error {\n\tlog.InfofCtx(ctx, \"Creating virtualenv in %s\", venvPath)\n\tcmd := debugcmd.New(ctx, uvBin(binDir), \"venv\", \"-p\", pythonCmd(binDir), venvPath)\n\treturn cmd.Run()\n}\n\n",
                    "rendered": {
                      "text": "\nfunc (r *Runtime) installVenv(ctx context.Context, binDir, venvPath string) error {\n\tlog.InfofCtx(ctx, \"Creating virtualenv in %s\", venvPath)\n\tcmd := debugcmd.New(ctx, uvBin(binDir), \"venv\", \"-p\", pythonCmd(binDir), venvPath)\n\treturn cmd.Run()\n}\n\n",
                      "markdown": "`\nfunc (r *Runtime) installVenv(ctx context.Context, binDir, venvPath string) error {\n\tlog.InfofCtx(ctx, \"Creating virtualenv in %s\", venvPath)\n\tcmd := debugcmd.New(ctx, uvBin(binDir), \"venv\", \"-p\", pythonCmd(binDir), venvPath)\n\treturn cmd.Run()\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 40,
                  "endLine": 51,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\treturn \"python\" + r.Version\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tif runtimeEnv.Matches(cmd, r.ID()) {\n\t\treturn true\n\t}\n",
                    "rendered": {
                      "text": "\treturn \"python\" + r.Version\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tif runtimeEnv.Matches(cmd, r.ID()) {\n\t\treturn true\n\t}\n",
                      "markdown": "`\treturn \"python\" + r.Version\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tif runtimeEnv.Matches(cmd, r.ID()) {\n\t\treturn true\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 12,
                  "endLine": 223,
                  "snippet": {
                    "text": "\t\treqFile := filepath.Join(reqPath, req)\n\t\tif s, err := os.Stat(reqFile); err == nil && !s.IsDir() {\n\t\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\t\tcmd.Env = env\n\t\t\treturn cmd.Run()\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\treqFile := filepath.Join(reqPath, req)\n\t\tif s, err := os.Stat(reqFile); err == nil && !s.IsDir() {\n\t\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\t\tcmd.Env = env\n\t\t\treturn cmd.Run()\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\treqFile := filepath.Join(reqPath, req)\n\t\tif s, err := os.Stat(reqFile); err == nil && !s.IsDir() {\n\t\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\t\tcmd.Env = env\n\t\t\treturn cmd.Run()\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 11,
                  "endLine": 207,
                  "snippet": {
                    "text": "\t\t\treturn err\n\t\t}\n\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\tcmd.Env = env\n\t\treturn cmd.Run()\n\t}\n\n\treqPath := toolSource\n",
                    "rendered": {
                      "text": "\t\t\treturn err\n\t\t}\n\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\tcmd.Env = env\n\t\treturn cmd.Run()\n\t}\n\n\treqPath := toolSource\n",
                      "markdown": "`\t\t\treturn err\n\t\t}\n\t\tcmd := debugcmd.New(ctx, uvBin(binDir), \"pip\", \"install\", \"-r\", reqFile)\n\t\tcmd.Env = env\n\t\treturn cmd.Run()\n\t}\n\n\treqPath := toolSource\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 27,
                  "endLine": 199,
                  "endColumn": 32,
                  "snippet": {
                    "text": "}\n\nfunc (r *Runtime) runPip(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running pip in %s\", toolSource)\n\tif content, ok := tool.MetaData[requirementsTxt]; ok {\n\t\treqFile := filepath.Join(toolSource, requirementsTxt)\n\t\tif err := os.WriteFile(reqFile, []byte(content+\"\\n\"), 0644); err != nil {\n",
                    "rendered": {
                      "text": "}\n\nfunc (r *Runtime) runPip(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running pip in %s\", toolSource)\n\tif content, ok := tool.MetaData[requirementsTxt]; ok {\n\t\treqFile := filepath.Join(toolSource, requirementsTxt)\n\t\tif err := os.WriteFile(reqFile, []byte(content+\"\\n\"), 0644); err != nil {\n",
                      "markdown": "`}\n\nfunc (r *Runtime) runPip(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running pip in %s\", toolSource)\n\tif content, ok := tool.MetaData[requirementsTxt]; ok {\n\t\treqFile := filepath.Join(toolSource, requirementsTxt)\n\t\tif err := os.WriteFile(reqFile, []byte(content+\"\\n\"), 0644); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 89,
                  "endLine": 198,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) runPip(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running pip in %s\", toolSource)\n\tif content, ok := tool.MetaData[requirementsTxt]; ok {\n\t\treqFile := filepath.Join(toolSource, requirementsTxt)\n",
                    "rendered": {
                      "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) runPip(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running pip in %s\", toolSource)\n\tif content, ok := tool.MetaData[requirementsTxt]; ok {\n\t\treqFile := filepath.Join(toolSource, requirementsTxt)\n",
                      "markdown": "`\treturn \"\", nil\n}\n\nfunc (r *Runtime) runPip(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running pip in %s\", toolSource)\n\tif content, ok := tool.MetaData[requirementsTxt]; ok {\n\t\treqFile := filepath.Join(toolSource, requirementsTxt)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 37,
                  "endLine": 175,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\treturn release.URL, release.Digest, nil\n\t\t}\n\t}\n\treturn \"\", \"\", fmt.Errorf(\"failed to find an python runtime for %s\", r.Version)\n}\n\nfunc (r *Runtime) Binary(_ context.Context, _ types.Tool, _, _ string, _ []string) (bool, []string, error) {\n",
                    "rendered": {
                      "text": "\t\t\treturn release.URL, release.Digest, nil\n\t\t}\n\t}\n\treturn \"\", \"\", fmt.Errorf(\"failed to find an python runtime for %s\", r.Version)\n}\n\nfunc (r *Runtime) Binary(_ context.Context, _ types.Tool, _, _ string, _ []string) (bool, []string, error) {\n",
                      "markdown": "`\t\t\treturn release.URL, release.Digest, nil\n\t\t}\n\t}\n\treturn \"\", \"\", fmt.Errorf(\"failed to find an python runtime for %s\", r.Version)\n}\n\nfunc (r *Runtime) Binary(_ context.Context, _ types.Tool, _, _ string, _ []string) (bool, []string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.go"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 90,
                  "endLine": 120,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\treturn nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/daemon/daemon.go"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\tcancel()\n\t}()\n\n\tcmd := exec.CommandContext(ctx, os.Args[2], os.Args[3:]...)\n\tcmd.Stderr = os.Stderr\n\tcmd.Stdout = os.Stdout\n\tcmd.Cancel = func() error {\n",
                    "rendered": {
                      "text": "\t\tcancel()\n\t}()\n\n\tcmd := exec.CommandContext(ctx, os.Args[2], os.Args[3:]...)\n\tcmd.Stderr = os.Stderr\n\tcmd.Stdout = os.Stdout\n\tcmd.Cancel = func() error {\n",
                      "markdown": "`\t\tcancel()\n\t}()\n\n\tcmd := exec.CommandContext(ctx, os.Args[2], os.Args[3:]...)\n\tcmd.Stderr = os.Stderr\n\tcmd.Stdout = os.Stdout\n\tcmd.Cancel = func() error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/07-gpt-file-reference.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 43,
                  "endLine": 44,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Tool Directives\n\nTool directives are key-value pairs defined at the beginning of a tool block, before the tool body.\nThey are specified in the format `Key: value`. The parser recognizes the following keys (case-insensitive and spaces are ignored):\n\n| Key                  | Description                                                                                                                                   |\n",
                    "rendered": {
                      "text": "\n## Tool Directives\n\nTool directives are key-value pairs defined at the beginning of a tool block, before the tool body.\nThey are specified in the format `Key: value`. The parser recognizes the following keys (case-insensitive and spaces are ignored):\n\n| Key                  | Description                                                                                                                                   |\n",
                      "markdown": "`\n## Tool Directives\n\nTool directives are key-value pairs defined at the beginning of a tool block, before the tool body.\nThey are specified in the format `Key: value`. The parser recognizes the following keys (case-insensitive and spaces are ignored):\n\n| Key                  | Description                                                                                                                                   |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/07-gpt-file-reference.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 47,
                  "endLine": 57,
                  "endColumn": 53,
                  "snippet": {
                    "text": "led by all tools.                                                                 |\n| `Parameter` / `Args` | Parameters for the tool. Each parameter is defined in the format `param-name: description`.                                                   |\n| `Max Tokens`         | Set to a number if you wish to limit the maximum number of tokens that can be generated by the LLM.                                           |\n| `JSON Response`      | Setting to `true` will cause the LLM to respond in a JSON format. If you set true you must also include instructions in the tool.             |\n| `Temperature`",
                    "rendered": {
                      "text": "led by all tools.                                                                 |\n| `Parameter` / `Args` | Parameters for the tool. Each parameter is defined in the format `param-name: description`.                                                   |\n| `Max Tokens`         | Set to a number if you wish to limit the maximum number of tokens that can be generated by the LLM.                                           |\n| `JSON Response`      | Setting to `true` will cause the LLM to respond in a JSON format. If you set true you must also include instructions in the tool.             |\n| `Temperature`",
                      "markdown": "`led by all tools.                                                                 |\n| `Parameter` / `Args` | Parameters for the tool. Each parameter is defined in the format `param-name: description`.                                                   |\n| `Max Tokens`         | Set to a number if you wish to limit the maximum number of tokens that can be generated by the LLM.                                           |\n| `JSON Response`      | Setting to `true` will cause the LLM to respond in a JSON format. If you set true you must also include instructions in the tool.             |\n| `Temperature``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/04-command-line-reference/gptscript_fmt.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 24,
                  "endLine": 16,
                  "snippet": {
                    "text": "### Options\n\n```\n  -h, --help    help for fmt\n  -w, --write   Write output to file instead of stdout ($GPTSCRIPT_FMT_WRITE)\n```\n\n### Options inherited from parent commands\n",
                    "rendered": {
                      "text": "### Options\n\n```\n  -h, --help    help for fmt\n  -w, --write   Write output to file instead of stdout ($GPTSCRIPT_FMT_WRITE)\n```\n\n### Options inherited from parent commands\n",
                      "markdown": "`### Options\n\n```\n  -h, --help    help for fmt\n  -w, --write   Write output to file instead of stdout ($GPTSCRIPT_FMT_WRITE)\n```\n\n### Options inherited from parent commands\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/04-command-line-reference/gptscript_fmt.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 9,
                  "endLine": 9,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n\n```\ngptscript fmt [flags]\n```\n\n### Options\n",
                    "rendered": {
                      "text": "\n\n```\ngptscript fmt [flags]\n```\n\n### Options\n",
                      "markdown": "`\n\n```\ngptscript fmt [flags]\n```\n\n### Options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/04-command-line-reference/gptscript_fmt.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 12,
                  "endLine": 5,
                  "snippet": {
                    "text": "---\ntitle: \"gptscript fmt\"\n---\n## gptscript fmt\n\n\n\n```\n",
                    "rendered": {
                      "text": "---\ntitle: \"gptscript fmt\"\n---\n## gptscript fmt\n\n\n\n```\n",
                      "markdown": "`---\ntitle: \"gptscript fmt\"\n---\n## gptscript fmt\n\n\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/README.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 36,
                  "endLine": 48,
                  "snippet": {
                    "text": "\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 19,
                  "snippet": {
                    "text": "A few notes:\n- You'll need an [OpenAI API key](https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key)\n- On Windows, after installing gptscript you may need to restart your terminal for the changes to take effect\n- The above script is a simple chat-based assistant. You can ask it questions and it will answer to the best of its ability.\n\n## Community\n\n",
                    "rendered": {
                      "text": "A few notes:\n- You'll need an [OpenAI API key](https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key)\n- On Windows, after installing gptscript you may need to restart your terminal for the changes to take effect\n- The above script is a simple chat-based assistant. You can ask it questions and it will answer to the best of its ability.\n\n## Community\n\n",
                      "markdown": "`A few notes:\n- You'll need an [OpenAI API key](https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key)\n- On Windows, after installing gptscript you may need to restart your terminal for the changes to take effect\n- The above script is a simple chat-based assistant. You can ask it questions and it will answer to the best of its ability.\n\n## Community\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 3,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "```\n\nMacOS and Linux (install.sh):\n```\ncurl https://get.gptscript.ai/install.sh | sh\n```\n\nWindows:\n",
                    "rendered": {
                      "text": "```\n\nMacOS and Linux (install.sh):\n```\ncurl https://get.gptscript.ai/install.sh | sh\n```\n\nWindows:\n",
                      "markdown": "````\n\nMacOS and Linux (install.sh):\n```\ncurl https://get.gptscript.ai/install.sh | sh\n```\n\nWindows:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000104"
          },
          "message": {
            "text": "Backdoor: Curl Bashing",
            "id": "BD000104"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/README.md"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nMacOS and Linux (install.sh):\n```\ncurl https://get.gptscript.ai/install.sh | sh\n```\n\nWindows:\n",
                    "rendered": {
                      "text": "\nMacOS and Linux (install.sh):\n```\ncurl https://get.gptscript.ai/install.sh | sh\n```\n\nWindows:\n",
                      "markdown": "`\nMacOS and Linux (install.sh):\n```\ncurl https://get.gptscript.ai/install.sh | sh\n```\n\nWindows:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 25,
                  "endLine": 18,
                  "endColumn": 29,
                  "snippet": {
                    "text": "will summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\nchunk and adds it onto the end. In the case of models with very small context windows, or extremely large\ndocuments, this approach may still exceed the context window, in which case another tool could be added to\nonly give the summarizer the previous few chunk summaries instead of all of them.\n",
                    "rendered": {
                      "text": "will summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\nchunk and adds it onto the end. In the case of models with very small context windows, or extremely large\ndocuments, this approach may still exceed the context window, in which case another tool could be added to\nonly give the summarizer the previous few chunk summaries instead of all of them.\n",
                      "markdown": "`will summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\nchunk and adds it onto the end. In the case of models with very small context windows, or extremely large\ndocuments, this approach may still exceed the context window, in which case another tool could be added to\nonly give the summarizer the previous few chunk summaries instead of all of them.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/README.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 32,
                  "endLine": 15,
                  "endColumn": 36,
                  "snippet": {
                    "text": "## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\n",
                    "rendered": {
                      "text": "## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\n",
                      "markdown": "`## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/README.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 22,
                  "endLine": 33,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Source it\nsource venv/bin/activate\n\n# Install the packages\npip install -r requirements.txt\n\n# Set your OpenAI key\nexport OPENAI_API_KEY=your-api-key\n",
                    "rendered": {
                      "text": "# Source it\nsource venv/bin/activate\n\n# Install the packages\npip install -r requirements.txt\n\n# Set your OpenAI key\nexport OPENAI_API_KEY=your-api-key\n",
                      "markdown": "`# Source it\nsource venv/bin/activate\n\n# Install the packages\npip install -r requirements.txt\n\n# Set your OpenAI key\nexport OPENAI_API_KEY=your-api-key\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/README.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 56,
                  "endLine": 15,
                  "endColumn": 64,
                  "snippet": {
                    "text": "## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\n",
                    "rendered": {
                      "text": "## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\n",
                      "markdown": "`## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\nThe summarizer tool looks at the entire summary up to the current chunk and then summarizes the current\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 14,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\n",
                    "rendered": {
                      "text": "\n## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\n",
                      "markdown": "`\n## Design\n\nThe script consists of three tools: a top-level tool that orchestrates everything, a summarizer that\nwill summarize one chunk of text at a time, and a Python script that ingests the PDF and splits it into\nchunks and provides a specific chunk based on an index.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/count-lines-of-code.gpt"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 37,
                  "endLine": 22,
                  "endColumn": 42,
                  "snippet": {
                    "text": "import os\nimport json\n\nprint(sum(json.loads(\"[\" + os.environ.get(\"nums\") + \"]\")))\n",
                    "rendered": {
                      "text": "import os\nimport json\n\nprint(sum(json.loads(\"[\" + os.environ.get(\"nums\") + \"]\")))\n",
                      "markdown": "`import os\nimport json\n\nprint(sum(json.loads(\"[\" + os.environ.get(\"nums\") + \"]\")))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/count-lines-of-code.gpt"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 30,
                  "endLine": 22,
                  "endColumn": 41,
                  "snippet": {
                    "text": "import os\nimport json\n\nprint(sum(json.loads(\"[\" + os.environ.get(\"nums\") + \"]\")))\n",
                    "rendered": {
                      "text": "import os\nimport json\n\nprint(sum(json.loads(\"[\" + os.environ.get(\"nums\") + \"]\")))\n",
                      "markdown": "`import os\nimport json\n\nprint(sum(json.loads(\"[\" + os.environ.get(\"nums\") + \"]\")))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/count-lines-of-code.gpt"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 3,
                  "endColumn": 5,
                  "snippet": {
                    "text": "tools: sys.find, count, add\n\nFind all *.go files and count the lines of code in each file, add the result and print it\n\n---\nname: count\n",
                    "rendered": {
                      "text": "tools: sys.find, count, add\n\nFind all *.go files and count the lines of code in each file, add the result and print it\n\n---\nname: count\n",
                      "markdown": "`tools: sys.find, count, add\n\nFind all *.go files and count the lines of code in each file, add the result and print it\n\n---\nname: count\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/git-commit.gpt"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "name: gitstatus\n\n#!/bin/sh\n\ngit diff --staged\n",
                    "rendered": {
                      "text": "name: gitstatus\n\n#!/bin/sh\n\ngit diff --staged\n",
                      "markdown": "`name: gitstatus\n\n#!/bin/sh\n\ngit diff --staged\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/git-commit.gpt"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 18,
                  "endLine": 3,
                  "endColumn": 23,
                  "snippet": {
                    "text": "tools: gitstatus, sys.abort\n\nCreate well formed git commit message based of off the currently staged file\ncontents. The message should convey why something was changed and not what\nchanged. Use the well known format that has the prefix chore, fix, etc.\n\n",
                    "rendered": {
                      "text": "tools: gitstatus, sys.abort\n\nCreate well formed git commit message based of off the currently staged file\ncontents. The message should convey why something was changed and not what\nchanged. Use the well known format that has the prefix chore, fix, etc.\n\n",
                      "markdown": "`tools: gitstatus, sys.abort\n\nCreate well formed git commit message based of off the currently staged file\ncontents. The message should convey why something was changed and not what\nchanged. Use the well known format that has the prefix chore, fix, etc.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 14,
                  "endLine": 52,
                  "snippet": {
                    "text": "name: init_flask_project\ndescription: sets up initial directory structure needed for the flask project\n\n#!/usr/bin/env bash\n\nmkdir -p headline/{templates,static}\n",
                    "rendered": {
                      "text": "name: init_flask_project\ndescription: sets up initial directory structure needed for the flask project\n\n#!/usr/bin/env bash\n\nmkdir -p headline/{templates,static}\n",
                      "markdown": "`name: init_flask_project\ndescription: sets up initial directory structure needed for the flask project\n\n#!/usr/bin/env bash\n\nmkdir -p headline/{templates,static}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 14,
                  "endLine": 44,
                  "snippet": {
                    "text": "description: run a command in the MongoDB database\nargs: command: the command to run in mongodb\n\n#!/usr/bin/env bash\n\nmongosh mongodb://localhost:27017/headlines --eval \"$COMMAND\"\n\n---\n",
                    "rendered": {
                      "text": "description: run a command in the MongoDB database\nargs: command: the command to run in mongodb\n\n#!/usr/bin/env bash\n\nmongosh mongodb://localhost:27017/headlines --eval \"$COMMAND\"\n\n---\n",
                      "markdown": "`description: run a command in the MongoDB database\nargs: command: the command to run in mongodb\n\n#!/usr/bin/env bash\n\nmongosh mongodb://localhost:27017/headlines --eval \"$COMMAND\"\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 14,
                  "endLine": 18,
                  "snippet": {
                    "text": "name: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n",
                    "rendered": {
                      "text": "name: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n",
                      "markdown": "`name: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 14,
                  "endLine": 52,
                  "snippet": {
                    "text": "name: init_flask_project\ndescription: sets up initial directory structure needed for the flask project\n\n#!/usr/bin/env bash\n\nmkdir -p headline/{templates,static}\n",
                    "rendered": {
                      "text": "name: init_flask_project\ndescription: sets up initial directory structure needed for the flask project\n\n#!/usr/bin/env bash\n\nmkdir -p headline/{templates,static}\n",
                      "markdown": "`name: init_flask_project\ndescription: sets up initial directory structure needed for the flask project\n\n#!/usr/bin/env bash\n\nmkdir -p headline/{templates,static}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 14,
                  "endLine": 44,
                  "snippet": {
                    "text": "description: run a command in the MongoDB database\nargs: command: the command to run in mongodb\n\n#!/usr/bin/env bash\n\nmongosh mongodb://localhost:27017/headlines --eval \"$COMMAND\"\n\n---\n",
                    "rendered": {
                      "text": "description: run a command in the MongoDB database\nargs: command: the command to run in mongodb\n\n#!/usr/bin/env bash\n\nmongosh mongodb://localhost:27017/headlines --eval \"$COMMAND\"\n\n---\n",
                      "markdown": "`description: run a command in the MongoDB database\nargs: command: the command to run in mongodb\n\n#!/usr/bin/env bash\n\nmongosh mongodb://localhost:27017/headlines --eval \"$COMMAND\"\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 3,
                  "endLine": 35,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    fi\nelse\n    echo \"Container ${CONTAINER_NAME} does not exist. Running a new one.\"\n    docker run --rm -d -p 27017:27017 --name ${CONTAINER_NAME} mongo:latest\nfi\n\n---\n",
                    "rendered": {
                      "text": "    fi\nelse\n    echo \"Container ${CONTAINER_NAME} does not exist. Running a new one.\"\n    docker run --rm -d -p 27017:27017 --name ${CONTAINER_NAME} mongo:latest\nfi\n\n---\n",
                      "markdown": "`    fi\nelse\n    echo \"Container ${CONTAINER_NAME} does not exist. Running a new one.\"\n    docker run --rm -d -p 27017:27017 --name ${CONTAINER_NAME} mongo:latest\nfi\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 29,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n        echo \"Container ${CONTAINER_NAME} is already running.\"\n    fi\n",
                    "rendered": {
                      "text": "    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n        echo \"Container ${CONTAINER_NAME} is already running.\"\n    fi\n",
                      "markdown": "`    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n        echo \"Container ${CONTAINER_NAME} is already running.\"\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 42,
                  "endLine": 27,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n",
                    "rendered": {
                      "text": "    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n",
                      "markdown": "`    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n",
                    "rendered": {
                      "text": "    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n",
                      "markdown": "`    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n    if ! docker ps --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n        echo \"Starting existing container ${CONTAINER_NAME}.\"\n        docker start ${CONTAINER_NAME}\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 39,
                  "endLine": 23,
                  "endColumn": 45,
                  "snippet": {
                    "text": "CONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n",
                    "rendered": {
                      "text": "CONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n",
                      "markdown": "`CONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 2,
                  "endLine": 23,
                  "endColumn": 10,
                  "snippet": {
                    "text": "CONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n",
                    "rendered": {
                      "text": "CONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n",
                      "markdown": "`CONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} exists.\"\n\n    # Check if the container is already running\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 14,
                  "endLine": 18,
                  "snippet": {
                    "text": "name: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n",
                    "rendered": {
                      "text": "name: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n",
                      "markdown": "`name: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 181,
                  "endLine": 11,
                  "endColumn": 186,
                  "snippet": {
                    "text": " headlines. Create it in the `headline` directory. Embed a link to the article in each headline displayed on the page.\n7. Add some basic CSS styling to make the page look cool and modern. I want it to be dark themed. Style the links to be a light gray color. Make sure the page has a neat header with red accents.\n\n---\nname: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} ",
                    "rendered": {
                      "text": " headlines. Create it in the `headline` directory. Embed a link to the article in each headline displayed on the page.\n7. Add some basic CSS styling to make the page look cool and modern. I want it to be dark themed. Style the links to be a light gray color. Make sure the page has a neat header with red accents.\n\n---\nname: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} ",
                      "markdown": "` headlines. Create it in the `headline` directory. Embed a link to the article in each headline displayed on the page.\n7. Add some basic CSS styling to make the page look cool and modern. I want it to be dark themed. Style the links to be a light gray color. Make sure the page has a neat header with red accents.\n\n---\nname: mongo_run\ndescription: starts a MongoDB database\n\n#!/usr/bin/env bash\n\n# The name of your container\nCONTAINER_NAME=mongodb\n\n# Check if the container already exists\nif docker ps -a --format '{{.Names}}' | grep -Eq \"^${CONTAINER_NAME}\\$\"; then\n    echo \"Container ${CONTAINER_NAME} `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hacker-news-headlines.gpt"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 43,
                  "endLine": 7,
                  "endColumn": 48,
                  "snippet": {
                    "text": "tools: sys.http.get, sys.http.html2text, sys.find, sys.write, mongo_run, mongo_command, init_flask_project\n\nPerform the following actions in this order:\n\n1. Start the MongoDB database.\n2. Create a collection in the Mongo instance called `headlines`.\n3. Visit https://hackernews.com and get the top ten headlines.\n4. Call the init_flask_project tool to set up the directories you will need.\n5. Write each headline into the MongoDB collection that you created earlier called `headlines`. Write each one using a separate call to the mongo_command tool. The name of the database in Mongo that these wil",
                    "rendered": {
                      "text": "tools: sys.http.get, sys.http.html2text, sys.find, sys.write, mongo_run, mongo_command, init_flask_project\n\nPerform the following actions in this order:\n\n1. Start the MongoDB database.\n2. Create a collection in the Mongo instance called `headlines`.\n3. Visit https://hackernews.com and get the top ten headlines.\n4. Call the init_flask_project tool to set up the directories you will need.\n5. Write each headline into the MongoDB collection that you created earlier called `headlines`. Write each one using a separate call to the mongo_command tool. The name of the database in Mongo that these wil",
                      "markdown": "`tools: sys.http.get, sys.http.html2text, sys.find, sys.write, mongo_run, mongo_command, init_flask_project\n\nPerform the following actions in this order:\n\n1. Start the MongoDB database.\n2. Create a collection in the Mongo instance called `headlines`.\n3. Visit https://hackernews.com and get the top ten headlines.\n4. Call the init_flask_project tool to set up the directories you will need.\n5. Write each headline into the MongoDB collection that you created earlier called `headlines`. Write each one using a separate call to the mongo_command tool. The name of the database in Mongo that these wil`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/samples-readme.gpt"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 21,
                  "snippet": {
                    "text": "tools: sys.find, sys.read, sys.write, summary\n\nGenerate a readme at examples/README.md that gives a consolidated summary of each sample *.gpt file in examples/\nEach entry should be a include a link to the referenced file.\n\n---\n",
                    "rendered": {
                      "text": "tools: sys.find, sys.read, sys.write, summary\n\nGenerate a readme at examples/README.md that gives a consolidated summary of each sample *.gpt file in examples/\nEach entry should be a include a link to the referenced file.\n\n---\n",
                      "markdown": "`tools: sys.find, sys.read, sys.write, summary\n\nGenerate a readme at examples/README.md that gives a consolidated summary of each sample *.gpt file in examples/\nEach entry should be a include a link to the referenced file.\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/samples-readme.gpt"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 50,
                  "endLine": 13,
                  "endColumn": 58,
                  "snippet": {
                    "text": "tools: sys.read\ntemperature: 0.7\n\nRead ${file} which is a sample GPTScript file. GPT script is an AI automation scripting language.\nBriefly describe the contents of the GPTScript file and what technique the file is trying to demonstrate.\n",
                    "rendered": {
                      "text": "tools: sys.read\ntemperature: 0.7\n\nRead ${file} which is a sample GPTScript file. GPT script is an AI automation scripting language.\nBriefly describe the contents of the GPTScript file and what technique the file is trying to demonstrate.\n",
                      "markdown": "`tools: sys.read\ntemperature: 0.7\n\nRead ${file} which is a sample GPTScript file. GPT script is an AI automation scripting language.\nBriefly describe the contents of the GPTScript file and what technique the file is trying to demonstrate.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview.gpt"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 22,
                  "snippet": {
                    "text": "    Name: learn-gh\n    Description: A tool to help you learn gh cli\n\n    #!/usr/bin/env bash\n\n    echo \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\n    gh --help\n    gh repo --help\n",
                    "rendered": {
                      "text": "    Name: learn-gh\n    Description: A tool to help you learn gh cli\n\n    #!/usr/bin/env bash\n\n    echo \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\n    gh --help\n    gh repo --help\n",
                      "markdown": "`    Name: learn-gh\n    Description: A tool to help you learn gh cli\n\n    #!/usr/bin/env bash\n\n    echo \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\n    gh --help\n    gh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview.gpt"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    gh repo --help\n    gh pr --help\n    gh pr checkout --help\n    gh pr diff --help",
                    "rendered": {
                      "text": "    gh repo --help\n    gh pr --help\n    gh pr checkout --help\n    gh pr diff --help",
                      "markdown": "`    gh repo --help\n    gh pr --help\n    gh pr checkout --help\n    gh pr diff --help`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview.gpt"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 22,
                  "snippet": {
                    "text": "    Name: learn-gh\n    Description: A tool to help you learn gh cli\n\n    #!/usr/bin/env bash\n\n    echo \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\n    gh --help\n    gh repo --help\n",
                    "rendered": {
                      "text": "    Name: learn-gh\n    Description: A tool to help you learn gh cli\n\n    #!/usr/bin/env bash\n\n    echo \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\n    gh --help\n    gh repo --help\n",
                      "markdown": "`    Name: learn-gh\n    Description: A tool to help you learn gh cli\n\n    #!/usr/bin/env bash\n\n    echo \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\n    gh --help\n    gh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/BobAsShell/claude-3-5-sonnet-20240620-expected.json"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 36,
                  "endLine": 129,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/BobAsShell/claude-3-5-sonnet-20240620-expected.json"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 36,
                  "endLine": 82,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/claude3-anthropic-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/claude3-anthropic-provider/6b5a88075b1e4501e845f4dab5be16ea8739aa4c\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/BobAsShell/mistral-large-2402-expected.json"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 36,
                  "endLine": 129,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/testdata/BobAsShell/mistral-large-2402-expected.json"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 36,
                  "endLine": 82,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                    "rendered": {
                      "text": "                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n",
                      "markdown": "`                        \"Root\": \"https://github.com/gptscript-ai/mistral-laplateforme-provider.git\",\n                        \"Path\": \"/\",\n                        \"Name\": \"tool.gpt\",\n                        \"Revision\": \"cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n                    }\n                },\n                \"workingDir\": \"https://raw.githubusercontent.com/gptscript-ai/mistral-laplateforme-provider/cbf1aeb6db495b9b6223984651d29ac511d2748d\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/smoke_test.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 2,
                  "endLine": 34,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\tfor _, tc := range getTestcases(t) {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tcmd := icmd.Command(\n\t\t\t\t\"gptscript\",\n\t\t\t\t\"--color=false\",\n\t\t\t\t\"--disable-cache\",\n",
                    "rendered": {
                      "text": "\n\tfor _, tc := range getTestcases(t) {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tcmd := icmd.Command(\n\t\t\t\t\"gptscript\",\n\t\t\t\t\"--color=false\",\n\t\t\t\t\"--disable-cache\",\n",
                      "markdown": "`\n\tfor _, tc := range getTestcases(t) {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tcmd := icmd.Command(\n\t\t\t\t\"gptscript\",\n\t\t\t\t\"--color=false\",\n\t\t\t\t\"--disable-cache\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/smoke/smoke_test.go"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 105,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tgptFile            string\n\tdefaultModel       string\n\tmodelName          string\n\tenv                []string\n\tactualEventsFile   string\n\texpectedEventsFile string\n}\n",
                    "rendered": {
                      "text": "\tgptFile            string\n\tdefaultModel       string\n\tmodelName          string\n\tenv                []string\n\tactualEventsFile   string\n\texpectedEventsFile string\n}\n",
                      "markdown": "`\tgptFile            string\n\tdefaultModel       string\n\tmodelName          string\n\tenv                []string\n\tactualEventsFile   string\n\texpectedEventsFile string\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/tester/runner.go"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 1,
                  "endLine": 151,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nfunc (r *Runner) Load(script string) (types.Program, error) {\n\tif script == \"\" {\n\t\tscript = \"test.gpt\"\n\t}\n\treturn loader.Program(context.Background(), filepath.Join(\".\", \"testdata\", r.Client.t.Name(), script), \"\")\n}\n",
                    "rendered": {
                      "text": "\nfunc (r *Runner) Load(script string) (types.Program, error) {\n\tif script == \"\" {\n\t\tscript = \"test.gpt\"\n\t}\n\treturn loader.Program(context.Background(), filepath.Join(\".\", \"testdata\", r.Client.t.Name(), script), \"\")\n}\n",
                      "markdown": "`\nfunc (r *Runner) Load(script string) (types.Program, error) {\n\tif script == \"\" {\n\t\tscript = \"test.gpt\"\n\t}\n\treturn loader.Program(context.Background(), filepath.Join(\".\", \"testdata\", r.Client.t.Name(), script), \"\")\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/tester/runner.go"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 3,
                  "endLine": 150,
                  "endColumn": 11,
                  "snippet": {
                    "text": "}\n\nfunc (r *Runner) Load(script string) (types.Program, error) {\n\tif script == \"\" {\n\t\tscript = \"test.gpt\"\n\t}\n\treturn loader.Program(context.Background(), filepath.Join(\".\", \"testdata\", r.Client.t.Name(), script), \"\")\n",
                    "rendered": {
                      "text": "}\n\nfunc (r *Runner) Load(script string) (types.Program, error) {\n\tif script == \"\" {\n\t\tscript = \"test.gpt\"\n\t}\n\treturn loader.Program(context.Background(), filepath.Join(\".\", \"testdata\", r.Client.t.Name(), script), \"\")\n",
                      "markdown": "`}\n\nfunc (r *Runner) Load(script string) (types.Program, error) {\n\tif script == \"\" {\n\t\tscript = \"test.gpt\"\n\t}\n\treturn loader.Program(context.Background(), filepath.Join(\".\", \"testdata\", r.Client.t.Name(), script), \"\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openai/client.go"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 22,
                  "endLine": 219,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tif !messageRequest.GetCache() {\n\t\treturn nil, false, nil\n\t}\n\tfound, err := c.cache.Get(ctx, c.cacheKey(request), &result)\n\tif err != nil {\n\t\treturn nil, false, err\n\t} else if !found {\n",
                    "rendered": {
                      "text": "\tif !messageRequest.GetCache() {\n\t\treturn nil, false, nil\n\t}\n\tfound, err := c.cache.Get(ctx, c.cacheKey(request), &result)\n\tif err != nil {\n\t\treturn nil, false, err\n\t} else if !found {\n",
                      "markdown": "`\tif !messageRequest.GetCache() {\n\t\treturn nil, false, nil\n\t}\n\tfound, err := c.cache.Get(ctx, c.cacheKey(request), &result)\n\tif err != nil {\n\t\treturn nil, false, err\n\t} else if !found {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openai/client.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 32,
                  "endLine": 106,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n\t// If the API key is not set, try to get it from the cred store\n\tif opt.APIKey == \"\" && opt.BaseURL == \"\" {\n\t\tcred, exists, err := credStore.Get(ctx, BuiltinCredName)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n",
                    "rendered": {
                      "text": "\n\t// If the API key is not set, try to get it from the cred store\n\tif opt.APIKey == \"\" && opt.BaseURL == \"\" {\n\t\tcred, exists, err := credStore.Get(ctx, BuiltinCredName)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n",
                      "markdown": "`\n\t// If the API key is not set, try to get it from the cred store\n\tif opt.APIKey == \"\" && opt.BaseURL == \"\" {\n\t\tcred, exists, err := credStore.Get(ctx, BuiltinCredName)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 28,
                  "endLine": 313,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\targs = append(args, f.Name())\n\t}\n\n\t// Expand and/or normalize env references\n\tfor i, arg := range args {\n\t\targs[i] = os.Expand(arg, func(s string) string {\n\t\t\tif strings.HasPrefix(s, \"!\") {\n",
                    "rendered": {
                      "text": "\t\targs = append(args, f.Name())\n\t}\n\n\t// Expand and/or normalize env references\n\tfor i, arg := range args {\n\t\targs[i] = os.Expand(arg, func(s string) string {\n\t\t\tif strings.HasPrefix(s, \"!\") {\n",
                      "markdown": "`\t\targs = append(args, f.Name())\n\t}\n\n\t// Expand and/or normalize env references\n\tfor i, arg := range args {\n\t\targs[i] = os.Expand(arg, func(s string) string {\n\t\t\tif strings.HasPrefix(s, \"!\") {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 26,
                  "endLine": 296,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t)\n\n\tif strings.TrimSpace(rest) != \"\" {\n\t\tf, err := os.CreateTemp(env.Getenv(\"GPTSCRIPT_TMPDIR\", envvars), version.ProgramName+requiredFileExtensions[args[0]])\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n",
                    "rendered": {
                      "text": "\t)\n\n\tif strings.TrimSpace(rest) != \"\" {\n\t\tf, err := os.CreateTemp(env.Getenv(\"GPTSCRIPT_TMPDIR\", envvars), version.ProgramName+requiredFileExtensions[args[0]])\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n",
                      "markdown": "`\t)\n\n\tif strings.TrimSpace(rest) != \"\" {\n\t\tf, err := os.CreateTemp(env.Getenv(\"GPTSCRIPT_TMPDIR\", envvars), version.ProgramName+requiredFileExtensions[args[0]])\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 1,
                  "endLine": 276,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tenvvars, err = e.getRuntimeEnv(ctx, tool, args, envvars)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tenvvars, err = e.getRuntimeEnv(ctx, tool, args, envvars)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n",
                      "markdown": "`\t\t}\n\t}\n\n\tenvvars, err = e.getRuntimeEnv(ctx, tool, args, envvars)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 11,
                  "endLine": 175,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\terr     error\n\t)\n\tif e.RuntimeManager != nil {\n\t\tworkdir, env, err = e.RuntimeManager.GetContext(ctx, tool, cmd, env)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n",
                    "rendered": {
                      "text": "\t\terr     error\n\t)\n\tif e.RuntimeManager != nil {\n\t\tworkdir, env, err = e.RuntimeManager.GetContext(ctx, tool, cmd, env)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n",
                      "markdown": "`\t\terr     error\n\t)\n\tif e.RuntimeManager != nil {\n\t\tworkdir, env, err = e.RuntimeManager.GetContext(ctx, tool, cmd, env)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 27,
                  "endLine": 58,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tout := bytes.NewBuffer(nil)\n\t\tb64 := base64.NewEncoder(base64.StdEncoding, out)\n\t\tgz := gzip.NewWriter(b64)\n\t\t_, _ = gz.Write([]byte(v))\n\t\t_ = gz.Close()\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tout := bytes.NewBuffer(nil)\n\t\tb64 := base64.NewEncoder(base64.StdEncoding, out)\n\t\tgz := gzip.NewWriter(b64)\n\t\t_, _ = gz.Write([]byte(v))\n\t\t_ = gz.Close()\n",
                      "markdown": "`\t\t}\n\n\t\tout := bytes.NewBuffer(nil)\n\t\tb64 := base64.NewEncoder(base64.StdEncoding, out)\n\t\tgz := gzip.NewWriter(b64)\n\t\t_, _ = gz.Write([]byte(v))\n\t\t_ = gz.Close()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "endLine": 58,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tout := bytes.NewBuffer(nil)\n\t\tb64 := base64.NewEncoder(base64.StdEncoding, out)\n\t\tgz := gzip.NewWriter(b64)\n\t\t_, _ = gz.Write([]byte(v))\n\t\t_ = gz.Close()\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tout := bytes.NewBuffer(nil)\n\t\tb64 := base64.NewEncoder(base64.StdEncoding, out)\n\t\tgz := gzip.NewWriter(b64)\n\t\t_, _ = gz.Write([]byte(v))\n\t\t_ = gz.Close()\n",
                      "markdown": "`\t\t}\n\n\t\tout := bytes.NewBuffer(nil)\n\t\tb64 := base64.NewEncoder(base64.StdEncoding, out)\n\t\tgz := gzip.NewWriter(b64)\n\t\t_, _ = gz.Write([]byte(v))\n\t\t_ = gz.Close()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 11,
                  "endLine": 7,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\"bytes\"\n\t\"compress/gzip\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n",
                    "rendered": {
                      "text": "\t\"bytes\"\n\t\"compress/gzip\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n",
                      "markdown": "`\t\"bytes\"\n\t\"compress/gzip\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 336,
                  "endLine": 336,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\targs[0] = env.Lookup(envvars, args[0])\n\t}\n\n\tcmd := exec.CommandContext(ctx, args[0], args[1:]...)\n\tcmd.Env = compressEnv(envvars)\n\treturn cmd, stop, nil\n}\n",
                    "rendered": {
                      "text": "\t\targs[0] = env.Lookup(envvars, args[0])\n\t}\n\n\tcmd := exec.CommandContext(ctx, args[0], args[1:]...)\n\tcmd.Env = compressEnv(envvars)\n\treturn cmd, stop, nil\n}\n",
                      "markdown": "`\t\targs[0] = env.Lookup(envvars, args[0])\n\t}\n\n\tcmd := exec.CommandContext(ctx, args[0], args[1:]...)\n\tcmd.Env = compressEnv(envvars)\n\treturn cmd, stop, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 37,
                  "endLine": 160,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\tif toolCategory == NoCategory {\n\t\t\treturn fmt.Sprintf(\"ERROR: got (%v) while running tool, OUTPUT: %s\", err, stdoutAndErr), nil\n\t\t}\n\t\tlog.Errorf(\"failed to run tool [%s] cmd %v: %v\", tool.Parameters.Name, cmd.Args, err)\n\t\tcombinedOutput = stdoutAndErr.String()\n\t\treturn \"\", fmt.Errorf(\"ERROR: %s: %w\", result, err)\n\t}\n",
                    "rendered": {
                      "text": "\t\tif toolCategory == NoCategory {\n\t\t\treturn fmt.Sprintf(\"ERROR: got (%v) while running tool, OUTPUT: %s\", err, stdoutAndErr), nil\n\t\t}\n\t\tlog.Errorf(\"failed to run tool [%s] cmd %v: %v\", tool.Parameters.Name, cmd.Args, err)\n\t\tcombinedOutput = stdoutAndErr.String()\n\t\treturn \"\", fmt.Errorf(\"ERROR: %s: %w\", result, err)\n\t}\n",
                      "markdown": "`\t\tif toolCategory == NoCategory {\n\t\t\treturn fmt.Sprintf(\"ERROR: got (%v) while running tool, OUTPUT: %s\", err, stdoutAndErr), nil\n\t\t}\n\t\tlog.Errorf(\"failed to run tool [%s] cmd %v: %v\", tool.Parameters.Name, cmd.Args, err)\n\t\tcombinedOutput = stdoutAndErr.String()\n\t\treturn \"\", fmt.Errorf(\"ERROR: %s: %w\", result, err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 20,
                  "endLine": 186,
                  "endColumn": 25,
                  "snippet": {
                    "text": "func envAsMapAndDeDup(env []string) (sortedEnv []string, _ map[string]string) {\n\tenvMap := map[string]string{}\n\tvar keys []string\n\tfor _, env := range env {\n\t\tkey, value, _ := strings.Cut(env, \"=\")\n\t\tif _, existing := envMap[key]; !existing {\n\t\t\tkeys = append(keys, key)\n",
                    "rendered": {
                      "text": "func envAsMapAndDeDup(env []string) (sortedEnv []string, _ map[string]string) {\n\tenvMap := map[string]string{}\n\tvar keys []string\n\tfor _, env := range env {\n\t\tkey, value, _ := strings.Cut(env, \"=\")\n\t\tif _, existing := envMap[key]; !existing {\n\t\t\tkeys = append(keys, key)\n",
                      "markdown": "`func envAsMapAndDeDup(env []string) (sortedEnv []string, _ map[string]string) {\n\tenvMap := map[string]string{}\n\tvar keys []string\n\tfor _, env := range env {\n\t\tkey, value, _ := strings.Cut(env, \"=\")\n\t\tif _, existing := envMap[key]; !existing {\n\t\t\tkeys = append(keys, key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "endLine": 186,
                  "endColumn": 12,
                  "snippet": {
                    "text": "func envAsMapAndDeDup(env []string) (sortedEnv []string, _ map[string]string) {\n\tenvMap := map[string]string{}\n\tvar keys []string\n\tfor _, env := range env {\n\t\tkey, value, _ := strings.Cut(env, \"=\")\n\t\tif _, existing := envMap[key]; !existing {\n\t\t\tkeys = append(keys, key)\n",
                    "rendered": {
                      "text": "func envAsMapAndDeDup(env []string) (sortedEnv []string, _ map[string]string) {\n\tenvMap := map[string]string{}\n\tvar keys []string\n\tfor _, env := range env {\n\t\tkey, value, _ := strings.Cut(env, \"=\")\n\t\tif _, existing := envMap[key]; !existing {\n\t\t\tkeys = append(keys, key)\n",
                      "markdown": "`func envAsMapAndDeDup(env []string) (sortedEnv []string, _ map[string]string) {\n\tenvMap := map[string]string{}\n\tvar keys []string\n\tfor _, env := range env {\n\t\tkey, value, _ := strings.Cut(env, \"=\")\n\t\tif _, existing := envMap[key]; !existing {\n\t\t\tkeys = append(keys, key)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 73,
                  "endLine": 169,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\treturn result.String(), IsChatFinishMessage(result.String())\n}\n\nfunc (e *Engine) getRuntimeEnv(ctx context.Context, tool types.Tool, cmd, env []string) ([]string, error) {\n\tvar (\n\t\tworkdir = tool.WorkingDir\n\t\terr     error\n",
                    "rendered": {
                      "text": "\treturn result.String(), IsChatFinishMessage(result.String())\n}\n\nfunc (e *Engine) getRuntimeEnv(ctx context.Context, tool types.Tool, cmd, env []string) ([]string, error) {\n\tvar (\n\t\tworkdir = tool.WorkingDir\n\t\terr     error\n",
                      "markdown": "`\treturn result.String(), IsChatFinishMessage(result.String())\n}\n\nfunc (e *Engine) getRuntimeEnv(ctx context.Context, tool types.Tool, cmd, env []string) ([]string, error) {\n\tvar (\n\t\tworkdir = tool.WorkingDir\n\t\terr     error\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/cmd.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 7,
                  "endLine": 50,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nfunc compressEnv(envs []string) (result []string) {\n\tfor _, env := range envs {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif !ok || len(v) < 40_000 {\n\t\t\tresult = append(result, env)\n",
                    "rendered": {
                      "text": "}\n\nfunc compressEnv(envs []string) (result []string) {\n\tfor _, env := range envs {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif !ok || len(v) < 40_000 {\n\t\t\tresult = append(result, env)\n",
                      "markdown": "`}\n\nfunc compressEnv(envs []string) (result []string) {\n\tfor _, env := range envs {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif !ok || len(v) < 40_000 {\n\t\t\tresult = append(result, env)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nfunc fetchCommit(ctx context.Context, gitDir, commit string) error {\n\tcmd := newGitCommand(ctx, \"--git-dir\", gitDir, \"fetch\", \"origin\", commit)\n\treturn cmd.Run()\n}\n",
                    "rendered": {
                      "text": "}\n\nfunc fetchCommit(ctx context.Context, gitDir, commit string) error {\n\tcmd := newGitCommand(ctx, \"--git-dir\", gitDir, \"fetch\", \"origin\", commit)\n\treturn cmd.Run()\n}\n",
                      "markdown": "`}\n\nfunc fetchCommit(ctx context.Context, gitDir, commit string) error {\n\tcmd := newGitCommand(ctx, \"--git-dir\", gitDir, \"fetch\", \"origin\", commit)\n\treturn cmd.Run()\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc gitWorktreeAdd(ctx context.Context, gitDir, commitDir, commit string) error {\n\t// The double -f is intentional\n\tcmd := newGitCommand(ctx, \"--git-dir\", gitDir, \"worktree\", \"add\", \"-f\", \"-f\", commitDir, commit)\n\treturn cmd.Run()\n}\n\n",
                    "rendered": {
                      "text": "\nfunc gitWorktreeAdd(ctx context.Context, gitDir, commitDir, commit string) error {\n\t// The double -f is intentional\n\tcmd := newGitCommand(ctx, \"--git-dir\", gitDir, \"worktree\", \"add\", \"-f\", \"-f\", commitDir, commit)\n\treturn cmd.Run()\n}\n\n",
                      "markdown": "`\nfunc gitWorktreeAdd(ctx context.Context, gitDir, commitDir, commit string) error {\n\t// The double -f is intentional\n\tcmd := newGitCommand(ctx, \"--git-dir\", gitDir, \"worktree\", \"add\", \"-f\", \"-f\", commitDir, commit)\n\treturn cmd.Run()\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nfunc cloneBare(ctx context.Context, repo, toDir string) error {\n\tcmd := newGitCommand(ctx, \"clone\", \"--bare\", \"--depth\", \"1\", repo, toDir)\n\treturn cmd.Run()\n}\n\n",
                    "rendered": {
                      "text": "}\n\nfunc cloneBare(ctx context.Context, repo, toDir string) error {\n\tcmd := newGitCommand(ctx, \"clone\", \"--bare\", \"--depth\", \"1\", repo, toDir)\n\treturn cmd.Run()\n}\n\n",
                      "markdown": "`}\n\nfunc cloneBare(ctx context.Context, repo, toDir string) error {\n\tcmd := newGitCommand(ctx, \"clone\", \"--bare\", \"--depth\", \"1\", repo, toDir)\n\treturn cmd.Run()\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\t\treturn lsRemotePureGo(ctx, repo, ref)\n\t}\n\n\tcmd := newGitCommand(ctx, \"ls-remote\", repo, ref)\n\tif err := cmd.Run(); err != nil {\n\t\treturn \"\", err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn lsRemotePureGo(ctx, repo, ref)\n\t}\n\n\tcmd := newGitCommand(ctx, \"ls-remote\", repo, ref)\n\tif err := cmd.Run(); err != nil {\n\t\treturn \"\", err\n\t}\n",
                      "markdown": "`\t\treturn lsRemotePureGo(ctx, repo, ref)\n\t}\n\n\tcmd := newGitCommand(ctx, \"ls-remote\", repo, ref)\n\tif err := cmd.Run(); err != nil {\n\t\treturn \"\", err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 7,
                  "endLine": 17,
                  "snippet": {
                    "text": "\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n}\n\nfunc LsRemote(ctx context.Context, repo, ref string) (string, error) {\n\tif usePureGo() {\n",
                    "rendered": {
                      "text": "\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n}\n\nfunc LsRemote(ctx context.Context, repo, ref string) (string, error) {\n\tif usePureGo() {\n",
                      "markdown": "`\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n}\n\nfunc LsRemote(ctx context.Context, repo, ref string) (string, error) {\n\tif usePureGo() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tif log.IsDebug() {\n\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n}\n\n",
                    "rendered": {
                      "text": "\tif log.IsDebug() {\n\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n}\n\n",
                      "markdown": "`\tif log.IsDebug() {\n\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 33,
                  "endLine": 37,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\treturn fields[0], nil\n\t\t}\n\t}\n\treturn \"\", fmt.Errorf(\"failed to find remote %q as %q\", repo, ref)\n}\n\nfunc cloneBare(ctx context.Context, repo, toDir string) error {\n",
                    "rendered": {
                      "text": "\t\t\treturn fields[0], nil\n\t\t}\n\t}\n\treturn \"\", fmt.Errorf(\"failed to find remote %q as %q\", repo, ref)\n}\n\nfunc cloneBare(ctx context.Context, repo, toDir string) error {\n",
                      "markdown": "`\t\t\treturn fields[0], nil\n\t\t}\n\t}\n\treturn \"\", fmt.Errorf(\"failed to find remote %q as %q\", repo, ref)\n}\n\nfunc cloneBare(ctx context.Context, repo, toDir string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nfunc newGitCommand(ctx context.Context, args ...string) *debugcmd.WrappedCmd {\n\tif log.IsDebug() {\n\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n",
                    "rendered": {
                      "text": "\nfunc newGitCommand(ctx context.Context, args ...string) *debugcmd.WrappedCmd {\n\tif log.IsDebug() {\n\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n",
                      "markdown": "`\nfunc newGitCommand(ctx context.Context, args ...string) *debugcmd.WrappedCmd {\n\tif log.IsDebug() {\n\t\tlog.Debugf(\"running git command: %s\", strings.Join(args, \" \"))\n\t}\n\tcmd := debugcmd.New(ctx, \"git\", args...)\n\treturn cmd\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/cmd.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package git\n\nimport (\n\t\"context\"\n\t\"fmt\"\n",
                    "rendered": {
                      "text": "package git\n\nimport (\n\t\"context\"\n\t\"fmt\"\n",
                      "markdown": "`package git\n\nimport (\n\t\"context\"\n\t\"fmt\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/git.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 31,
                  "endLine": 58,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\treturn err\n\t\t}\n\t}\n\tlog.InfofCtx(ctx, \"Fetching %s at %s\", commit, repo)\n\treturn fetchCommit(ctx, gitDir, commit)\n}\n",
                    "rendered": {
                      "text": "\t\t\treturn err\n\t\t}\n\t}\n\tlog.InfofCtx(ctx, \"Fetching %s at %s\", commit, repo)\n\treturn fetchCommit(ctx, gitDir, commit)\n}\n",
                      "markdown": "`\t\t\treturn err\n\t\t}\n\t}\n\tlog.InfofCtx(ctx, \"Fetching %s at %s\", commit, repo)\n\treturn fetchCommit(ctx, gitDir, commit)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/git.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package git\n\nimport (\n\t\"context\"\n\t\"fmt\"\n",
                    "rendered": {
                      "text": "package git\n\nimport (\n\t\"context\"\n\t\"fmt\"\n",
                      "markdown": "`package git\n\nimport (\n\t\"context\"\n\t\"fmt\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/log.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package git\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                    "rendered": {
                      "text": "package git\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                      "markdown": "`package git\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/git_go.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 33,
                  "endLine": 59,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find remote ref %q\", ref)\n}\n\nfunc checkoutPureGo(ctx context.Context, _, repo, commit, toDir string) error {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find remote ref %q\", ref)\n}\n\nfunc checkoutPureGo(ctx context.Context, _, repo, commit, toDir string) error {\n",
                      "markdown": "`\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find remote ref %q\", ref)\n}\n\nfunc checkoutPureGo(ctx context.Context, _, repo, commit, toDir string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/git_go.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package git\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "package git\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                      "markdown": "`package git\n\nimport (\n\t\"context\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/types/credential_test.go"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 35,
                  "endLine": 145,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\t\treturn\n\t\t\t}\n\n\t\t\trequire.NoError(t, err, \"did not expect an error but got one\")\n\t\t\trequire.Equal(t, tt.expectedName, originalName, \"unexpected original name\")\n\t\t\trequire.Equal(t, tt.expectedAlias, alias, \"unexpected alias\")\n\t\t\trequire.Equal(t, len(tt.expectedArgs), len(args), \"unexpected number of args\")\n",
                    "rendered": {
                      "text": "\t\t\t\treturn\n\t\t\t}\n\n\t\t\trequire.NoError(t, err, \"did not expect an error but got one\")\n\t\t\trequire.Equal(t, tt.expectedName, originalName, \"unexpected original name\")\n\t\t\trequire.Equal(t, tt.expectedAlias, alias, \"unexpected alias\")\n\t\t\trequire.Equal(t, len(tt.expectedArgs), len(args), \"unexpected number of args\")\n",
                      "markdown": "`\t\t\t\treturn\n\t\t\t}\n\n\t\t\trequire.NoError(t, err, \"did not expect an error but got one\")\n\t\t\trequire.Equal(t, tt.expectedName, originalName, \"unexpected original name\")\n\t\t\trequire.Equal(t, tt.expectedAlias, alias, \"unexpected alias\")\n\t\t\trequire.Equal(t, len(tt.expectedArgs), len(args), \"unexpected number of args\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/05-context.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "endLine": 51,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n```\n\nThe `#!sys.echo` at the start of the tool body tells GPTScript to return everything after it as the output of the tool. \n\nContinuing with the above example, this is how you can use it in a script:\n\n",
                    "rendered": {
                      "text": "\n```\n\nThe `#!sys.echo` at the start of the tool body tells GPTScript to return everything after it as the output of the tool. \n\nContinuing with the above example, this is how you can use it in a script:\n\n",
                      "markdown": "`\n```\n\nThe `#!sys.echo` at the start of the tool body tells GPTScript to return everything after it as the output of the tool. \n\nContinuing with the above example, this is how you can use it in a script:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/05-context.md"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 26,
                  "endLine": 90,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n```\n\nHere's how you can run the script and define the tone parameter:\n\n```yaml\ngptscript tool.gpt '{\"tone\": \"obnoxious\"}'\n",
                    "rendered": {
                      "text": "\n```\n\nHere's how you can run the script and define the tone parameter:\n\n```yaml\ngptscript tool.gpt '{\"tone\": \"obnoxious\"}'\n",
                      "markdown": "`\n```\n\nHere's how you can run the script and define the tone parameter:\n\n```yaml\ngptscript tool.gpt '{\"tone\": \"obnoxious\"}'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/05-context.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 12,
                  "endLine": 86,
                  "endColumn": 17,
                  "snippet": {
                    "text": "Param: tone: the tone to use when responding to the user's request\nTools: sys.http.html2text\n\nWhat are the top stories on Hacker News right now?\n\n```\n\n",
                    "rendered": {
                      "text": "Param: tone: the tone to use when responding to the user's request\nTools: sys.http.html2text\n\nWhat are the top stories on Hacker News right now?\n\n```\n\n",
                      "markdown": "`Param: tone: the tone to use when responding to the user's request\nTools: sys.http.html2text\n\nWhat are the top stories on Hacker News right now?\n\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/05-alternative-model-providers.md"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 20,
                  "endLine": 49,
                  "endColumn": 29,
                  "snippet": {
                    "text": "## OpenAI-Compatible APIs (Advanced)\n\n:::warning\nEven if a non-OpenAI service has an API that claims to be OpenAI-compatible, there are usually subtle differences that cause things to break.\nThe approach described in this section often does not work.\n:::\n\n",
                    "rendered": {
                      "text": "## OpenAI-Compatible APIs (Advanced)\n\n:::warning\nEven if a non-OpenAI service has an API that claims to be OpenAI-compatible, there are usually subtle differences that cause things to break.\nThe approach described in this section often does not work.\n:::\n\n",
                      "markdown": "`## OpenAI-Compatible APIs (Advanced)\n\n:::warning\nEven if a non-OpenAI service has an API that claims to be OpenAI-compatible, there are usually subtle differences that cause things to break.\nThe approach described in this section often does not work.\n:::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/06-credentials.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 97,
                  "endLine": 59,
                  "endColumn": 105,
                  "snippet": {
                    "text": "### Pass (Linux)\n\nPass can be used as the credential store for Linux systems. This requires the `pass` package to be installed\nand configured. See [this guide](https://www.howtogeek.com/devops/how-to-use-pass-a-command-line-password-manager-for-linux-systems/)\nfor information about how to set it up.\nThis credential store is called `pass` in GPTScript's configuration.\n\n",
                    "rendered": {
                      "text": "### Pass (Linux)\n\nPass can be used as the credential store for Linux systems. This requires the `pass` package to be installed\nand configured. See [this guide](https://www.howtogeek.com/devops/how-to-use-pass-a-command-line-password-manager-for-linux-systems/)\nfor information about how to set it up.\nThis credential store is called `pass` in GPTScript's configuration.\n\n",
                      "markdown": "`### Pass (Linux)\n\nPass can be used as the credential store for Linux systems. This requires the `pass` package to be installed\nand configured. See [this guide](https://www.howtogeek.com/devops/how-to-use-pass-a-command-line-password-manager-for-linux-systems/)\nfor information about how to set it up.\nThis credential store is called `pass` in GPTScript's configuration.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/06-credentials.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 24,
                  "endLine": 41,
                  "endColumn": 32,
                  "snippet": {
                    "text": "### macOS Keychain (macOS)\n\nThe macOS Keychain is the default credential store for macOS.\nThis is macOS' built-in password manager that securely stores credentials for macOS applications.\nThis credential store is called `osxkeychain` in GPTScript's configuration.\n\n### File (all operating systems)\n",
                    "rendered": {
                      "text": "### macOS Keychain (macOS)\n\nThe macOS Keychain is the default credential store for macOS.\nThis is macOS' built-in password manager that securely stores credentials for macOS applications.\nThis credential store is called `osxkeychain` in GPTScript's configuration.\n\n### File (all operating systems)\n",
                      "markdown": "`### macOS Keychain (macOS)\n\nThe macOS Keychain is the default credential store for macOS.\nThis is macOS' built-in password manager that securely stores credentials for macOS applications.\nThis credential store is called `osxkeychain` in GPTScript's configuration.\n\n### File (all operating systems)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/06-credentials.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 35,
                  "endLine": 68,
                  "endColumn": 41,
                  "snippet": {
                    "text": "The `gptscript credential` command can be used to interact with your stored credentials.\n`gptscript credential` without any arguments will list all stored credentials.\n`gptscript credential delete <credential name>` will delete the specified credential, and you will be\nprompted to enter it again the next time a tool that requires it is run.\n\n## See Also\n\n",
                    "rendered": {
                      "text": "The `gptscript credential` command can be used to interact with your stored credentials.\n`gptscript credential` without any arguments will list all stored credentials.\n`gptscript credential delete <credential name>` will delete the specified credential, and you will be\nprompted to enter it again the next time a tool that requires it is run.\n\n## See Also\n\n",
                      "markdown": "`The `gptscript credential` command can be used to interact with your stored credentials.\n`gptscript credential` without any arguments will list all stored credentials.\n`gptscript credential delete <credential name>` will delete the specified credential, and you will be\nprompted to enter it again the next time a tool that requires it is run.\n\n## See Also\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/06-credentials.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 16,
                  "endLine": 53,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n### D-Bus Secret Service (Linux)\n\nThe D-Bus Secret Service can be used as the credential store for Linux systems with a desktop environment that supports it.\nThis credential store is called `secretservice` in GPTScript's configuration.\n\n### Pass (Linux)\n",
                    "rendered": {
                      "text": "\n### D-Bus Secret Service (Linux)\n\nThe D-Bus Secret Service can be used as the credential store for Linux systems with a desktop environment that supports it.\nThis credential store is called `secretservice` in GPTScript's configuration.\n\n### Pass (Linux)\n",
                      "markdown": "`\n### D-Bus Secret Service (Linux)\n\nThe D-Bus Secret Service can be used as the credential store for Linux systems with a desktop environment that supports it.\nThis credential store is called `secretservice` in GPTScript's configuration.\n\n### Pass (Linux)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/06-credentials.md"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "endLine": 51,
                  "endColumn": 25,
                  "snippet": {
                    "text": "configuration file.\nThis credential store is called `file` in GPTScript's configuration.\n\n### D-Bus Secret Service (Linux)\n\nThe D-Bus Secret Service can be used as the credential store for Linux systems with a desktop environment that supports it.\nThis credential store is called `secretservice` in GPTScript's configuration.\n",
                    "rendered": {
                      "text": "configuration file.\nThis credential store is called `file` in GPTScript's configuration.\n\n### D-Bus Secret Service (Linux)\n\nThe D-Bus Secret Service can be used as the credential store for Linux systems with a desktop environment that supports it.\nThis credential store is called `secretservice` in GPTScript's configuration.\n",
                      "markdown": "`configuration file.\nThis credential store is called `file` in GPTScript's configuration.\n\n### D-Bus Secret Service (Linux)\n\nThe D-Bus Secret Service can be used as the credential store for Linux systems with a desktop environment that supports it.\nThis credential store is called `secretservice` in GPTScript's configuration.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/testkube.gpt"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 36,
                  "endLine": 10,
                  "endColumn": 40,
                  "snippet": {
                    "text": "You are an assistant for Testkube and help the user create, manage and execute test workflows. You can also perform kubernetes related tasks.\n\nRules\n1. Access the testkube workflow docs at https://docs.testkube.io/articles/test-workflows and remember the latest specification to create testworkflows.\n2. Use testkube CLI to interact with Testkube.\n3. Use kubectl CLI to interact with the Kubernetes cluster.\n4. Based on the user's request, perform actions on the Kubernetes cluster and create, manage, delete test workflows. \n",
                    "rendered": {
                      "text": "You are an assistant for Testkube and help the user create, manage and execute test workflows. You can also perform kubernetes related tasks.\n\nRules\n1. Access the testkube workflow docs at https://docs.testkube.io/articles/test-workflows and remember the latest specification to create testworkflows.\n2. Use testkube CLI to interact with Testkube.\n3. Use kubectl CLI to interact with the Kubernetes cluster.\n4. Based on the user's request, perform actions on the Kubernetes cluster and create, manage, delete test workflows. \n",
                      "markdown": "`You are an assistant for Testkube and help the user create, manage and execute test workflows. You can also perform kubernetes related tasks.\n\nRules\n1. Access the testkube workflow docs at https://docs.testkube.io/articles/test-workflows and remember the latest specification to create testworkflows.\n2. Use testkube CLI to interact with Testkube.\n3. Use kubectl CLI to interact with the Kubernetes cluster.\n4. Based on the user's request, perform actions on the Kubernetes cluster and create, manage, delete test workflows. \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/sentiments.gpt"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 29,
                  "snippet": {
                    "text": "description: get the sentiments expressed in a tweet\nparameters: url: URL of the tweet to analyze\n\nGet the text of the tweet at ${url}. After getting the text, get its sentiments.\n\n---\nname: sentiments\n",
                    "rendered": {
                      "text": "description: get the sentiments expressed in a tweet\nparameters: url: URL of the tweet to analyze\n\nGet the text of the tweet at ${url}. After getting the text, get its sentiments.\n\n---\nname: sentiments\n",
                      "markdown": "`description: get the sentiments expressed in a tweet\nparameters: url: URL of the tweet to analyze\n\nGet the text of the tweet at ${url}. After getting the text, get its sentiments.\n\n---\nname: sentiments\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/travel-agent.gpt"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 132,
                  "endLine": 21,
                  "snippet": {
                    "text": "do the following in order:\n1. Search the web for typical vacation routes in the $destination.\n2. Based on the results build an initial outline of locations to include.\n3. For each location you determine, search for essential things to do in that location (maximum of one search per location). Include at\n   least 5 activities per day and 20 per location.\n4. With all of the activities and locations, build out an itinerary that outlines each day and each hour in that day for the trip.\n5. Reevaluate the plan and move dates around such that it is optimized for efficient travel\n6. Look over the entire th",
                    "rendered": {
                      "text": "do the following in order:\n1. Search the web for typical vacation routes in the $destination.\n2. Based on the results build an initial outline of locations to include.\n3. For each location you determine, search for essential things to do in that location (maximum of one search per location). Include at\n   least 5 activities per day and 20 per location.\n4. With all of the activities and locations, build out an itinerary that outlines each day and each hour in that day for the trip.\n5. Reevaluate the plan and move dates around such that it is optimized for efficient travel\n6. Look over the entire th",
                      "markdown": "`do the following in order:\n1. Search the web for typical vacation routes in the $destination.\n2. Based on the results build an initial outline of locations to include.\n3. For each location you determine, search for essential things to do in that location (maximum of one search per location). Include at\n   least 5 activities per day and 20 per location.\n4. With all of the activities and locations, build out an itinerary that outlines each day and each hour in that day for the trip.\n5. Reevaluate the plan and move dates around such that it is optimized for efficient travel\n6. Look over the entire th`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/travel-agent.gpt"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 38,
                  "endLine": 24,
                  "endColumn": 44,
                  "snippet": {
                    "text": "   least 5 activities per day and 20 per location.\n4. With all of the activities and locations, build out an itinerary that outlines each day and each hour in that day for the trip.\n5. Reevaluate the plan and move dates around such that it is optimized for efficient travel\n6. Look over the entire thing one more time and ask yourself if its missing anything. If it is, make your edits now.\n7. Write all of this into a vacation.md document.\n\n---\n",
                    "rendered": {
                      "text": "   least 5 activities per day and 20 per location.\n4. With all of the activities and locations, build out an itinerary that outlines each day and each hour in that day for the trip.\n5. Reevaluate the plan and move dates around such that it is optimized for efficient travel\n6. Look over the entire thing one more time and ask yourself if its missing anything. If it is, make your edits now.\n7. Write all of this into a vacation.md document.\n\n---\n",
                      "markdown": "`   least 5 activities per day and 20 per location.\n4. With all of the activities and locations, build out an itinerary that outlines each day and each hour in that day for the trip.\n5. Reevaluate the plan and move dates around such that it is optimized for efficient travel\n6. Look over the entire thing one more time and ask yourself if its missing anything. If it is, make your edits now.\n7. Write all of this into a vacation.md document.\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/gptscript/gptscript.go"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 1,
                  "endLine": 215,
                  "endColumn": 19,
                  "snippet": {
                    "text": "}\n\nfunc (g *GPTScript) Run(ctx context.Context, prg types.Program, envs []string, input string) (string, error) {\n\tenvs, err := g.getEnv(envs)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (g *GPTScript) Run(ctx context.Context, prg types.Program, envs []string, input string) (string, error) {\n\tenvs, err := g.getEnv(envs)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n",
                      "markdown": "`}\n\nfunc (g *GPTScript) Run(ctx context.Context, prg types.Program, envs []string, input string) (string, error) {\n\tenvs, err := g.getEnv(envs)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/gptscript/gptscript.go"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 1,
                  "endLine": 206,
                  "endColumn": 19,
                  "snippet": {
                    "text": "}\n\nfunc (g *GPTScript) Chat(ctx context.Context, prevState runner.ChatState, prg types.Program, envs []string, input string) (runner.ChatResponse, error) {\n\tenvs, err := g.getEnv(envs)\n\tif err != nil {\n\t\treturn runner.ChatResponse{}, err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (g *GPTScript) Chat(ctx context.Context, prevState runner.ChatState, prg types.Program, envs []string, input string) (runner.ChatResponse, error) {\n\tenvs, err := g.getEnv(envs)\n\tif err != nil {\n\t\treturn runner.ChatResponse{}, err\n\t}\n",
                      "markdown": "`}\n\nfunc (g *GPTScript) Chat(ctx context.Context, prevState runner.ChatState, prg types.Program, envs []string, input string) (runner.ChatResponse, error) {\n\tenvs, err := g.getEnv(envs)\n\tif err != nil {\n\t\treturn runner.ChatResponse{}, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/gptscript/gptscript.go"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tQuiet                *bool\n\tWorkspace            string\n\tDisablePromptServer  bool\n\tEnv                  []string\n}\n\nfunc Complete(opts ...Options) Options {\n",
                    "rendered": {
                      "text": "\tQuiet                *bool\n\tWorkspace            string\n\tDisablePromptServer  bool\n\tEnv                  []string\n}\n\nfunc Complete(opts ...Options) Options {\n",
                      "markdown": "`\tQuiet                *bool\n\tWorkspace            string\n\tDisablePromptServer  bool\n\tEnv                  []string\n}\n\nfunc Complete(opts ...Options) Options {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 7,
                  "endLine": 400,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\treturn nodes\n\t}\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode != nil {\n\t\t\tif node.ToolNode.Tool.MetaData == nil {\n\t\t\t\tnode.ToolNode.Tool.MetaData = map[string]string{}\n",
                    "rendered": {
                      "text": "\t\treturn nodes\n\t}\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode != nil {\n\t\t\tif node.ToolNode.Tool.MetaData == nil {\n\t\t\t\tnode.ToolNode.Tool.MetaData = map[string]string{}\n",
                      "markdown": "`\t\treturn nodes\n\t}\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode != nil {\n\t\t\tif node.ToolNode.Tool.MetaData == nil {\n\t\t\t\tnode.ToolNode.Tool.MetaData = map[string]string{}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 7,
                  "endLine": 377,
                  "endColumn": 13,
                  "snippet": {
                    "text": "func assignMetadata(nodes []Node) (result []Node) {\n\tmetadata := map[string]map[string]string{}\n\tresult = make([]Node, 0, len(nodes))\n\tfor _, node := range nodes {\n\t\tif node.TextNode != nil {\n\t\t\tbody, ok := strings.CutPrefix(node.TextNode.Text, \"!metadata:\")\n\t\t\tif ok {\n",
                    "rendered": {
                      "text": "func assignMetadata(nodes []Node) (result []Node) {\n\tmetadata := map[string]map[string]string{}\n\tresult = make([]Node, 0, len(nodes))\n\tfor _, node := range nodes {\n\t\tif node.TextNode != nil {\n\t\t\tbody, ok := strings.CutPrefix(node.TextNode.Text, \"!metadata:\")\n\t\t\tif ok {\n",
                      "markdown": "`func assignMetadata(nodes []Node) (result []Node) {\n\tmetadata := map[string]map[string]string{}\n\tresult = make([]Node, 0, len(nodes))\n\tfor _, node := range nodes {\n\t\tif node.TextNode != nil {\n\t\t\tbody, ok := strings.CutPrefix(node.TextNode.Text, \"!metadata:\")\n\t\t\tif ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 7,
                  "endLine": 355,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode == nil {\n\t\t\tcontinue\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode == nil {\n\t\t\tcontinue\n\t\t}\n",
                      "markdown": "`\t\t}\n\t}\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode == nil {\n\t\t\tcontinue\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 7,
                  "endLine": 335,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\tglobalTools     []string\n\t)\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode == nil {\n\t\t\tcontinue\n\t\t}\n",
                    "rendered": {
                      "text": "\t\tglobalTools     []string\n\t)\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode == nil {\n\t\t\tcontinue\n\t\t}\n",
                      "markdown": "`\t\tglobalTools     []string\n\t)\n\n\tfor _, node := range nodes {\n\t\tif node.ToolNode == nil {\n\t\t\tcontinue\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 8,
                  "endLine": 314,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\topt := complete(opts...)\n\n\tif opt.Location != \"\" {\n\t\tfor _, node := range nodes {\n\t\t\tif node.ToolNode != nil && node.ToolNode.Tool.Source.Location == \"\" {\n\t\t\t\tnode.ToolNode.Tool.Source.Location = opt.Location\n\t\t\t}\n",
                    "rendered": {
                      "text": "\topt := complete(opts...)\n\n\tif opt.Location != \"\" {\n\t\tfor _, node := range nodes {\n\t\t\tif node.ToolNode != nil && node.ToolNode.Tool.Source.Location == \"\" {\n\t\t\t\tnode.ToolNode.Tool.Source.Location = opt.Location\n\t\t\t}\n",
                      "markdown": "`\topt := complete(opts...)\n\n\tif opt.Location != \"\" {\n\t\tfor _, node := range nodes {\n\t\t\tif node.ToolNode != nil && node.ToolNode.Tool.Source.Location == \"\" {\n\t\t\t\tnode.ToolNode.Tool.Source.Location = opt.Location\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 7,
                  "endLine": 296,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, node := range doc.Nodes {\n\t\tif node.ToolNode != nil {\n\t\t\tresult = append(result, node.ToolNode.Tool)\n\t\t}\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, node := range doc.Nodes {\n\t\tif node.ToolNode != nil {\n\t\t\tresult = append(result, node.ToolNode.Tool)\n\t\t}\n",
                      "markdown": "`\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, node := range doc.Nodes {\n\t\tif node.ToolNode != nil {\n\t\t\tresult = append(result, node.ToolNode.Tool)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 4,
                  "endLine": 278,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\treturn buf.String()\n}\n\ntype Node struct {\n\tTextNode *TextNode `json:\"textNode,omitempty\"`\n\tToolNode *ToolNode `json:\"toolNode,omitempty\"`\n}\n",
                    "rendered": {
                      "text": "\treturn buf.String()\n}\n\ntype Node struct {\n\tTextNode *TextNode `json:\"textNode,omitempty\"`\n\tToolNode *ToolNode `json:\"toolNode,omitempty\"`\n}\n",
                      "markdown": "`\treturn buf.String()\n}\n\ntype Node struct {\n\tTextNode *TextNode `json:\"textNode,omitempty\"`\n\tToolNode *ToolNode `json:\"toolNode,omitempty\"`\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/parser/parser.go"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 7,
                  "endLine": 263,
                  "endColumn": 13,
                  "snippet": {
                    "text": "func (d Document) String() string {\n\tbuf := strings.Builder{}\n\tlastText := false\n\tfor _, node := range d.Nodes {\n\t\tif node.TextNode != nil {\n\t\t\twriteSep(&buf, lastText)\n\t\t\tbuf.WriteString(node.TextNode.Text)\n",
                    "rendered": {
                      "text": "func (d Document) String() string {\n\tbuf := strings.Builder{}\n\tlastText := false\n\tfor _, node := range d.Nodes {\n\t\tif node.TextNode != nil {\n\t\t\twriteSep(&buf, lastText)\n\t\t\tbuf.WriteString(node.TextNode.Text)\n",
                      "markdown": "`func (d Document) String() string {\n\tbuf := strings.Builder{}\n\tlastText := false\n\tfor _, node := range d.Nodes {\n\t\tif node.TextNode != nil {\n\t\t\twriteSep(&buf, lastText)\n\t\t\tbuf.WriteString(node.TextNode.Text)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/context/context.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 33,
                  "endLine": 52,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\ntype envKey struct{}\n\nfunc WithEnv(ctx context.Context, env []string) context.Context {\n\treturn context.WithValue(ctx, envKey{}, env)\n}\n\n",
                    "rendered": {
                      "text": "\ntype envKey struct{}\n\nfunc WithEnv(ctx context.Context, env []string) context.Context {\n\treturn context.WithValue(ctx, envKey{}, env)\n}\n\n",
                      "markdown": "`\ntype envKey struct{}\n\nfunc WithEnv(ctx context.Context, env []string) context.Context {\n\treturn context.WithValue(ctx, envKey{}, env)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/chat/chat.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 92,
                  "endLine": 34,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\treturn color.GreenString(\"%s> \", name)\n}\n\nfunc Start(ctx context.Context, prevState runner.ChatState, chatter Chatter, prg GetProgram, env []string, startInput, chatStateSaveFile string) error {\n\tvar (\n\t\tprompter Prompter\n\t)\n",
                    "rendered": {
                      "text": "\treturn color.GreenString(\"%s> \", name)\n}\n\nfunc Start(ctx context.Context, prevState runner.ChatState, chatter Chatter, prg GetProgram, env []string, startInput, chatStateSaveFile string) error {\n\tvar (\n\t\tprompter Prompter\n\t)\n",
                      "markdown": "`\treturn color.GreenString(\"%s> \", name)\n}\n\nfunc Start(ctx context.Context, prevState runner.ChatState, chatter Chatter, prg GetProgram, env []string, startInput, chatStateSaveFile string) error {\n\tvar (\n\t\tprompter Prompter\n\t)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/chat/chat.go"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 73,
                  "endLine": 20,
                  "endColumn": 78,
                  "snippet": {
                    "text": "}\n\ntype Chatter interface {\n\tChat(ctx context.Context, prevState runner.ChatState, prg types.Program, env []string, input string) (resp runner.ChatResponse, err error)\n}\n\ntype GetProgram func() (types.Program, error)\n",
                    "rendered": {
                      "text": "}\n\ntype Chatter interface {\n\tChat(ctx context.Context, prevState runner.ChatState, prg types.Program, env []string, input string) (resp runner.ChatResponse, err error)\n}\n\ntype GetProgram func() (types.Program, error)\n",
                      "markdown": "`}\n\ntype Chatter interface {\n\tChat(ctx context.Context, prevState runner.ChatState, prg types.Program, env []string, input string) (resp runner.ChatResponse, err error)\n}\n\ntype GetProgram func() (types.Program, error)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v2.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 47,
                  "endLine": 26,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n",
                    "rendered": {
                      "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n",
                      "markdown": "`      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v2.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 54,
                  "endLine": 26,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n",
                    "rendered": {
                      "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n",
                      "markdown": "`      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v3.yaml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 47,
                  "endLine": 19,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                    "rendered": {
                      "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                      "markdown": "`      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi_v3.yaml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 54,
                  "endLine": 19,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                    "rendered": {
                      "text": "      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n",
                      "markdown": "`      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 28,
                  "endLine": 183,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\tpath = testPath\n\t}\n\n\treturn downloadURL, config.AuthToken, &types.Repo{\n\t\tVCS:      \"git\",\n\t\tRoot:     fmt.Sprintf(config.RepoURL, account, repo),\n\t\tPath:     gpath.Dir(path),\n",
                    "rendered": {
                      "text": "\t\tpath = testPath\n\t}\n\n\treturn downloadURL, config.AuthToken, &types.Repo{\n\t\tVCS:      \"git\",\n\t\tRoot:     fmt.Sprintf(config.RepoURL, account, repo),\n\t\tPath:     gpath.Dir(path),\n",
                      "markdown": "`\t\tpath = testPath\n\t}\n\n\treturn downloadURL, config.AuthToken, &types.Repo{\n\t\tVCS:      \"git\",\n\t\tRoot:     fmt.Sprintf(config.RepoURL, account, repo),\n\t\tPath:     gpath.Dir(path),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 57,
                  "endLine": 170,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\t\t\tbreak\n\t\t\t}\n\t\t\tif config.AuthToken != \"\" {\n\t\t\t\theadReq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t\t\t}\n\t\t\tif resp, err := http.DefaultClient.Do(headReq); err == nil {\n\t\t\t\t_ = resp.Body.Close()\n",
                    "rendered": {
                      "text": "\t\t\t\tbreak\n\t\t\t}\n\t\t\tif config.AuthToken != \"\" {\n\t\t\t\theadReq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t\t\t}\n\t\t\tif resp, err := http.DefaultClient.Do(headReq); err == nil {\n\t\t\t\t_ = resp.Body.Close()\n",
                      "markdown": "`\t\t\t\tbreak\n\t\t\t}\n\t\t\tif config.AuthToken != \"\" {\n\t\t\t\theadReq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t\t\t}\n\t\t\tif resp, err := http.DefaultClient.Do(headReq); err == nil {\n\t\t\t\t_ = resp.Body.Close()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 13,
                  "endLine": 169,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif config.AuthToken != \"\" {\n\t\t\t\theadReq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t\t\t}\n\t\t\tif resp, err := http.DefaultClient.Do(headReq); err == nil {\n",
                    "rendered": {
                      "text": "\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif config.AuthToken != \"\" {\n\t\t\t\theadReq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t\t\t}\n\t\t\tif resp, err := http.DefaultClient.Do(headReq); err == nil {\n",
                      "markdown": "`\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif config.AuthToken != \"\" {\n\t\t\t\theadReq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t\t\t}\n\t\t\tif resp, err := http.DefaultClient.Do(headReq); err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 2,
                  "endLine": 119,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tRepoURL:     fmt.Sprintf(\"https://%s/%%s/%%s.git\", prefix),\n\t\tDownloadURL: fmt.Sprintf(\"https://raw.%s/%%s/%%s/%%s/%%s\", prefix),\n\t\tCommitURL:   fmt.Sprintf(\"https://%s/api/v3/repos/%%s/%%s/commits/%%s\", prefix),\n\t\tAuthToken:   os.Getenv(\"GH_ENTERPRISE_TOKEN\"),\n\t}\n}\n\n",
                    "rendered": {
                      "text": "\t\tRepoURL:     fmt.Sprintf(\"https://%s/%%s/%%s.git\", prefix),\n\t\tDownloadURL: fmt.Sprintf(\"https://raw.%s/%%s/%%s/%%s/%%s\", prefix),\n\t\tCommitURL:   fmt.Sprintf(\"https://%s/api/v3/repos/%%s/%%s/commits/%%s\", prefix),\n\t\tAuthToken:   os.Getenv(\"GH_ENTERPRISE_TOKEN\"),\n\t}\n}\n\n",
                      "markdown": "`\t\tRepoURL:     fmt.Sprintf(\"https://%s/%%s/%%s.git\", prefix),\n\t\tDownloadURL: fmt.Sprintf(\"https://raw.%s/%%s/%%s/%%s/%%s\", prefix),\n\t\tCommitURL:   fmt.Sprintf(\"https://%s/api/v3/repos/%%s/%%s/commits/%%s\", prefix),\n\t\tAuthToken:   os.Getenv(\"GH_ENTERPRISE_TOKEN\"),\n\t}\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 51,
                  "endLine": 65,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\t}\n\n\tif config.AuthToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t}\n\n\tclient := http.DefaultClient\n",
                    "rendered": {
                      "text": "\t}\n\n\tif config.AuthToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t}\n\n\tclient := http.DefaultClient\n",
                      "markdown": "`\t}\n\n\tif config.AuthToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t}\n\n\tclient := http.DefaultClient\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 11,
                  "endLine": 64,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\treturn \"\", fmt.Errorf(\"failed to create request of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tif config.AuthToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t}\n\n",
                    "rendered": {
                      "text": "\t\treturn \"\", fmt.Errorf(\"failed to create request of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tif config.AuthToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t}\n\n",
                      "markdown": "`\t\treturn \"\", fmt.Errorf(\"failed to create request of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tif config.AuthToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"Bearer \"+config.AuthToken)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 33,
                  "endLine": 37,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tRepoURL:     \"https://github.com/%s/%s.git\",\n\t\tDownloadURL: \"https://raw.githubusercontent.com/%s/%s/%s/%s\",\n\t\tCommitURL:   \"https://api.github.com/repos/%s/%s/commits/%s\",\n\t\tAuthToken:   os.Getenv(\"GITHUB_AUTH_TOKEN\"),\n\t}\n)\n\n",
                    "rendered": {
                      "text": "\t\tRepoURL:     \"https://github.com/%s/%s.git\",\n\t\tDownloadURL: \"https://raw.githubusercontent.com/%s/%s/%s/%s\",\n\t\tCommitURL:   \"https://api.github.com/repos/%s/%s/commits/%s\",\n\t\tAuthToken:   os.Getenv(\"GITHUB_AUTH_TOKEN\"),\n\t}\n)\n\n",
                      "markdown": "`\t\tRepoURL:     \"https://github.com/%s/%s.git\",\n\t\tDownloadURL: \"https://raw.githubusercontent.com/%s/%s/%s/%s\",\n\t\tCommitURL:   \"https://api.github.com/repos/%s/%s/commits/%s\",\n\t\tAuthToken:   os.Getenv(\"GITHUB_AUTH_TOKEN\"),\n\t}\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 37,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tRepoURL:     \"https://github.com/%s/%s.git\",\n\t\tDownloadURL: \"https://raw.githubusercontent.com/%s/%s/%s/%s\",\n\t\tCommitURL:   \"https://api.github.com/repos/%s/%s/commits/%s\",\n\t\tAuthToken:   os.Getenv(\"GITHUB_AUTH_TOKEN\"),\n\t}\n)\n\n",
                    "rendered": {
                      "text": "\t\tRepoURL:     \"https://github.com/%s/%s.git\",\n\t\tDownloadURL: \"https://raw.githubusercontent.com/%s/%s/%s/%s\",\n\t\tCommitURL:   \"https://api.github.com/repos/%s/%s/commits/%s\",\n\t\tAuthToken:   os.Getenv(\"GITHUB_AUTH_TOKEN\"),\n\t}\n)\n\n",
                      "markdown": "`\t\tRepoURL:     \"https://github.com/%s/%s.git\",\n\t\tDownloadURL: \"https://raw.githubusercontent.com/%s/%s/%s/%s\",\n\t\tCommitURL:   \"https://api.github.com/repos/%s/%s/commits/%s\",\n\t\tAuthToken:   os.Getenv(\"GITHUB_AUTH_TOKEN\"),\n\t}\n)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\tRepoURL     string\n\tDownloadURL string\n\tCommitURL   string\n\tAuthToken   string\n}\n\nvar (\n",
                    "rendered": {
                      "text": "\tRepoURL     string\n\tDownloadURL string\n\tCommitURL   string\n\tAuthToken   string\n}\n\nvar (\n",
                      "markdown": "`\tRepoURL     string\n\tDownloadURL string\n\tCommitURL   string\n\tAuthToken   string\n}\n\nvar (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 11,
                  "endLine": 134,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t}\n\n\tparts := strings.Split(url, \"/\")\n\t// Must be at least 3 parts github.com/ACCOUNT/REPO[/FILE]\n\tif len(parts) < 3 {\n\t\treturn \"\", \"\", nil, false, nil\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\tparts := strings.Split(url, \"/\")\n\t// Must be at least 3 parts github.com/ACCOUNT/REPO[/FILE]\n\tif len(parts) < 3 {\n\t\treturn \"\", \"\", nil, false, nil\n\t}\n",
                      "markdown": "`\t}\n\n\tparts := strings.Split(url, \"/\")\n\t// Must be at least 3 parts github.com/ACCOUNT/REPO[/FILE]\n\tif len(parts) < 3 {\n\t\treturn \"\", \"\", nil, false, nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 42,
                  "endLine": 94,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\treturn \"\", fmt.Errorf(\"failed to decode GitHub commit of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n\n\tif commit.SHA == \"\" {\n\t\treturn \"\", fmt.Errorf(\"failed to find commit in response of %s, got empty string\", url)\n",
                    "rendered": {
                      "text": "\t\treturn \"\", fmt.Errorf(\"failed to decode GitHub commit of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n\n\tif commit.SHA == \"\" {\n\t\treturn \"\", fmt.Errorf(\"failed to find commit in response of %s, got empty string\", url)\n",
                      "markdown": "`\t\treturn \"\", fmt.Errorf(\"failed to decode GitHub commit of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n\n\tif commit.SHA == \"\" {\n\t\treturn \"\", fmt.Errorf(\"failed to find commit in response of %s, got empty string\", url)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 64,
                  "endLine": 91,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\t\tSHA string `json:\"sha,omitempty\"`\n\t}\n\tif err := json.NewDecoder(resp.Body).Decode(&commit); err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to decode GitHub commit of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n",
                    "rendered": {
                      "text": "\t\tSHA string `json:\"sha,omitempty\"`\n\t}\n\tif err := json.NewDecoder(resp.Body).Decode(&commit); err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to decode GitHub commit of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n",
                      "markdown": "`\t\tSHA string `json:\"sha,omitempty\"`\n\t}\n\tif err := json.NewDecoder(resp.Body).Decode(&commit); err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to decode GitHub commit of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 61,
                  "endLine": 82,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t\tif fallBackErr == nil {\n\t\t\treturn commit, nil\n\t\t}\n\t\treturn \"\", fmt.Errorf(\"failed to get GitHub commit of %s/%s at %s (fallback error %v): %s %s\",\n\t\t\taccount, repo, ref, fallBackErr, resp.Status, c)\n\t}\n\tdefer resp.Body.Close()\n",
                    "rendered": {
                      "text": "\t\tif fallBackErr == nil {\n\t\t\treturn commit, nil\n\t\t}\n\t\treturn \"\", fmt.Errorf(\"failed to get GitHub commit of %s/%s at %s (fallback error %v): %s %s\",\n\t\t\taccount, repo, ref, fallBackErr, resp.Status, c)\n\t}\n\tdefer resp.Body.Close()\n",
                      "markdown": "`\t\tif fallBackErr == nil {\n\t\t\treturn commit, nil\n\t\t}\n\t\treturn \"\", fmt.Errorf(\"failed to get GitHub commit of %s/%s at %s (fallback error %v): %s %s\",\n\t\t\taccount, repo, ref, fallBackErr, resp.Status, c)\n\t}\n\tdefer resp.Body.Close()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 58,
                  "endLine": 61,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\turl := fmt.Sprintf(config.CommitURL, account, repo, ref)\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to create request of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tif config.AuthToken != \"\" {\n",
                    "rendered": {
                      "text": "\turl := fmt.Sprintf(config.CommitURL, account, repo, ref)\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to create request of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tif config.AuthToken != \"\" {\n",
                      "markdown": "`\turl := fmt.Sprintf(config.CommitURL, account, repo, ref)\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to create request of %s/%s at %s: %w\", account, repo, url, err)\n\t}\n\n\tif config.AuthToken != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 34,
                  "endLine": 97,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n\n\tif commit.SHA == \"\" {\n\t\treturn \"\", fmt.Errorf(\"failed to find commit in response of %s, got empty string\", url)\n\t}\n\n\treturn commit.SHA, nil\n",
                    "rendered": {
                      "text": "\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n\n\tif commit.SHA == \"\" {\n\t\treturn \"\", fmt.Errorf(\"failed to find commit in response of %s, got empty string\", url)\n\t}\n\n\treturn commit.SHA, nil\n",
                      "markdown": "`\tlog.Debugf(\"loaded github commit of %s/%s at %s as %q\", account, repo, url, commit.SHA)\n\n\tif commit.SHA == \"\" {\n\t\treturn \"\", fmt.Errorf(\"failed to find commit in response of %s, got empty string\", url)\n\t}\n\n\treturn commit.SHA, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 20,
                  "endLine": 50,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\treturn git.LsRemote(ctx, url, ref)\n}\n\n// regexp to match a git commit id\nvar commitRegexp = regexp.MustCompile(\"^[a-f0-9]{40}$\")\n\nfunc getCommit(ctx context.Context, account, repo, ref string, config *Config) (string, error) {\n",
                    "rendered": {
                      "text": "\treturn git.LsRemote(ctx, url, ref)\n}\n\n// regexp to match a git commit id\nvar commitRegexp = regexp.MustCompile(\"^[a-f0-9]{40}$\")\n\nfunc getCommit(ctx context.Context, account, repo, ref string, config *Config) (string, error) {\n",
                      "markdown": "`\treturn git.LsRemote(ctx, url, ref)\n}\n\n// regexp to match a git commit id\nvar commitRegexp = regexp.MustCompile(\"^[a-f0-9]{40}$\")\n\nfunc getCommit(ctx context.Context, account, repo, ref string, config *Config) (string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 12,
                  "endLine": 100,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/bothtoolagent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(\"\").Equal(t, token)\n}\n",
                    "rendered": {
                      "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/bothtoolagent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(\"\").Equal(t, token)\n}\n",
                      "markdown": "`\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/bothtoolagent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(\"\").Equal(t, token)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 12,
                  "endLine": 88,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/agent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(\"\").Equal(t, token)\n\n",
                    "rendered": {
                      "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/agent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(\"\").Equal(t, token)\n\n",
                      "markdown": "`\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/agent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(\"\").Equal(t, token)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 12,
                  "endLine": 76,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tVCS: \"git\", Root: fmt.Sprintf(\"https://%s/gptscript-ai/gptscript.git\", serverAddr),\n\t\tPath:     \"pkg/loader/testdata/tool\",\n\t\tName:     \"tool.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(gheToken).Equal(t, token)\n\n",
                    "rendered": {
                      "text": "\t\tVCS: \"git\", Root: fmt.Sprintf(\"https://%s/gptscript-ai/gptscript.git\", serverAddr),\n\t\tPath:     \"pkg/loader/testdata/tool\",\n\t\tName:     \"tool.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(gheToken).Equal(t, token)\n\n",
                      "markdown": "`\t\tVCS: \"git\", Root: fmt.Sprintf(\"https://%s/gptscript-ai/gptscript.git\", serverAddr),\n\t\tPath:     \"pkg/loader/testdata/tool\",\n\t\tName:     \"tool.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\tautogold.Expect(gheToken).Equal(t, token)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 59,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\ts := httptest.NewTLSServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase \"/api/v3/repos/gptscript-ai/gptscript/commits/172dfb0\":\n\t\t\t_, _ = w.Write([]byte(`{\"sha\": \"172dfb00b48c6adbbaa7e99270933f95887d1b91\"}`))\n\t\tdefault:\n\t\t\tw.WriteHeader(404)\n\t\t}\n",
                    "rendered": {
                      "text": "\ts := httptest.NewTLSServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase \"/api/v3/repos/gptscript-ai/gptscript/commits/172dfb0\":\n\t\t\t_, _ = w.Write([]byte(`{\"sha\": \"172dfb00b48c6adbbaa7e99270933f95887d1b91\"}`))\n\t\tdefault:\n\t\t\tw.WriteHeader(404)\n\t\t}\n",
                      "markdown": "`\ts := httptest.NewTLSServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase \"/api/v3/repos/gptscript-ai/gptscript/commits/172dfb0\":\n\t\t\t_, _ = w.Write([]byte(`{\"sha\": \"172dfb00b48c6adbbaa7e99270933f95887d1b91\"}`))\n\t\tdefault:\n\t\t\tw.WriteHeader(404)\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 12,
                  "endLine": 48,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/bothtoolagent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n}\n\n",
                    "rendered": {
                      "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/bothtoolagent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n}\n\n",
                      "markdown": "`\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/bothtoolagent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 12,
                  "endLine": 37,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/agent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\n\turl, _, repo, ok, err = Load(context.Background(), nil, \"github.com/gptscript-ai/gptscript/pkg/loader/testdata/bothtoolagent@172dfb0\")\n",
                    "rendered": {
                      "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/agent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\n\turl, _, repo, ok, err = Load(context.Background(), nil, \"github.com/gptscript-ai/gptscript/pkg/loader/testdata/bothtoolagent@172dfb0\")\n",
                      "markdown": "`\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/agent\",\n\t\tName:     \"agent.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\n\turl, _, repo, ok, err = Load(context.Background(), nil, \"github.com/gptscript-ai/gptscript/pkg/loader/testdata/bothtoolagent@172dfb0\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/github/github_test.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "endLine": 26,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/tool\",\n\t\tName:     \"tool.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\n\turl, _, repo, ok, err = Load(context.Background(), nil, \"github.com/gptscript-ai/gptscript/pkg/loader/testdata/agent@172dfb0\")\n",
                    "rendered": {
                      "text": "\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/tool\",\n\t\tName:     \"tool.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\n\turl, _, repo, ok, err = Load(context.Background(), nil, \"github.com/gptscript-ai/gptscript/pkg/loader/testdata/agent@172dfb0\")\n",
                      "markdown": "`\t\tVCS: \"git\", Root: \"https://github.com/gptscript-ai/gptscript.git\",\n\t\tPath:     \"pkg/loader/testdata/tool\",\n\t\tName:     \"tool.gpt\",\n\t\tRevision: \"172dfb00b48c6adbbaa7e99270933f95887d1b91\",\n\t}).Equal(t, repo)\n\n\turl, _, repo, ok, err = Load(context.Background(), nil, \"github.com/gptscript-ai/gptscript/pkg/loader/testdata/agent@172dfb0\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/loader.go"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 55,
                  "endLine": 336,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\t\t\tvar err error\n\t\t\t\tlinkedTool, err = link(ctx, cache, prg, base, localTool, localTools, localToolsMapping)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn types.Tool{}, fmt.Errorf(\"failed linking %s at %s: %w\", targetToolName, base, err)\n\t\t\t\t}\n\t\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tvar err error\n\t\t\t\tlinkedTool, err = link(ctx, cache, prg, base, localTool, localTools, localToolsMapping)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn types.Tool{}, fmt.Errorf(\"failed linking %s at %s: %w\", targetToolName, base, err)\n\t\t\t\t}\n\t\t\t}\n\n",
                      "markdown": "`\t\t\t\tvar err error\n\t\t\t\tlinkedTool, err = link(ctx, cache, prg, base, localTool, localTools, localToolsMapping)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn types.Tool{}, fmt.Errorf(\"failed linking %s at %s: %w\", targetToolName, base, err)\n\t\t\t\t}\n\t\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/loader.go"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 52,
                  "endLine": 283,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n\t\tif existing, ok := localTools[strings.ToLower(tool.Parameters.Name)]; ok {\n\t\t\treturn nil, parser.NewErrLine(tool.Source.Location, tool.Source.LineNo,\n\t\t\t\tfmt.Errorf(\"duplicate tool name [%s] in %s found at lines %d and %d\", tool.Parameters.Name, tool.Source.Location,\n\t\t\t\t\ttool.Source.LineNo, existing.Source.LineNo))\n\t\t}\n\n",
                    "rendered": {
                      "text": "\n\t\tif existing, ok := localTools[strings.ToLower(tool.Parameters.Name)]; ok {\n\t\t\treturn nil, parser.NewErrLine(tool.Source.Location, tool.Source.LineNo,\n\t\t\t\tfmt.Errorf(\"duplicate tool name [%s] in %s found at lines %d and %d\", tool.Parameters.Name, tool.Source.Location,\n\t\t\t\t\ttool.Source.LineNo, existing.Source.LineNo))\n\t\t}\n\n",
                      "markdown": "`\n\t\tif existing, ok := localTools[strings.ToLower(tool.Parameters.Name)]; ok {\n\t\t\treturn nil, parser.NewErrLine(tool.Source.Location, tool.Source.LineNo,\n\t\t\t\tfmt.Errorf(\"duplicate tool name [%s] in %s found at lines %d and %d\", tool.Parameters.Name, tool.Source.Location,\n\t\t\t\t\ttool.Source.LineNo, existing.Source.LineNo))\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/loader.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 43,
                  "endLine": 37,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tContent []byte\n\t// Remote indicates that this file was loaded from a remote source (not local disk)\n\tRemote bool\n\t// Path is the path of this source used to find any relative references to this source\n\tPath string\n\t// Name is the filename of this source, it does not include the path in it\n\tName string\n",
                    "rendered": {
                      "text": "\tContent []byte\n\t// Remote indicates that this file was loaded from a remote source (not local disk)\n\tRemote bool\n\t// Path is the path of this source used to find any relative references to this source\n\tPath string\n\t// Name is the filename of this source, it does not include the path in it\n\tName string\n",
                      "markdown": "`\tContent []byte\n\t// Remote indicates that this file was loaded from a remote source (not local disk)\n\tRemote bool\n\t// Path is the path of this source used to find any relative references to this source\n\tPath string\n\t// Name is the filename of this source, it does not include the path in it\n\tName string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 108,
                  "endLine": 50,
                  "endColumn": 116,
                  "snippet": {
                    "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                    "rendered": {
                      "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                      "markdown": "`\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 24,
                  "endLine": 50,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                    "rendered": {
                      "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                      "markdown": "`\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 14,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t\t\tfield = \"bearer token\"\n\t\t\t} else {\n\t\t\t\tif strings.Contains(v, \"PASSWORD\") {\n\t\t\t\t\tfield = \"password\"\n\t\t\t\t} else {\n\t\t\t\t\tfield = \"username\"\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tfield = \"bearer token\"\n\t\t\t} else {\n\t\t\t\tif strings.Contains(v, \"PASSWORD\") {\n\t\t\t\t\tfield = \"password\"\n\t\t\t\t} else {\n\t\t\t\t\tfield = \"username\"\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t\tfield = \"bearer token\"\n\t\t\t} else {\n\t\t\t\tif strings.Contains(v, \"PASSWORD\") {\n\t\t\t\t\tfield = \"password\"\n\t\t\t\t} else {\n\t\t\t\t\tfield = \"username\"\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 28,
                  "endLine": 32,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t\tif i.Scheme == \"bearer\" {\n\t\t\t\tfield = \"bearer token\"\n\t\t\t} else {\n\t\t\t\tif strings.Contains(v, \"PASSWORD\") {\n\t\t\t\t\tfield = \"password\"\n\t\t\t\t} else {\n\t\t\t\t\tfield = \"username\"\n",
                    "rendered": {
                      "text": "\t\t\tif i.Scheme == \"bearer\" {\n\t\t\t\tfield = \"bearer token\"\n\t\t\t} else {\n\t\t\t\tif strings.Contains(v, \"PASSWORD\") {\n\t\t\t\t\tfield = \"password\"\n\t\t\t\t} else {\n\t\t\t\t\tfield = \"username\"\n",
                      "markdown": "`\t\t\tif i.Scheme == \"bearer\" {\n\t\t\t\tfield = \"bearer token\"\n\t\t\t} else {\n\t\t\t\tif strings.Contains(v, \"PASSWORD\") {\n\t\t\t\t\tfield = \"password\"\n\t\t\t\t} else {\n\t\t\t\t\tfield = \"username\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 50,
                  "endLine": 54,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\treturn map[string]string{\n\t\thostname + i.Name: \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name),\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\treturn map[string]string{\n\t\thostname + i.Name: \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name),\n\t}\n}\n",
                      "markdown": "`\t\t}\n\t}\n\treturn map[string]string{\n\t\thostname + i.Name: \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name),\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 2,
                  "endLine": 54,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\treturn map[string]string{\n\t\thostname + i.Name: \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name),\n\t}\n}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\treturn map[string]string{\n\t\thostname + i.Name: \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name),\n\t}\n}\n",
                      "markdown": "`\t\t}\n\t}\n\treturn map[string]string{\n\t\thostname + i.Name: \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name),\n\t}\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 64,
                  "endLine": 50,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                    "rendered": {
                      "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                      "markdown": "`\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 3,
                  "endLine": 50,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                    "rendered": {
                      "text": "\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n",
                      "markdown": "`\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n\treturn map[string]string{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 64,
                  "endLine": 49,
                  "endColumn": 72,
                  "snippet": {
                    "text": "func (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "func (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n",
                      "markdown": "`func (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "endLine": 49,
                  "endColumn": 11,
                  "snippet": {
                    "text": "func (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "func (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n",
                      "markdown": "`func (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n\t\t\thostname + i.Name + \"Password\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_PASSWORD\",\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 51,
                  "endLine": 46,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\treturn tools\n}\n\nfunc (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n",
                    "rendered": {
                      "text": "\treturn tools\n}\n\nfunc (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n",
                      "markdown": "`\treturn tools\n}\n\nfunc (i SecurityInfo) getCredentialNamesAndEnvVars(hostname string) map[string]string {\n\tif i.Type == \"http\" && i.Scheme == \"basic\" {\n\t\treturn map[string]string{\n\t\t\thostname + i.Name + \"Username\": \"GPTSCRIPT_\" + env.ToEnvLike(hostname) + \"_\" + env.ToEnvLike(i.Name) + \"_USERNAME\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 40,
                  "endLine": 20,
                  "endColumn": 48,
                  "snippet": {
                    "text": "}\n\nfunc (i SecurityInfo) GetCredentialToolStrings(hostname string) []string {\n\tvars := i.getCredentialNamesAndEnvVars(hostname)\n\tvar tools []string\n\n\tfor cred, v := range vars {\n",
                    "rendered": {
                      "text": "}\n\nfunc (i SecurityInfo) GetCredentialToolStrings(hostname string) []string {\n\tvars := i.getCredentialNamesAndEnvVars(hostname)\n\tvar tools []string\n\n\tfor cred, v := range vars {\n",
                      "markdown": "`}\n\nfunc (i SecurityInfo) GetCredentialToolStrings(hostname string) []string {\n\tvars := i.getCredentialNamesAndEnvVars(hostname)\n\tvar tools []string\n\n\tfor cred, v := range vars {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 47,
                  "endLine": 19,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\tIn         string `json:\"in\"`         // header, query, or cookie, for type==apiKey\n}\n\nfunc (i SecurityInfo) GetCredentialToolStrings(hostname string) []string {\n\tvars := i.getCredentialNamesAndEnvVars(hostname)\n\tvar tools []string\n\n",
                    "rendered": {
                      "text": "\tIn         string `json:\"in\"`         // header, query, or cookie, for type==apiKey\n}\n\nfunc (i SecurityInfo) GetCredentialToolStrings(hostname string) []string {\n\tvars := i.getCredentialNamesAndEnvVars(hostname)\n\tvar tools []string\n\n",
                      "markdown": "`\tIn         string `json:\"in\"`         // header, query, or cookie, for type==apiKey\n}\n\nfunc (i SecurityInfo) GetCredentialToolStrings(hostname string) []string {\n\tvars := i.getCredentialNamesAndEnvVars(hostname)\n\tvar tools []string\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/security.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 88,
                  "endLine": 40,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\n\t\ttools = append(tools, fmt.Sprintf(\"github.com/gptscript-ai/credential as %s with %s as env and %q as message and %q as field\",\n\t\t\tcred, v, \"Please provide a value for the \"+v+\" environment variable\", field))\n\t}\n\treturn tools\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\n\t\ttools = append(tools, fmt.Sprintf(\"github.com/gptscript-ai/credential as %s with %s as env and %q as message and %q as field\",\n\t\t\tcred, v, \"Please provide a value for the \"+v+\" environment variable\", field))\n\t}\n\treturn tools\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\n\t\ttools = append(tools, fmt.Sprintf(\"github.com/gptscript-ai/credential as %s with %s as env and %q as message and %q as field\",\n\t\t\tcred, v, \"Please provide a value for the \"+v+\" environment variable\", field))\n\t}\n\treturn tools\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 14,
                  "endLine": 428,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// HandleCookieParameters extracts each cookie parameter from the input JSON and adds it to the request cookies.\nfunc HandleCookieParameters(req *http.Request, params []Parameter, input string) {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\tif res.IsArray() {\n\t\t\t\tstrs := make([]string, len(res.Array()))\n",
                    "rendered": {
                      "text": "// HandleCookieParameters extracts each cookie parameter from the input JSON and adds it to the request cookies.\nfunc HandleCookieParameters(req *http.Request, params []Parameter, input string) {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\tif res.IsArray() {\n\t\t\t\tstrs := make([]string, len(res.Array()))\n",
                      "markdown": "`// HandleCookieParameters extracts each cookie parameter from the input JSON and adds it to the request cookies.\nfunc HandleCookieParameters(req *http.Request, params []Parameter, input string) {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\tif res.IsArray() {\n\t\t\t\tstrs := make([]string, len(res.Array()))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 14,
                  "endLine": 397,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// HandleHeaderParameters extracts each header parameter from the input JSON and adds it to the request headers.\nfunc HandleHeaderParameters(req *http.Request, params []Parameter, input string) {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\tif res.IsArray() {\n\t\t\t\tstrs := make([]string, len(res.Array()))\n",
                    "rendered": {
                      "text": "// HandleHeaderParameters extracts each header parameter from the input JSON and adds it to the request headers.\nfunc HandleHeaderParameters(req *http.Request, params []Parameter, input string) {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\tif res.IsArray() {\n\t\t\t\tstrs := make([]string, len(res.Array()))\n",
                      "markdown": "`// HandleHeaderParameters extracts each header parameter from the input JSON and adds it to the request headers.\nfunc HandleHeaderParameters(req *http.Request, params []Parameter, input string) {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\tif res.IsArray() {\n\t\t\t\tstrs := make([]string, len(res.Array()))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 14,
                  "endLine": 325,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// HandleQueryParameters extracts each query parameter from the input JSON and adds it to the URL query.\nfunc HandleQueryParameters(q url.Values, params []Parameter, input string) url.Values {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\t// If it's an array or object, handle the serialization style\n\t\t\tif res.IsArray() {\n",
                    "rendered": {
                      "text": "// HandleQueryParameters extracts each query parameter from the input JSON and adds it to the URL query.\nfunc HandleQueryParameters(q url.Values, params []Parameter, input string) url.Values {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\t// If it's an array or object, handle the serialization style\n\t\t\tif res.IsArray() {\n",
                      "markdown": "`// HandleQueryParameters extracts each query parameter from the input JSON and adds it to the URL query.\nfunc HandleQueryParameters(q url.Values, params []Parameter, input string) url.Values {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\t// If it's an array or object, handle the serialization style\n\t\t\tif res.IsArray() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 14,
                  "endLine": 221,
                  "endColumn": 19,
                  "snippet": {
                    "text": "// HandlePathParameters extracts each path parameter from the input JSON and replaces its placeholder in the URL path.\nfunc HandlePathParameters(path string, params []Parameter, input string) string {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\t// If it's an array or object, handle the serialization style\n\t\t\tif res.IsArray() {\n",
                    "rendered": {
                      "text": "// HandlePathParameters extracts each path parameter from the input JSON and replaces its placeholder in the URL path.\nfunc HandlePathParameters(path string, params []Parameter, input string) string {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\t// If it's an array or object, handle the serialization style\n\t\t\tif res.IsArray() {\n",
                      "markdown": "`// HandlePathParameters extracts each path parameter from the input JSON and replaces its placeholder in the URL path.\nfunc HandlePathParameters(path string, params []Parameter, input string) string {\n\tfor _, param := range params {\n\t\tres := gjson.Get(input, param.Name)\n\t\tif res.Exists() {\n\t\t\t// If it's an array or object, handle the serialization style\n\t\t\tif res.IsArray() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 14,
                  "endLine": 99,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t// Handle request body\n\tif opInfo.BodyContentMIME != \"\" {\n\t\tres := gjson.Get(args, \"requestBodyContent\")\n\t\tvar body bytes.Buffer\n\t\tswitch opInfo.BodyContentMIME {\n\t\tcase \"application/json\":\n",
                    "rendered": {
                      "text": "\n\t// Handle request body\n\tif opInfo.BodyContentMIME != \"\" {\n\t\tres := gjson.Get(args, \"requestBodyContent\")\n\t\tvar body bytes.Buffer\n\t\tswitch opInfo.BodyContentMIME {\n\t\tcase \"application/json\":\n",
                      "markdown": "`\n\t// Handle request body\n\tif opInfo.BodyContentMIME != \"\" {\n\t\tres := gjson.Get(args, \"requestBodyContent\")\n\t\tvar body bytes.Buffer\n\t\tswitch opInfo.BodyContentMIME {\n\t\tcase \"application/json\":\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 16,
                  "endLine": 82,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\t\t// If there is a bearer token set for the whole server, and no Authorization header has been defined, use it.\n\t\tif token, ok := envMap[\"GPTSCRIPT_\"+env.ToEnvLike(u.Hostname())+\"_BEARER_TOKEN\"]; ok {\n\t\t\tif req.Header.Get(\"Authorization\") == \"\" {\n\t\t\t\treq.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\n\t\t// If there is a bearer token set for the whole server, and no Authorization header has been defined, use it.\n\t\tif token, ok := envMap[\"GPTSCRIPT_\"+env.ToEnvLike(u.Hostname())+\"_BEARER_TOKEN\"]; ok {\n\t\t\tif req.Header.Get(\"Authorization\") == \"\" {\n\t\t\t\treq.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\n\t\t// If there is a bearer token set for the whole server, and no Authorization header has been defined, use it.\n\t\tif token, ok := envMap[\"GPTSCRIPT_\"+env.ToEnvLike(u.Hostname())+\"_BEARER_TOKEN\"]; ok {\n\t\t\tif req.Header.Get(\"Authorization\") == \"\" {\n\t\t\t\treq.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 3,
                  "endLine": 185,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t// Set up the request as needed.\n\t\tv := url.Values{}\n\t\tfor _, info := range infoSet {\n\t\t\tenvNames := maps.Values(info.getCredentialNamesAndEnvVars(req.URL.Hostname()))\n\t\t\tswitch info.Type {\n\t\t\tcase \"apiKey\":\n\t\t\t\tswitch info.In {\n",
                    "rendered": {
                      "text": "\t\t// Set up the request as needed.\n\t\tv := url.Values{}\n\t\tfor _, info := range infoSet {\n\t\t\tenvNames := maps.Values(info.getCredentialNamesAndEnvVars(req.URL.Hostname()))\n\t\t\tswitch info.Type {\n\t\t\tcase \"apiKey\":\n\t\t\t\tswitch info.In {\n",
                      "markdown": "`\t\t// Set up the request as needed.\n\t\tv := url.Values{}\n\t\tfor _, info := range infoSet {\n\t\t\tenvNames := maps.Values(info.getCredentialNamesAndEnvVars(req.URL.Hostname()))\n\t\t\tswitch info.Type {\n\t\t\tcase \"apiKey\":\n\t\t\t\tswitch info.In {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 81,
                  "endLine": 46,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\t}\n\n\tif !validationResult.Valid() {\n\t\t// We don't return an error here because we want the LLM to be able to maintain control and try again.\n\t\treturn fmt.Sprintf(\"invalid arguments for operation %s: %s\", operationID, validationResult.Errors()), true, nil\n\t}\n\n",
                    "rendered": {
                      "text": "\t}\n\n\tif !validationResult.Valid() {\n\t\t// We don't return an error here because we want the LLM to be able to maintain control and try again.\n\t\treturn fmt.Sprintf(\"invalid arguments for operation %s: %s\", operationID, validationResult.Errors()), true, nil\n\t}\n\n",
                      "markdown": "`\t}\n\n\tif !validationResult.Valid() {\n\t\t// We don't return an error here because we want the LLM to be able to maintain control and try again.\n\t\treturn fmt.Sprintf(\"invalid arguments for operation %s: %s\", operationID, validationResult.Errors()), true, nil\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 81,
                  "endLine": 41,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\t// Validate args against the schema.\n\tvalidationResult, err := gojsonschema.Validate(gojsonschema.NewStringLoader(schemaJSON), gojsonschema.NewStringLoader(args))\n\tif err != nil {\n\t\t// We don't return an error here because we want the LLM to be able to maintain control and try again.\n\t\treturn fmt.Sprintf(\"ERROR: failed to validate arguments. Make sure your arguments are valid JSON. %v\", err), true, nil\n\t}\n\n",
                    "rendered": {
                      "text": "\t// Validate args against the schema.\n\tvalidationResult, err := gojsonschema.Validate(gojsonschema.NewStringLoader(schemaJSON), gojsonschema.NewStringLoader(args))\n\tif err != nil {\n\t\t// We don't return an error here because we want the LLM to be able to maintain control and try again.\n\t\treturn fmt.Sprintf(\"ERROR: failed to validate arguments. Make sure your arguments are valid JSON. %v\", err), true, nil\n\t}\n\n",
                      "markdown": "`\t// Validate args against the schema.\n\tvalidationResult, err := gojsonschema.Validate(gojsonschema.NewStringLoader(schemaJSON), gojsonschema.NewStringLoader(args))\n\tif err != nil {\n\t\t// We don't return an error here because we want the LLM to be able to maintain control and try again.\n\t\treturn fmt.Sprintf(\"ERROR: failed to validate arguments. Make sure your arguments are valid JSON. %v\", err), true, nil\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 27,
                  "endLine": 214,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"did not find the needed environment variables for any of the security options. \"+\n\t\t\"At least one of these sets of environment variables must be provided: %v\", missingVariables)\n}\n\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"did not find the needed environment variables for any of the security options. \"+\n\t\t\"At least one of these sets of environment variables must be provided: %v\", missingVariables)\n}\n\n",
                      "markdown": "`\t\treturn nil\n\t}\n\n\treturn fmt.Errorf(\"did not find the needed environment variables for any of the security options. \"+\n\t\t\"At least one of these sets of environment variables must be provided: %v\", missingVariables)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/run.go"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 14,
                  "endLine": 164,
                  "endColumn": 20,
                  "snippet": {
                    "text": "func HandleAuths(req *http.Request, envMap map[string]string, infoSets [][]SecurityInfo) error {\n\tvar missingVariables [][]string\n\n\t// We need to find a set of infos where we have all the needed environment variables.\n\tfor _, infoSet := range infoSets {\n\t\tvar missing []string // Keep track of any missing environment variables\n\t\tfor _, info := range infoSet {\n",
                    "rendered": {
                      "text": "func HandleAuths(req *http.Request, envMap map[string]string, infoSets [][]SecurityInfo) error {\n\tvar missingVariables [][]string\n\n\t// We need to find a set of infos where we have all the needed environment variables.\n\tfor _, infoSet := range infoSets {\n\t\tvar missing []string // Keep track of any missing environment variables\n\t\tfor _, info := range infoSet {\n",
                      "markdown": "`func HandleAuths(req *http.Request, envMap map[string]string, infoSets [][]SecurityInfo) error {\n\tvar missingVariables [][]string\n\n\t// We need to find a set of infos where we have all the needed environment variables.\n\tfor _, infoSet := range infoSets {\n\t\tvar missing []string // Keep track of any missing environment variables\n\t\tfor _, info := range infoSet {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/openapi/load.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 32,
                  "endLine": 27,
                  "endColumn": 37,
                  "snippet": {
                    "text": "}\n\nfunc loadFromURL(source string) (*openapi3.T, error) {\n\tresp, err := http.DefaultClient.Get(source)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc loadFromURL(source string) (*openapi3.T, error) {\n\tresp, err := http.DefaultClient.Get(source)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`}\n\nfunc loadFromURL(source string) (*openapi3.T, error) {\n\tresp, err := http.DefaultClient.Get(source)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/remote/remote.go"
                },
                "region": {
                  "startLine": 119,
                  "endLine": 119,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tif err != nil {\n\t\treturn nil, err\n\t}\n\tenv := \"GPTSCRIPT_PROVIDER_\" + env2.ToEnvLike(parsed.Hostname()) + \"_API_KEY\"\n\tkey := os.Getenv(env)\n\n\tif key == \"\" && !isLocalhost(apiURL) {\n",
                    "rendered": {
                      "text": "\tif err != nil {\n\t\treturn nil, err\n\t}\n\tenv := \"GPTSCRIPT_PROVIDER_\" + env2.ToEnvLike(parsed.Hostname()) + \"_API_KEY\"\n\tkey := os.Getenv(env)\n\n\tif key == \"\" && !isLocalhost(apiURL) {\n",
                      "markdown": "`\tif err != nil {\n\t\treturn nil, err\n\t}\n\tenv := \"GPTSCRIPT_PROVIDER_\" + env2.ToEnvLike(parsed.Hostname()) + \"_API_KEY\"\n\tkey := os.Getenv(env)\n\n\tif key == \"\" && !isLocalhost(apiURL) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/remote/remote.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 35,
                  "endLine": 48,
                  "endColumn": 41,
                  "snippet": {
                    "text": "func (c *Client) Call(ctx context.Context, messageRequest types.CompletionRequest, status chan<- types.CompletionStatus) (*types.CompletionMessage, error) {\n\t_, provider := c.parseModel(messageRequest.Model)\n\tif provider == \"\" {\n\t\treturn nil, fmt.Errorf(\"failed to find remote model %s\", messageRequest.Model)\n\t}\n\n\tclient, err := c.load(ctx, provider)\n",
                    "rendered": {
                      "text": "func (c *Client) Call(ctx context.Context, messageRequest types.CompletionRequest, status chan<- types.CompletionStatus) (*types.CompletionMessage, error) {\n\t_, provider := c.parseModel(messageRequest.Model)\n\tif provider == \"\" {\n\t\treturn nil, fmt.Errorf(\"failed to find remote model %s\", messageRequest.Model)\n\t}\n\n\tclient, err := c.load(ctx, provider)\n",
                      "markdown": "`func (c *Client) Call(ctx context.Context, messageRequest types.CompletionRequest, status chan<- types.CompletionStatus) (*types.CompletionMessage, error) {\n\t_, provider := c.parseModel(messageRequest.Model)\n\tif provider == \"\" {\n\t\treturn nil, fmt.Errorf(\"failed to find remote model %s\", messageRequest.Model)\n\t}\n\n\tclient, err := c.load(ctx, provider)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/scripts/cred_expiration.gpt"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 18,
                  "endLine": 23,
                  "snippet": {
                    "text": "\nclass Output:\n    def __init__(self, env, expires_at):\n        self.env = env\n        self.expiresAt = expires_at\n\n    def to_dict(self):\n        return {\n",
                    "rendered": {
                      "text": "\nclass Output:\n    def __init__(self, env, expires_at):\n        self.env = env\n        self.expiresAt = expires_at\n\n    def to_dict(self):\n        return {\n",
                      "markdown": "`\nclass Output:\n    def __init__(self, env, expires_at):\n        self.env = env\n        self.expiresAt = expires_at\n\n    def to_dict(self):\n        return {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/scripts/cred_stacked.gpt"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 18,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: cred_one\n",
                    "rendered": {
                      "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: cred_one\n",
                      "markdown": "`\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: cred_one\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/scripts/cred_stacked.gpt"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 16,
                  "endLine": 8,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: testcred_two\n",
                    "rendered": {
                      "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: testcred_two\n",
                      "markdown": "`\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: testcred_two\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/scripts/cred_stacked.gpt"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 9,
                  "endLine": 18,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: cred_one\n",
                    "rendered": {
                      "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: cred_one\n",
                      "markdown": "`\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: cred_one\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/scripts/cred_stacked.gpt"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 9,
                  "endLine": 8,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: testcred_two\n",
                    "rendered": {
                      "text": "\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: testcred_two\n",
                      "markdown": "`\nimport os\n\nprint(os.environ.get(\"VALUE\"))\n\n---\nname: testcred_two\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/08-workspace.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 101,
                  "endLine": 16,
                  "endColumn": 109,
                  "snippet": {
                    "text": "The workspace directory is no longer temporary if it is explicitly set, and everything in it will persist after the script has finished running.\nBoth absolute and relative paths are supported.\n\nRegardless of whether it is set implicitly or explicitly, the workspace is then made available to the script execution as the `GPTSCRIPT_WORKSPACE_DIR` environment variable.\n\n:::info\nGPTScript does not force scripts or tools to write to, read from, or otherwise use the workspace.\n",
                    "rendered": {
                      "text": "The workspace directory is no longer temporary if it is explicitly set, and everything in it will persist after the script has finished running.\nBoth absolute and relative paths are supported.\n\nRegardless of whether it is set implicitly or explicitly, the workspace is then made available to the script execution as the `GPTSCRIPT_WORKSPACE_DIR` environment variable.\n\n:::info\nGPTScript does not force scripts or tools to write to, read from, or otherwise use the workspace.\n",
                      "markdown": "`The workspace directory is no longer temporary if it is explicitly set, and everything in it will persist after the script has finished running.\nBoth absolute and relative paths are supported.\n\nRegardless of whether it is set implicitly or explicitly, the workspace is then made available to the script execution as the `GPTSCRIPT_WORKSPACE_DIR` environment variable.\n\n:::info\nGPTScript does not force scripts or tools to write to, read from, or otherwise use the workspace.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/08-workspace.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 115,
                  "endLine": 13,
                  "endColumn": 123,
                  "snippet": {
                    "text": "```\n\nIn the above example, the user’s current directory (denoted by `.`) will be set as the workspace.\nThe workspace directory is no longer temporary if it is explicitly set, and everything in it will persist after the script has finished running.\nBoth absolute and relative paths are supported.\n\nRegardless of whether it is set implicitly or explicitly, the workspace is then made available to the script execution as the `GPTSCRIPT_WORKSPACE_DIR` environment variable.\n",
                    "rendered": {
                      "text": "```\n\nIn the above example, the user’s current directory (denoted by `.`) will be set as the workspace.\nThe workspace directory is no longer temporary if it is explicitly set, and everything in it will persist after the script has finished running.\nBoth absolute and relative paths are supported.\n\nRegardless of whether it is set implicitly or explicitly, the workspace is then made available to the script execution as the `GPTSCRIPT_WORKSPACE_DIR` environment variable.\n",
                      "markdown": "````\n\nIn the above example, the user’s current directory (denoted by `.`) will be set as the workspace.\nThe workspace directory is no longer temporary if it is explicitly set, and everything in it will persist after the script has finished running.\nBoth absolute and relative paths are supported.\n\nRegardless of whether it is set implicitly or explicitly, the workspace is then made available to the script execution as the `GPTSCRIPT_WORKSPACE_DIR` environment variable.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 43,
                  "endLine": 124,
                  "endColumn": 47,
                  "snippet": {
                    "text": "Unlike the Python and Node cases above where you can name the file anything you want, Go tools must be `#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool`.\n:::\n\nGPTScript will build the Go program located at `./main.go` to a file called `./bin/gptscript-go-tool` before running the tool.\nAll of your dependencies need to be properly specified in a `go.mod` file.\n\nThe file structure should look something like this:\n",
                    "rendered": {
                      "text": "Unlike the Python and Node cases above where you can name the file anything you want, Go tools must be `#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool`.\n:::\n\nGPTScript will build the Go program located at `./main.go` to a file called `./bin/gptscript-go-tool` before running the tool.\nAll of your dependencies need to be properly specified in a `go.mod` file.\n\nThe file structure should look something like this:\n",
                      "markdown": "`Unlike the Python and Node cases above where you can name the file anything you want, Go tools must be `#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool`.\n:::\n\nGPTScript will build the Go program located at `./main.go` to a file called `./bin/gptscript-go-tool` before running the tool.\nAll of your dependencies need to be properly specified in a `go.mod` file.\n\nThe file structure should look something like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 90,
                  "endLine": 98,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\n### `package.json` file\n\nIf your Node program needs any external dependencies, you can create a `package.json` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n",
                    "rendered": {
                      "text": "\n### `package.json` file\n\nIf your Node program needs any external dependencies, you can create a `package.json` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n",
                      "markdown": "`\n### `package.json` file\n\nIf your Node program needs any external dependencies, you can create a `package.json` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 96,
                  "endLine": 58,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n### `requirements.txt` file\n\nIf your Python program needs any external dependencies, you can create a `requirements.txt` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n",
                    "rendered": {
                      "text": "\n### `requirements.txt` file\n\nIf your Python program needs any external dependencies, you can create a `requirements.txt` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n",
                      "markdown": "`\n### `requirements.txt` file\n\nIf your Python program needs any external dependencies, you can create a `requirements.txt` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 21,
                  "endLine": 121,
                  "endColumn": 27,
                  "snippet": {
                    "text": "```\n\n:::important\nUnlike the Python and Node cases above where you can name the file anything you want, Go tools must be `#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool`.\n:::\n\nGPTScript will build the Go program located at `./main.go` to a file called `./bin/gptscript-go-tool` before running the tool.\n",
                    "rendered": {
                      "text": "```\n\n:::important\nUnlike the Python and Node cases above where you can name the file anything you want, Go tools must be `#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool`.\n:::\n\nGPTScript will build the Go program located at `./main.go` to a file called `./bin/gptscript-go-tool` before running the tool.\n",
                      "markdown": "````\n\n:::important\nUnlike the Python and Node cases above where you can name the file anything you want, Go tools must be `#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool`.\n:::\n\nGPTScript will build the Go program located at `./main.go` to a file called `./bin/gptscript-go-tool` before running the tool.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 7,
                  "endLine": 98,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n### `package.json` file\n\nIf your Node program needs any external dependencies, you can create a `package.json` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n",
                    "rendered": {
                      "text": "\n### `package.json` file\n\nIf your Node program needs any external dependencies, you can create a `package.json` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n",
                      "markdown": "`\n### `package.json` file\n\nIf your Node program needs any external dependencies, you can create a `package.json` file at the same level as\nyour `tool.gpt`/`agent.gpt` file. GPTScript will handle downloading the dependencies before it runs the tool.\n\nThe file structure should look something like this:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 50,
                  "endLine": 94,
                  "endColumn": 56,
                  "snippet": {
                    "text": "#!/usr/bin/env node ${GPTSCRIPT_TOOL_DIR}/tool.js\n```\n\n(This example assumes that your entrypoint to your Node program is in a file called `tool.js`. You can call it what you want.)\n\n### `package.json` file\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env node ${GPTSCRIPT_TOOL_DIR}/tool.js\n```\n\n(This example assumes that your entrypoint to your Node program is in a file called `tool.js`. You can call it what you want.)\n\n### `package.json` file\n\n",
                      "markdown": "`#!/usr/bin/env node ${GPTSCRIPT_TOOL_DIR}/tool.js\n```\n\n(This example assumes that your entrypoint to your Node program is in a file called `tool.js`. You can call it what you want.)\n\n### `package.json` file\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 14,
                  "endLine": 91,
                  "endColumn": 20,
                  "snippet": {
                    "text": "```\nName: my-node-tool\n\n#!/usr/bin/env node ${GPTSCRIPT_TOOL_DIR}/tool.js\n```\n\n(This example assumes that your entrypoint to your Node program is in a file called `tool.js`. You can call it what you want.)\n",
                    "rendered": {
                      "text": "```\nName: my-node-tool\n\n#!/usr/bin/env node ${GPTSCRIPT_TOOL_DIR}/tool.js\n```\n\n(This example assumes that your entrypoint to your Node program is in a file called `tool.js`. You can call it what you want.)\n",
                      "markdown": "````\nName: my-node-tool\n\n#!/usr/bin/env node ${GPTSCRIPT_TOOL_DIR}/tool.js\n```\n\n(This example assumes that your entrypoint to your Node program is in a file called `tool.js`. You can call it what you want.)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 87,
                  "endLine": 86,
                  "endColumn": 93,
                  "snippet": {
                    "text": "\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Node script in your repo, like this:\n\n```\nName: my-node-tool\n",
                    "rendered": {
                      "text": "\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Node script in your repo, like this:\n\n```\nName: my-node-tool\n",
                      "markdown": "`\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Node script in your repo, like this:\n\n```\nName: my-node-tool\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 84,
                  "endColumn": 17,
                  "snippet": {
                    "text": "console.log('hello world')\n```\n\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Node script in your repo, like this:\n\n",
                    "rendered": {
                      "text": "console.log('hello world')\n```\n\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Node script in your repo, like this:\n\n",
                      "markdown": "`console.log('hello world')\n```\n\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Node script in your repo, like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 93,
                  "endLine": 74,
                  "endColumn": 101,
                  "snippet": {
                    "text": "\n### Calling Node.js in the tool body\n\nThe body of the `tool.gpt`/`agent.gpt` file needs to call Node. This can be done as an inline script like this:\n\n```\nName: my-node-tool\n",
                    "rendered": {
                      "text": "\n### Calling Node.js in the tool body\n\nThe body of the `tool.gpt`/`agent.gpt` file needs to call Node. This can be done as an inline script like this:\n\n```\nName: my-node-tool\n",
                      "markdown": "`\n### Calling Node.js in the tool body\n\nThe body of the `tool.gpt`/`agent.gpt` file needs to call Node. This can be done as an inline script like this:\n\n```\nName: my-node-tool\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 94,
                  "endLine": 46,
                  "endColumn": 102,
                  "snippet": {
                    "text": "\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Python script in your repo, like this:\n\n```\nName: my-python-tool\n",
                    "rendered": {
                      "text": "\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Python script in your repo, like this:\n\n```\nName: my-python-tool\n",
                      "markdown": "`\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Python script in your repo, like this:\n\n```\nName: my-python-tool\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 9,
                  "endLine": 44,
                  "endColumn": 17,
                  "snippet": {
                    "text": "print('hello world')\n```\n\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Python script in your repo, like this:\n\n",
                    "rendered": {
                      "text": "print('hello world')\n```\n\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Python script in your repo, like this:\n\n",
                      "markdown": "`print('hello world')\n```\n\nAn inline script like this is only recommended for simple use cases that don't need external dependencies.\n\nIf your use case is more complex or requires external dependencies, you can reference a Python script in your repo, like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/09-code-tool-guidelines.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 95,
                  "endLine": 34,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\n### Calling Python in the tool body\n\nThe body of the `tool.gpt`/`agent.gpt` file needs to call Python. This can be done as an inline script like this:\n\n```\nName: my-python-tool\n",
                    "rendered": {
                      "text": "\n### Calling Python in the tool body\n\nThe body of the `tool.gpt`/`agent.gpt` file needs to call Python. This can be done as an inline script like this:\n\n```\nName: my-python-tool\n",
                      "markdown": "`\n### Calling Python in the tool body\n\nThe body of the `tool.gpt`/`agent.gpt` file needs to call Python. This can be done as an inline script like this:\n\n```\nName: my-python-tool\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 3,
                  "endLine": 166,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nYou can launch it via:\n\n```\ngpscript workflow-demo.gpt\n```\n\nWhich should produce a `tweets.md` file in the current directory:\n",
                    "rendered": {
                      "text": "\nYou can launch it via:\n\n```\ngpscript workflow-demo.gpt\n```\n\nWhich should produce a `tweets.md` file in the current directory:\n",
                      "markdown": "`\nYou can launch it via:\n\n```\ngpscript workflow-demo.gpt\n```\n\nWhich should produce a `tweets.md` file in the current directory:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 26,
                  "endLine": 160,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Tools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\nBriefly summarize the page at ${url}.\n```\n\nYou can launch it via:\n",
                    "rendered": {
                      "text": "Tools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\nBriefly summarize the page at ${url}.\n```\n\nYou can launch it via:\n",
                      "markdown": "`Tools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\nBriefly summarize the page at ${url}.\n```\n\nYou can launch it via:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 42,
                  "endLine": 156,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n---\nName: summarize-hyperlink\nDescription: Returns a summary of the page at a given hyperlink URL\nTools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\n",
                    "rendered": {
                      "text": "\n---\nName: summarize-hyperlink\nDescription: Returns a summary of the page at a given hyperlink URL\nTools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\n",
                      "markdown": "`\n---\nName: summarize-hyperlink\nDescription: Returns a summary of the page at a given hyperlink URL\nTools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 48,
                  "endLine": 137,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Tools: get-hyperlinks, summarize-hyperlink, github.com/gptscript-ai/browser\nParameters: url: Absolute URL of the tweet to summarize\n\nReturn a markdown formatted summary of the tweet at ${url} using the following format:\n\n## <tweet-date> [<tweet-subject>](${url})\n\n",
                    "rendered": {
                      "text": "Tools: get-hyperlinks, summarize-hyperlink, github.com/gptscript-ai/browser\nParameters: url: Absolute URL of the tweet to summarize\n\nReturn a markdown formatted summary of the tweet at ${url} using the following format:\n\n## <tweet-date> [<tweet-subject>](${url})\n\n",
                      "markdown": "`Tools: get-hyperlinks, summarize-hyperlink, github.com/gptscript-ai/browser\nParameters: url: Absolute URL of the tweet to summarize\n\nReturn a markdown formatted summary of the tweet at ${url} using the following format:\n\n## <tweet-date> [<tweet-subject>](${url})\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 38,
                  "endLine": 127,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nAlways summarize tweets synchronously in the order they appear.\nNever summarize tweets in parallel.\nWrite all the summaries for the tweets at the following URLs to `tweets.md`:\n- https://x.com/acornlabs/status/1798063732394000559\n- https://x.com/acornlabs/status/1797998244447900084\n\n",
                    "rendered": {
                      "text": "\nAlways summarize tweets synchronously in the order they appear.\nNever summarize tweets in parallel.\nWrite all the summaries for the tweets at the following URLs to `tweets.md`:\n- https://x.com/acornlabs/status/1798063732394000559\n- https://x.com/acornlabs/status/1797998244447900084\n\n",
                      "markdown": "`\nAlways summarize tweets synchronously in the order they appear.\nNever summarize tweets in parallel.\nWrite all the summaries for the tweets at the following URLs to `tweets.md`:\n- https://x.com/acornlabs/status/1798063732394000559\n- https://x.com/acornlabs/status/1797998244447900084\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n## Putting it all together\n\nLet's take a look at this script as one cohesive file:\n\n```\nDescription: Summarize tweets\n",
                    "rendered": {
                      "text": "\n## Putting it all together\n\nLet's take a look at this script as one cohesive file:\n\n```\nDescription: Summarize tweets\n",
                      "markdown": "`\n## Putting it all together\n\nLet's take a look at this script as one cohesive file:\n\n```\nDescription: Summarize tweets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 62,
                  "endLine": 115,
                  "endColumn": 66,
                  "snippet": {
                    "text": "```\n\nAs we can see above, `get-hyperlinks` takes the raw text of the tweet and returns any hyperlinks it finds, while `summarize-hyperlink`\nuses the `github.com/gptscript-ai/browser` tool to get content at a URL and returns a summary of it.\n\n## Putting it all together\n\n",
                    "rendered": {
                      "text": "```\n\nAs we can see above, `get-hyperlinks` takes the raw text of the tweet and returns any hyperlinks it finds, while `summarize-hyperlink`\nuses the `github.com/gptscript-ai/browser` tool to get content at a URL and returns a summary of it.\n\n## Putting it all together\n\n",
                      "markdown": "````\n\nAs we can see above, `get-hyperlinks` takes the raw text of the tweet and returns any hyperlinks it finds, while `summarize-hyperlink`\nuses the `github.com/gptscript-ai/browser` tool to get content at a URL and returns a summary of it.\n\n## Putting it all together\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 26,
                  "endLine": 111,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Tools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\nBriefly summarize the page at ${url}.\n```\n\nAs we can see above, `get-hyperlinks` takes the raw text of the tweet and returns any hyperlinks it finds, while `summarize-hyperlink`\n",
                    "rendered": {
                      "text": "Tools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\nBriefly summarize the page at ${url}.\n```\n\nAs we can see above, `get-hyperlinks` takes the raw text of the tweet and returns any hyperlinks it finds, while `summarize-hyperlink`\n",
                      "markdown": "`Tools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\nBriefly summarize the page at ${url}.\n```\n\nAs we can see above, `get-hyperlinks` takes the raw text of the tweet and returns any hyperlinks it finds, while `summarize-hyperlink`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 42,
                  "endLine": 107,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n---\nName: summarize-hyperlink\nDescription: Returns a summary of the page at a given hyperlink URL\nTools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\n",
                    "rendered": {
                      "text": "\n---\nName: summarize-hyperlink\nDescription: Returns a summary of the page at a given hyperlink URL\nTools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\n",
                      "markdown": "`\n---\nName: summarize-hyperlink\nDescription: Returns a summary of the page at a given hyperlink URL\nTools: github.com/gptscript-ai/browser\nParameters: url: HTTPS URL of a page to summarize\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 48,
                  "endLine": 73,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Tools: get-hyperlinks, summarize-hyperlink, github.com/gptscript-ai/browser\nParameters: url: URL of the tweet to summarize\n\nReturn a markdown formatted summary of the tweet at ${url} using the following format:\n\n## <tweet-date> [<tweet-subject>](${url})\n\n",
                    "rendered": {
                      "text": "Tools: get-hyperlinks, summarize-hyperlink, github.com/gptscript-ai/browser\nParameters: url: URL of the tweet to summarize\n\nReturn a markdown formatted summary of the tweet at ${url} using the following format:\n\n## <tweet-date> [<tweet-subject>](${url})\n\n",
                      "markdown": "`Tools: get-hyperlinks, summarize-hyperlink, github.com/gptscript-ai/browser\nParameters: url: URL of the tweet to summarize\n\nReturn a markdown formatted summary of the tweet at ${url} using the following format:\n\n## <tweet-date> [<tweet-subject>](${url})\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 58,
                  "endColumn": 3,
                  "snippet": {
                    "text": "  - `summarize-tweet` is a custom tool that encapsulates how each tweet gets summarized. We'll define this tool in the next step.\n- ensures tweets are never summarized in parallel so that they are summarized in the correct order\n- defines the tweet URLs to summarize and the file to write them to\n\nAt a high-level, it's getting the summaries for two tweets and storing them in the `tweets.md` file.\n\n## Tweet Summarization Tool\n\n",
                    "rendered": {
                      "text": "  - `summarize-tweet` is a custom tool that encapsulates how each tweet gets summarized. We'll define this tool in the next step.\n- ensures tweets are never summarized in parallel so that they are summarized in the correct order\n- defines the tweet URLs to summarize and the file to write them to\n\nAt a high-level, it's getting the summaries for two tweets and storing them in the `tweets.md` file.\n\n## Tweet Summarization Tool\n\n",
                      "markdown": "`  - `summarize-tweet` is a custom tool that encapsulates how each tweet gets summarized. We'll define this tool in the next step.\n- ensures tweets are never summarized in parallel so that they are summarized in the correct order\n- defines the tweet URLs to summarize and the file to write them to\n\nAt a high-level, it's getting the summaries for two tweets and storing them in the `tweets.md` file.\n\n## Tweet Summarization Tool\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 38,
                  "endLine": 44,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\nAlways summarize tweets synchronously in the order they appear.\nNever summarize tweets in parallel.\nWrite all the summaries for the tweets at the following URLs to `tweets.md`:\n- https://x.com/acornlabs/status/1798063732394000559\n- https://x.com/acornlabs/status/1797998244447900084\n```\n",
                    "rendered": {
                      "text": "\nAlways summarize tweets synchronously in the order they appear.\nNever summarize tweets in parallel.\nWrite all the summaries for the tweets at the following URLs to `tweets.md`:\n- https://x.com/acornlabs/status/1798063732394000559\n- https://x.com/acornlabs/status/1797998244447900084\n```\n",
                      "markdown": "`\nAlways summarize tweets synchronously in the order they appear.\nNever summarize tweets in parallel.\nWrite all the summaries for the tweets at the following URLs to `tweets.md`:\n- https://x.com/acornlabs/status/1798063732394000559\n- https://x.com/acornlabs/status/1797998244447900084\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 47,
                  "endLine": 30,
                  "endColumn": 51,
                  "snippet": {
                    "text": "vim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n\n## Workflow Entrypoint \n\n",
                    "rendered": {
                      "text": "vim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n\n## Workflow Entrypoint \n\n",
                      "markdown": "`vim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n\n## Workflow Entrypoint \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 25,
                  "endLine": 119,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n## Putting it all together\n\nLet's take a look at this script as one cohesive file:\n\n```\nDescription: Summarize tweets\n",
                    "rendered": {
                      "text": "\n## Putting it all together\n\nLet's take a look at this script as one cohesive file:\n\n```\nDescription: Summarize tweets\n",
                      "markdown": "`\n## Putting it all together\n\nLet's take a look at this script as one cohesive file:\n\n```\nDescription: Summarize tweets\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 82,
                  "endLine": 30,
                  "endColumn": 90,
                  "snippet": {
                    "text": "vim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n\n## Workflow Entrypoint \n\n",
                    "rendered": {
                      "text": "vim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n\n## Workflow Entrypoint \n\n",
                      "markdown": "`vim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n\n## Workflow Entrypoint \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nFirst, open up a new GPTScript file in your favorite editor. We'll call the file `workflow-demo.gpt`\n\n```\nvim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n",
                    "rendered": {
                      "text": "\nFirst, open up a new GPTScript file in your favorite editor. We'll call the file `workflow-demo.gpt`\n\n```\nvim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n",
                      "markdown": "`\nFirst, open up a new GPTScript file in your favorite editor. We'll call the file `workflow-demo.gpt`\n\n```\nvim workflow-demo.gpt\n```\n\nAll edits below are assumed to be in this file. At the end, we'll share the entire script as one cohesive file, but along the way we'll just be adding tools one-by-one.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 51,
                  "endLine": 20,
                  "endColumn": 59,
                  "snippet": {
                    "text": "gptscript github.com/gptscript-ai/workflow-demo\n```\n\nOr if you want to skip ahead and just grab the full script so that you can start hacking on it, jump to the [Putting it all together section](workflow#putting-it-all-together).\n\n## Getting Started\n\n",
                    "rendered": {
                      "text": "gptscript github.com/gptscript-ai/workflow-demo\n```\n\nOr if you want to skip ahead and just grab the full script so that you can start hacking on it, jump to the [Putting it all together section](workflow#putting-it-all-together).\n\n## Getting Started\n\n",
                      "markdown": "`gptscript github.com/gptscript-ai/workflow-demo\n```\n\nOr if you want to skip ahead and just grab the full script so that you can start hacking on it, jump to the [Putting it all together section](workflow#putting-it-all-together).\n\n## Getting Started\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/05-workflow.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 24,
                  "endLine": 14,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n## Too long; didn't read\n\nWant to start using this script now? Just run:\n\n```\ngptscript github.com/gptscript-ai/workflow-demo\n",
                    "rendered": {
                      "text": "\n## Too long; didn't read\n\nWant to start using this script now? Just run:\n\n```\ngptscript github.com/gptscript-ai/workflow-demo\n",
                      "markdown": "`\n## Too long; didn't read\n\nWant to start using this script now? Just run:\n\n```\ngptscript github.com/gptscript-ai/workflow-demo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/README-USECASES.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 34,
                  "endLine": 35,
                  "endColumn": 40,
                  "snippet": {
                    "text": " Oracle DB | Implement query tools using database command line tools such as `sqlite` and `mysql` [Link to example]|\n| An ElasticSearch/OpenSearch database storing logs or other text files | Implement query tools using database command line tools [Link to example]|\n| Other databases such as graph or time series databases | Implement query tools using database command line tools [Link to example]|\n\n## Task Automation\n\n### Planning\n\nHere is a GPTScript that produces a detailed travel itinerary based on inputs from a user: [`travel-agent.gpt`](../examples/travel-agent.gpt)\n\n### Web UI Automation\n\nHere ",
                    "rendered": {
                      "text": " Oracle DB | Implement query tools using database command line tools such as `sqlite` and `mysql` [Link to example]|\n| An ElasticSearch/OpenSearch database storing logs or other text files | Implement query tools using database command line tools [Link to example]|\n| Other databases such as graph or time series databases | Implement query tools using database command line tools [Link to example]|\n\n## Task Automation\n\n### Planning\n\nHere is a GPTScript that produces a detailed travel itinerary based on inputs from a user: [`travel-agent.gpt`](../examples/travel-agent.gpt)\n\n### Web UI Automation\n\nHere ",
                      "markdown": "` Oracle DB | Implement query tools using database command line tools such as `sqlite` and `mysql` [Link to example]|\n| An ElasticSearch/OpenSearch database storing logs or other text files | Implement query tools using database command line tools [Link to example]|\n| Other databases such as graph or time series databases | Implement query tools using database command line tools [Link to example]|\n\n## Task Automation\n\n### Planning\n\nHere is a GPTScript that produces a detailed travel itinerary based on inputs from a user: [`travel-agent.gpt`](../examples/travel-agent.gpt)\n\n### Web UI Automation\n\nHere `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/README.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "endLine": 21,
                  "snippet": {
                    "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n",
                    "rendered": {
                      "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n",
                      "markdown": "`\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 29,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    Python:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n    Node:\n",
                    "rendered": {
                      "text": "    Python:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n    Node:\n",
                      "markdown": "`    Python:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n    Node:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/README.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 21,
                  "endColumn": 8,
                  "snippet": {
                    "text": "1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n",
                    "rendered": {
                      "text": "1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n",
                      "markdown": "`1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/README.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "endLine": 21,
                  "snippet": {
                    "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n",
                    "rendered": {
                      "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n",
                      "markdown": "`\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/treasure-hunt` directory and install the dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/recipegenerator/templates/index.html"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 78,
                  "endLine": 74,
                  "endColumn": 82,
                  "snippet": {
                    "text": "          \"Finding recipes... Maybe it's a good day for pasta?\",\n          \"Good food takes time, but we'll be quick!\",\n          \"Analyzing ingredients... Let's surprise you with something delicious!\",\n          \"Cooking is like love. It should be entered into with abandon or not at all.\"\n        ];\n\n        document.addEventListener('DOMContentLoaded', function() {\n",
                    "rendered": {
                      "text": "          \"Finding recipes... Maybe it's a good day for pasta?\",\n          \"Good food takes time, but we'll be quick!\",\n          \"Analyzing ingredients... Let's surprise you with something delicious!\",\n          \"Cooking is like love. It should be entered into with abandon or not at all.\"\n        ];\n\n        document.addEventListener('DOMContentLoaded', function() {\n",
                      "markdown": "`          \"Finding recipes... Maybe it's a good day for pasta?\",\n          \"Good food takes time, but we'll be quick!\",\n          \"Analyzing ingredients... Let's surprise you with something delicious!\",\n          \"Cooking is like love. It should be entered into with abandon or not at all.\"\n        ];\n\n        document.addEventListener('DOMContentLoaded', function() {\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/recipegenerator/app.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 41,
                  "endLine": 41,
                  "snippet": {
                    "text": "            file_counter += 1  # Increment the counter for the next file\n\n    try:\n        # Calling the recipegenerator.gpt script\n        subprocess.Popen(f\"gptscript {SCRIPT_PATH}\", shell=True, stdout=subprocess.PIPE).stdout.read()\n        recipe_file_path = os.path.join(app.config['UPLOAD_FOLDER'], RECIPE_FILE_NAME)\n        with open(recipe_file_path, 'r') as recipe_file:\n            recipe_content = recipe_file.read()\n",
                    "rendered": {
                      "text": "            file_counter += 1  # Increment the counter for the next file\n\n    try:\n        # Calling the recipegenerator.gpt script\n        subprocess.Popen(f\"gptscript {SCRIPT_PATH}\", shell=True, stdout=subprocess.PIPE).stdout.read()\n        recipe_file_path = os.path.join(app.config['UPLOAD_FOLDER'], RECIPE_FILE_NAME)\n        with open(recipe_file_path, 'r') as recipe_file:\n            recipe_content = recipe_file.read()\n",
                      "markdown": "`            file_counter += 1  # Increment the counter for the next file\n\n    try:\n        # Calling the recipegenerator.gpt script\n        subprocess.Popen(f\"gptscript {SCRIPT_PATH}\", shell=True, stdout=subprocess.PIPE).stdout.read()\n        recipe_file_path = os.path.join(app.config['UPLOAD_FOLDER'], RECIPE_FILE_NAME)\n        with open(recipe_file_path, 'r') as recipe_file:\n            recipe_content = recipe_file.read()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/recipegenerator/README.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 27,
                  "snippet": {
                    "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n",
                    "rendered": {
                      "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n",
                      "markdown": "`\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/recipegenerator/README.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 3,
                  "endLine": 35,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    Python:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n    Node:\n",
                    "rendered": {
                      "text": "    Python:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n    Node:\n",
                      "markdown": "`    Python:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n    Node:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/recipegenerator/README.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 8,
                  "snippet": {
                    "text": "1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n",
                    "rendered": {
                      "text": "1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n",
                      "markdown": "`1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/recipegenerator/README.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 27,
                  "snippet": {
                    "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n",
                    "rendered": {
                      "text": "\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n",
                      "markdown": "`\n1. Clone the repository:\n\n    ``` bash\n    git clone https://github.com/gptscript-ai/gptscript.git\n    ```\n\n2. Navigate to the `examples/recipegenerator` directory and install the dependencies:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "endLine": 7,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                    "rendered": {
                      "text": "COPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                      "markdown": "`COPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 7,
                  "endLine": 5,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                    "rendered": {
                      "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                      "markdown": "`\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 130,
                  "endLine": 5,
                  "endColumn": 137,
                  "snippet": {
                    "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                    "rendered": {
                      "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                      "markdown": "`\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 64,
                  "endLine": 5,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                    "rendered": {
                      "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                      "markdown": "`\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                    "rendered": {
                      "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                      "markdown": "`\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000104"
          },
          "message": {
            "text": "Backdoor: Curl Bashing",
            "id": "BD000104"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 65,
                  "endLine": 5,
                  "endColumn": 110,
                  "snippet": {
                    "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                    "rendered": {
                      "text": "\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n",
                      "markdown": "`\nCOPY car-notifier.gpt ./car-notifier.gpt\n\nRUN apk update && apk add curl postgresql16-client --no-cache && curl https://get.gptscript.ai/install.sh | sh && mkdir /.cache && chmod 777 /.cache\n\nCMD [\"gptscript\", \"--cache=false\", \"car-notifier.gpt\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/car-notifier.gpt"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nPerform the following actions in this order:\n1. View the contents of https://docs.sendgrid.com/for-developers/sending-email/api-getting-started to learn about the SendGrid API.\n2. Run a cURL command to send an email using the SendGrid API, with the following information:\n   to: <email address> (name: <name>)\n   from: <email address> (name: <name>)\n   reply to: <email address> (name: <name>)\n",
                    "rendered": {
                      "text": "\nPerform the following actions in this order:\n1. View the contents of https://docs.sendgrid.com/for-developers/sending-email/api-getting-started to learn about the SendGrid API.\n2. Run a cURL command to send an email using the SendGrid API, with the following information:\n   to: <email address> (name: <name>)\n   from: <email address> (name: <name>)\n   reply to: <email address> (name: <name>)\n",
                      "markdown": "`\nPerform the following actions in this order:\n1. View the contents of https://docs.sendgrid.com/for-developers/sending-email/api-getting-started to learn about the SendGrid API.\n2. Run a cURL command to send an email using the SendGrid API, with the following information:\n   to: <email address> (name: <name>)\n   from: <email address> (name: <name>)\n   reply to: <email address> (name: <name>)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/car-notifier.gpt"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 41,
                  "endLine": 21,
                  "endColumn": 47,
                  "snippet": {
                    "text": "tools: sys.http.html2text, sys.exec?\n\nIMPORTANT: when setting --header or -H on a cURL command, always use double quotes, never single quotes!\nIMPORTANT: when setting --data or -d on a cURL command, always use single quotes, never double quotes! And always escape newlines! (They should look like \"\\\\n\")\n\nThe SendGrid API key is in the environment variable SENDGRID_API_KEY.\n\n",
                    "rendered": {
                      "text": "tools: sys.http.html2text, sys.exec?\n\nIMPORTANT: when setting --header or -H on a cURL command, always use double quotes, never single quotes!\nIMPORTANT: when setting --data or -d on a cURL command, always use single quotes, never double quotes! And always escape newlines! (They should look like \"\\\\n\")\n\nThe SendGrid API key is in the environment variable SENDGRID_API_KEY.\n\n",
                      "markdown": "`tools: sys.http.html2text, sys.exec?\n\nIMPORTANT: when setting --header or -H on a cURL command, always use double quotes, never single quotes!\nIMPORTANT: when setting --data or -d on a cURL command, always use single quotes, never double quotes! And always escape newlines! (They should look like \"\\\\n\")\n\nThe SendGrid API key is in the environment variable SENDGRID_API_KEY.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/car-notifier.gpt"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 43,
                  "endLine": 20,
                  "endColumn": 49,
                  "snippet": {
                    "text": "args: contents: the contents of the email to send\ntools: sys.http.html2text, sys.exec?\n\nIMPORTANT: when setting --header or -H on a cURL command, always use double quotes, never single quotes!\nIMPORTANT: when setting --data or -d on a cURL command, always use single quotes, never double quotes! And always escape newlines! (They should look like \"\\\\n\")\n\nThe SendGrid API key is in the environment variable SENDGRID_API_KEY.\n",
                    "rendered": {
                      "text": "args: contents: the contents of the email to send\ntools: sys.http.html2text, sys.exec?\n\nIMPORTANT: when setting --header or -H on a cURL command, always use double quotes, never single quotes!\nIMPORTANT: when setting --data or -d on a cURL command, always use single quotes, never double quotes! And always escape newlines! (They should look like \"\\\\n\")\n\nThe SendGrid API key is in the environment variable SENDGRID_API_KEY.\n",
                      "markdown": "`args: contents: the contents of the email to send\ntools: sys.http.html2text, sys.exec?\n\nIMPORTANT: when setting --header or -H on a cURL command, always use double quotes, never single quotes!\nIMPORTANT: when setting --data or -d on a cURL command, always use single quotes, never double quotes! And always escape newlines! (They should look like \"\\\\n\")\n\nThe SendGrid API key is in the environment variable SENDGRID_API_KEY.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/README.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 9,
                  "endLine": 33,
                  "snippet": {
                    "text": "export PGURL=your-postgres-connection-url\nexport SENDGRID_API_KEY=your-sendgrid-api-key\n\n# Run the script\ngptscript --disable-cache car-notifier.gpt\n```\n",
                    "rendered": {
                      "text": "export PGURL=your-postgres-connection-url\nexport SENDGRID_API_KEY=your-sendgrid-api-key\n\n# Run the script\ngptscript --disable-cache car-notifier.gpt\n```\n",
                      "markdown": "`export PGURL=your-postgres-connection-url\nexport SENDGRID_API_KEY=your-sendgrid-api-key\n\n# Run the script\ngptscript --disable-cache car-notifier.gpt\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/README.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 34,
                  "endLine": 25,
                  "endColumn": 40,
                  "snippet": {
                    "text": "Before running the script (or building the Dockerfile), be sure to edit it and fill in\nevery occurrence  of `<email address>` and `<name>`. Unfortunately, there is no\nstraightforward way to provide this information through environment variables, due to\nissues with escaping quotes in the cURL command that the LLM will run.\n\n```bash\n# Set up the environment variables\n",
                    "rendered": {
                      "text": "Before running the script (or building the Dockerfile), be sure to edit it and fill in\nevery occurrence  of `<email address>` and `<name>`. Unfortunately, there is no\nstraightforward way to provide this information through environment variables, due to\nissues with escaping quotes in the cURL command that the LLM will run.\n\n```bash\n# Set up the environment variables\n",
                      "markdown": "`Before running the script (or building the Dockerfile), be sure to edit it and fill in\nevery occurrence  of `<email address>` and `<name>`. Unfortunately, there is no\nstraightforward way to provide this information through environment variables, due to\nissues with escaping quotes in the cURL command that the LLM will run.\n\n```bash\n# Set up the environment variables\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/car-notifier/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 18,
                  "endLine": 22,
                  "endColumn": 26,
                  "snippet": {
                    "text": "- `psql` CLI client for PostgreSQL\n- `curl`\n\nBefore running the script (or building the Dockerfile), be sure to edit it and fill in\nevery occurrence  of `<email address>` and `<name>`. Unfortunately, there is no\nstraightforward way to provide this information through environment variables, due to\nissues with escaping quotes in the cURL command that the LLM will run.\n",
                    "rendered": {
                      "text": "- `psql` CLI client for PostgreSQL\n- `curl`\n\nBefore running the script (or building the Dockerfile), be sure to edit it and fill in\nevery occurrence  of `<email address>` and `<name>`. Unfortunately, there is no\nstraightforward way to provide this information through environment variables, due to\nissues with escaping quotes in the cURL command that the LLM will run.\n",
                      "markdown": "`- `psql` CLI client for PostgreSQL\n- `curl`\n\nBefore running the script (or building the Dockerfile), be sure to edit it and fill in\nevery occurrence  of `<email address>` and `<name>`. Unfortunately, there is no\nstraightforward way to provide this information through environment variables, due to\nissues with escaping quotes in the cURL command that the LLM will run.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-ghaction/workflow.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 10,
                  "endLine": 26,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        echo \"PR_FILES=${PR_FILES}\" >> $GITHUB_ENV\n\n    - name: Install GPTScript\n      run: curl https://get.gptscript.ai/install.sh | sh\n\n    - name: Run GPTScript for Code Review\n      id: run_gptscript\n",
                    "rendered": {
                      "text": "        echo \"PR_FILES=${PR_FILES}\" >> $GITHUB_ENV\n\n    - name: Install GPTScript\n      run: curl https://get.gptscript.ai/install.sh | sh\n\n    - name: Run GPTScript for Code Review\n      id: run_gptscript\n",
                      "markdown": "`        echo \"PR_FILES=${PR_FILES}\" >> $GITHUB_ENV\n\n    - name: Install GPTScript\n      run: curl https://get.gptscript.ai/install.sh | sh\n\n    - name: Run GPTScript for Code Review\n      id: run_gptscript\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000104"
          },
          "message": {
            "text": "Backdoor: Curl Bashing",
            "id": "BD000104"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-ghaction/workflow.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 11,
                  "endLine": 26,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        echo \"PR_FILES=${PR_FILES}\" >> $GITHUB_ENV\n\n    - name: Install GPTScript\n      run: curl https://get.gptscript.ai/install.sh | sh\n\n    - name: Run GPTScript for Code Review\n      id: run_gptscript\n",
                    "rendered": {
                      "text": "        echo \"PR_FILES=${PR_FILES}\" >> $GITHUB_ENV\n\n    - name: Install GPTScript\n      run: curl https://get.gptscript.ai/install.sh | sh\n\n    - name: Run GPTScript for Code Review\n      id: run_gptscript\n",
                      "markdown": "`        echo \"PR_FILES=${PR_FILES}\" >> $GITHUB_ENV\n\n    - name: Install GPTScript\n      run: curl https://get.gptscript.ai/install.sh | sh\n\n    - name: Run GPTScript for Code Review\n      id: run_gptscript\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-ghaction/codereview.gpt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                    "rendered": {
                      "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                      "markdown": "`Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-ghaction/codereview.gpt"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 11,
                  "snippet": {
                    "text": "gh repo --help\ngh pr --help\ngh pr checkout --help\ngh pr diff --help\n",
                    "rendered": {
                      "text": "gh repo --help\ngh pr --help\ngh pr checkout --help\ngh pr diff --help\n",
                      "markdown": "`gh repo --help\ngh pr --help\ngh pr checkout --help\ngh pr diff --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-ghaction/codereview.gpt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                    "rendered": {
                      "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                      "markdown": "`Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestCwd/subtool/test.gpt"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 8,
                  "endLine": 8,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n[ ${X} = ${GPTSCRIPT_TOOL_DIR} ]\ncd $X\necho sub\ncat sub.txt",
                    "rendered": {
                      "text": "\n[ ${X} = ${GPTSCRIPT_TOOL_DIR} ]\ncd $X\necho sub\ncat sub.txt",
                      "markdown": "`\n[ ${X} = ${GPTSCRIPT_TOOL_DIR} ]\ncd $X\necho sub\ncat sub.txt`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestCwd/test.gpt"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 4,
                  "snippet": {
                    "text": "[ \"\" = \"${TOOL_DIR}\" ]\nP=$(pwd)\necho ${GPTSCRIPT_TOOL_DIR##${P}}\ncd $GPTSCRIPT_TOOL_DIR\ncat data.txt",
                    "rendered": {
                      "text": "[ \"\" = \"${TOOL_DIR}\" ]\nP=$(pwd)\necho ${GPTSCRIPT_TOOL_DIR##${P}}\ncd $GPTSCRIPT_TOOL_DIR\ncat data.txt",
                      "markdown": "`[ \"\" = \"${TOOL_DIR}\" ]\nP=$(pwd)\necho ${GPTSCRIPT_TOOL_DIR##${P}}\ncd $GPTSCRIPT_TOOL_DIR\ncat data.txt`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestContextArg/other.gpt"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "endLine": 6,
                  "snippet": {
                    "text": "args: first: an arg\nargs: second: an arg\n\n#!/usr/bin/env bash\necho this is from other context ${FIRST} and then ${SECOND}",
                    "rendered": {
                      "text": "args: first: an arg\nargs: second: an arg\n\n#!/usr/bin/env bash\necho this is from other context ${FIRST} and then ${SECOND}",
                      "markdown": "`args: first: an arg\nargs: second: an arg\n\n#!/usr/bin/env bash\necho this is from other context ${FIRST} and then ${SECOND}`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestContextArg/other.gpt"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "endLine": 6,
                  "snippet": {
                    "text": "args: first: an arg\nargs: second: an arg\n\n#!/usr/bin/env bash\necho this is from other context ${FIRST} and then ${SECOND}",
                    "rendered": {
                      "text": "args: first: an arg\nargs: second: an arg\n\n#!/usr/bin/env bash\necho this is from other context ${FIRST} and then ${SECOND}",
                      "markdown": "`args: first: an arg\nargs: second: an arg\n\n#!/usr/bin/env bash\necho this is from other context ${FIRST} and then ${SECOND}`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "\n#!/bin/bash\n\necho bash works",
                      "markdown": "`\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "endLine": 55,
                  "snippet": {
                    "text": "    }\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "    }\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                      "markdown": "`    }\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 16,
                  "endLine": 3,
                  "snippet": {
                    "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                    "rendered": {
                      "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                      "markdown": "`name: first\ntools: py, node, bash\n\nDummy\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 4,
                  "endLine": 58,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "\n#!/bin/bash\n\necho bash works",
                      "markdown": "`\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "endLine": 55,
                  "snippet": {
                    "text": "    }\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "    }\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                      "markdown": "`    }\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 14,
                  "endLine": 30,
                  "snippet": {
                    "text": "---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\nconsole.log(\"node worked\")\n\n",
                    "rendered": {
                      "text": "---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\nconsole.log(\"node worked\")\n\n",
                      "markdown": "`---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\nconsole.log(\"node worked\")\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 5,
                  "endLine": 28,
                  "snippet": {
                    "text": "requests\n\n---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\n",
                    "rendered": {
                      "text": "requests\n\n---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\n",
                      "markdown": "`requests\n\n---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimes/test.gpt"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 16,
                  "endLine": 3,
                  "snippet": {
                    "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                    "rendered": {
                      "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                      "markdown": "`name: first\ntools: py, node, bash\n\nDummy\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/url.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 20,
                  "endLine": 67,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif ok, err := cache.Get(ctx, cachedKey, &cachedValue); err != nil {\n\t\treturn nil, false, err\n\t} else if ok && (cachedKey.isStatic() || time.Since(cachedValue.Time) < CacheTimeout) {\n\t\treturn cachedValue.Source, true, nil\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif ok, err := cache.Get(ctx, cachedKey, &cachedValue); err != nil {\n\t\treturn nil, false, err\n\t} else if ok && (cachedKey.isStatic() || time.Since(cachedValue.Time) < CacheTimeout) {\n\t\treturn cachedValue.Source, true, nil\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif ok, err := cache.Get(ctx, cachedKey, &cachedValue); err != nil {\n\t\treturn nil, false, err\n\t} else if ok && (cachedKey.isStatic() || time.Since(cachedValue.Time) < CacheTimeout) {\n\t\treturn cachedValue.Source, true, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/url.go"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\ntype cacheValue struct {\n\tSource *source\n\tTime   time.Time\n}\n\nfunc (c *cacheKey) isStatic() bool {\n",
                    "rendered": {
                      "text": "\ntype cacheValue struct {\n\tSource *source\n\tTime   time.Time\n}\n\nfunc (c *cacheKey) isStatic() bool {\n",
                      "markdown": "`\ntype cacheValue struct {\n\tSource *source\n\tTime   time.Time\n}\n\nfunc (c *cacheKey) isStatic() bool {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 892,
                  "startColumn": 18,
                  "endLine": 892,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t}\n\n\tlog.Infof(\"download [%s] to [%s]\", params.URL, params.Location)\n\tresp, err := http.Get(params.URL)\n\tif err != nil {\n\t\treturn fmt.Sprintf(\"failed to download %s: %v\", params.URL, err), nil\n\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\tlog.Infof(\"download [%s] to [%s]\", params.URL, params.Location)\n\tresp, err := http.Get(params.URL)\n\tif err != nil {\n\t\treturn fmt.Sprintf(\"failed to download %s: %v\", params.URL, err), nil\n\t}\n",
                      "markdown": "`\t}\n\n\tlog.Infof(\"download [%s] to [%s]\", params.URL, params.Location)\n\tresp, err := http.Get(params.URL)\n\tif err != nil {\n\t\treturn fmt.Sprintf(\"failed to download %s: %v\", params.URL, err), nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 15,
                  "endLine": 592,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tc := http.Client{Timeout: 10 * time.Second}\n\n\tlog.Debugf(\"http get %s\", params.URL)\n\tresp, err := c.Get(params.URL)\n\tif err != nil {\n\t\treturn fmt.Sprintf(\"Failed to fetch URL %s: %v\", params.URL, err), nil\n\t}\n",
                    "rendered": {
                      "text": "\tc := http.Client{Timeout: 10 * time.Second}\n\n\tlog.Debugf(\"http get %s\", params.URL)\n\tresp, err := c.Get(params.URL)\n\tif err != nil {\n\t\treturn fmt.Sprintf(\"Failed to fetch URL %s: %v\", params.URL, err), nil\n\t}\n",
                      "markdown": "`\tc := http.Client{Timeout: 10 * time.Second}\n\n\tlog.Debugf(\"http get %s\", params.URL)\n\tresp, err := c.Get(params.URL)\n\tif err != nil {\n\t\treturn fmt.Sprintf(\"Failed to fetch URL %s: %v\", params.URL, err), nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 4,
                  "endLine": 361,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\tcombined = io.MultiWriter(&out, &pw)\n\t)\n\n\tif envvars, err := getWorkspaceEnvFileContents(env); err == nil {\n\t\tenv = append(env, envvars...)\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tcombined = io.MultiWriter(&out, &pw)\n\t)\n\n\tif envvars, err := getWorkspaceEnvFileContents(env); err == nil {\n\t\tenv = append(env, envvars...)\n\t}\n\n",
                      "markdown": "`\t\tcombined = io.MultiWriter(&out, &pw)\n\t)\n\n\tif envvars, err := getWorkspaceEnvFileContents(env); err == nil {\n\t\tenv = append(env, envvars...)\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 1,
                  "endLine": 350,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n\t} else {\n\t\tcmd = exec.Command(\"/bin/sh\", \"-c\", params.Command)\n\t}\n\n\tvar (\n",
                    "rendered": {
                      "text": "\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n\t} else {\n\t\tcmd = exec.Command(\"/bin/sh\", \"-c\", params.Command)\n\t}\n\n\tvar (\n",
                      "markdown": "`\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n\t} else {\n\t\tcmd = exec.Command(\"/bin/sh\", \"-c\", params.Command)\n\t}\n\n\tvar (\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 1,
                  "endLine": 348,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tvar cmd *exec.Cmd\n\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n\t} else {\n\t\tcmd = exec.Command(\"/bin/sh\", \"-c\", params.Command)\n\t}\n",
                    "rendered": {
                      "text": "\tvar cmd *exec.Cmd\n\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n\t} else {\n\t\tcmd = exec.Command(\"/bin/sh\", \"-c\", params.Command)\n\t}\n",
                      "markdown": "`\tvar cmd *exec.Cmd\n\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n\t} else {\n\t\tcmd = exec.Command(\"/bin/sh\", \"-c\", params.Command)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 4,
                  "endLine": 345,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\tlog.Debugf(\"Running %s in %s\", params.Command, params.Directory)\n\n\tvar cmd *exec.Cmd\n\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n",
                    "rendered": {
                      "text": "\n\tlog.Debugf(\"Running %s in %s\", params.Command, params.Directory)\n\n\tvar cmd *exec.Cmd\n\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n",
                      "markdown": "`\n\tlog.Debugf(\"Running %s in %s\", params.Command, params.Directory)\n\n\tvar cmd *exec.Cmd\n\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"cmd.exe\", \"/c\", params.Command)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 36,
                  "endLine": 186,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"url\", \"The URL to download, either http or https.\",\n\t\t\t\t\t\"location\", \"(optional) The on disk location to store the file. If no location is specified a temp location will be used. If the target file already exists it will fail unless override is set to true.\",\n\t\t\t\t\t\"override\", \"If true and a file at the location exists, the file will be overwritten, otherwise fail. Default is false\"),\n\t\t\t},\n\t\t\tBuiltinFunc: SysDownload,\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"url\", \"The URL to download, either http or https.\",\n\t\t\t\t\t\"location\", \"(optional) The on disk location to store the file. If no location is specified a temp location will be used. If the target file already exists it will fail unless override is set to true.\",\n\t\t\t\t\t\"override\", \"If true and a file at the location exists, the file will be overwritten, otherwise fail. Default is false\"),\n\t\t\t},\n\t\t\tBuiltinFunc: SysDownload,\n\t\t},\n",
                      "markdown": "`\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"url\", \"The URL to download, either http or https.\",\n\t\t\t\t\t\"location\", \"(optional) The on disk location to store the file. If no location is specified a temp location will be used. If the target file already exists it will fail unless override is set to true.\",\n\t\t\t\t\t\"override\", \"If true and a file at the location exists, the file will be overwritten, otherwise fail. Default is false\"),\n\t\t\t},\n\t\t\tBuiltinFunc: SysDownload,\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 62,
                  "endLine": 182,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\t\"sys.download\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Downloads a URL, saving the contents to disk at a given location\",\n\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"url\", \"The URL to download, either http or https.\",\n\t\t\t\t\t\"location\", \"(optional) The on disk location to store the file. If no location is specified a temp location will be used. If the target file already exists it will fail unless override is set to true.\",\n",
                    "rendered": {
                      "text": "\t\"sys.download\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Downloads a URL, saving the contents to disk at a given location\",\n\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"url\", \"The URL to download, either http or https.\",\n\t\t\t\t\t\"location\", \"(optional) The on disk location to store the file. If no location is specified a temp location will be used. If the target file already exists it will fail unless override is set to true.\",\n",
                      "markdown": "`\t\"sys.download\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Downloads a URL, saving the contents to disk at a given location\",\n\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"url\", \"The URL to download, either http or https.\",\n\t\t\t\t\t\"location\", \"(optional) The on disk location to store the file. If no location is specified a temp location will be used. If the target file already exists it will fail unless override is set to true.\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 35,
                  "endLine": 846,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\treturn fmt.Sprintf(\"%s %s mode: %s, size: %d bytes, modtime: %s\", title, params.Filepath, stat.Mode().String(), stat.Size(), stat.ModTime().String()), nil\n}\n\nfunc SysDownload(_ context.Context, env []string, input string, _ chan<- string) (_ string, err error) {\n\tvar params struct {\n\t\tURL      string `json:\"url,omitempty\"`\n\t\tLocation string `json:\"location,omitempty\"`\n",
                    "rendered": {
                      "text": "\treturn fmt.Sprintf(\"%s %s mode: %s, size: %d bytes, modtime: %s\", title, params.Filepath, stat.Mode().String(), stat.Size(), stat.ModTime().String()), nil\n}\n\nfunc SysDownload(_ context.Context, env []string, input string, _ chan<- string) (_ string, err error) {\n\tvar params struct {\n\t\tURL      string `json:\"url,omitempty\"`\n\t\tLocation string `json:\"location,omitempty\"`\n",
                      "markdown": "`\treturn fmt.Sprintf(\"%s %s mode: %s, size: %d bytes, modtime: %s\", title, params.Filepath, stat.Mode().String(), stat.Size(), stat.ModTime().String()), nil\n}\n\nfunc SysDownload(_ context.Context, env []string, input string, _ chan<- string) (_ string, err error) {\n\tvar params struct {\n\t\tURL      string `json:\"url,omitempty\"`\n\t\tLocation string `json:\"location,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 20,
                  "endLine": 682,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n\t\t\treturn v, nil\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n\t\t\treturn v, nil\n\t\t}\n\t}\n",
                      "markdown": "`\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n\t\t\treturn v, nil\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 20,
                  "endLine": 679,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n",
                    "rendered": {
                      "text": "\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n",
                      "markdown": "`\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 7,
                  "endLine": 679,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n",
                    "rendered": {
                      "text": "\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n",
                      "markdown": "`\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n\t\t\tlog.Debugf(\"found env var %s in local environment\", params.Name)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 23,
                  "endLine": 678,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\treturn invalidArgument(input, err), nil\n\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n",
                    "rendered": {
                      "text": "\t\treturn invalidArgument(input, err), nil\n\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n",
                      "markdown": "`\t\treturn invalidArgument(input, err), nil\n\t}\n\n\tlog.Debugf(\"looking up env var %s\", params.Name)\n\tfor _, env := range env {\n\t\tk, v, ok := strings.Cut(env, \"=\")\n\t\tif ok && k == params.Name {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 33,
                  "endLine": 670,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc SysGetenv(_ context.Context, env []string, input string, _ chan<- string) (string, error) {\n\tvar params struct {\n\t\tName string `json:\"name,omitempty\"`\n\t}\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc SysGetenv(_ context.Context, env []string, input string, _ chan<- string) (string, error) {\n\tvar params struct {\n\t\tName string `json:\"name,omitempty\"`\n\t}\n",
                      "markdown": "`\t}\n}\n\nfunc SysGetenv(_ context.Context, env []string, input string, _ chan<- string) (string, error) {\n\tvar params struct {\n\t\tName string `json:\"name,omitempty\"`\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 42,
                  "endLine": 613,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\treturn string(data), nil\n}\n\nfunc SysHTTPHtml2Text(ctx context.Context, env []string, input string, progress chan<- string) (string, error) {\n\tcontent, err := SysHTTPGet(ctx, env, input, progress)\n\tif err != nil {\n\t\treturn \"\", err\n",
                    "rendered": {
                      "text": "\treturn string(data), nil\n}\n\nfunc SysHTTPHtml2Text(ctx context.Context, env []string, input string, progress chan<- string) (string, error) {\n\tcontent, err := SysHTTPGet(ctx, env, input, progress)\n\tif err != nil {\n\t\treturn \"\", err\n",
                      "markdown": "`\treturn string(data), nil\n}\n\nfunc SysHTTPHtml2Text(ctx context.Context, env []string, input string, progress chan<- string) (string, error) {\n\tcontent, err := SysHTTPGet(ctx, env, input, progress)\n\tif err != nil {\n\t\treturn \"\", err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 7,
                  "endLine": 422,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nfunc getWorkspaceDir(envs []string) (string, error) {\n\tfor _, env := range envs {\n\t\tdir, ok := strings.CutPrefix(env, \"GPTSCRIPT_WORKSPACE_DIR=\")\n\t\tif ok && dir != \"\" {\n\t\t\treturn dir, nil\n",
                    "rendered": {
                      "text": "}\n\nfunc getWorkspaceDir(envs []string) (string, error) {\n\tfor _, env := range envs {\n\t\tdir, ok := strings.CutPrefix(env, \"GPTSCRIPT_WORKSPACE_DIR=\")\n\t\tif ok && dir != \"\" {\n\t\t\treturn dir, nil\n",
                      "markdown": "`}\n\nfunc getWorkspaceDir(envs []string) (string, error) {\n\tfor _, env := range envs {\n\t\tdir, ok := strings.CutPrefix(env, \"GPTSCRIPT_WORKSPACE_DIR=\")\n\t\tif ok && dir != \"\" {\n\t\t\treturn dir, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 10,
                  "endLine": 366,
                  "snippet": {
                    "text": "\t\tenv = append(env, envvars...)\n\t}\n\n\tcmd.Env = env\n\tcmd.Dir = params.Directory\n\tcmd.Stdout = combined\n\tcmd.Stderr = combined\n\tif err := cmd.Run(); err != nil {\n",
                    "rendered": {
                      "text": "\t\tenv = append(env, envvars...)\n\t}\n\n\tcmd.Env = env\n\tcmd.Dir = params.Directory\n\tcmd.Stdout = combined\n\tcmd.Stderr = combined\n\tif err := cmd.Run(); err != nil {\n",
                      "markdown": "`\t\tenv = append(env, envvars...)\n\t}\n\n\tcmd.Env = env\n\tcmd.Dir = params.Directory\n\tcmd.Stdout = combined\n\tcmd.Stderr = combined\n\tif err := cmd.Run(); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 1,
                  "endLine": 362,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t)\n\n\tif envvars, err := getWorkspaceEnvFileContents(env); err == nil {\n\t\tenv = append(env, envvars...)\n\t}\n\n\tcmd.Env = env\n",
                    "rendered": {
                      "text": "\t)\n\n\tif envvars, err := getWorkspaceEnvFileContents(env); err == nil {\n\t\tenv = append(env, envvars...)\n\t}\n\n\tcmd.Env = env\n",
                      "markdown": "`\t)\n\n\tif envvars, err := getWorkspaceEnvFileContents(env); err == nil {\n\t\tenv = append(env, envvars...)\n\t}\n\n\tcmd.Env = env\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 31,
                  "endLine": 330,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\treturn strings.Join(result, \"\\n\"), nil\n}\n\nfunc SysExec(_ context.Context, env []string, input string, progress chan<- string) (string, error) {\n\tvar params struct {\n\t\tCommand   string `json:\"command,omitempty\"`\n\t\tDirectory string `json:\"directory,omitempty\"`\n",
                    "rendered": {
                      "text": "\treturn strings.Join(result, \"\\n\"), nil\n}\n\nfunc SysExec(_ context.Context, env []string, input string, progress chan<- string) (string, error) {\n\tvar params struct {\n\t\tCommand   string `json:\"command,omitempty\"`\n\t\tDirectory string `json:\"directory,omitempty\"`\n",
                      "markdown": "`\treturn strings.Join(result, \"\\n\"), nil\n}\n\nfunc SysExec(_ context.Context, env []string, input string, progress chan<- string) (string, error) {\n\tvar params struct {\n\t\tCommand   string `json:\"command,omitempty\"`\n\t\tDirectory string `json:\"directory,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 102,
                  "endLine": 148,
                  "endColumn": 108,
                  "snippet": {
                    "text": "\t\"sys.find\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Traverse a directory looking for files that match a pattern in the style of the unix find command\",\n\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"pattern\", \"The file pattern to look for. The pattern is a traditional unix glob format with * matching any character and ? matching a single character\",\n\t\t\t\t\t\"directory\", \"The directory to search in. The current directory \\\".\\\" will be used as the default if no argument is passed\",\n",
                    "rendered": {
                      "text": "\t\"sys.find\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Traverse a directory looking for files that match a pattern in the style of the unix find command\",\n\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"pattern\", \"The file pattern to look for. The pattern is a traditional unix glob format with * matching any character and ? matching a single character\",\n\t\t\t\t\t\"directory\", \"The directory to search in. The current directory \\\".\\\" will be used as the default if no argument is passed\",\n",
                      "markdown": "`\t\"sys.find\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Traverse a directory looking for files that match a pattern in the style of the unix find command\",\n\t\t\t\tArguments: types.ObjectSchema(\n\t\t\t\t\t\"pattern\", \"The file pattern to look for. The pattern is a traditional unix glob format with * matching any character and ? matching a single character\",\n\t\t\t\t\t\"directory\", \"The directory to search in. The current directory \\\".\\\" will be used as the default if no argument is passed\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/builtin/builtin.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 46,
                  "endLine": 44,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\"sys.time.now\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Returns the current date and time in RFC3339 format\",\n\t\t\t},\n\t\t\tBuiltinFunc: SysTimeNow,\n\t\t},\n",
                    "rendered": {
                      "text": "\t\"sys.time.now\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Returns the current date and time in RFC3339 format\",\n\t\t\t},\n\t\t\tBuiltinFunc: SysTimeNow,\n\t\t},\n",
                      "markdown": "`\t\"sys.time.now\": {\n\t\tToolDef: types.ToolDef{\n\t\t\tParameters: types.Parameters{\n\t\t\t\tDescription: \"Returns the current date and time in RFC3339 format\",\n\t\t\t},\n\t\t\tBuiltinFunc: SysTimeNow,\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 14,
                  "endLine": 105,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"b9b91f486e2a52b6cc392101245705d6ab5dd6ad4a4e2b3492baec8e4b96508b\"\n  }\n]\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"b9b91f486e2a52b6cc392101245705d6ab5dd6ad4a4e2b3492baec8e4b96508b\"\n  }\n]\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"b9b91f486e2a52b6cc392101245705d6ab5dd6ad4a4e2b3492baec8e4b96508b\"\n  }\n]\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 14,
                  "endLine": 98,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"f7cfa4ad072feb4578c8afca5ba9a54ad591d665a441dd0d63aa366edbe19279\"\n  },\n  {\n    \"os\": \"linux\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"f7cfa4ad072feb4578c8afca5ba9a54ad591d665a441dd0d63aa366edbe19279\"\n  },\n  {\n    \"os\": \"linux\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"f7cfa4ad072feb4578c8afca5ba9a54ad591d665a441dd0d63aa366edbe19279\"\n  },\n  {\n    \"os\": \"linux\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 14,
                  "endLine": 91,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"c37a22fca8f57d4471e3708de6d13097668c5f160067f264bb2b18f524c890c8\"\n  },\n  {\n    \"os\": \"windows\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"c37a22fca8f57d4471e3708de6d13097668c5f160067f264bb2b18f524c890c8\"\n  },\n  {\n    \"os\": \"windows\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"c37a22fca8f57d4471e3708de6d13097668c5f160067f264bb2b18f524c890c8\"\n  },\n  {\n    \"os\": \"windows\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 14,
                  "endLine": 84,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"ec8126de97945e629cca9aedc80a29c4ae2992c9d69f2655e27ae73906ba187d\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"ec8126de97945e629cca9aedc80a29c4ae2992c9d69f2655e27ae73906ba187d\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                      "markdown": "`    \"arch\": \"arm64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"ec8126de97945e629cca9aedc80a29c4ae2992c9d69f2655e27ae73906ba187d\"\n  },\n  {\n    \"os\": \"darwin\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 14,
                  "endLine": 77,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"ccc40e5af329ef2af81350db2a88bbd6c17b56676e82d62048c15d548401519e\"\n  },\n  {\n    \"os\": \"linux\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"ccc40e5af329ef2af81350db2a88bbd6c17b56676e82d62048c15d548401519e\"\n  },\n  {\n    \"os\": \"linux\",\n",
                      "markdown": "`    \"arch\": \"arm64\",\n    \"version\": \"3.12\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.12.3%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"ccc40e5af329ef2af81350db2a88bbd6c17b56676e82d62048c15d548401519e\"\n  },\n  {\n    \"os\": \"linux\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 14,
                  "endLine": 70,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"6a174a7536d6f250d5c1652394b3a9bb5ff5dfd8dab6c54685d87ea6f5379ca2\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"6a174a7536d6f250d5c1652394b3a9bb5ff5dfd8dab6c54685d87ea6f5379ca2\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"6a174a7536d6f250d5c1652394b3a9bb5ff5dfd8dab6c54685d87ea6f5379ca2\"\n  },\n  {\n    \"os\": \"darwin\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 14,
                  "endLine": 63,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"368474c69f476e7de4adaf50b61d9fcf6ec8b4db88cc43c5f71c860b3cd29c69\"\n  },\n  {\n    \"os\": \"linux\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"368474c69f476e7de4adaf50b61d9fcf6ec8b4db88cc43c5f71c860b3cd29c69\"\n  },\n  {\n    \"os\": \"linux\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"368474c69f476e7de4adaf50b61d9fcf6ec8b4db88cc43c5f71c860b3cd29c69\"\n  },\n  {\n    \"os\": \"linux\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 14,
                  "endLine": 56,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"9afd734f63a23783cf0257bef25c9231ffc80e7747486dc54cf72f325213fd15\"\n  },\n  {\n    \"os\": \"windows\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"9afd734f63a23783cf0257bef25c9231ffc80e7747486dc54cf72f325213fd15\"\n  },\n  {\n    \"os\": \"windows\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"9afd734f63a23783cf0257bef25c9231ffc80e7747486dc54cf72f325213fd15\"\n  },\n  {\n    \"os\": \"windows\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 14,
                  "endLine": 49,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"b3a7199ac2615d75fb906e5ba556432efcf24baf8651fc70370d9f052d4069ee\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"b3a7199ac2615d75fb906e5ba556432efcf24baf8651fc70370d9f052d4069ee\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                      "markdown": "`    \"arch\": \"arm64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"b3a7199ac2615d75fb906e5ba556432efcf24baf8651fc70370d9f052d4069ee\"\n  },\n  {\n    \"os\": \"darwin\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 14,
                  "endLine": 42,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"7af7058f7c268b4d87ed7e08c2c7844ef8460863b3e679db3afdce8bb1eedfae\"\n  },\n  {\n    \"os\": \"linux\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"7af7058f7c268b4d87ed7e08c2c7844ef8460863b3e679db3afdce8bb1eedfae\"\n  },\n  {\n    \"os\": \"linux\",\n",
                      "markdown": "`    \"arch\": \"arm64\",\n    \"version\": \"3.11\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"7af7058f7c268b4d87ed7e08c2c7844ef8460863b3e679db3afdce8bb1eedfae\"\n  },\n  {\n    \"os\": \"linux\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "endLine": 35,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"50508a3dc7ec3e16864561a4639507615dae33d8d00c1043ca2c3a3de7df4627\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"50508a3dc7ec3e16864561a4639507615dae33d8d00c1043ca2c3a3de7df4627\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64_v2-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"50508a3dc7ec3e16864561a4639507615dae33d8d00c1043ca2c3a3de7df4627\"\n  },\n  {\n    \"os\": \"darwin\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 14,
                  "endLine": 28,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"186b5632fb2fa5b5e6eee4110ce9bbb0349f52bb2163d2a1f5188b1d8eb1b5f3\"\n  },\n  {\n    \"os\": \"linux\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"186b5632fb2fa5b5e6eee4110ce9bbb0349f52bb2163d2a1f5188b1d8eb1b5f3\"\n  },\n  {\n    \"os\": \"linux\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64-pc-windows-msvc-install_only.tar.gz\",\n    \"digest\": \"186b5632fb2fa5b5e6eee4110ce9bbb0349f52bb2163d2a1f5188b1d8eb1b5f3\"\n  },\n  {\n    \"os\": \"linux\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 14,
                  "endLine": 21,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"8e27ec6f27b3a27be892c7a9db1e278c858acd9d90c1114013fe5587cd6fc5e6\"\n  },\n  {\n    \"os\": \"windows\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"8e27ec6f27b3a27be892c7a9db1e278c858acd9d90c1114013fe5587cd6fc5e6\"\n  },\n  {\n    \"os\": \"windows\",\n",
                      "markdown": "`    \"arch\": \"amd64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-x86_64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"8e27ec6f27b3a27be892c7a9db1e278c858acd9d90c1114013fe5587cd6fc5e6\"\n  },\n  {\n    \"os\": \"windows\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "endLine": 14,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"2f9f26c430df19d6d2a25ac3f2a8e74106d32b9951b85f95218ceeb13d52e952\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"2f9f26c430df19d6d2a25ac3f2a8e74106d32b9951b85f95218ceeb13d52e952\"\n  },\n  {\n    \"os\": \"darwin\",\n",
                      "markdown": "`    \"arch\": \"arm64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-aarch64-unknown-linux-gnu-install_only.tar.gz\",\n    \"digest\": \"2f9f26c430df19d6d2a25ac3f2a8e74106d32b9951b85f95218ceeb13d52e952\"\n  },\n  {\n    \"os\": \"darwin\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/python.json"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 14,
                  "endLine": 7,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"389da793b7666e9310908b4fe3ddcf0a20b55727fcb384c7c49b01bb21716f89\"\n  },\n  {\n    \"os\": \"linux\",\n",
                    "rendered": {
                      "text": "    \"arch\": \"arm64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"389da793b7666e9310908b4fe3ddcf0a20b55727fcb384c7c49b01bb21716f89\"\n  },\n  {\n    \"os\": \"linux\",\n",
                      "markdown": "`    \"arch\": \"arm64\",\n    \"version\": \"3.10\",\n    \"url\": \"https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.10.14%2B20240415-aarch64-apple-darwin-install_only.tar.gz\",\n    \"digest\": \"389da793b7666e9310908b4fe3ddcf0a20b55727fcb384c7c49b01bb21716f89\"\n  },\n  {\n    \"os\": \"linux\",\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n\tcmd.Dir = toolSource\n\tif contents, ok := tool.MetaData[packageJSON]; ok {\n",
                    "rendered": {
                      "text": "\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n\tcmd.Dir = toolSource\n\tif contents, ok := tool.MetaData[packageJSON]; ok {\n",
                      "markdown": "`\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n\tcmd.Dir = toolSource\n\tif contents, ok := tool.MetaData[packageJSON]; ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 42,
                  "endLine": 56,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\treturn false\n}\n\nfunc (r *Runtime) supports(testCmd string, cmd []string) bool {\n\tif runtimeEnv.Matches(cmd, testCmd+r.Version) {\n\t\treturn true\n\t}\n",
                    "rendered": {
                      "text": "\treturn false\n}\n\nfunc (r *Runtime) supports(testCmd string, cmd []string) bool {\n\tif runtimeEnv.Matches(cmd, testCmd+r.Version) {\n\t\treturn true\n\t}\n",
                      "markdown": "`\treturn false\n}\n\nfunc (r *Runtime) supports(testCmd string, cmd []string) bool {\n\tif runtimeEnv.Matches(cmd, testCmd+r.Version) {\n\t\treturn true\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 40,
                  "endLine": 47,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\treturn false, nil, nil\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tfor _, testCmd := range []string{\"node\", \"npx\", \"npm\"} {\n\t\tif r.supports(testCmd, cmd) {\n\t\t\treturn true\n",
                    "rendered": {
                      "text": "\treturn false, nil, nil\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tfor _, testCmd := range []string{\"node\", \"npx\", \"npm\"} {\n\t\tif r.supports(testCmd, cmd) {\n\t\t\treturn true\n",
                      "markdown": "`\treturn false, nil, nil\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tfor _, testCmd := range []string{\"node\", \"npx\", \"npm\"} {\n\t\tif r.supports(testCmd, cmd) {\n\t\t\treturn true\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 31,
                  "endLine": 190,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\treturn \"\", err\n\t}\n\n\tlog.InfofCtx(ctx, \"Downloading Node %s.x\", r.Version)\n\ttmp := target + \".download\"\n\tdefer os.RemoveAll(tmp)\n\n",
                    "rendered": {
                      "text": "\t\treturn \"\", err\n\t}\n\n\tlog.InfofCtx(ctx, \"Downloading Node %s.x\", r.Version)\n\ttmp := target + \".download\"\n\tdefer os.RemoveAll(tmp)\n\n",
                      "markdown": "`\t\treturn \"\", err\n\t}\n\n\tlog.InfofCtx(ctx, \"Downloading Node %s.x\", r.Version)\n\ttmp := target + \".download\"\n\tdefer os.RemoveAll(tmp)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 50,
                  "endLine": 174,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find sub dir for node in %s\", rel)\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find sub dir for node in %s\", rel)\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n",
                      "markdown": "`\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find sub dir for node in %s\", rel)\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 33,
                  "endLine": 174,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find sub dir for node in %s\", rel)\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find sub dir for node in %s\", rel)\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n",
                      "markdown": "`\t\t}\n\t}\n\n\treturn \"\", fmt.Errorf(\"failed to find sub dir for node in %s\", rel)\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 10,
                  "endLine": 138,
                  "snippet": {
                    "text": "func (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n\tcmd.Dir = toolSource\n\tif contents, ok := tool.MetaData[packageJSON]; ok {\n\t\tif err := os.WriteFile(filepath.Join(toolSource, packageJSON), []byte(contents+\"\\n\"), 0644); err != nil {\n\t\t\treturn err\n",
                    "rendered": {
                      "text": "func (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n\tcmd.Dir = toolSource\n\tif contents, ok := tool.MetaData[packageJSON]; ok {\n\t\tif err := os.WriteFile(filepath.Join(toolSource, packageJSON), []byte(contents+\"\\n\"), 0644); err != nil {\n\t\t\treturn err\n",
                      "markdown": "`func (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n\tcmd.Dir = toolSource\n\tif contents, ok := tool.MetaData[packageJSON]; ok {\n\t\tif err := os.WriteFile(filepath.Join(toolSource, packageJSON), []byte(contents+\"\\n\"), 0644); err != nil {\n\t\t\treturn err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 89,
                  "endLine": 134,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), osName(), arch())\n}\n\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n",
                    "rendered": {
                      "text": "\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), osName(), arch())\n}\n\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n",
                      "markdown": "`\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), osName(), arch())\n}\n\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running npm in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"npm\"), \"install\")\n\tcmd.Env = env\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 37,
                  "endLine": 131,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), osName(), arch())\n}\n\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), osName(), arch())\n}\n\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n",
                      "markdown": "`\t\t}\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), osName(), arch())\n}\n\nfunc (r *Runtime) runNPM(ctx context.Context, tool types.Tool, toolSource, binDir string, env []string) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 90,
                  "endLine": 82,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn \"\", nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package node\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n",
                    "rendered": {
                      "text": "package node\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n",
                      "markdown": "`package node\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 14,
                  "endLine": 96,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t}\n\n\tfor serverAddress := range newCredAddresses {\n\t\tac, err := h.Get(serverAddress)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\tfor serverAddress := range newCredAddresses {\n\t\tac, err := h.Get(serverAddress)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n",
                      "markdown": "`\t}\n\n\tfor serverAddress := range newCredAddresses {\n\t\tac, err := h.Get(serverAddress)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 20,
                  "snippet": {
                    "text": "func (h *HelperStore) Get(serverAddress string) (types.AuthConfig, error) {\n\tcreds, err := client.Get(h.program, serverAddress)\n\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\treturn h.file.Get(serverAddress)\n\t} else if err != nil {\n\t\treturn types.AuthConfig{}, err\n\t}\n",
                    "rendered": {
                      "text": "func (h *HelperStore) Get(serverAddress string) (types.AuthConfig, error) {\n\tcreds, err := client.Get(h.program, serverAddress)\n\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\treturn h.file.Get(serverAddress)\n\t} else if err != nil {\n\t\treturn types.AuthConfig{}, err\n\t}\n",
                      "markdown": "`func (h *HelperStore) Get(serverAddress string) (types.AuthConfig, error) {\n\tcreds, err := client.Get(h.program, serverAddress)\n\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\treturn h.file.Get(serverAddress)\n\t} else if err != nil {\n\t\treturn types.AuthConfig{}, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 21,
                  "endLine": 40,
                  "endColumn": 26,
                  "snippet": {
                    "text": "}\n\nfunc (h *HelperStore) Get(serverAddress string) (types.AuthConfig, error) {\n\tcreds, err := client.Get(h.program, serverAddress)\n\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\treturn h.file.Get(serverAddress)\n\t} else if err != nil {\n",
                    "rendered": {
                      "text": "}\n\nfunc (h *HelperStore) Get(serverAddress string) (types.AuthConfig, error) {\n\tcreds, err := client.Get(h.program, serverAddress)\n\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\treturn h.file.Get(serverAddress)\n\t} else if err != nil {\n",
                      "markdown": "`}\n\nfunc (h *HelperStore) Get(serverAddress string) (types.AuthConfig, error) {\n\tcreds, err := client.Get(h.program, serverAddress)\n\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\treturn h.file.Get(serverAddress)\n\t} else if err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 24,
                  "endLine": 110,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\treturn client.Store(h.program, &credentials2.Credentials{\n\t\tServerURL: authConfig.ServerAddress,\n\t\tUsername:  authConfig.Username,\n\t\tSecret:    authConfig.Password,\n\t})\n}\n",
                    "rendered": {
                      "text": "\treturn client.Store(h.program, &credentials2.Credentials{\n\t\tServerURL: authConfig.ServerAddress,\n\t\tUsername:  authConfig.Username,\n\t\tSecret:    authConfig.Password,\n\t})\n}\n",
                      "markdown": "`\treturn client.Store(h.program, &credentials2.Credentials{\n\t\tServerURL: authConfig.ServerAddress,\n\t\tUsername:  authConfig.Username,\n\t\tSecret:    authConfig.Password,\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 2,
                  "endLine": 48,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t}\n\treturn types.AuthConfig{\n\t\tUsername:      creds.Username,\n\t\tPassword:      creds.Secret,\n\t\tServerAddress: serverAddress,\n\t}, nil\n}\n",
                    "rendered": {
                      "text": "\t}\n\treturn types.AuthConfig{\n\t\tUsername:      creds.Username,\n\t\tPassword:      creds.Secret,\n\t\tServerAddress: serverAddress,\n\t}, nil\n}\n",
                      "markdown": "`\t}\n\treturn types.AuthConfig{\n\t\tUsername:      creds.Username,\n\t\tPassword:      creds.Secret,\n\t\tServerAddress: serverAddress,\n\t}, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 42,
                  "endLine": 65,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\tfor serverAddress, val := range serverAddresses {\n\t\t// If the serverAddress contains a port, we need to put it back in the right spot.\n\t\t// For some reason, even when a credential is stored properly as http://hostname:8080///credctx,\n\t\t// the list function will return http://hostname///credctx:8080. This is something wrong\n\t\t// with macOS's built-in libraries. So we need to fix it here.\n\t\ttoolName, ctx, err := toolNameAndCtxFromAddress(serverAddress)\n\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\tfor serverAddress, val := range serverAddresses {\n\t\t// If the serverAddress contains a port, we need to put it back in the right spot.\n\t\t// For some reason, even when a credential is stored properly as http://hostname:8080///credctx,\n\t\t// the list function will return http://hostname///credctx:8080. This is something wrong\n\t\t// with macOS's built-in libraries. So we need to fix it here.\n\t\ttoolName, ctx, err := toolNameAndCtxFromAddress(serverAddress)\n\t\tif err != nil {\n",
                      "markdown": "`\tfor serverAddress, val := range serverAddresses {\n\t\t// If the serverAddress contains a port, we need to put it back in the right spot.\n\t\t// For some reason, even when a credential is stored properly as http://hostname:8080///credctx,\n\t\t// the list function will return http://hostname///credctx:8080. This is something wrong\n\t\t// with macOS's built-in libraries. So we need to fix it here.\n\t\ttoolName, ctx, err := toolNameAndCtxFromAddress(serverAddress)\n\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/helper.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 74,
                  "endLine": 64,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\tnewCredAddresses := make(map[string]string, len(serverAddresses))\n\tfor serverAddress, val := range serverAddresses {\n\t\t// If the serverAddress contains a port, we need to put it back in the right spot.\n\t\t// For some reason, even when a credential is stored properly as http://hostname:8080///credctx,\n\t\t// the list function will return http://hostname///credctx:8080. This is something wrong\n\t\t// with macOS's built-in libraries. So we need to fix it here.\n\t\ttoolName, ctx, err := toolNameAndCtxFromAddress(serverAddress)\n",
                    "rendered": {
                      "text": "\tnewCredAddresses := make(map[string]string, len(serverAddresses))\n\tfor serverAddress, val := range serverAddresses {\n\t\t// If the serverAddress contains a port, we need to put it back in the right spot.\n\t\t// For some reason, even when a credential is stored properly as http://hostname:8080///credctx,\n\t\t// the list function will return http://hostname///credctx:8080. This is something wrong\n\t\t// with macOS's built-in libraries. So we need to fix it here.\n\t\ttoolName, ctx, err := toolNameAndCtxFromAddress(serverAddress)\n",
                      "markdown": "`\tnewCredAddresses := make(map[string]string, len(serverAddresses))\n\tfor serverAddress, val := range serverAddresses {\n\t\t// If the serverAddress contains a port, we need to put it back in the right spot.\n\t\t// For some reason, even when a credential is stored properly as http://hostname:8080///credctx,\n\t\t// the list function will return http://hostname///credctx:8080. This is something wrong\n\t\t// with macOS's built-in libraries. So we need to fix it here.\n\t\ttoolName, ctx, err := toolNameAndCtxFromAddress(serverAddress)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/prompt.go"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 31,
                  "endLine": 112,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\tmsg = req.Message\n\t\t}\n\t\tif req.Sensitive {\n\t\t\terr = survey.AskOne(&survey.Password{Message: msg}, &value, survey.WithStdio(os.Stdin, os.Stderr, os.Stderr))\n\t\t} else {\n\t\t\terr = survey.AskOne(&survey.Input{Message: msg}, &value, survey.WithStdio(os.Stdin, os.Stderr, os.Stderr))\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tmsg = req.Message\n\t\t}\n\t\tif req.Sensitive {\n\t\t\terr = survey.AskOne(&survey.Password{Message: msg}, &value, survey.WithStdio(os.Stdin, os.Stderr, os.Stderr))\n\t\t} else {\n\t\t\terr = survey.AskOne(&survey.Input{Message: msg}, &value, survey.WithStdio(os.Stdin, os.Stderr, os.Stderr))\n\t\t}\n",
                      "markdown": "`\t\t\tmsg = req.Message\n\t\t}\n\t\tif req.Sensitive {\n\t\t\terr = survey.AskOne(&survey.Password{Message: msg}, &value, survey.WithStdio(os.Stdin, os.Stderr, os.Stderr))\n\t\t} else {\n\t\t\terr = survey.AskOne(&survey.Input{Message: msg}, &value, survey.WithStdio(os.Stdin, os.Stderr, os.Stderr))\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/prompt.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 7,
                  "endLine": 64,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t}\n\n\tvar fields []string\n\tfor _, env := range envs {\n\t\tif url, ok := strings.CutPrefix(env, types.PromptURLEnvVar+\"=\"); ok {\n\t\t\tif params.Fields != \"\" {\n\t\t\t\tfields = strings.Split(params.Fields, \",\")\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar fields []string\n\tfor _, env := range envs {\n\t\tif url, ok := strings.CutPrefix(env, types.PromptURLEnvVar+\"=\"); ok {\n\t\t\tif params.Fields != \"\" {\n\t\t\t\tfields = strings.Split(params.Fields, \",\")\n",
                      "markdown": "`\t}\n\n\tvar fields []string\n\tfor _, env := range envs {\n\t\tif url, ok := strings.CutPrefix(env, types.PromptURLEnvVar+\"=\"); ok {\n\t\t\tif params.Fields != \"\" {\n\t\t\t\tfields = strings.Split(params.Fields, \",\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/prompt.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tfor _, env := range envs {\n\t\tif _, v, ok := strings.Cut(env, types.PromptTokenEnvVar+\"=\"); ok && v != \"\" {\n\t\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", v))\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tfor _, env := range envs {\n\t\tif _, v, ok := strings.Cut(env, types.PromptTokenEnvVar+\"=\"); ok && v != \"\" {\n\t\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", v))\n\t\t\tbreak\n",
                      "markdown": "`\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tfor _, env := range envs {\n\t\tif _, v, ok := strings.Cut(env, types.PromptTokenEnvVar+\"=\"); ok && v != \"\" {\n\t\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", v))\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 13,
                  "endLine": 48,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    }\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server is listening on port ${PORT}`);\n});\n",
                    "rendered": {
                      "text": "    }\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server is listening on port ${PORT}`);\n});\n",
                      "markdown": "`    }\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server is listening on port ${PORT}`);\n});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 32,
                  "endLine": 85,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n### Running the Example\n\n",
                    "rendered": {
                      "text": "    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n### Running the Example\n\n",
                      "markdown": "`    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n### Running the Example\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 101,
                  "endLine": 84,
                  "endColumn": 109,
                  "snippet": {
                    "text": "t is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n### Running the Example\n\nNow let's try running it:\n\n```bash\ngptscript script.gpt '{\"first\":\"he",
                    "rendered": {
                      "text": "t is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n### Running the Example\n\nNow let's try running it:\n\n```bash\ngptscript script.gpt '{\"first\":\"he",
                      "markdown": "`t is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n### Running the Example\n\nNow let's try running it:\n\n```bash\ngptscript script.gpt '{\"first\":\"he`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 8,
                  "endLine": 84,
                  "endColumn": 16,
                  "snippet": {
                    "text": " JSON string of the parameters passed to the entrypoint tool.\n    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n#",
                    "rendered": {
                      "text": " JSON string of the parameters passed to the entrypoint tool.\n    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n#",
                      "markdown": "` JSON string of the parameters passed to the entrypoint tool.\n    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the hostname must always start with the daemon tool's name, followed by `.daemon.gptscript.local`.\n    - GPTScript recognizes this hostname and determines the correct port number to send the request to, on localhost.\n\n#`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 19,
                  "endLine": 75,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n",
                    "rendered": {
                      "text": "\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n",
                      "markdown": "`\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 25,
                  "endLine": 82,
                  "endColumn": 33,
                  "snippet": {
                    "text": "art it.\n- The `#!http://my-daemon.daemon.gptscript.local/myPath` in the body tells GPTScript to send an HTTP request to the daemon tool.\n  - The request will be a POST request, with the body of the request being a JSON string of the parameters passed to the entrypoint tool.\n    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the ho",
                    "rendered": {
                      "text": "art it.\n- The `#!http://my-daemon.daemon.gptscript.local/myPath` in the body tells GPTScript to send an HTTP request to the daemon tool.\n  - The request will be a POST request, with the body of the request being a JSON string of the parameters passed to the entrypoint tool.\n    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the ho",
                      "markdown": "`art it.\n- The `#!http://my-daemon.daemon.gptscript.local/myPath` in the body tells GPTScript to send an HTTP request to the daemon tool.\n  - The request will be a POST request, with the body of the request being a JSON string of the parameters passed to the entrypoint tool.\n    - For example, if the script is run like `gptscript script.gpt '{\"first\":\"hello\",\"second\":\"world\"}'`, then the body of the request will be `{\"first\":\"hello\",\"second\":\"world\"}`.\n    - The path of the request will be `/myPath`.\n  - The hostname is `my-daemon.daemon.gptscript.local`. When sending a request to a daemon tool, the ho`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 38,
                  "endLine": 75,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n",
                    "rendered": {
                      "text": "\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n",
                      "markdown": "`\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 26,
                  "endLine": 75,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n",
                    "rendered": {
                      "text": "\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n",
                      "markdown": "`\n### The Entrypoint Tool\n\nThe entrypoint tool at the top of this script sends an HTTP request to the daemon tool.\nThere are a few important things to note here:\n\n- The `Tools: my-daemon` directive is needed to show that this tool requires the `my-daemon` tool to already be running.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 8,
                  "endLine": 70,
                  "endColumn": 16,
                  "snippet": {
                    "text": "```\n#!sys.daemon (path=/api/ready) node\n\n// (node script here)\n```\n\n### The Entrypoint Tool\n",
                    "rendered": {
                      "text": "```\n#!sys.daemon (path=/api/ready) node\n\n// (node script here)\n```\n\n### The Entrypoint Tool\n",
                      "markdown": "````\n#!sys.daemon (path=/api/ready) node\n\n// (node script here)\n```\n\n### The Entrypoint Tool\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 30,
                  "endLine": 69,
                  "snippet": {
                    "text": "By default, the request goes to `/`, but this can be configured with the following syntax:\n\n```\n#!sys.daemon (path=/api/ready) node\n\n// (node script here)\n```\n\n",
                    "rendered": {
                      "text": "By default, the request goes to `/`, but this can be configured with the following syntax:\n\n```\n#!sys.daemon (path=/api/ready) node\n\n// (node script here)\n```\n\n",
                      "markdown": "`By default, the request goes to `/`, but this can be configured with the following syntax:\n\n```\n#!sys.daemon (path=/api/ready) node\n\n// (node script here)\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 106,
                  "endLine": 59,
                  "endColumn": 112,
                  "snippet": {
                    "text": "### The Daemon Tool\n\nThe body of this tool begins with `#!sys.daemon`. This tells GPTScript to take the rest of the body as a command to be\nrun in the background that will listen for HTTP requests. GPTScript will run this command (in this case, a Node script).\nGPTScript will assign a port number for the server and set the `PORT` environment variable to that number, so the\nserver needs to check that variable and listen on the proper port.\n\n",
                    "rendered": {
                      "text": "### The Daemon Tool\n\nThe body of this tool begins with `#!sys.daemon`. This tells GPTScript to take the rest of the body as a command to be\nrun in the background that will listen for HTTP requests. GPTScript will run this command (in this case, a Node script).\nGPTScript will assign a port number for the server and set the `PORT` environment variable to that number, so the\nserver needs to check that variable and listen on the proper port.\n\n",
                      "markdown": "`### The Daemon Tool\n\nThe body of this tool begins with `#!sys.daemon`. This tells GPTScript to take the rest of the body as a command to be\nrun in the background that will listen for HTTP requests. GPTScript will run this command (in this case, a Node script).\nGPTScript will assign a port number for the server and set the `PORT` environment variable to that number, so the\nserver needs to check that variable and listen on the proper port.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/10-daemon.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 22,
                  "snippet": {
                    "text": "---\nName: my-daemon\n\n#!sys.daemon node\n\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n",
                    "rendered": {
                      "text": "---\nName: my-daemon\n\n#!sys.daemon node\n\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n",
                      "markdown": "`---\nName: my-daemon\n\n#!sys.daemon node\n\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/01-using.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 35,
                  "endLine": 74,
                  "endColumn": 39,
                  "snippet": {
                    "text": "```yaml\ntools: github.com/gptscript-ai/dalle-image-generation, github.com/gptscript-ai/gpt4-v-vision, sys.read\n\nGenerate an image of a city skyline at night and write the resulting image to a file called city_skyline.png.\n\nTake this image and write a description of it in the style of pirate.\n```\n",
                    "rendered": {
                      "text": "```yaml\ntools: github.com/gptscript-ai/dalle-image-generation, github.com/gptscript-ai/gpt4-v-vision, sys.read\n\nGenerate an image of a city skyline at night and write the resulting image to a file called city_skyline.png.\n\nTake this image and write a description of it in the style of pirate.\n```\n",
                      "markdown": "````yaml\ntools: github.com/gptscript-ai/dalle-image-generation, github.com/gptscript-ai/gpt4-v-vision, sys.read\n\nGenerate an image of a city skyline at night and write the resulting image to a file called city_skyline.png.\n\nTake this image and write a description of it in the style of pirate.\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/01-using.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 19,
                  "snippet": {
                    "text": "name: random-number\ndescription: Generate a random number between 1 and 100.\n\nSelect a number at random between 1 and 100 and return only the number.\n```\n\n### External Tools\n",
                    "rendered": {
                      "text": "name: random-number\ndescription: Generate a random number between 1 and 100.\n\nSelect a number at random between 1 and 100 and return only the number.\n```\n\n### External Tools\n",
                      "markdown": "`name: random-number\ndescription: Generate a random number between 1 and 100.\n\nSelect a number at random between 1 and 100 and return only the number.\n```\n\n### External Tools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/01-using.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 19,
                  "snippet": {
                    "text": "```yaml\ntools: random-number\n\nSelect a number at random and, based on the results, write a poem about it.\n\n---\nname: random-number\n",
                    "rendered": {
                      "text": "```yaml\ntools: random-number\n\nSelect a number at random and, based on the results, write a poem about it.\n\n---\nname: random-number\n",
                      "markdown": "````yaml\ntools: random-number\n\nSelect a number at random and, based on the results, write a poem about it.\n\n---\nname: random-number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/01-using.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 9,
                  "endLine": 83,
                  "endColumn": 17,
                  "snippet": {
                    "text": "The GitHub URL must not be prefixed with `http://` or `https://`.\n:::\n\nWhen this script is run, GPTScript will locally clone the referenced GitHub repos and run the tools referenced inside them.\nFor more info on how this works, see [Authoring Tools](02-authoring.md).\n",
                    "rendered": {
                      "text": "The GitHub URL must not be prefixed with `http://` or `https://`.\n:::\n\nWhen this script is run, GPTScript will locally clone the referenced GitHub repos and run the tools referenced inside them.\nFor more info on how this works, see [Authoring Tools](02-authoring.md).\n",
                      "markdown": "`The GitHub URL must not be prefixed with `http://` or `https://`.\n:::\n\nWhen this script is run, GPTScript will locally clone the referenced GitHub repos and run the tools referenced inside them.\nFor more info on how this works, see [Authoring Tools](02-authoring.md).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/01-using.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 38,
                  "endLine": 31,
                  "endColumn": 46,
                  "snippet": {
                    "text": "Things get more interesting when you start to write your own tools.\n\nThe most basic example of this is an in-script tool that is defined in the same file as the main script.\nThis is useful for breaking up a large script into smaller, more manageable pieces.\n\n```yaml\ntools: random-number\n",
                    "rendered": {
                      "text": "Things get more interesting when you start to write your own tools.\n\nThe most basic example of this is an in-script tool that is defined in the same file as the main script.\nThis is useful for breaking up a large script into smaller, more manageable pieces.\n\n```yaml\ntools: random-number\n",
                      "markdown": "`Things get more interesting when you start to write your own tools.\n\nThe most basic example of this is an in-script tool that is defined in the same file as the main script.\nThis is useful for breaking up a large script into smaller, more manageable pieces.\n\n```yaml\ntools: random-number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/01-using.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 35,
                  "endLine": 6,
                  "endColumn": 43,
                  "snippet": {
                    "text": "In GPTScript, tools are used to extend the capabilities of a script.\nThe idea behind them is that AI performs better when it has very specific instructions for a given task.\nTools are a way to break up the problem into smaller and more focused pieces where each tool is responsible for a specific task.\nA typical pattern is to have a main script that imports a set of tools it can use to accomplish its goal.\n\nGPTScripts can utilize tools in one of three ways:\n1. Built-in system tools\n",
                    "rendered": {
                      "text": "In GPTScript, tools are used to extend the capabilities of a script.\nThe idea behind them is that AI performs better when it has very specific instructions for a given task.\nTools are a way to break up the problem into smaller and more focused pieces where each tool is responsible for a specific task.\nA typical pattern is to have a main script that imports a set of tools it can use to accomplish its goal.\n\nGPTScripts can utilize tools in one of three ways:\n1. Built-in system tools\n",
                      "markdown": "`In GPTScript, tools are used to extend the capabilities of a script.\nThe idea behind them is that AI performs better when it has very specific instructions for a given task.\nTools are a way to break up the problem into smaller and more focused pieces where each tool is responsible for a specific task.\nA typical pattern is to have a main script that imports a set of tools it can use to accomplish its goal.\n\nGPTScripts can utilize tools in one of three ways:\n1. Built-in system tools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 14,
                  "endLine": 67,
                  "endColumn": 24,
                  "snippet": {
                    "text": "If you're already authenticated with the `gh` CLI, you can use its token by running:\n\n```bash\nexport GITHUB_AUTH_TOKEN=\"$(gh auth token)\"\n```\n\n### Can I save my chat and resume it later?\n",
                    "rendered": {
                      "text": "If you're already authenticated with the `gh` CLI, you can use its token by running:\n\n```bash\nexport GITHUB_AUTH_TOKEN=\"$(gh auth token)\"\n```\n\n### Can I save my chat and resume it later?\n",
                      "markdown": "`If you're already authenticated with the `gh` CLI, you can use its token by running:\n\n```bash\nexport GITHUB_AUTH_TOKEN=\"$(gh auth token)\"\n```\n\n### Can I save my chat and resume it later?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 127,
                  "endLine": 63,
                  "endColumn": 137,
                  "snippet": {
                    "text": "\nBy default, GPTScript makes unauthenticated requests to GitHub when pulling tools.\nSince GitHub's rate limits for unauthenticated requests are fairly low, running into them when developing with GPTScript is a common issue.\nTo avoid this, you can get GPTScript to make authenticated requests -- which have higher rate limits -- by setting the `GITHUB_AUTH_TOKEN` environment variable to your github account's PAT (Personal Access Token).\nIf you're already authenticated with the `gh` CLI, you can use its token by running:\n\n```bash\n",
                    "rendered": {
                      "text": "\nBy default, GPTScript makes unauthenticated requests to GitHub when pulling tools.\nSince GitHub's rate limits for unauthenticated requests are fairly low, running into them when developing with GPTScript is a common issue.\nTo avoid this, you can get GPTScript to make authenticated requests -- which have higher rate limits -- by setting the `GITHUB_AUTH_TOKEN` environment variable to your github account's PAT (Personal Access Token).\nIf you're already authenticated with the `gh` CLI, you can use its token by running:\n\n```bash\n",
                      "markdown": "`\nBy default, GPTScript makes unauthenticated requests to GitHub when pulling tools.\nSince GitHub's rate limits for unauthenticated requests are fairly low, running into them when developing with GPTScript is a common issue.\nTo avoid this, you can get GPTScript to make authenticated requests -- which have higher rate limits -- by setting the `GITHUB_AUTH_TOKEN` environment variable to your github account's PAT (Personal Access Token).\nIf you're already authenticated with the `gh` CLI, you can use its token by running:\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 111,
                  "endLine": 34,
                  "endColumn": 116,
                  "snippet": {
                    "text": "ur hasn't passed since the last check, it will just use the one it has.\nIf this is the first invocation and the tool doesn't yet exist in the cache, it will be pulled and built as normal.\n\nWhen the cache is disabled, GPTScript will check that it has the latest version of the tool (meaning the latest git commit for the repo) on every single invocation of the tool.\nIf GPTScript determines it already has the latest version, that build will be used as-is.\nIn other words, disabling the cache DOES NOT force GPTScript to rebuild the tool, it only forces GPTScript to always check if it has the latest versi",
                    "rendered": {
                      "text": "ur hasn't passed since the last check, it will just use the one it has.\nIf this is the first invocation and the tool doesn't yet exist in the cache, it will be pulled and built as normal.\n\nWhen the cache is disabled, GPTScript will check that it has the latest version of the tool (meaning the latest git commit for the repo) on every single invocation of the tool.\nIf GPTScript determines it already has the latest version, that build will be used as-is.\nIn other words, disabling the cache DOES NOT force GPTScript to rebuild the tool, it only forces GPTScript to always check if it has the latest versi",
                      "markdown": "`ur hasn't passed since the last check, it will just use the one it has.\nIf this is the first invocation and the tool doesn't yet exist in the cache, it will be pulled and built as normal.\n\nWhen the cache is disabled, GPTScript will check that it has the latest version of the tool (meaning the latest git commit for the repo) on every single invocation of the tool.\nIf GPTScript determines it already has the latest version, that build will be used as-is.\nIn other words, disabling the cache DOES NOT force GPTScript to rebuild the tool, it only forces GPTScript to always check if it has the latest versi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 23,
                  "endLine": 27,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\nWhen the cache is enabled, GPTScript will only check for a newer version of the tool once an hour;\n",
                    "rendered": {
                      "text": "#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\nWhen the cache is enabled, GPTScript will only check for a newer version of the tool once an hour;\n",
                      "markdown": "`#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\nWhen the cache is enabled, GPTScript will only check for a newer version of the tool once an hour;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 132,
                  "endLine": 26,
                  "endColumn": 140,
                  "snippet": {
                    "text": "\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\n",
                    "rendered": {
                      "text": "\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\n",
                      "markdown": "`\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 49,
                  "endLine": 26,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\n",
                    "rendered": {
                      "text": "\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\n",
                      "markdown": "`\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\nThe tool's repo and build will be stored in your system's cache directory (at [$XDG_CACHE_HOME](https://pkg.go.dev/os#UserCacheDir)/gptscript/repos).\nSubsequent invocations of the tool leverage that cache.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 4,
                  "endLine": 24,
                  "endColumn": 9,
                  "snippet": {
                    "text": "Caching is enabled for both of these by default. It can be disabled via the `--disable-cache` flag.\nBelow is an explanation of how these areas behave when caching is enabled and disabled.\n\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\n",
                    "rendered": {
                      "text": "Caching is enabled for both of these by default. It can be disabled via the `--disable-cache` flag.\nBelow is an explanation of how these areas behave when caching is enabled and disabled.\n\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\n",
                      "markdown": "`Caching is enabled for both of these by default. It can be disabled via the `--disable-cache` flag.\nBelow is an explanation of how these areas behave when caching is enabled and disabled.\n\n#### Git commit hash lookups for tools\n\nWhen a remote tool or context is included in your script (like so: `Tools: github.com/gptscript-ai/browser`) and then invoked during script execution,\nGPTScript will pull the Git repo for that tool and build it.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 6,
                  "snippet": {
                    "text": "### I see there's a --disable-cache flag. How does caching working in GPTScript?\n\nGPTScript leverages caching to speed up execution and reduce LLM costs. There are two areas cached by GPTScript:\n- Git commit hash lookups for tools\n- LLM responses\n\nCaching is enabled for both of these by default. It can be disabled via the `--disable-cache` flag.\n",
                    "rendered": {
                      "text": "### I see there's a --disable-cache flag. How does caching working in GPTScript?\n\nGPTScript leverages caching to speed up execution and reduce LLM costs. There are two areas cached by GPTScript:\n- Git commit hash lookups for tools\n- LLM responses\n\nCaching is enabled for both of these by default. It can be disabled via the `--disable-cache` flag.\n",
                      "markdown": "`### I see there's a --disable-cache flag. How does caching working in GPTScript?\n\nGPTScript leverages caching to speed up execution and reduce LLM costs. There are two areas cached by GPTScript:\n- Git commit hash lookups for tools\n- LLM responses\n\nCaching is enabled for both of these by default. It can be disabled via the `--disable-cache` flag.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000104"
          },
          "message": {
            "text": "Backdoor: Curl Bashing",
            "id": "BD000104"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/09-faqs.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 56,
                  "endLine": 5,
                  "endColumn": 101,
                  "snippet": {
                    "text": "\n### I don't have Homebrew, how can I install GPTScript?\n\nOn macOS and Linux, you can alternatively install via: `curl https://get.gptscript.ai/install.sh | sh`\n\nOn all supported systems, you download and install the archive for your platform and architecture from the [releases page](https://github.com/gptscript-ai/gptscript/releases).\n\n",
                    "rendered": {
                      "text": "\n### I don't have Homebrew, how can I install GPTScript?\n\nOn macOS and Linux, you can alternatively install via: `curl https://get.gptscript.ai/install.sh | sh`\n\nOn all supported systems, you download and install the archive for your platform and architecture from the [releases page](https://github.com/gptscript-ai/gptscript/releases).\n\n",
                      "markdown": "`\n### I don't have Homebrew, how can I install GPTScript?\n\nOn macOS and Linux, you can alternatively install via: `curl https://get.gptscript.ai/install.sh | sh`\n\nOn all supported systems, you download and install the archive for your platform and architecture from the [releases page](https://github.com/gptscript-ai/gptscript/releases).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/01-overview.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "endLine": 56,
                  "endColumn": 19,
                  "snippet": {
                    "text": "A few notes:\n- You'll need an [OpenAI API key](https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key)\n- On Windows, after installing gptscript you may need to restart your terminal for the changes to take effect\n- The above script is a simple chat-based assistant. You can ask it questions and it will answer to the best of its ability.\n",
                    "rendered": {
                      "text": "A few notes:\n- You'll need an [OpenAI API key](https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key)\n- On Windows, after installing gptscript you may need to restart your terminal for the changes to take effect\n- The above script is a simple chat-based assistant. You can ask it questions and it will answer to the best of its ability.\n",
                      "markdown": "`A few notes:\n- You'll need an [OpenAI API key](https://help.openai.com/en/articles/4936850-where-do-i-find-my-openai-api-key)\n- On Windows, after installing gptscript you may need to restart your terminal for the changes to take effect\n- The above script is a simple chat-based assistant. You can ask it questions and it will answer to the best of its ability.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/01-overview.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "endLine": 42,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    </TabItem>\n    <TabItem value=\"MacOS and Linux (install.sh)\">\n    ```shell\n    curl https://get.gptscript.ai/install.sh | sh\n    gptscript github.com/gptscript-ai/llm-basics-demo\n    ```\n    </TabItem>\n",
                    "rendered": {
                      "text": "    </TabItem>\n    <TabItem value=\"MacOS and Linux (install.sh)\">\n    ```shell\n    curl https://get.gptscript.ai/install.sh | sh\n    gptscript github.com/gptscript-ai/llm-basics-demo\n    ```\n    </TabItem>\n",
                      "markdown": "`    </TabItem>\n    <TabItem value=\"MacOS and Linux (install.sh)\">\n    ```shell\n    curl https://get.gptscript.ai/install.sh | sh\n    gptscript github.com/gptscript-ai/llm-basics-demo\n    ```\n    </TabItem>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000104"
          },
          "message": {
            "text": "Backdoor: Curl Bashing",
            "id": "BD000104"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/01-overview.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 4,
                  "endLine": 42,
                  "endColumn": 49,
                  "snippet": {
                    "text": "    </TabItem>\n    <TabItem value=\"MacOS and Linux (install.sh)\">\n    ```shell\n    curl https://get.gptscript.ai/install.sh | sh\n    gptscript github.com/gptscript-ai/llm-basics-demo\n    ```\n    </TabItem>\n",
                    "rendered": {
                      "text": "    </TabItem>\n    <TabItem value=\"MacOS and Linux (install.sh)\">\n    ```shell\n    curl https://get.gptscript.ai/install.sh | sh\n    gptscript github.com/gptscript-ai/llm-basics-demo\n    ```\n    </TabItem>\n",
                      "markdown": "`    </TabItem>\n    <TabItem value=\"MacOS and Linux (install.sh)\">\n    ```shell\n    curl https://get.gptscript.ai/install.sh | sh\n    gptscript github.com/gptscript-ai/llm-basics-demo\n    ```\n    </TabItem>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/smoke.yaml"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 33,
                  "endLine": 51,
                  "endColumn": 39,
                  "snippet": {
                    "text": "              # Check for \"run-smoke\" label\n              LABELS=$(curl -s -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n                \"https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/${{ github.event.pull_request.number }}/labels\" | jq -r '.[].name')\n              if echo \"$LABELS\" | grep -q \"run-smoke\"; then\n                # Run smoke tests for PR with the \"run-smoke\" label\n                echo \"run_smoke_tests=true\" >> $GITHUB_OUTPUT\n                exit 0\n",
                    "rendered": {
                      "text": "              # Check for \"run-smoke\" label\n              LABELS=$(curl -s -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n                \"https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/${{ github.event.pull_request.number }}/labels\" | jq -r '.[].name')\n              if echo \"$LABELS\" | grep -q \"run-smoke\"; then\n                # Run smoke tests for PR with the \"run-smoke\" label\n                echo \"run_smoke_tests=true\" >> $GITHUB_OUTPUT\n                exit 0\n",
                      "markdown": "`              # Check for \"run-smoke\" label\n              LABELS=$(curl -s -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n                \"https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/${{ github.event.pull_request.number }}/labels\" | jq -r '.[].name')\n              if echo \"$LABELS\" | grep -q \"run-smoke\"; then\n                # Run smoke tests for PR with the \"run-smoke\" label\n                echo \"run_smoke_tests=true\" >> $GITHUB_OUTPUT\n                exit 0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 30,
                  "endLine": 45,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      - name: Create WinGet Package Update Pull Request\n        run: |\n            $url = \"${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/gptscript-${{ github.ref_name }}-windows-amd64.zip\"\n            ./wingetcreate.exe update --submit --token \"${{ secrets.WINGET_GH_TOKEN }}\" --urls $url --version \"${{ github.ref_name }}\" gptscript-ai.gptscript\n  node-release:\n    needs: release-tag\n    runs-on: ubuntu-latest\n",
                    "rendered": {
                      "text": "      - name: Create WinGet Package Update Pull Request\n        run: |\n            $url = \"${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/gptscript-${{ github.ref_name }}-windows-amd64.zip\"\n            ./wingetcreate.exe update --submit --token \"${{ secrets.WINGET_GH_TOKEN }}\" --urls $url --version \"${{ github.ref_name }}\" gptscript-ai.gptscript\n  node-release:\n    needs: release-tag\n    runs-on: ubuntu-latest\n",
                      "markdown": "`      - name: Create WinGet Package Update Pull Request\n        run: |\n            $url = \"${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/gptscript-${{ github.ref_name }}-windows-amd64.zip\"\n            ./wingetcreate.exe update --submit --token \"${{ secrets.WINGET_GH_TOKEN }}\" --urls $url --version \"${{ github.ref_name }}\" gptscript-ai.gptscript\n  node-release:\n    needs: release-tag\n    runs-on: ubuntu-latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/release.yaml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 35,
                  "endLine": 42,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      - name: Install winget-create\n        run: |\n            Invoke-WebRequest -Uri 'https://aka.ms/wingetcreate/latest' -OutFile 'wingetcreate.exe'      \n      - name: Create WinGet Package Update Pull Request\n        run: |\n            $url = \"${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/gptscript-${{ github.ref_name }}-windows-amd64.zip\"\n            ./wingetcreate.exe update --submit --token \"${{ secrets.WINGET_GH_TOKEN }}\" --urls $url --version \"${{ github.ref_name }}\" gptscript-ai.gptscript\n",
                    "rendered": {
                      "text": "      - name: Install winget-create\n        run: |\n            Invoke-WebRequest -Uri 'https://aka.ms/wingetcreate/latest' -OutFile 'wingetcreate.exe'      \n      - name: Create WinGet Package Update Pull Request\n        run: |\n            $url = \"${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/gptscript-${{ github.ref_name }}-windows-amd64.zip\"\n            ./wingetcreate.exe update --submit --token \"${{ secrets.WINGET_GH_TOKEN }}\" --urls $url --version \"${{ github.ref_name }}\" gptscript-ai.gptscript\n",
                      "markdown": "`      - name: Install winget-create\n        run: |\n            Invoke-WebRequest -Uri 'https://aka.ms/wingetcreate/latest' -OutFile 'wingetcreate.exe'      \n      - name: Create WinGet Package Update Pull Request\n        run: |\n            $url = \"${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/gptscript-${{ github.ref_name }}-windows-amd64.zip\"\n            ./wingetcreate.exe update --submit --token \"${{ secrets.WINGET_GH_TOKEN }}\" --urls $url --version \"${{ github.ref_name }}\" gptscript-ai.gptscript\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/hamlet-summarizer.gpt"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 70,
                  "endLine": 33,
                  "endColumn": 74,
                  "snippet": {
                    "text": "---\nname: hamlet-retriever\ndescription: Returns a part of the text of Hamlet. Returns \"No more content\" if the index is greater than the number of parts.\nargs: index: (unsigned int) the index of the part to return, beginning at 0\n\n#!python3 main.py \"$index\"\n",
                    "rendered": {
                      "text": "---\nname: hamlet-retriever\ndescription: Returns a part of the text of Hamlet. Returns \"No more content\" if the index is greater than the number of parts.\nargs: index: (unsigned int) the index of the part to return, beginning at 0\n\n#!python3 main.py \"$index\"\n",
                      "markdown": "`---\nname: hamlet-retriever\ndescription: Returns a part of the text of Hamlet. Returns \"No more content\" if the index is greater than the number of parts.\nargs: index: (unsigned int) the index of the part to return, beginning at 0\n\n#!python3 main.py \"$index\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/hamlet-summarizer.gpt"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 18,
                  "endLine": 23,
                  "endColumn": 22,
                  "snippet": {
                    "text": "Get the part of Hamlet at index $index.\nRead the existing summary of Hamlet up to this point in summary.txt.\n\nSummarize the part at index $index. Include as many details as possible. Do not leave out any important plot points.\nDo not introduce the summary with \"In this part of Hamlet\", \"In this segment\", or any similar language.\nIf a new character is introduced, be sure to explain who they are.\nAdd two newlines to the end of your summary and append it to summary.txt.\n",
                    "rendered": {
                      "text": "Get the part of Hamlet at index $index.\nRead the existing summary of Hamlet up to this point in summary.txt.\n\nSummarize the part at index $index. Include as many details as possible. Do not leave out any important plot points.\nDo not introduce the summary with \"In this part of Hamlet\", \"In this segment\", or any similar language.\nIf a new character is introduced, be sure to explain who they are.\nAdd two newlines to the end of your summary and append it to summary.txt.\n",
                      "markdown": "`Get the part of Hamlet at index $index.\nRead the existing summary of Hamlet up to this point in summary.txt.\n\nSummarize the part at index $index. Include as many details as possible. Do not leave out any important plot points.\nDo not introduce the summary with \"In this part of Hamlet\", \"In this segment\", or any similar language.\nIf a new character is introduced, be sure to explain who they are.\nAdd two newlines to the end of your summary and append it to summary.txt.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/hamlet-summarizer.gpt"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 22,
                  "endLine": 20,
                  "endColumn": 26,
                  "snippet": {
                    "text": "args: index: (unsigned int) the index of the portion to summarize, beginning at 0\n\nYou are a theater expert, and you're tasked with summarizing part of Hamlet.\nGet the part of Hamlet at index $index.\nRead the existing summary of Hamlet up to this point in summary.txt.\n\nSummarize the part at index $index. Include as many details as possible. Do not leave out any important plot points.\n",
                    "rendered": {
                      "text": "args: index: (unsigned int) the index of the portion to summarize, beginning at 0\n\nYou are a theater expert, and you're tasked with summarizing part of Hamlet.\nGet the part of Hamlet at index $index.\nRead the existing summary of Hamlet up to this point in summary.txt.\n\nSummarize the part at index $index. Include as many details as possible. Do not leave out any important plot points.\n",
                      "markdown": "`args: index: (unsigned int) the index of the portion to summarize, beginning at 0\n\nYou are a theater expert, and you're tasked with summarizing part of Hamlet.\nGet the part of Hamlet at index $index.\nRead the existing summary of Hamlet up to this point in summary.txt.\n\nSummarize the part at index $index. Include as many details as possible. Do not leave out any important plot points.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/hamlet-summarizer/hamlet-summarizer.gpt"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 76,
                  "endLine": 17,
                  "endColumn": 80,
                  "snippet": {
                    "text": "name: hamlet-summarizer\ntools: hamlet-retriever, sys.read, sys.append\ndescription: Summarizes a part of the text of Hamlet. Returns \"No more content\" if the index is greater than the number of parts.\nargs: index: (unsigned int) the index of the portion to summarize, beginning at 0\n\nYou are a theater expert, and you're tasked with summarizing part of Hamlet.\nGet the part of Hamlet at index $index.\n",
                    "rendered": {
                      "text": "name: hamlet-summarizer\ntools: hamlet-retriever, sys.read, sys.append\ndescription: Summarizes a part of the text of Hamlet. Returns \"No more content\" if the index is greater than the number of parts.\nargs: index: (unsigned int) the index of the portion to summarize, beginning at 0\n\nYou are a theater expert, and you're tasked with summarizing part of Hamlet.\nGet the part of Hamlet at index $index.\n",
                      "markdown": "`name: hamlet-summarizer\ntools: hamlet-retriever, sys.read, sys.append\ndescription: Summarizes a part of the text of Hamlet. Returns \"No more content\" if the index is greater than the number of parts.\nargs: index: (unsigned int) the index of the portion to summarize, beginning at 0\n\nYou are a theater expert, and you're tasked with summarizing part of Hamlet.\nGet the part of Hamlet at index $index.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 48,
                  "endLine": 88,
                  "endColumn": 52,
                  "snippet": {
                    "text": "# --- verify an executable gptscript binary is installed ---\nverify_gptscript_is_executable() {\n  if [ ! -x ${BIN_DIR}/gptscript ]; then\n    fatal \"Executable gptscript binary not found at ${BIN_DIR}/gptscript\"\n  fi\n}\n\n",
                    "rendered": {
                      "text": "# --- verify an executable gptscript binary is installed ---\nverify_gptscript_is_executable() {\n  if [ ! -x ${BIN_DIR}/gptscript ]; then\n    fatal \"Executable gptscript binary not found at ${BIN_DIR}/gptscript\"\n  fi\n}\n\n",
                      "markdown": "`# --- verify an executable gptscript binary is installed ---\nverify_gptscript_is_executable() {\n  if [ ! -x ${BIN_DIR}/gptscript ]; then\n    fatal \"Executable gptscript binary not found at ${BIN_DIR}/gptscript\"\n  fi\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 61,
                  "endLine": 285,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n  download_hash\n",
                    "rendered": {
                      "text": "\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n  download_hash\n",
                      "markdown": "`\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n  download_hash\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 81,
                  "endLine": 284,
                  "endColumn": 87,
                  "snippet": {
                    "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                    "rendered": {
                      "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                      "markdown": "`  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 68,
                  "endLine": 284,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                    "rendered": {
                      "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                      "markdown": "`  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 45,
                  "endLine": 284,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                    "rendered": {
                      "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                      "markdown": "`  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 19,
                  "endLine": 284,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                    "rendered": {
                      "text": "  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n",
                      "markdown": "`  fi\n\n  setup_verify_arch\n  verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n  verify_sha sha256sum || verify_sha shasum || fatal 'Can not find sha256sum or shasum for verifying files'\n  setup_tmp\n  get_release_version\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 7,
                  "endLine": 272,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n}\n\n# --- download and verify gptscript ---\n",
                    "rendered": {
                      "text": "  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n}\n\n# --- download and verify gptscript ---\n",
                      "markdown": "`  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n}\n\n# --- download and verify gptscript ---\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 7,
                  "endLine": 271,
                  "endColumn": 14,
                  "snippet": {
                    "text": "setup_binary() {\n  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n}\n\n",
                    "rendered": {
                      "text": "setup_binary() {\n  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n}\n\n",
                      "markdown": "`setup_binary() {\n  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 1,
                  "endLine": 269,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n",
                    "rendered": {
                      "text": "\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n",
                      "markdown": "`\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n  chmod 755 ${TMP_BIN}\n  info \"Installing gptscript to ${BIN_DIR}/gptscript\"\n  $SUDO chown root ${TMP_BIN}\n  $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/gptscript\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 3,
                  "endLine": 261,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  if [ \"${EXT}\" = \".zip\" ]; then\n    unzip ${TMP_ARCHIVE} -d ${TMP_DIR}\n  else\n    tar xzf ${TMP_ARCHIVE} -C ${TMP_DIR}\n  fi\n\n  TMP_BIN=${TMP_DIR}/gptscript\n",
                    "rendered": {
                      "text": "  if [ \"${EXT}\" = \".zip\" ]; then\n    unzip ${TMP_ARCHIVE} -d ${TMP_DIR}\n  else\n    tar xzf ${TMP_ARCHIVE} -C ${TMP_DIR}\n  fi\n\n  TMP_BIN=${TMP_DIR}/gptscript\n",
                      "markdown": "`  if [ \"${EXT}\" = \".zip\" ]; then\n    unzip ${TMP_ARCHIVE} -d ${TMP_DIR}\n  else\n    tar xzf ${TMP_ARCHIVE} -C ${TMP_DIR}\n  fi\n\n  TMP_BIN=${TMP_DIR}/gptscript\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 5,
                  "endLine": 208,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      curl -o $1 -sfL $2\n      ;;\n    wget)\n      wget -qO $1 $2\n      ;;\n    *)\n      fatal \"Incorrect executable '$DOWNLOADER'\"\n",
                    "rendered": {
                      "text": "      curl -o $1 -sfL $2\n      ;;\n    wget)\n      wget -qO $1 $2\n      ;;\n    *)\n      fatal \"Incorrect executable '$DOWNLOADER'\"\n",
                      "markdown": "`      curl -o $1 -sfL $2\n      ;;\n    wget)\n      wget -qO $1 $2\n      ;;\n    *)\n      fatal \"Incorrect executable '$DOWNLOADER'\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 5,
                  "endLine": 205,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  case $DOWNLOADER in\n    curl)\n      curl -o $1 -sfL $2\n      ;;\n    wget)\n      wget -qO $1 $2\n",
                    "rendered": {
                      "text": "\n  case $DOWNLOADER in\n    curl)\n      curl -o $1 -sfL $2\n      ;;\n    wget)\n      wget -qO $1 $2\n",
                      "markdown": "`\n  case $DOWNLOADER in\n    curl)\n      curl -o $1 -sfL $2\n      ;;\n    wget)\n      wget -qO $1 $2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 86,
                  "endLine": 190,
                  "endColumn": 91,
                  "snippet": {
                    "text": "      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n      ;;\n    *)\n      fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n",
                    "rendered": {
                      "text": "      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n      ;;\n    *)\n      fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n",
                      "markdown": "`      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n      ;;\n    *)\n      fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 67,
                  "endLine": 190,
                  "endColumn": 73,
                  "snippet": {
                    "text": "      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n      ;;\n    *)\n      fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n",
                    "rendered": {
                      "text": "      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n      ;;\n    *)\n      fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n",
                      "markdown": "`      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n      ;;\n    *)\n      fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 91,
                  "endLine": 187,
                  "endColumn": 96,
                  "snippet": {
                    "text": "  version_url=\"${GITHUB_URL}/latest\"\n  case $DOWNLOADER in\n    curl)\n      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n",
                    "rendered": {
                      "text": "  version_url=\"${GITHUB_URL}/latest\"\n  case $DOWNLOADER in\n    curl)\n      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n",
                      "markdown": "`  version_url=\"${GITHUB_URL}/latest\"\n  case $DOWNLOADER in\n    curl)\n      VERSION_GPTSCRIPT=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n      ;;\n    wget)\n      VERSION_GPTSCRIPT=$(wget -SqO /dev/null ${version_url} 2>&1 | grep -i Location | sed -e 's|.*/||')\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 56,
                  "endLine": 181,
                  "endColumn": 62,
                  "snippet": {
                    "text": "  trap cleanup INT EXIT\n}\n\n# --- use desired latest gptscript version if defined or find version from channel ---\nget_release_version() {\n  info \"Finding latest release\"\n  version_url=\"${GITHUB_URL}/latest\"\n",
                    "rendered": {
                      "text": "  trap cleanup INT EXIT\n}\n\n# --- use desired latest gptscript version if defined or find version from channel ---\nget_release_version() {\n  info \"Finding latest release\"\n  version_url=\"${GITHUB_URL}/latest\"\n",
                      "markdown": "`  trap cleanup INT EXIT\n}\n\n# --- use desired latest gptscript version if defined or find version from channel ---\nget_release_version() {\n  info \"Finding latest release\"\n  version_url=\"${GITHUB_URL}/latest\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 63,
                  "endLine": 23,
                  "endColumn": 71,
                  "snippet": {
                    "text": "#   default will symlink if command does not exist in path.\n#\n#   - INSTALL_GPTSCRIPT_BIN_DIR\n#   Directory to install gptscript binary, links, and uninstall script to, or use\n#   /usr/local/bin as the default\n#\n#   - INSTALL_GPTSCRIPT_BIN_DIR_READ_ONLY\n",
                    "rendered": {
                      "text": "#   default will symlink if command does not exist in path.\n#\n#   - INSTALL_GPTSCRIPT_BIN_DIR\n#   Directory to install gptscript binary, links, and uninstall script to, or use\n#   /usr/local/bin as the default\n#\n#   - INSTALL_GPTSCRIPT_BIN_DIR_READ_ONLY\n",
                      "markdown": "`#   default will symlink if command does not exist in path.\n#\n#   - INSTALL_GPTSCRIPT_BIN_DIR\n#   Directory to install gptscript binary, links, and uninstall script to, or use\n#   /usr/local/bin as the default\n#\n#   - INSTALL_GPTSCRIPT_BIN_DIR_READ_ONLY\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# Example:\n#   Installing the most recent release:\n#   curl ... | sh -\n#\n# Environment variables:\n#   - INSTALL_GPTSCRIPT_SKIP_DOWNLOAD\n",
                    "rendered": {
                      "text": "#\n# Example:\n#   Installing the most recent release:\n#   curl ... | sh -\n#\n# Environment variables:\n#   - INSTALL_GPTSCRIPT_SKIP_DOWNLOAD\n",
                      "markdown": "`#\n# Example:\n#   Installing the most recent release:\n#   curl ... | sh -\n#\n# Environment variables:\n#   - INSTALL_GPTSCRIPT_SKIP_DOWNLOAD\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 9,
                  "snippet": {
                    "text": "set -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#     or\n#   ENV_VAR=... ./install.sh\n#\n",
                    "rendered": {
                      "text": "set -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#     or\n#   ENV_VAR=... ./install.sh\n#\n",
                      "markdown": "`set -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#     or\n#   ENV_VAR=... ./install.sh\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000104"
          },
          "message": {
            "text": "Backdoor: Curl Bashing",
            "id": "BD000104"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/scripts/install.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 4,
                  "endLine": 12,
                  "endColumn": 17,
                  "snippet": {
                    "text": "#\n# Example:\n#   Installing the most recent release:\n#   curl ... | sh -\n#\n# Environment variables:\n#   - INSTALL_GPTSCRIPT_SKIP_DOWNLOAD\n",
                    "rendered": {
                      "text": "#\n# Example:\n#   Installing the most recent release:\n#   curl ... | sh -\n#\n# Environment variables:\n#   - INSTALL_GPTSCRIPT_SKIP_DOWNLOAD\n",
                      "markdown": "`#\n# Example:\n#   Installing the most recent release:\n#   curl ... | sh -\n#\n# Environment variables:\n#   - INSTALL_GPTSCRIPT_SKIP_DOWNLOAD\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/json-notebook/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 21,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "```bash\n# Create a Python venv\npython3 -m venv venv\n. ./venv/bin/activate\npip install jupyter ipykernel\npython -m ipykernel install --user --name=venv\njupyter notebook\n```\n",
                    "rendered": {
                      "text": "```bash\n# Create a Python venv\npython3 -m venv venv\n. ./venv/bin/activate\npip install jupyter ipykernel\npython -m ipykernel install --user --name=venv\njupyter notebook\n```\n",
                      "markdown": "````bash\n# Create a Python venv\npython3 -m venv venv\n. ./venv/bin/activate\npip install jupyter ipykernel\npython -m ipykernel install --user --name=venv\njupyter notebook\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/server.js"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 3,
                  "endLine": 104,
                  "endColumn": 8,
                  "snippet": {
                    "text": "});\n\n// Route to serve artists data\napp.get('/artists', (req, res) => {\n    const artistsData = getArtistsData();\n    res.json(artistsData);\n});\n",
                    "rendered": {
                      "text": "});\n\n// Route to serve artists data\napp.get('/artists', (req, res) => {\n    const artistsData = getArtistsData();\n    res.json(artistsData);\n});\n",
                      "markdown": "`});\n\n// Route to serve artists data\napp.get('/artists', (req, res) => {\n    const artistsData = getArtistsData();\n    res.json(artistsData);\n});\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/server.js"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 3,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "});\n\n// Route to request new artists\napp.post('/new-artists', async (req, res) => {\n    const instructions = `\nCreate three short graphic artist descriptions and their muses. \nThese should be descriptive and explain their point of view.\n",
                    "rendered": {
                      "text": "});\n\n// Route to request new artists\napp.post('/new-artists', async (req, res) => {\n    const instructions = `\nCreate three short graphic artist descriptions and their muses. \nThese should be descriptive and explain their point of view.\n",
                      "markdown": "`});\n\n// Route to request new artists\napp.post('/new-artists', async (req, res) => {\n    const instructions = `\nCreate three short graphic artist descriptions and their muses. \nThese should be descriptive and explain their point of view.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/server.js"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 3,
                  "endLine": 32,
                  "endColumn": 9,
                  "snippet": {
                    "text": "});\n\n// Route to handle logo generation request\napp.post('/generate-logo', async (req, res) => {\n    const description = req.body.description;\n    const artists = getArtistsData();\n    const instructions = `\n",
                    "rendered": {
                      "text": "});\n\n// Route to handle logo generation request\napp.post('/generate-logo', async (req, res) => {\n    const description = req.body.description;\n    const artists = getArtistsData();\n    const instructions = `\n",
                      "markdown": "`});\n\n// Route to handle logo generation request\napp.post('/generate-logo', async (req, res) => {\n    const description = req.body.description;\n    const artists = getArtistsData();\n    const instructions = `\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/server.js"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 8,
                  "snippet": {
                    "text": "}\n\n// Route to serve index.html\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/public/index.html');\n});\n\n",
                    "rendered": {
                      "text": "}\n\n// Route to serve index.html\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/public/index.html');\n});\n\n",
                      "markdown": "`}\n\n// Route to serve index.html\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/public/index.html');\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 62,
                  "endLine": 52,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n## Diving in\n\nThe application is a simple nodejs app that uses the gptscript node module to interact with the image generation tool. The gptscript module is just running the CLI under the hood, and will pick up the standard configuration environment variables, the most important of which is the OPENAI_API_KEY.\n\nSometimes the OpenAI LLM model will return an error, which can be seen in the terminal running the server app. Sometimes, the model will return a response that doesn't quite match the expected output format and throw an error.\n",
                    "rendered": {
                      "text": "\n## Diving in\n\nThe application is a simple nodejs app that uses the gptscript node module to interact with the image generation tool. The gptscript module is just running the CLI under the hood, and will pick up the standard configuration environment variables, the most important of which is the OPENAI_API_KEY.\n\nSometimes the OpenAI LLM model will return an error, which can be seen in the terminal running the server app. Sometimes, the model will return a response that doesn't quite match the expected output format and throw an error.\n",
                      "markdown": "`\n## Diving in\n\nThe application is a simple nodejs app that uses the gptscript node module to interact with the image generation tool. The gptscript module is just running the CLI under the hood, and will pick up the standard configuration environment variables, the most important of which is the OPENAI_API_KEY.\n\nSometimes the OpenAI LLM model will return an error, which can be seen in the terminal running the server app. Sometimes, the model will return a response that doesn't quite match the expected output format and throw an error.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/README.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 32,
                  "endLine": 48,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\nOnce the application is started, open <http://localhost:3000> in your browser. You will be presented with a form to enter a description of the logo you would like to generate. After submitting the form, you will be presented with three logo options.\n\nThe backend models take a bit of time to render the images, so it might seem like the application is hanging. This is normal, and the images will be presented once they are ready.\n\n## Diving in\n\n",
                    "rendered": {
                      "text": "\nOnce the application is started, open <http://localhost:3000> in your browser. You will be presented with a form to enter a description of the logo you would like to generate. After submitting the form, you will be presented with three logo options.\n\nThe backend models take a bit of time to render the images, so it might seem like the application is hanging. This is normal, and the images will be presented once they are ready.\n\n## Diving in\n\n",
                      "markdown": "`\nOnce the application is started, open <http://localhost:3000> in your browser. You will be presented with a form to enter a description of the logo you would like to generate. After submitting the form, you will be presented with three logo options.\n\nThe backend models take a bit of time to render the images, so it might seem like the application is hanging. This is normal, and the images will be presented once they are ready.\n\n## Diving in\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/README.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 7,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n1. Clone the repository.\n\n```bash\ngit clone https://github.com/gptscript-ai/gptscript.git\n```\n\n1. Navigate to the 'examples/nodejs-imagegen' directory and install dependencies.\n",
                    "rendered": {
                      "text": "\n1. Clone the repository.\n\n```bash\ngit clone https://github.com/gptscript-ai/gptscript.git\n```\n\n1. Navigate to the 'examples/nodejs-imagegen' directory and install dependencies.\n",
                      "markdown": "`\n1. Clone the repository.\n\n```bash\ngit clone https://github.com/gptscript-ai/gptscript.git\n```\n\n1. Navigate to the 'examples/nodejs-imagegen' directory and install dependencies.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/nodejs-imagegen/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 34,
                  "endLine": 5,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n## Overview\n\nThis nodejs app uses the gptscript node module and the image generation tool (leverages DALL-E) to create a simple AI logo design site. The app uses an existing three AI generated artists, or can create an additional set of three artists, to render a logo based on the description provided by the user. The resulting logo images are then presented to the user.\n\n## Features\n\n",
                    "rendered": {
                      "text": "\n## Overview\n\nThis nodejs app uses the gptscript node module and the image generation tool (leverages DALL-E) to create a simple AI logo design site. The app uses an existing three AI generated artists, or can create an additional set of three artists, to render a logo based on the description provided by the user. The resulting logo images are then presented to the user.\n\n## Features\n\n",
                      "markdown": "`\n## Overview\n\nThis nodejs app uses the gptscript node module and the image generation tool (leverages DALL-E) to create a simple AI logo design site. The app uses an existing three AI generated artists, or can create an additional set of three artists, to render a logo based on the description provided by the user. The resulting logo images are then presented to the user.\n\n## Features\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-jenkins/Jenkinsfile"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 15,
                  "endLine": 40,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n        stage('Check PR Status') {\n            steps {\n                script {\n                    // Check if REVIEW contains 'Require Changes'\n                    if (REVIEW.contains('Require Changes')) {\n                        echo 'Code Requires Changes'\n",
                    "rendered": {
                      "text": "\n        stage('Check PR Status') {\n            steps {\n                script {\n                    // Check if REVIEW contains 'Require Changes'\n                    if (REVIEW.contains('Require Changes')) {\n                        echo 'Code Requires Changes'\n",
                      "markdown": "`\n        stage('Check PR Status') {\n            steps {\n                script {\n                    // Check if REVIEW contains 'Require Changes'\n                    if (REVIEW.contains('Require Changes')) {\n                        echo 'Code Requires Changes'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-jenkins/Jenkinsfile"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 15,
                  "endLine": 13,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n        stage('GPT Review') {\n            steps {\n                script {\n                    checkout([\n                        $class: 'GitSCM',\n                        branches: [[name: '*/main']], // Specify branch\n",
                    "rendered": {
                      "text": "\n        stage('GPT Review') {\n            steps {\n                script {\n                    checkout([\n                        $class: 'GitSCM',\n                        branches: [[name: '*/main']], // Specify branch\n",
                      "markdown": "`\n        stage('GPT Review') {\n            steps {\n                script {\n                    checkout([\n                        $class: 'GitSCM',\n                        branches: [[name: '*/main']], // Specify branch\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-jenkins/codereview.gpt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                    "rendered": {
                      "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                      "markdown": "`Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-jenkins/codereview.gpt"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 11,
                  "snippet": {
                    "text": "gh repo --help\ngh pr --help\ngh pr checkout --help\ngh pr diff --help\n",
                    "rendered": {
                      "text": "gh repo --help\ngh pr --help\ngh pr checkout --help\ngh pr diff --help\n",
                      "markdown": "`gh repo --help\ngh pr --help\ngh pr checkout --help\ngh pr diff --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/gptreview-jenkins/codereview.gpt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                    "rendered": {
                      "text": "Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n",
                      "markdown": "`Name: learn-gh\nDescription: A tool to help you learn gh cli\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands.  Note that the --search flag is used for filtering and sorting as well; there is no dedicate --sort flag.\"\ngh --help\ngh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/treasure-hunt/static/js/app.js"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 17,
                  "endLine": 14,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    methods: {\n        getClues() {\n            this.isLoading = true;\n            axios.post('/get-clues', { code: this.code })\n                .then(response => {\n                    this.cluesMarkdown = response.data;\n                    this.renderedMarkdown = marked.parse(this.cluesMarkdown)\n",
                    "rendered": {
                      "text": "    methods: {\n        getClues() {\n            this.isLoading = true;\n            axios.post('/get-clues', { code: this.code })\n                .then(response => {\n                    this.cluesMarkdown = response.data;\n                    this.renderedMarkdown = marked.parse(this.cluesMarkdown)\n",
                      "markdown": "`    methods: {\n        getClues() {\n            this.isLoading = true;\n            axios.post('/get-clues', { code: this.code })\n                .then(response => {\n                    this.cluesMarkdown = response.data;\n                    this.renderedMarkdown = marked.parse(this.cluesMarkdown)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 27,
                  "endLine": 11,
                  "endColumn": 33,
                  "snippet": {
                    "text": "args: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\necho \"Your current date and time is \"\ndate\necho \"Time in your requested timezone ${timezone} is \" \nTZ=${timezone} date\n",
                    "rendered": {
                      "text": "args: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\necho \"Your current date and time is \"\ndate\necho \"Time in your requested timezone ${timezone} is \" \nTZ=${timezone} date\n",
                      "markdown": "`args: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\necho \"Your current date and time is \"\ndate\necho \"Time in your requested timezone ${timezone} is \" \nTZ=${timezone} date\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 37,
                  "endLine": 8,
                  "endColumn": 43,
                  "snippet": {
                    "text": "---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\necho \"Your current date and time is \"\n",
                    "rendered": {
                      "text": "---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\necho \"Your current date and time is \"\n",
                      "markdown": "`---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\necho \"Your current date and time is \"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 29,
                  "endLine": 7,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\n",
                    "rendered": {
                      "text": "\n---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\n",
                      "markdown": "`\n---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 5,
                  "endLine": 7,
                  "snippet": {
                    "text": "Ask time to get you the time in different timezones.\n\n---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\n",
                    "rendered": {
                      "text": "Ask time to get you the time in different timezones.\n\n---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\n",
                      "markdown": "`Ask time to get you the time in different timezones.\n\n---\nname: time\ndescription: Can tell current time in any timezone,\nargs: timezone: The timezone you want time in e.g. 'Pacific/Honolulu'\n\n#!/bin/bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 23,
                  "endLine": 3,
                  "endColumn": 29,
                  "snippet": {
                    "text": "tools: time\n\nAsk time to get you the time in different timezones.\n\n---\nname: time\n",
                    "rendered": {
                      "text": "tools: time\n\nAsk time to get you the time in different timezones.\n\n---\nname: time\n",
                      "markdown": "`tools: time\n\nAsk time to get you the time in different timezones.\n\n---\nname: time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 3,
                  "endLine": 3,
                  "endColumn": 9,
                  "snippet": {
                    "text": "tools: time\n\nAsk time to get you the time in different timezones.\n\n---\nname: time\n",
                    "rendered": {
                      "text": "tools: time\n\nAsk time to get you the time in different timezones.\n\n---\nname: time\n",
                      "markdown": "`tools: time\n\nAsk time to get you the time in different timezones.\n\n---\nname: time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/time.gpt"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 6,
                  "endLine": 2,
                  "snippet": {
                    "text": "tools: time\n\nAsk time to get you the time in different timezones.\n\n---\n",
                    "rendered": {
                      "text": "tools: time\n\nAsk time to get you the time in different timezones.\n\n---\n",
                      "markdown": "`tools: time\n\nAsk time to get you the time in different timezones.\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/describe-code.gpt"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 7,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n---\nname: compare\n",
                    "rendered": {
                      "text": "\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n---\nname: compare\n",
                      "markdown": "`\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n---\nname: compare\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/describe-code.gpt"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 6,
                  "endLine": 16,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n    echo $i\ndone | sort -n\n\n---\nname: count\n",
                    "rendered": {
                      "text": "\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n    echo $i\ndone | sort -n\n\n---\nname: count\n",
                      "markdown": "`\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n    echo $i\ndone | sort -n\n\n---\nname: count\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/describe-code.gpt"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "endLine": 14,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n#!/bin/bash\n\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n    echo $i\ndone | sort -n\n\n",
                    "rendered": {
                      "text": "\n#!/bin/bash\n\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n    echo $i\ndone | sort -n\n\n",
                      "markdown": "`\n#!/bin/bash\n\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n    echo $i\ndone | sort -n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/describe-code.gpt"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 47,
                  "endLine": 11,
                  "snippet": {
                    "text": "---\nname: compare\ndescription: Sorts a list of number from smallest to biggest\narg: list: A comma separated list of numbers to sort\n\n#!/bin/bash\n\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n",
                    "rendered": {
                      "text": "---\nname: compare\ndescription: Sorts a list of number from smallest to biggest\narg: list: A comma separated list of numbers to sort\n\n#!/bin/bash\n\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n",
                      "markdown": "`---\nname: compare\ndescription: Sorts a list of number from smallest to biggest\narg: list: A comma separated list of numbers to sort\n\n#!/bin/bash\n\nfor i in $(echo \"${LIST}\" | sed 's/[[,\\]]/ /g'); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/describe-code.gpt"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13,
                  "snippet": {
                    "text": "Tools: sys.find, count, summarize, compare\n\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n",
                    "rendered": {
                      "text": "Tools: sys.find, count, summarize, compare\n\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n",
                      "markdown": "`Tools: sys.find, count, summarize, compare\n\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/describe-code.gpt"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 3,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Tools: sys.find, count, summarize, compare\n\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n",
                    "rendered": {
                      "text": "Tools: sys.find, count, summarize, compare\n\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n",
                      "markdown": "`Tools: sys.find, count, summarize, compare\n\nFind the top 10 go files that have the most lines of code. Then summarize each one.\n\nLooking at the summary of all files write a short description of this program and its function.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/sqlite-download.gpt"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 17,
                  "endLine": 4,
                  "endColumn": 25,
                  "snippet": {
                    "text": "tools: sys.download, sys.exec, sys.remove\n\nDownload https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip to a\nrandom file. Then expand the archive to a temporary location as there is a sqlite\ndatabase in it.\n\nFirst inspect the schema of the database to understand the table structure.\n",
                    "rendered": {
                      "text": "tools: sys.download, sys.exec, sys.remove\n\nDownload https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip to a\nrandom file. Then expand the archive to a temporary location as there is a sqlite\ndatabase in it.\n\nFirst inspect the schema of the database to understand the table structure.\n",
                      "markdown": "`tools: sys.download, sys.exec, sys.remove\n\nDownload https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip to a\nrandom file. Then expand the archive to a temporary location as there is a sqlite\ndatabase in it.\n\nFirst inspect the schema of the database to understand the table structure.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/sqlite-download.gpt"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 27,
                  "endLine": 9,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nFirst inspect the schema of the database to understand the table structure.\n\nForm and run a SQL query to find the artist with the most number of albums and output\nthe result of that.\n\nWhen done remove the database file and the downloaded content.\n",
                    "rendered": {
                      "text": "\nFirst inspect the schema of the database to understand the table structure.\n\nForm and run a SQL query to find the artist with the most number of albums and output\nthe result of that.\n\nWhen done remove the database file and the downloaded content.\n",
                      "markdown": "`\nFirst inspect the schema of the database to understand the table structure.\n\nForm and run a SQL query to find the artist with the most number of albums and output\nthe result of that.\n\nWhen done remove the database file and the downloaded content.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/sqlite-download.gpt"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 17,
                  "endLine": 4,
                  "endColumn": 25,
                  "snippet": {
                    "text": "tools: sys.download, sys.exec, sys.remove\n\nDownload https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip to a\nrandom file. Then expand the archive to a temporary location as there is a sqlite\ndatabase in it.\n\nFirst inspect the schema of the database to understand the table structure.\n",
                    "rendered": {
                      "text": "tools: sys.download, sys.exec, sys.remove\n\nDownload https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip to a\nrandom file. Then expand the archive to a temporary location as there is a sqlite\ndatabase in it.\n\nFirst inspect the schema of the database to understand the table structure.\n",
                      "markdown": "`tools: sys.download, sys.exec, sys.remove\n\nDownload https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip to a\nrandom file. Then expand the archive to a temporary location as there is a sqlite\ndatabase in it.\n\nFirst inspect the schema of the database to understand the table structure.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/examples/echo.gpt"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 42,
                  "endLine": 2,
                  "snippet": {
                    "text": "description: Returns back the input of the script\nargs: input: Any string\necho \"${input}\"\n",
                    "rendered": {
                      "text": "description: Returns back the input of the script\nargs: input: Any string\necho \"${input}\"\n",
                      "markdown": "`description: Returns back the input of the script\nargs: input: Any string\necho \"${input}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/engine.go"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 2,
                  "endLine": 423,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\t\tInput:   content.ToolCall.Function.Arguments,\n\t\t\t}\n\t\t} else {\n\t\t\tcp := content.Text\n\t\t\tret.Result = &cp\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t\tInput:   content.ToolCall.Function.Arguments,\n\t\t\t}\n\t\t} else {\n\t\t\tcp := content.Text\n\t\t\tret.Result = &cp\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\t\tInput:   content.ToolCall.Function.Arguments,\n\t\t\t}\n\t\t} else {\n\t\t\tcp := content.Text\n\t\t\tret.Result = &cp\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/engine.go"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 25,
                  "endLine": 412,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t}\n\t\t\tif toolID == \"\" {\n\t\t\t\tlog.Debugf(\"failed to find tool id for tool %s in tool_call result\", content.ToolCall.Function.Name)\n\t\t\t\ttoolID = types.ToolNormalizer(content.ToolCall.Function.Name)\n\t\t\t\tmissing = true\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t}\n\t\t\tif toolID == \"\" {\n\t\t\t\tlog.Debugf(\"failed to find tool id for tool %s in tool_call result\", content.ToolCall.Function.Name)\n\t\t\t\ttoolID = types.ToolNormalizer(content.ToolCall.Function.Name)\n\t\t\t\tmissing = true\n\t\t\t}\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t}\n\t\t\tif toolID == \"\" {\n\t\t\t\tlog.Debugf(\"failed to find tool id for tool %s in tool_call result\", content.ToolCall.Function.Name)\n\t\t\t\ttoolID = types.ToolNormalizer(content.ToolCall.Function.Name)\n\t\t\t\tmissing = true\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/engine.go"
                },
                "region": {
                  "startLine": 256,
                  "endLine": 256,
                  "endColumn": 4,
                  "snippet": {
                    "text": "}\n\nfunc (c *Context) WrappedContext(e *Engine) context.Context {\n\tcp := *c\n\tcp.Engine = e\n\treturn context.WithValue(c.Ctx, engineContext{}, &cp)\n}\n",
                    "rendered": {
                      "text": "}\n\nfunc (c *Context) WrappedContext(e *Engine) context.Context {\n\tcp := *c\n\tcp.Engine = e\n\treturn context.WithValue(c.Ctx, engineContext{}, &cp)\n}\n",
                      "markdown": "`}\n\nfunc (c *Context) WrappedContext(e *Engine) context.Context {\n\tcp := *c\n\tcp.Engine = e\n\treturn context.WithValue(c.Ctx, engineContext{}, &cp)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/engine.go"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "endColumn": 5,
                  "snippet": {
                    "text": "type Engine struct {\n\tModel          Model\n\tRuntimeManager RuntimeManager\n\tEnv            []string\n\tProgress       chan<- types.CompletionStatus\n}\n\n",
                    "rendered": {
                      "text": "type Engine struct {\n\tModel          Model\n\tRuntimeManager RuntimeManager\n\tEnv            []string\n\tProgress       chan<- types.CompletionStatus\n}\n\n",
                      "markdown": "`type Engine struct {\n\tModel          Model\n\tRuntimeManager RuntimeManager\n\tEnv            []string\n\tProgress       chan<- types.CompletionStatus\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/engine.go"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 54,
                  "endLine": 23,
                  "endColumn": 59,
                  "snippet": {
                    "text": "}\n\ntype RuntimeManager interface {\n\tGetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error)\n\tEnsureCredentialHelpers(ctx context.Context) error\n\tSetUpCredentialHelpers(ctx context.Context, cliCfg *config.CLIConfig) error\n}\n",
                    "rendered": {
                      "text": "}\n\ntype RuntimeManager interface {\n\tGetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error)\n\tEnsureCredentialHelpers(ctx context.Context) error\n\tSetUpCredentialHelpers(ctx context.Context, cliCfg *config.CLIConfig) error\n}\n",
                      "markdown": "`}\n\ntype RuntimeManager interface {\n\tGetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error)\n\tEnsureCredentialHelpers(ctx context.Context) error\n\tSetUpCredentialHelpers(ctx context.Context, cliCfg *config.CLIConfig) error\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/daemon.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 19,
                  "endLine": 203,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t}()\n\n\tfor i := 0; i < 120; i++ {\n\t\tresp, err := http.Get(url)\n\t\tif err == nil && resp.StatusCode == http.StatusOK {\n\t\t\tgo func() {\n\t\t\t\t_, _ = io.ReadAll(resp.Body)\n",
                    "rendered": {
                      "text": "\t}()\n\n\tfor i := 0; i < 120; i++ {\n\t\tresp, err := http.Get(url)\n\t\tif err == nil && resp.StatusCode == http.StatusOK {\n\t\t\tgo func() {\n\t\t\t\t_, _ = io.ReadAll(resp.Body)\n",
                      "markdown": "`\t}()\n\n\tfor i := 0; i < 120; i++ {\n\t\tresp, err := http.Get(url)\n\t\tif err == nil && resp.StatusCode == http.StatusOK {\n\t\t\tgo func() {\n\t\t\t\t_, _ = io.ReadAll(resp.Body)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/download/extract.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tdefer os.Remove(tmpFile.Name())\n\tdefer tmpFile.Close()\n\n\tresp, err := http.Get(downloadURL)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\tdefer os.Remove(tmpFile.Name())\n\tdefer tmpFile.Close()\n\n\tresp, err := http.Get(downloadURL)\n\tif err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\tdefer os.Remove(tmpFile.Name())\n\tdefer tmpFile.Close()\n\n\tresp, err := http.Get(downloadURL)\n\tif err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/git_test.go"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 17,
                  "endLine": 16,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\nvar (\n\ttestCacheHome = lo.Must(xdg.CacheFile(\"gptscript-test-cache/repo\"))\n\ttestCommit    = \"f9d0ca6559d0b7c78da7f413fc4faf87ae9b8919\"\n)\n\nfunc TestFetch(t *testing.T) {\n",
                    "rendered": {
                      "text": "\nvar (\n\ttestCacheHome = lo.Must(xdg.CacheFile(\"gptscript-test-cache/repo\"))\n\ttestCommit    = \"f9d0ca6559d0b7c78da7f413fc4faf87ae9b8919\"\n)\n\nfunc TestFetch(t *testing.T) {\n",
                      "markdown": "`\nvar (\n\ttestCacheHome = lo.Must(xdg.CacheFile(\"gptscript-test-cache/repo\"))\n\ttestCommit    = \"f9d0ca6559d0b7c78da7f413fc4faf87ae9b8919\"\n)\n\nfunc TestFetch(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/git/git_test.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package git\n\nimport (\n\t\"context\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package git\n\nimport (\n\t\"context\"\n\t\"os\"\n",
                      "markdown": "`package git\n\nimport (\n\t\"context\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 5,
                  "endLine": 250,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\n\t\tnewEnv, err = runtime.Setup(ctx, tool, m.runtimeDir, targetFinal, env)\n\t\tif err != nil {\n\t\t\treturn \"\", nil, err\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\n\t\tnewEnv, err = runtime.Setup(ctx, tool, m.runtimeDir, targetFinal, env)\n\t\tif err != nil {\n\t\t\treturn \"\", nil, err\n\t\t}\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\n\t\tnewEnv, err = runtime.Setup(ctx, tool, m.runtimeDir, targetFinal, env)\n\t\tif err != nil {\n\t\t\treturn \"\", nil, err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 4,
                  "endLine": 179,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tif (err == nil && strings.TrimSpace(string(lastRevision)) != tool.Source.Repo.Root+tag) || errors.Is(err, fs.ErrNotExist) {\n\t\t// Need to pull the latest version.\n\t\tneedsDownloaded = true\n\t\t// Update the revision file to the new revision.\n\t\tif err = os.WriteFile(credHelperDirs.RevisionFile, []byte(tool.Source.Repo.Root+tag), 0644); err != nil {\n\t\t\treturn err\n\t\t}\n",
                    "rendered": {
                      "text": "\tif (err == nil && strings.TrimSpace(string(lastRevision)) != tool.Source.Repo.Root+tag) || errors.Is(err, fs.ErrNotExist) {\n\t\t// Need to pull the latest version.\n\t\tneedsDownloaded = true\n\t\t// Update the revision file to the new revision.\n\t\tif err = os.WriteFile(credHelperDirs.RevisionFile, []byte(tool.Source.Repo.Root+tag), 0644); err != nil {\n\t\t\treturn err\n\t\t}\n",
                      "markdown": "`\tif (err == nil && strings.TrimSpace(string(lastRevision)) != tool.Source.Repo.Root+tag) || errors.Is(err, fs.ErrNotExist) {\n\t\t// Need to pull the latest version.\n\t\tneedsDownloaded = true\n\t\t// Update the revision file to the new revision.\n\t\tif err = os.WriteFile(credHelperDirs.RevisionFile, []byte(tool.Source.Repo.Root+tag), 0644); err != nil {\n\t\t\treturn err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 3,
                  "endLine": 146,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\n\t// Update the last-checked file.\n\tif err := os.WriteFile(credHelperDirs.LastCheckedFile, []byte(now.Format(time.RFC3339)), 0644); err != nil {\n\t\treturn err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn err\n\t}\n\n\t// Update the last-checked file.\n\tif err := os.WriteFile(credHelperDirs.LastCheckedFile, []byte(now.Format(time.RFC3339)), 0644); err != nil {\n\t\treturn err\n\t}\n",
                      "markdown": "`\t\treturn err\n\t}\n\n\t// Update the last-checked file.\n\tif err := os.WriteFile(credHelperDirs.LastCheckedFile, []byte(now.Format(time.RFC3339)), 0644); err != nil {\n\t\treturn err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 26,
                  "endLine": 27,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\ntype Runtime interface {\n\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n",
                    "rendered": {
                      "text": "\ntype Runtime interface {\n\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n",
                      "markdown": "`\ntype Runtime interface {\n\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 71,
                  "endLine": 273,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\treturn targetFinal, append(env, newEnv...), os.Rename(doneFile+\".tmp\", doneFile)\n}\n\nfunc (m *Manager) GetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error) {\n\tvar isLocal bool\n\tif tool.Source.Repo == nil {\n\t\tisLocal = true\n",
                    "rendered": {
                      "text": "\treturn targetFinal, append(env, newEnv...), os.Rename(doneFile+\".tmp\", doneFile)\n}\n\nfunc (m *Manager) GetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error) {\n\tvar isLocal bool\n\tif tool.Source.Repo == nil {\n\t\tisLocal = true\n",
                      "markdown": "`\treturn targetFinal, append(env, newEnv...), os.Rename(doneFile+\".tmp\", doneFile)\n}\n\nfunc (m *Manager) GetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error) {\n\tvar isLocal bool\n\tif tool.Source.Repo == nil {\n\t\tisLocal = true\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 78,
                  "endLine": 205,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\treturn fmt.Errorf(\"no Go runtime found to build the credential helper\")\n}\n\nfunc (m *Manager) setup(ctx context.Context, runtime Runtime, tool types.Tool, env []string) (string, []string, error) {\n\tlocker.Lock(tool.ID)\n\tdefer locker.Unlock(tool.ID)\n\n",
                    "rendered": {
                      "text": "\treturn fmt.Errorf(\"no Go runtime found to build the credential helper\")\n}\n\nfunc (m *Manager) setup(ctx context.Context, runtime Runtime, tool types.Tool, env []string) (string, []string, error) {\n\tlocker.Lock(tool.ID)\n\tdefer locker.Unlock(tool.ID)\n\n",
                      "markdown": "`\treturn fmt.Errorf(\"no Go runtime found to build the credential helper\")\n}\n\nfunc (m *Manager) setup(ctx context.Context, runtime Runtime, tool types.Tool, env []string) (string, []string, error) {\n\tlocker.Lock(tool.ID)\n\tdefer locker.Unlock(tool.ID)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 3,
                  "endLine": 195,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\t// Find the Go runtime and use it to build the credential helper.\n\tfor _, rt := range m.runtimes {\n\t\tif strings.HasPrefix(rt.ID(), \"go\") {\n\t\t\treturn rt.(*golang.Runtime).DownloadCredentialHelper(ctx, tool, helperName, distInfo, suffix, credHelperDirs.BinDir)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\t// Find the Go runtime and use it to build the credential helper.\n\tfor _, rt := range m.runtimes {\n\t\tif strings.HasPrefix(rt.ID(), \"go\") {\n\t\t\treturn rt.(*golang.Runtime).DownloadCredentialHelper(ctx, tool, helperName, distInfo, suffix, credHelperDirs.BinDir)\n",
                      "markdown": "`\t\t}\n\t}\n\n\t// Find the Go runtime and use it to build the credential helper.\n\tfor _, rt := range m.runtimes {\n\t\tif strings.HasPrefix(rt.ID(), \"go\") {\n\t\t\treturn rt.(*golang.Runtime).DownloadCredentialHelper(ctx, tool, helperName, distInfo, suffix, credHelperDirs.BinDir)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 73,
                  "endLine": 29,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n}\n\n",
                    "rendered": {
                      "text": "\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n}\n\n",
                      "markdown": "`\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 74,
                  "endLine": 28,
                  "endColumn": 79,
                  "snippet": {
                    "text": "type Runtime interface {\n\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n}\n",
                    "rendered": {
                      "text": "type Runtime interface {\n\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n}\n",
                      "markdown": "`type Runtime interface {\n\tID() string\n\tSupports(tool types.Tool, cmd []string) bool\n\tBinary(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) (bool, []string, error)\n\tSetup(ctx context.Context, tool types.Tool, dataRoot, toolSource string, env []string) ([]string, error)\n\tGetHash(tool types.Tool) (string, error)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get_test.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\tm := New(testCacheHome, &python.Runtime{\n\t\tVersion: \"3.11\",\n\t})\n\tcwd, env, err := m.GetContext(context.Background(), types.Tool{\n\t\tSource: types.ToolSource{\n\t\t\tRepo: &types.Repo{\n\t\t\t\tVCS:      \"git\",\n",
                    "rendered": {
                      "text": "\tm := New(testCacheHome, &python.Runtime{\n\t\tVersion: \"3.11\",\n\t})\n\tcwd, env, err := m.GetContext(context.Background(), types.Tool{\n\t\tSource: types.ToolSource{\n\t\t\tRepo: &types.Repo{\n\t\t\t\tVCS:      \"git\",\n",
                      "markdown": "`\tm := New(testCacheHome, &python.Runtime{\n\t\tVersion: \"3.11\",\n\t})\n\tcwd, env, err := m.GetContext(context.Background(), types.Tool{\n\t\tSource: types.ToolSource{\n\t\t\tRepo: &types.Repo{\n\t\t\t\tVCS:      \"git\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/get_test.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 14,
                  "endLine": 30,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\tRepo: &types.Repo{\n\t\t\t\tVCS:      \"git\",\n\t\t\t\tRoot:     \"https://github.com/gptscript-ai/dalle-image-generation.git\",\n\t\t\t\tRevision: \"b9d9ed60c25da7c0e01d504a7219d1c6e460fe80\",\n\t\t\t},\n\t\t},\n\t}, []string{\"/usr/bin/env\", \"python3.11\"}, os.Environ())\n",
                    "rendered": {
                      "text": "\t\t\tRepo: &types.Repo{\n\t\t\t\tVCS:      \"git\",\n\t\t\t\tRoot:     \"https://github.com/gptscript-ai/dalle-image-generation.git\",\n\t\t\t\tRevision: \"b9d9ed60c25da7c0e01d504a7219d1c6e460fe80\",\n\t\t\t},\n\t\t},\n\t}, []string{\"/usr/bin/env\", \"python3.11\"}, os.Environ())\n",
                      "markdown": "`\t\t\tRepo: &types.Repo{\n\t\t\t\tVCS:      \"git\",\n\t\t\t\tRoot:     \"https://github.com/gptscript-ai/dalle-image-generation.git\",\n\t\t\t\tRevision: \"b9d9ed60c25da7c0e01d504a7219d1c6e460fe80\",\n\t\t\t},\n\t\t},\n\t}, []string{\"/usr/bin/env\", \"python3.11\"}, os.Environ())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/credential_show.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 27,
                  "endLine": 52,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"failed to get credentials store: %w\", err)\n\t}\n\n\tcred, exists, err := store.Get(cmd.Context(), args[0])\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get credential: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Errorf(\"failed to get credentials store: %w\", err)\n\t}\n\n\tcred, exists, err := store.Get(cmd.Context(), args[0])\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get credential: %w\", err)\n\t}\n",
                      "markdown": "`\t\treturn fmt.Errorf(\"failed to get credentials store: %w\", err)\n\t}\n\n\tcred, exists, err := store.Get(cmd.Context(), args[0])\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get credential: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/getenv.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 15,
                  "endLine": 44,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t}\n\n\tif strings.HasPrefix(v, `{\"_gz\":\"`) && strings.HasSuffix(v, `\"}`) {\n\t\tdata, err := base64.StdEncoding.DecodeString(v[8 : len(v)-2])\n\t\tif err != nil {\n\t\t\treturn v\n\t\t}\n",
                    "rendered": {
                      "text": "\t}\n\n\tif strings.HasPrefix(v, `{\"_gz\":\"`) && strings.HasSuffix(v, `\"}`) {\n\t\tdata, err := base64.StdEncoding.DecodeString(v[8 : len(v)-2])\n\t\tif err != nil {\n\t\t\treturn v\n\t\t}\n",
                      "markdown": "`\t}\n\n\tif strings.HasPrefix(v, `{\"_gz\":\"`) && strings.HasSuffix(v, `\"}`) {\n\t\tdata, err := base64.StdEncoding.DecodeString(v[8 : len(v)-2])\n\t\tif err != nil {\n\t\t\treturn v\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/getenv.go"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 11,
                  "endLine": 6,
                  "endColumn": 17,
                  "snippet": {
                    "text": "import (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "import (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n",
                      "markdown": "`import (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 50,
                  "endLine": 207,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n> craft an email summarizing performance at this location and these promotions\n\n  Here's a draft email summarizing the performance at Kevin's location and the current promotions:\n\n  --------\n\n",
                    "rendered": {
                      "text": "\n> craft an email summarizing performance at this location and these promotions\n\n  Here's a draft email summarizing the performance at Kevin's location and the current promotions:\n\n  --------\n\n",
                      "markdown": "`\n> craft an email summarizing performance at this location and these promotions\n\n  Here's a draft email summarizing the performance at Kevin's location and the current promotions:\n\n  --------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 40,
                  "endLine": 205,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  These promotions can help Kevin boost sales in Rochester. Is there anything specific you would like to do with\n  this information?\n\n> craft an email summarizing performance at this location and these promotions\n\n  Here's a draft email summarizing the performance at Kevin's location and the current promotions:\n\n",
                    "rendered": {
                      "text": "  These promotions can help Kevin boost sales in Rochester. Is there anything specific you would like to do with\n  this information?\n\n> craft an email summarizing performance at this location and these promotions\n\n  Here's a draft email summarizing the performance at Kevin's location and the current promotions:\n\n",
                      "markdown": "`  These promotions can help Kevin boost sales in Rochester. Is there anything specific you would like to do with\n  this information?\n\n> craft an email summarizing performance at this location and these promotions\n\n  Here's a draft email summarizing the performance at Kevin's location and the current promotions:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 6,
                  "endLine": 158,
                  "endColumn": 10,
                  "snippet": {
                    "text": "> what were sales like for Kevin's location?\n\n  To find out sales for Kevin's location, I will need to check the  yoy_sales.xlsx  file for any relevant data. Let me take a\n  look at the contents of that file.\n...\n  The sales data for Rochester, where Kevin is located, is as follows:\n\n",
                    "rendered": {
                      "text": "> what were sales like for Kevin's location?\n\n  To find out sales for Kevin's location, I will need to check the  yoy_sales.xlsx  file for any relevant data. Let me take a\n  look at the contents of that file.\n...\n  The sales data for Rochester, where Kevin is located, is as follows:\n\n",
                      "markdown": "`> what were sales like for Kevin's location?\n\n  To find out sales for Kevin's location, I will need to check the  yoy_sales.xlsx  file for any relevant data. Let me take a\n  look at the contents of that file.\n...\n  The sales data for Rochester, where Kevin is located, is as follows:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 8,
                  "endLine": 149,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  Would you like to update this information or perform any other actions?\n> yes set his email to kev@ and use the same domain as the others\n\n  I will update Kevin's email to  kev@gptscript-fakeco.com  in the CSV file.\n```\n\n### Cross-referencing\n",
                    "rendered": {
                      "text": "  Would you like to update this information or perform any other actions?\n> yes set his email to kev@ and use the same domain as the others\n\n  I will update Kevin's email to  kev@gptscript-fakeco.com  in the CSV file.\n```\n\n### Cross-referencing\n",
                      "markdown": "`  Would you like to update this information or perform any other actions?\n> yes set his email to kev@ and use the same domain as the others\n\n  I will update Kevin's email to  kev@gptscript-fakeco.com  in the CSV file.\n```\n\n### Cross-referencing\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 19,
                  "endLine": 146,
                  "endColumn": 27,
                  "snippet": {
                    "text": "...\n  Yes, there is missing data in the CSV file. Specifically, the email for Kevin in Rochester is missing.\n\n  Would you like to update this information or perform any other actions?\n> yes set his email to kev@ and use the same domain as the others\n\n  I will update Kevin's email to  kev@gptscript-fakeco.com  in the CSV file.\n",
                    "rendered": {
                      "text": "...\n  Yes, there is missing data in the CSV file. Specifically, the email for Kevin in Rochester is missing.\n\n  Would you like to update this information or perform any other actions?\n> yes set his email to kev@ and use the same domain as the others\n\n  I will update Kevin's email to  kev@gptscript-fakeco.com  in the CSV file.\n",
                      "markdown": "`...\n  Yes, there is missing data in the CSV file. Specifically, the email for Kevin in Rochester is missing.\n\n  Would you like to update this information or perform any other actions?\n> yes set his email to kev@ and use the same domain as the others\n\n  I will update Kevin's email to  kev@gptscript-fakeco.com  in the CSV file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 50,
                  "endLine": 5,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nWith GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n",
                    "rendered": {
                      "text": "\nWith GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n",
                      "markdown": "`\nWith GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 4,
                  "endLine": 157,
                  "endColumn": 10,
                  "snippet": {
                    "text": "```\n> what were sales like for Kevin's location?\n\n  To find out sales for Kevin's location, I will need to check the  yoy_sales.xlsx  file for any relevant data. Let me take a\n  look at the contents of that file.\n...\n  The sales data for Rochester, where Kevin is located, is as follows:\n",
                    "rendered": {
                      "text": "```\n> what were sales like for Kevin's location?\n\n  To find out sales for Kevin's location, I will need to check the  yoy_sales.xlsx  file for any relevant data. Let me take a\n  look at the contents of that file.\n...\n  The sales data for Rochester, where Kevin is located, is as follows:\n",
                      "markdown": "````\n> what were sales like for Kevin's location?\n\n  To find out sales for Kevin's location, I will need to check the  yoy_sales.xlsx  file for any relevant data. Let me take a\n  look at the contents of that file.\n...\n  The sales data for Rochester, where Kevin is located, is as follows:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nNext, open up a new gptscript file in your favorite editor. We'll call the file `data-assistant.gpt`.\n\n```\nvim data-assistant.gpt\n```\n\nAll edits below are assumed to be in this file.\n",
                    "rendered": {
                      "text": "\nNext, open up a new gptscript file in your favorite editor. We'll call the file `data-assistant.gpt`.\n\n```\nvim data-assistant.gpt\n```\n\nAll edits below are assumed to be in this file.\n",
                      "markdown": "`\nNext, open up a new gptscript file in your favorite editor. We'll call the file `data-assistant.gpt`.\n\n```\nvim data-assistant.gpt\n```\n\nAll edits below are assumed to be in this file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 26,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nFirst, let's get some sample data to work with. You can clone our repo with our sample data:\n\n```\ngit clone https://github.com/gptscript-ai/local-files-demo.git\ncd local-files-demo\n```\n\n",
                    "rendered": {
                      "text": "\nFirst, let's get some sample data to work with. You can clone our repo with our sample data:\n\n```\ngit clone https://github.com/gptscript-ai/local-files-demo.git\ncd local-files-demo\n```\n\n",
                      "markdown": "`\nFirst, let's get some sample data to work with. You can clone our repo with our sample data:\n\n```\ngit clone https://github.com/gptscript-ai/local-files-demo.git\ncd local-files-demo\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 24,
                  "endLine": 14,
                  "endColumn": 32,
                  "snippet": {
                    "text": "The below command will allow GPTScript to work with the files in your ~/Documents directory. Change the directory if you want to restrict it.\n:::\n\nWant to start using this script now? Just run:\n```\ngptscript --workspace=~/Documents github.com/gptscript-ai/local-files-demo\n```\n",
                    "rendered": {
                      "text": "The below command will allow GPTScript to work with the files in your ~/Documents directory. Change the directory if you want to restrict it.\n:::\n\nWant to start using this script now? Just run:\n```\ngptscript --workspace=~/Documents github.com/gptscript-ai/local-files-demo\n```\n",
                      "markdown": "`The below command will allow GPTScript to work with the files in your ~/Documents directory. Change the directory if you want to restrict it.\n:::\n\nWant to start using this script now? Just run:\n```\ngptscript --workspace=~/Documents github.com/gptscript-ai/local-files-demo\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 18,
                  "endLine": 6,
                  "endColumn": 26,
                  "snippet": {
                    "text": "With GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n\n",
                    "rendered": {
                      "text": "With GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n\n",
                      "markdown": "`With GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/04-local-files.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 28,
                  "endLine": 5,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nWith GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n",
                    "rendered": {
                      "text": "\nWith GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n",
                      "markdown": "`\nWith GPTScript, interacting with local files is simple and powerful.\nThis can help you streamline repetitive or data-intensive tasks.\nIn this guide, we'll build a script that can query Excel files, CSVs, and PDFs.\nWe'll then use the script to read, transform, and utilize the data in these files.\n\n## Too Long; Didn't Read\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 56,
                  "endLine": 83,
                  "endColumn": 60,
                  "snippet": {
                    "text": "Before you run this script, you need to have a DigitalOcean API token.\n\nGo to [Applications & API](https://cloud.digitalocean.com/account/api/tokens) in the DigitalOcean dashboard and create a new token.\nYou can select whichever scopes you want, but you should at least give it the ability to read droplets and databases.\n\n## Running the Script\n\n",
                    "rendered": {
                      "text": "Before you run this script, you need to have a DigitalOcean API token.\n\nGo to [Applications & API](https://cloud.digitalocean.com/account/api/tokens) in the DigitalOcean dashboard and create a new token.\nYou can select whichever scopes you want, but you should at least give it the ability to read droplets and databases.\n\n## Running the Script\n\n",
                      "markdown": "`Before you run this script, you need to have a DigitalOcean API token.\n\nGo to [Applications & API](https://cloud.digitalocean.com/account/api/tokens) in the DigitalOcean dashboard and create a new token.\nYou can select whichever scopes you want, but you should at least give it the ability to read droplets and databases.\n\n## Running the Script\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 88,
                  "endLine": 75,
                  "endColumn": 92,
                  "snippet": {
                    "text": ":::note\nWe cannot give the entire `openapi.yaml` file to the tool because it contains too many API operations.\nMost LLM providers, such as OpenAI, have a limit on the number of tools that you can provide to the model at one time.\nThe OpenAPI file contains over 300 operations, which is too many for most LLMs to handle at once.\n:::\n\n## Creating an API Token\n",
                    "rendered": {
                      "text": ":::note\nWe cannot give the entire `openapi.yaml` file to the tool because it contains too many API operations.\nMost LLM providers, such as OpenAI, have a limit on the number of tools that you can provide to the model at one time.\nThe OpenAPI file contains over 300 operations, which is too many for most LLMs to handle at once.\n:::\n\n## Creating an API Token\n",
                      "markdown": "`:::note\nWe cannot give the entire `openapi.yaml` file to the tool because it contains too many API operations.\nMost LLM providers, such as OpenAI, have a limit on the number of tools that you can provide to the model at one time.\nThe OpenAPI file contains over 300 operations, which is too many for most LLMs to handle at once.\n:::\n\n## Creating an API Token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 105,
                  "endLine": 74,
                  "endColumn": 109,
                  "snippet": {
                    "text": "\n:::note\nWe cannot give the entire `openapi.yaml` file to the tool because it contains too many API operations.\nMost LLM providers, such as OpenAI, have a limit on the number of tools that you can provide to the model at one time.\nThe OpenAPI file contains over 300 operations, which is too many for most LLMs to handle at once.\n:::\n\n",
                    "rendered": {
                      "text": "\n:::note\nWe cannot give the entire `openapi.yaml` file to the tool because it contains too many API operations.\nMost LLM providers, such as OpenAI, have a limit on the number of tools that you can provide to the model at one time.\nThe OpenAPI file contains over 300 operations, which is too many for most LLMs to handle at once.\n:::\n\n",
                      "markdown": "`\n:::note\nWe cannot give the entire `openapi.yaml` file to the tool because it contains too many API operations.\nMost LLM providers, such as OpenAI, have a limit on the number of tools that you can provide to the model at one time.\nThe OpenAPI file contains over 300 operations, which is too many for most LLMs to handle at once.\n:::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 23,
                  "endLine": 101,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n## Next Steps\n\nFeel free to modify the script to add other parts of the DigitalOcean API.\nYou could also try creating a chatbot for a different API with an OpenAPI definition.\n\nFor a more advanced DigitalOcean chatbot, see our [DigitalOcean Agent](https://github.com/gptscript-ai/digital-ocean-agent) tool.\n",
                    "rendered": {
                      "text": "\n## Next Steps\n\nFeel free to modify the script to add other parts of the DigitalOcean API.\nYou could also try creating a chatbot for a different API with an OpenAPI definition.\n\nFor a more advanced DigitalOcean chatbot, see our [DigitalOcean Agent](https://github.com/gptscript-ai/digital-ocean-agent) tool.\n",
                      "markdown": "`\n## Next Steps\n\nFeel free to modify the script to add other parts of the DigitalOcean API.\nYou could also try creating a chatbot for a different API with an OpenAPI definition.\n\nFor a more advanced DigitalOcean chatbot, see our [DigitalOcean Agent](https://github.com/gptscript-ai/digital-ocean-agent) tool.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 9,
                  "endLine": 95,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nTry asking it to list your current databases or droplets, or to help you create a new one.\n\nThe first time the LLM tries to make an API call, it will ask for your API token.\nPaste it into the prompt. It will be used for all future API calls as well.\nThe LLM will never see or store your API token. It is only used client-side, on your computer.\n\n",
                    "rendered": {
                      "text": "\nTry asking it to list your current databases or droplets, or to help you create a new one.\n\nThe first time the LLM tries to make an API call, it will ask for your API token.\nPaste it into the prompt. It will be used for all future API calls as well.\nThe LLM will never see or store your API token. It is only used client-side, on your computer.\n\n",
                      "markdown": "`\nTry asking it to list your current databases or droplets, or to help you create a new one.\n\nThe first time the LLM tries to make an API call, it will ask for your API token.\nPaste it into the prompt. It will be used for all future API calls as well.\nThe LLM will never see or store your API token. It is only used client-side, on your computer.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n## Running the Script\n\nLet's run the script and start chatting with it:\n\n```bash\ngptscript tool.gpt\n",
                    "rendered": {
                      "text": "\n## Running the Script\n\nLet's run the script and start chatting with it:\n\n```bash\ngptscript tool.gpt\n",
                      "markdown": "`\n## Running the Script\n\nLet's run the script and start chatting with it:\n\n```bash\ngptscript tool.gpt\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 14,
                  "endLine": 86,
                  "snippet": {
                    "text": "Go to [Applications & API](https://cloud.digitalocean.com/account/api/tokens) in the DigitalOcean dashboard and create a new token.\nYou can select whichever scopes you want, but you should at least give it the ability to read droplets and databases.\n\n## Running the Script\n\nLet's run the script and start chatting with it:\n\n```bash\n",
                    "rendered": {
                      "text": "Go to [Applications & API](https://cloud.digitalocean.com/account/api/tokens) in the DigitalOcean dashboard and create a new token.\nYou can select whichever scopes you want, but you should at least give it the ability to read droplets and databases.\n\n## Running the Script\n\nLet's run the script and start chatting with it:\n\n```bash\n",
                      "markdown": "`Go to [Applications & API](https://cloud.digitalocean.com/account/api/tokens) in the DigitalOcean dashboard and create a new token.\nYou can select whichever scopes you want, but you should at least give it the ability to read droplets and databases.\n\n## Running the Script\n\nLet's run the script and start chatting with it:\n\n```bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 15,
                  "endLine": 47,
                  "snippet": {
                    "text": "The operationIds generally follow a pattern of `object_verb`.\nThis will be helpful for us, because we can use wildcard matching to refer to a subset of the operations.\n\n## Creating the Script\n\nCreate a `tool.gpt` file with the following contents:\n\n```\n",
                    "rendered": {
                      "text": "The operationIds generally follow a pattern of `object_verb`.\nThis will be helpful for us, because we can use wildcard matching to refer to a subset of the operations.\n\n## Creating the Script\n\nCreate a `tool.gpt` file with the following contents:\n\n```\n",
                      "markdown": "`The operationIds generally follow a pattern of `object_verb`.\nThis will be helpful for us, because we can use wildcard matching to refer to a subset of the operations.\n\n## Creating the Script\n\nCreate a `tool.gpt` file with the following contents:\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 7,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Let's examine this OpenAPI file. GPTScript will create a tool named after each operationId in the file.\nYou can see the operationIds by running the following command:\n\n```bash\ngrep operationId openapi.yaml\n# ...\n# operationId: domains_delete_record\n# operationId: droplets_list\n",
                    "rendered": {
                      "text": "Let's examine this OpenAPI file. GPTScript will create a tool named after each operationId in the file.\nYou can see the operationIds by running the following command:\n\n```bash\ngrep operationId openapi.yaml\n# ...\n# operationId: domains_delete_record\n# operationId: droplets_list\n",
                      "markdown": "`Let's examine this OpenAPI file. GPTScript will create a tool named after each operationId in the file.\nYou can see the operationIds by running the following command:\n\n```bash\ngrep operationId openapi.yaml\n# ...\n# operationId: domains_delete_record\n# operationId: droplets_list\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/02-api.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 7,
                  "endLine": 14,
                  "endColumn": 5,
                  "snippet": {
                    "text": "While you can reference it by its URL, it is a bit easier to work with it locally.\nYou can download the file by running the following command:\n\n```bash\ncurl -o openapi.yaml -L https://api-engineering.nyc3.cdn.digitaloceanspaces.com/spec-ci/DigitalOcean-public.v2.yaml\n```\n\nThis will download a copy of the OpenAPI definition to the current directory.\n",
                    "rendered": {
                      "text": "While you can reference it by its URL, it is a bit easier to work with it locally.\nYou can download the file by running the following command:\n\n```bash\ncurl -o openapi.yaml -L https://api-engineering.nyc3.cdn.digitaloceanspaces.com/spec-ci/DigitalOcean-public.v2.yaml\n```\n\nThis will download a copy of the OpenAPI definition to the current directory.\n",
                      "markdown": "`While you can reference it by its URL, it is a bit easier to work with it locally.\nYou can download the file by running the following command:\n\n```bash\ncurl -o openapi.yaml -L https://api-engineering.nyc3.cdn.digitaloceanspaces.com/spec-ci/DigitalOcean-public.v2.yaml\n```\n\nThis will download a copy of the OpenAPI definition to the current directory.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/tools/gendocs/main.go"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "endColumn": 5,
                  "snippet": {
                    "text": "`\n\nfunc main() {\n\tcmd := gptscript.New()\n\tcmd.DisableAutoGenTag = true\n\n\tfiles, err := filepath.Glob(\"docs/docs/04-command-line-reference/gptscript_*.md\")\n",
                    "rendered": {
                      "text": "`\n\nfunc main() {\n\tcmd := gptscript.New()\n\tcmd.DisableAutoGenTag = true\n\n\tfiles, err := filepath.Glob(\"docs/docs/04-command-line-reference/gptscript_*.md\")\n",
                      "markdown": "``\n\nfunc main() {\n\tcmd := gptscript.New()\n\tcmd.DisableAutoGenTag = true\n\n\tfiles, err := filepath.Glob(\"docs/docs/04-command-line-reference/gptscript_*.md\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/monitor.go"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "endColumn": 5,
                  "snippet": {
                    "text": "type Session struct {\n\tid      string\n\tprj     *types.Program\n\tenv     []string\n\tevents  *broadcaster.Broadcaster[event]\n\trunLock sync.Mutex\n}\n",
                    "rendered": {
                      "text": "type Session struct {\n\tid      string\n\tprj     *types.Program\n\tenv     []string\n\tevents  *broadcaster.Broadcaster[event]\n\trunLock sync.Mutex\n}\n",
                      "markdown": "`type Session struct {\n\tid      string\n\tprj     *types.Program\n\tenv     []string\n\tevents  *broadcaster.Broadcaster[event]\n\trunLock sync.Mutex\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/monitor.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 70,
                  "endLine": 25,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc (s SessionFactory) Start(ctx context.Context, prg *types.Program, env []string, input string) (runner.Monitor, error) {\n\tid := gserver.RunIDFromContext(ctx)\n\tcategory := engine.ToolCategoryFromContext(ctx)\n\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc (s SessionFactory) Start(ctx context.Context, prg *types.Program, env []string, input string) (runner.Monitor, error) {\n\tid := gserver.RunIDFromContext(ctx)\n\tcategory := engine.ToolCategoryFromContext(ctx)\n\n",
                      "markdown": "`\t}\n}\n\nfunc (s SessionFactory) Start(ctx context.Context, prg *types.Program, env []string, input string) (runner.Monitor, error) {\n\tid := gserver.RunIDFromContext(ctx)\n\tcategory := engine.ToolCategoryFromContext(ctx)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/credentials.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 23,
                  "endLine": 169,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t}\n\n\t// Check to see if a cred exists so we can return a 404 if it doesn't.\n\tif _, ok, err := store.Get(r.Context(), req.Name); err != nil {\n\t\twriteError(logger, w, http.StatusInternalServerError, fmt.Errorf(\"failed to get credential: %w\", err))\n\t\treturn\n\t} else if !ok {\n",
                    "rendered": {
                      "text": "\t}\n\n\t// Check to see if a cred exists so we can return a 404 if it doesn't.\n\tif _, ok, err := store.Get(r.Context(), req.Name); err != nil {\n\t\twriteError(logger, w, http.StatusInternalServerError, fmt.Errorf(\"failed to get credential: %w\", err))\n\t\treturn\n\t} else if !ok {\n",
                      "markdown": "`\t}\n\n\t// Check to see if a cred exists so we can return a 404 if it doesn't.\n\tif _, ok, err := store.Get(r.Context(), req.Name); err != nil {\n\t\twriteError(logger, w, http.StatusInternalServerError, fmt.Errorf(\"failed to get credential: %w\", err))\n\t\treturn\n\t} else if !ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/credentials.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 23,
                  "endLine": 131,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t\treturn\n\t}\n\n\tcred, ok, err := store.Get(r.Context(), req.Name)\n\tif err != nil {\n\t\twriteError(logger, w, http.StatusInternalServerError, fmt.Errorf(\"failed to get credential: %w\", err))\n\t\treturn\n",
                    "rendered": {
                      "text": "\t\treturn\n\t}\n\n\tcred, ok, err := store.Get(r.Context(), req.Name)\n\tif err != nil {\n\t\twriteError(logger, w, http.StatusInternalServerError, fmt.Errorf(\"failed to get credential: %w\", err))\n\t\treturn\n",
                      "markdown": "`\t\treturn\n\t}\n\n\tcred, ok, err := store.Get(r.Context(), req.Name)\n\tif err != nil {\n\t\twriteError(logger, w, http.StatusInternalServerError, fmt.Errorf(\"failed to get credential: %w\", err))\n\t\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 4,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "\n#!/bin/bash\n\necho bash works",
                      "markdown": "`\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 31,
                  "snippet": {
                    "text": "console.log(\"node worked\")\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "console.log(\"node worked\")\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                      "markdown": "`console.log(\"node worked\")\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 16,
                  "endLine": 3,
                  "snippet": {
                    "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                    "rendered": {
                      "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                      "markdown": "`name: first\ntools: py, node, bash\n\nDummy\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 4,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "\n#!/bin/bash\n\necho bash works",
                      "markdown": "`\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 31,
                  "snippet": {
                    "text": "console.log(\"node worked\")\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                    "rendered": {
                      "text": "console.log(\"node worked\")\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works",
                      "markdown": "`console.log(\"node worked\")\n\n---\nname: bash\n\n#!/bin/bash\n\necho bash works`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "endLine": 25,
                  "snippet": {
                    "text": "---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\nconsole.log(\"node worked\")\n\n",
                    "rendered": {
                      "text": "---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\nconsole.log(\"node worked\")\n\n",
                      "markdown": "`---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\nconsole.log(\"node worked\")\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 5,
                  "endLine": 23,
                  "snippet": {
                    "text": "    print('py worked\\r')\n\n---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\n",
                    "rendered": {
                      "text": "    print('py worked\\r')\n\n---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\n",
                      "markdown": "`    print('py worked\\r')\n\n---\nname: node\n\n#!/usr/bin/env node\n\nimport chalk from 'chalk';\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/testdata/TestRuntimesLocalDev/test.gpt"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 16,
                  "endLine": 3,
                  "snippet": {
                    "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                    "rendered": {
                      "text": "name: first\ntools: py, node, bash\n\nDummy\n\n---\n",
                      "markdown": "`name: first\ntools: py, node, bash\n\nDummy\n\n---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi/TestOpenAPIv3.golden"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 44,
                  "endLine": 90,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi/TestOpenAPIv3.golden"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 51,
                  "endLine": 90,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi/TestOpenAPIv3NoOperationIDs.golden"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 44,
                  "endLine": 48,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi/TestOpenAPIv3NoOperationIDs.golden"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "endLine": 48,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n",
                      "markdown": "`\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t\tMax:         valast.Ptr(float64(100)),\n\t\t\t\t\t}}},\n\t\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi/TestOpenAPIv2.golden"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 44,
                  "endLine": 67,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t},\n",
                      "markdown": "`\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/loader/testdata/openapi/TestOpenAPIv2.golden"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 51,
                  "endLine": 67,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t},\n",
                      "markdown": "`\t\t\t\t\tProperties: openapi3.Schemas{\"limit\": &openapi3.SchemaRef{Value: &openapi3.Schema{\n\t\t\t\t\t\tType:        &openapi3.Types{\"integer\"},\n\t\t\t\t\t\tFormat:      \"int32\",\n\t\t\t\t\t\tDescription: \"How many items to return at one time (max 100)\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 22,
                  "endLine": 163,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\treturn nil, false, fmt.Errorf(\"unexpected status when getting latest release: %s\", resp.Status)\n\t}\n\n\ttarget := resp.Header.Get(\"Location\")\n\tif target == \"\" {\n\t\treturn nil, false, nil\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, false, fmt.Errorf(\"unexpected status when getting latest release: %s\", resp.Status)\n\t}\n\n\ttarget := resp.Header.Get(\"Location\")\n\tif target == \"\" {\n\t\treturn nil, false, nil\n\t}\n",
                      "markdown": "`\t\treturn nil, false, fmt.Errorf(\"unexpected status when getting latest release: %s\", resp.Status)\n\t}\n\n\ttarget := resp.Header.Get(\"Location\")\n\tif target == \"\" {\n\t\treturn nil, false, nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 19,
                  "endLine": 154,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tresp, err = client.Get(fmt.Sprintf(\"https://github.com/%s/%s/releases/latest\", account, repo))\n\tif err != nil {\n\t\treturn nil, false, fmt.Errorf(\"failed to get latest release: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tresp, err = client.Get(fmt.Sprintf(\"https://github.com/%s/%s/releases/latest\", account, repo))\n\tif err != nil {\n\t\treturn nil, false, fmt.Errorf(\"failed to get latest release: %w\", err)\n\t}\n",
                      "markdown": "`\t\t}\n\t}\n\n\tresp, err = client.Get(fmt.Sprintf(\"https://github.com/%s/%s/releases/latest\", account, repo))\n\tif err != nil {\n\t\treturn nil, false, fmt.Errorf(\"failed to get latest release: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 20,
                  "endLine": 131,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\taccount, repo := parts[1], parts[2]\n\n\tresp, err := client.Get(fmt.Sprintf(\"https://api.github.com/repos/%s/%s/tags\", account, repo))\n\tif err != nil {\n\t\treturn nil, false, fmt.Errorf(\"failed to get tags: %w\", err)\n\t}\n",
                    "rendered": {
                      "text": "\n\taccount, repo := parts[1], parts[2]\n\n\tresp, err := client.Get(fmt.Sprintf(\"https://api.github.com/repos/%s/%s/tags\", account, repo))\n\tif err != nil {\n\t\treturn nil, false, fmt.Errorf(\"failed to get tags: %w\", err)\n\t}\n",
                      "markdown": "`\n\taccount, repo := parts[1], parts[2]\n\n\tresp, err := client.Get(fmt.Sprintf(\"https://api.github.com/repos/%s/%s/tags\", account, repo))\n\tif err != nil {\n\t\treturn nil, false, fmt.Errorf(\"failed to get tags: %w\", err)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 340,
                  "endLine": 340,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc (r *Runtime) runBuild(ctx context.Context, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running go build in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"go\"), \"build\", \"-buildvcs=false\", \"-o\", artifactName())\n\tcmd.Env = stripGo(env)\n\tcmd.Dir = toolSource\n\treturn cmd.Run()\n",
                    "rendered": {
                      "text": "\nfunc (r *Runtime) runBuild(ctx context.Context, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running go build in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"go\"), \"build\", \"-buildvcs=false\", \"-o\", artifactName())\n\tcmd.Env = stripGo(env)\n\tcmd.Dir = toolSource\n\treturn cmd.Run()\n",
                      "markdown": "`\nfunc (r *Runtime) runBuild(ctx context.Context, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running go build in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"go\"), \"build\", \"-buildvcs=false\", \"-o\", artifactName())\n\tcmd.Env = stripGo(env)\n\tcmd.Dir = toolSource\n\treturn cmd.Run()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 43,
                  "endLine": 47,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) Supports(tool types.Tool, cmd []string) bool {\n\treturn tool.Source.IsGit() &&\n\t\tlen(cmd) > 0 && cmd[0] == \"${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool\"\n}\n",
                    "rendered": {
                      "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) Supports(tool types.Tool, cmd []string) bool {\n\treturn tool.Source.IsGit() &&\n\t\tlen(cmd) > 0 && cmd[0] == \"${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool\"\n}\n",
                      "markdown": "`\treturn \"\", nil\n}\n\nfunc (r *Runtime) Supports(tool types.Tool, cmd []string) bool {\n\treturn tool.Source.IsGit() &&\n\t\tlen(cmd) > 0 && cmd[0] == \"${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 74,
                  "endLine": 338,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\treturn\n}\n\nfunc (r *Runtime) runBuild(ctx context.Context, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running go build in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"go\"), \"build\", \"-buildvcs=false\", \"-o\", artifactName())\n\tcmd.Env = stripGo(env)\n",
                    "rendered": {
                      "text": "\treturn\n}\n\nfunc (r *Runtime) runBuild(ctx context.Context, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running go build in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"go\"), \"build\", \"-buildvcs=false\", \"-o\", artifactName())\n\tcmd.Env = stripGo(env)\n",
                      "markdown": "`\treturn\n}\n\nfunc (r *Runtime) runBuild(ctx context.Context, toolSource, binDir string, env []string) error {\n\tlog.InfofCtx(ctx, \"Running go build in %s\", toolSource)\n\tcmd := debugcmd.New(ctx, filepath.Join(binDir, \"go\"), \"build\", \"-buildvcs=false\", \"-o\", artifactName())\n\tcmd.Env = stripGo(env)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 20,
                  "endLine": 329,
                  "endColumn": 25,
                  "snippet": {
                    "text": "}\n\nfunc stripGo(env []string) (result []string) {\n\tfor _, env := range env {\n\t\tif strings.HasPrefix(env, \"GO\") {\n\t\t\tcontinue\n\t\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc stripGo(env []string) (result []string) {\n\tfor _, env := range env {\n\t\tif strings.HasPrefix(env, \"GO\") {\n\t\t\tcontinue\n\t\t}\n",
                      "markdown": "`}\n\nfunc stripGo(env []string) (result []string) {\n\tfor _, env := range env {\n\t\tif strings.HasPrefix(env, \"GO\") {\n\t\t\tcontinue\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 7,
                  "endLine": 329,
                  "endColumn": 12,
                  "snippet": {
                    "text": "}\n\nfunc stripGo(env []string) (result []string) {\n\tfor _, env := range env {\n\t\tif strings.HasPrefix(env, \"GO\") {\n\t\t\tcontinue\n\t\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc stripGo(env []string) (result []string) {\n\tfor _, env := range env {\n\t\tif strings.HasPrefix(env, \"GO\") {\n\t\t\tcontinue\n\t\t}\n",
                      "markdown": "`}\n\nfunc stripGo(env []string) (result []string) {\n\tfor _, env := range env {\n\t\tif strings.HasPrefix(env, \"GO\") {\n\t\t\tcontinue\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 37,
                  "endLine": 325,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), runtime.GOOS, runtime.GOARCH)\n}\n\nfunc stripGo(env []string) (result []string) {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), runtime.GOOS, runtime.GOARCH)\n}\n\nfunc stripGo(env []string) (result []string) {\n",
                      "markdown": "`\t\t}\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release for os=%s arch=%s\", r.ID(), runtime.GOOS, runtime.GOARCH)\n}\n\nfunc stripGo(env []string) (result []string) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 30,
                  "endLine": 302,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tbinaryName := \"gptscript-credential-\" + helperName\n\tchecksum := getChecksum(ctx, rel, binaryName+distInfo+suffix)\n\tif checksum == \"\" {\n\t\treturn fmt.Errorf(\"failed to find %s release checksum for os=%s arch=%s\", r.ID(), runtime.GOOS, runtime.GOARCH)\n\t}\n\n\turl, _ := strings.CutSuffix(rel.binURL(), rel.srcBinName())\n",
                    "rendered": {
                      "text": "\tbinaryName := \"gptscript-credential-\" + helperName\n\tchecksum := getChecksum(ctx, rel, binaryName+distInfo+suffix)\n\tif checksum == \"\" {\n\t\treturn fmt.Errorf(\"failed to find %s release checksum for os=%s arch=%s\", r.ID(), runtime.GOOS, runtime.GOARCH)\n\t}\n\n\turl, _ := strings.CutSuffix(rel.binURL(), rel.srcBinName())\n",
                      "markdown": "`\tbinaryName := \"gptscript-credential-\" + helperName\n\tchecksum := getChecksum(ctx, rel, binaryName+distInfo+suffix)\n\tif checksum == \"\" {\n\t\treturn fmt.Errorf(\"failed to find %s release checksum for os=%s arch=%s\", r.ID(), runtime.GOOS, runtime.GOARCH)\n\t}\n\n\turl, _ := strings.CutSuffix(rel.binURL(), rel.srcBinName())\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 30,
                  "endLine": 297,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t// ignore the error\n\trel, ok, _ := getLatestRelease(tool)\n\tif !ok {\n\t\treturn fmt.Errorf(\"failed to find %s release\", r.ID())\n\t}\n\tbinaryName := \"gptscript-credential-\" + helperName\n\tchecksum := getChecksum(ctx, rel, binaryName+distInfo+suffix)\n",
                    "rendered": {
                      "text": "\t// ignore the error\n\trel, ok, _ := getLatestRelease(tool)\n\tif !ok {\n\t\treturn fmt.Errorf(\"failed to find %s release\", r.ID())\n\t}\n\tbinaryName := \"gptscript-credential-\" + helperName\n\tchecksum := getChecksum(ctx, rel, binaryName+distInfo+suffix)\n",
                      "markdown": "`\t// ignore the error\n\trel, ok, _ := getLatestRelease(tool)\n\tif !ok {\n\t\treturn fmt.Errorf(\"failed to find %s release\", r.ID())\n\t}\n\tbinaryName := \"gptscript-credential-\" + helperName\n\tchecksum := getChecksum(ctx, rel, binaryName+distInfo+suffix)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/golang/golang.go"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 87,
                  "endLine": 275,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\treturn true, nil, nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, _ types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn true, nil, nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, _ types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn true, nil, nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, _ types.Tool, dataRoot, toolSource string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/generate/generate.go"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 18,
                  "endLine": 130,
                  "endColumn": 23,
                  "snippet": {
                    "text": "}\n\nfunc getData(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc getData(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n",
                      "markdown": "`}\n\nfunc getData(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/python/generate/generate.go"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 47,
                  "endLine": 113,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\n\tfor _, link := range strings.Split(resp.Header.Get(\"link\"), \", <\") {\n\t\tnextURL, rel, _ := strings.Cut(link, \">; \")\n\t\tif rel == `rel=\"next\"` {\n\t\t\tvar more json.RawMessage\n",
                    "rendered": {
                      "text": "\t\treturn err\n\t}\n\n\tfor _, link := range strings.Split(resp.Header.Get(\"link\"), \", <\") {\n\t\tnextURL, rel, _ := strings.Cut(link, \">; \")\n\t\tif rel == `rel=\"next\"` {\n\t\t\tvar more json.RawMessage\n",
                      "markdown": "`\t\treturn err\n\t}\n\n\tfor _, link := range strings.Split(resp.Header.Get(\"link\"), \", <\") {\n\t\tnextURL, rel, _ := strings.Cut(link, \">; \")\n\t\tif rel == `rel=\"next\"` {\n\t\t\tvar more json.RawMessage\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/llm/proxy.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 49,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "}\n\nfunc (r *Registry) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tif r.proxyToken != strings.TrimPrefix(req.Header.Get(\"Authorization\"), \"Bearer \") {\n\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (r *Registry) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tif r.proxyToken != strings.TrimPrefix(req.Header.Get(\"Authorization\"), \"Bearer \") {\n\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\treturn\n\t}\n",
                      "markdown": "`}\n\nfunc (r *Registry) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tif r.proxyToken != strings.TrimPrefix(req.Header.Get(\"Authorization\"), \"Bearer \") {\n\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/llm/registry.go"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 35,
                  "endLine": 161,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t}\n\n\tif len(errs) == 0 {\n\t\treturn nil, fmt.Errorf(\"failed to find a model provider for model [%s]\", messageRequest.Model)\n\t}\n\treturn nil, errors.Join(errs...)\n}\n",
                    "rendered": {
                      "text": "\t}\n\n\tif len(errs) == 0 {\n\t\treturn nil, fmt.Errorf(\"failed to find a model provider for model [%s]\", messageRequest.Model)\n\t}\n\treturn nil, errors.Join(errs...)\n}\n",
                      "markdown": "`\t}\n\n\tif len(errs) == 0 {\n\t\treturn nil, fmt.Errorf(\"failed to find a model provider for model [%s]\", messageRequest.Model)\n\t}\n\treturn nil, errors.Join(errs...)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/llm/registry.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 35,
                  "endLine": 116,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t}\n\n\tif len(errs) == 0 {\n\t\treturn nil, fmt.Errorf(\"failed to find a model provider for model [%s]\", modelName)\n\t}\n\n\treturn nil, errors.Join(errs...)\n",
                    "rendered": {
                      "text": "\t}\n\n\tif len(errs) == 0 {\n\t\treturn nil, fmt.Errorf(\"failed to find a model provider for model [%s]\", modelName)\n\t}\n\n\treturn nil, errors.Join(errs...)\n",
                      "markdown": "`\t}\n\n\tif len(errs) == 0 {\n\t\treturn nil, fmt.Errorf(\"failed to find a model provider for model [%s]\", modelName)\n\t}\n\n\treturn nil, errors.Join(errs...)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 43,
                  "endLine": 61,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n\t\t\tcred.Env = env\n",
                    "rendered": {
                      "text": "\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n\t\t\tcred.Env = env\n",
                      "markdown": "`\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n\t\t\tcred.Env = env\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 42,
                  "endLine": 58,
                  "endColumn": 50,
                  "snippet": {
                    "text": "func credentialFromDockerAuthConfig(authCfg types.AuthConfig) (Credential, error) {\n\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n",
                    "rendered": {
                      "text": "func credentialFromDockerAuthConfig(authCfg types.AuthConfig) (Credential, error) {\n\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n",
                      "markdown": "`func credentialFromDockerAuthConfig(authCfg types.AuthConfig) (Credential, error) {\n\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\nfunc credentialFromDockerAuthConfig(authCfg types.AuthConfig) (Credential, error) {\n\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n",
                    "rendered": {
                      "text": "\nfunc credentialFromDockerAuthConfig(authCfg types.AuthConfig) (Credential, error) {\n\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n",
                      "markdown": "`\nfunc credentialFromDockerAuthConfig(authCfg types.AuthConfig) (Credential, error) {\n\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 2,
                  "endLine": 50,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\treturn types.AuthConfig{\n\t\tUsername:      string(c.Type),\n\t\tPassword:      string(cred),\n\t\tServerAddress: toolNameWithCtx(c.ToolName, c.Context),\n\t}, nil\n}\n",
                    "rendered": {
                      "text": "\n\treturn types.AuthConfig{\n\t\tUsername:      string(c.Type),\n\t\tPassword:      string(cred),\n\t\tServerAddress: toolNameWithCtx(c.ToolName, c.Context),\n\t}, nil\n}\n",
                      "markdown": "`\n\treturn types.AuthConfig{\n\t\tUsername:      string(c.Type),\n\t\tPassword:      string(cred),\n\t\tServerAddress: toolNameWithCtx(c.ToolName, c.Context),\n\t}, nil\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 13,
                  "endLine": 65,
                  "snippet": {
                    "text": "\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n\t\t\tcred.Env = env\n\t\t}\n\t}\n\n\t// We used to hardcode the username as \"gptscript\" before CredentialType was introduced, so\n",
                    "rendered": {
                      "text": "\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n\t\t\tcred.Env = env\n\t\t}\n\t}\n\n\t// We used to hardcode the username as \"gptscript\" before CredentialType was introduced, so\n",
                      "markdown": "`\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n\t\t\tcred.Env = env\n\t\t}\n\t}\n\n\t// We used to hardcode the username as \"gptscript\" before CredentialType was introduced, so\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 6,
                  "endLine": 60,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n",
                    "rendered": {
                      "text": "\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n",
                      "markdown": "`\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 44,
                  "endLine": 59,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n",
                    "rendered": {
                      "text": "\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n",
                      "markdown": "`\tvar cred Credential\n\tif authCfg.Password != \"\" {\n\t\tif err := json.Unmarshal([]byte(authCfg.Password), &cred); err != nil || len(cred.Env) == 0 {\n\t\t\t// Legacy: try unmarshalling into just an env map\n\t\t\tvar env map[string]string\n\t\t\tif err := json.Unmarshal([]byte(authCfg.Password), &env); err != nil {\n\t\t\t\treturn Credential{}, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/credential.go"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tContext      string            `json:\"context\"`\n\tToolName     string            `json:\"toolName\"`\n\tType         CredentialType    `json:\"type\"`\n\tEnv          map[string]string `json:\"env\"`\n\tEphemeral    bool              `json:\"ephemeral,omitempty\"`\n\tExpiresAt    *time.Time        `json:\"expiresAt\"`\n\tRefreshToken string            `json:\"refreshToken\"`\n",
                    "rendered": {
                      "text": "\tContext      string            `json:\"context\"`\n\tToolName     string            `json:\"toolName\"`\n\tType         CredentialType    `json:\"type\"`\n\tEnv          map[string]string `json:\"env\"`\n\tEphemeral    bool              `json:\"ephemeral,omitempty\"`\n\tExpiresAt    *time.Time        `json:\"expiresAt\"`\n\tRefreshToken string            `json:\"refreshToken\"`\n",
                      "markdown": "`\tContext      string            `json:\"context\"`\n\tToolName     string            `json:\"toolName\"`\n\tType         CredentialType    `json:\"type\"`\n\tEnv          map[string]string `json:\"env\"`\n\tEphemeral    bool              `json:\"ephemeral,omitempty\"`\n\tExpiresAt    *time.Time        `json:\"expiresAt\"`\n\tRefreshToken string            `json:\"refreshToken\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/store.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 20,
                  "endLine": 69,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tcredCtx string\n\t)\n\tfor _, c := range s.credCtxs {\n\t\tauth, err := store.Get(toolNameWithCtx(toolName, c))\n\t\tif err != nil {\n\t\t\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\t\tcredCtx string\n\t)\n\tfor _, c := range s.credCtxs {\n\t\tauth, err := store.Get(toolNameWithCtx(toolName, c))\n\t\tif err != nil {\n\t\t\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\t\t\tcontinue\n",
                      "markdown": "`\t\tcredCtx string\n\t)\n\tfor _, c := range s.credCtxs {\n\t\tauth, err := store.Get(toolNameWithCtx(toolName, c))\n\t\tif err != nil {\n\t\t\tif credentials2.IsErrCredentialsNotFound(err) {\n\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/credentials/store.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 17,
                  "endLine": 75,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn nil, false, err\n\t\t} else if auth.Password == \"\" {\n\t\t\tcontinue\n\t\t}\n\n",
                    "rendered": {
                      "text": "\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn nil, false, err\n\t\t} else if auth.Password == \"\" {\n\t\t\tcontinue\n\t\t}\n\n",
                      "markdown": "`\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn nil, false, err\n\t\t} else if auth.Password == \"\" {\n\t\t\tcontinue\n\t\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/fmt.go"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 4,
                  "endLine": 14,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\"github.com/spf13/cobra\"\n)\n\ntype Fmt struct {\n\tWrite bool `usage:\"Write output to file instead of stdout\" short:\"w\"`\n}\n\n",
                    "rendered": {
                      "text": "\t\"github.com/spf13/cobra\"\n)\n\ntype Fmt struct {\n\tWrite bool `usage:\"Write output to file instead of stdout\" short:\"w\"`\n}\n\n",
                      "markdown": "`\t\"github.com/spf13/cobra\"\n)\n\ntype Fmt struct {\n\tWrite bool `usage:\"Write output to file instead of stdout\" short:\"w\"`\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/04-command-line-reference/gptscript.md"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 16,
                  "endLine": 55,
                  "endColumn": 34,
                  "snippet": {
                    "text": "* [gptscript credential](gptscript_credential.md)\t - List stored credentials\n* [gptscript eval](gptscript_eval.md)\t - \n* [gptscript fmt](gptscript_fmt.md)\t - \n* [gptscript getenv](gptscript_getenv.md)\t - Looks up an environment variable for use in GPTScript tools\n* [gptscript parse](gptscript_parse.md)\t - \n\n",
                    "rendered": {
                      "text": "* [gptscript credential](gptscript_credential.md)\t - List stored credentials\n* [gptscript eval](gptscript_eval.md)\t - \n* [gptscript fmt](gptscript_fmt.md)\t - \n* [gptscript getenv](gptscript_getenv.md)\t - Looks up an environment variable for use in GPTScript tools\n* [gptscript parse](gptscript_parse.md)\t - \n\n",
                      "markdown": "`* [gptscript credential](gptscript_credential.md)\t - List stored credentials\n* [gptscript eval](gptscript_eval.md)\t - \n* [gptscript fmt](gptscript_fmt.md)\t - \n* [gptscript getenv](gptscript_getenv.md)\t - Looks up an environment variable for use in GPTScript tools\n* [gptscript parse](gptscript_parse.md)\t - \n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/04-command-line-reference/gptscript.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 26,
                  "endLine": 33,
                  "endColumn": 34,
                  "snippet": {
                    "text": "STREAM_TO)\n      --force-chat                          Force an interactive chat session if even the top level tool is not a chat tool ($GPTSCRIPT_FORCE_CHAT)\n      --force-sequential                    Force parallel calls to run sequentially ($GPTSCRIPT_FORCE_SEQUENTIAL)\n      --github-enterprise-hostname string   The host name for a Github Enterprise instance to enable for remote loading ($GPTSCRIPT_GITHUB_ENTERPRISE_HOSTNAME)\n  -h, --help                                help for gptscript\n  -f, --input string                        Read input from a file (\"-\" for stdin) ($GPTSCRIPT_INPUT_FILE)\n    ",
                    "rendered": {
                      "text": "STREAM_TO)\n      --force-chat                          Force an interactive chat session if even the top level tool is not a chat tool ($GPTSCRIPT_FORCE_CHAT)\n      --force-sequential                    Force parallel calls to run sequentially ($GPTSCRIPT_FORCE_SEQUENTIAL)\n      --github-enterprise-hostname string   The host name for a Github Enterprise instance to enable for remote loading ($GPTSCRIPT_GITHUB_ENTERPRISE_HOSTNAME)\n  -h, --help                                help for gptscript\n  -f, --input string                        Read input from a file (\"-\" for stdin) ($GPTSCRIPT_INPUT_FILE)\n    ",
                      "markdown": "`STREAM_TO)\n      --force-chat                          Force an interactive chat session if even the top level tool is not a chat tool ($GPTSCRIPT_FORCE_CHAT)\n      --force-sequential                    Force parallel calls to run sequentially ($GPTSCRIPT_FORCE_SEQUENTIAL)\n      --github-enterprise-hostname string   The host name for a Github Enterprise instance to enable for remote loading ($GPTSCRIPT_GITHUB_ENTERPRISE_HOSTNAME)\n  -h, --help                                help for gptscript\n  -f, --input string                        Read input from a file (\"-\" for stdin) ($GPTSCRIPT_INPUT_FILE)\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/04-command-line-reference/gptscript.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 89,
                  "endLine": 31,
                  "endColumn": 94,
                  "snippet": {
                    "text": "_STATE)\n      --events-stream-to string             Stream events to this location, could be a file descriptor/handle (e.g. fd://2), filename, or named pipe (e.g. \\\\.\\pipe\\my-pipe) ($GPTSCRIPT_EVENTS_STREAM_TO)\n      --force-chat                          Force an interactive chat session if even the top level tool is not a chat tool ($GPTSCRIPT_FORCE_CHAT)\n      --force-sequential                    Force parallel calls to run sequentially ($GPTSCRIPT_FORCE_SEQUENTIAL)\n      --github-enterprise-hostname string   The host name for a Github Enterprise instance to enable for remote loading ($GPTSCRIPT",
                    "rendered": {
                      "text": "_STATE)\n      --events-stream-to string             Stream events to this location, could be a file descriptor/handle (e.g. fd://2), filename, or named pipe (e.g. \\\\.\\pipe\\my-pipe) ($GPTSCRIPT_EVENTS_STREAM_TO)\n      --force-chat                          Force an interactive chat session if even the top level tool is not a chat tool ($GPTSCRIPT_FORCE_CHAT)\n      --force-sequential                    Force parallel calls to run sequentially ($GPTSCRIPT_FORCE_SEQUENTIAL)\n      --github-enterprise-hostname string   The host name for a Github Enterprise instance to enable for remote loading ($GPTSCRIPT",
                      "markdown": "`_STATE)\n      --events-stream-to string             Stream events to this location, could be a file descriptor/handle (e.g. fd://2), filename, or named pipe (e.g. \\\\.\\pipe\\my-pipe) ($GPTSCRIPT_EVENTS_STREAM_TO)\n      --force-chat                          Force an interactive chat session if even the top level tool is not a chat tool ($GPTSCRIPT_FORCE_CHAT)\n      --force-sequential                    Force parallel calls to run sequentially ($GPTSCRIPT_FORCE_SEQUENTIAL)\n      --github-enterprise-hostname string   The host name for a Github Enterprise instance to enable for remote loading ($GPTSCRIPT`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/02-authoring.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 14,
                  "endLine": 20,
                  "endColumn": 19,
                  "snippet": {
                    "text": "import os\nimport requests\n\nprint(requests.get(os.getenv(\"url\")).text)\n```\n\nCreate a file called `requirements.txt` with the following contents:\n",
                    "rendered": {
                      "text": "import os\nimport requests\n\nprint(requests.get(os.getenv(\"url\")).text)\n```\n\nCreate a file called `requirements.txt` with the following contents:\n",
                      "markdown": "`import os\nimport requests\n\nprint(requests.get(os.getenv(\"url\")).text)\n```\n\nCreate a file called `requirements.txt` with the following contents:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/02-authoring.md"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 35,
                  "endLine": 78,
                  "endColumn": 39,
                  "snippet": {
                    "text": "```yaml\ntools: github.com/gptscript-ai/dalle-image-generation\n\nGenerate an image of a city skyline at night.\n```\n\n## Supported Languages\n",
                    "rendered": {
                      "text": "```yaml\ntools: github.com/gptscript-ai/dalle-image-generation\n\nGenerate an image of a city skyline at night.\n```\n\n## Supported Languages\n",
                      "markdown": "````yaml\ntools: github.com/gptscript-ai/dalle-image-generation\n\nGenerate an image of a city skyline at night.\n```\n\n## Supported Languages\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/02-authoring.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 15,
                  "endLine": 45,
                  "endColumn": 21,
                  "snippet": {
                    "text": ":::\n\nThe `GPTSCRIPT_TOOL_DIR` environment variable is automatically populated by GPTScript so that the tool\nwill be able to find the `tool.py` file no matter what the user's current working directory is.\n\nIf you make the tool available in a public GitHub repo, then you will be able to refer to it by\nthe URL, i.e. `github.com/<user>/<repo name>`. GPTScript will automatically set up a Python virtual\n",
                    "rendered": {
                      "text": ":::\n\nThe `GPTSCRIPT_TOOL_DIR` environment variable is automatically populated by GPTScript so that the tool\nwill be able to find the `tool.py` file no matter what the user's current working directory is.\n\nIf you make the tool available in a public GitHub repo, then you will be able to refer to it by\nthe URL, i.e. `github.com/<user>/<repo name>`. GPTScript will automatically set up a Python virtual\n",
                      "markdown": "`:::\n\nThe `GPTSCRIPT_TOOL_DIR` environment variable is automatically populated by GPTScript so that the tool\nwill be able to find the `tool.py` file no matter what the user's current working directory is.\n\nIf you make the tool available in a public GitHub repo, then you will be able to refer to it by\nthe URL, i.e. `github.com/<user>/<repo name>`. GPTScript will automatically set up a Python virtual\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 5,
                  "endLine": 203,
                  "endColumn": 48,
                  "snippet": {
                    "text": "time, it will check if the credential has expired.\nIf the credential has expired, it will run the credential tool again, and the current value of the credential will be\nset to the environment variable `GPTSCRIPT_EXISTING_CREDENTIAL` as a JSON string. This way, the credential tool can check for\nthat environment variable, and if it is set, get the refresh token from the existing credential and use it to refresh and return a new credential,\ntypically without user interaction.\n\nFor an example of a tool that uses the refresh feature, see the [Gateway OAuth2 tool](https://github.com/gptscript-ai/gateway-oauth2).\n\n### GPTSCRIPT_CREDENTIAL_EXP",
                    "rendered": {
                      "text": "time, it will check if the credential has expired.\nIf the credential has expired, it will run the credential tool again, and the current value of the credential will be\nset to the environment variable `GPTSCRIPT_EXISTING_CREDENTIAL` as a JSON string. This way, the credential tool can check for\nthat environment variable, and if it is set, get the refresh token from the existing credential and use it to refresh and return a new credential,\ntypically without user interaction.\n\nFor an example of a tool that uses the refresh feature, see the [Gateway OAuth2 tool](https://github.com/gptscript-ai/gateway-oauth2).\n\n### GPTSCRIPT_CREDENTIAL_EXP",
                      "markdown": "`time, it will check if the credential has expired.\nIf the credential has expired, it will run the credential tool again, and the current value of the credential will be\nset to the environment variable `GPTSCRIPT_EXISTING_CREDENTIAL` as a JSON string. This way, the credential tool can check for\nthat environment variable, and if it is set, get the refresh token from the existing credential and use it to refresh and return a new credential,\ntypically without user interaction.\n\nFor an example of a tool that uses the refresh feature, see the [Gateway OAuth2 tool](https://github.com/gptscript-ai/gateway-oauth2).\n\n### GPTSCRIPT_CREDENTIAL_EXP`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 21,
                  "endLine": 223,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nimport os\n\nprint(\"myCred expires at \" + os.getenv(\"GPTSCRIPT_CREDENTIAL_EXPIRATION\", \"\"))\n```\n\n## Stacked Credential Contexts (Advanced)\n",
                    "rendered": {
                      "text": "\nimport os\n\nprint(\"myCred expires at \" + os.getenv(\"GPTSCRIPT_CREDENTIAL_EXPIRATION\", \"\"))\n```\n\n## Stacked Credential Contexts (Advanced)\n",
                      "markdown": "`\nimport os\n\nprint(\"myCred expires at \" + os.getenv(\"GPTSCRIPT_CREDENTIAL_EXPIRATION\", \"\"))\n```\n\n## Stacked Credential Contexts (Advanced)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 41,
                  "endLine": 211,
                  "endColumn": 45,
                  "snippet": {
                    "text": "### GPTSCRIPT_CREDENTIAL_EXPIRATION environment variable\n\nWhen a tool references a credential tool, GPTScript will add the environment variables from the credential to the tool's\nenvironment before executing the tool. If at least one of the credentials has an `expiresAt` field, GPTScript will also\nset the environment variable `GPTSCRIPT_CREDENTIAL_EXPIRATION`, which contains the nearest expiration time out of all\ncredentials referenced by the tool, in RFC 3339 format. That way, it can be referenced in the tool body if needed.\nHere is an example:\n",
                    "rendered": {
                      "text": "### GPTSCRIPT_CREDENTIAL_EXPIRATION environment variable\n\nWhen a tool references a credential tool, GPTScript will add the environment variables from the credential to the tool's\nenvironment before executing the tool. If at least one of the credentials has an `expiresAt` field, GPTScript will also\nset the environment variable `GPTSCRIPT_CREDENTIAL_EXPIRATION`, which contains the nearest expiration time out of all\ncredentials referenced by the tool, in RFC 3339 format. That way, it can be referenced in the tool body if needed.\nHere is an example:\n",
                      "markdown": "`### GPTSCRIPT_CREDENTIAL_EXPIRATION environment variable\n\nWhen a tool references a credential tool, GPTScript will add the environment variables from the credential to the tool's\nenvironment before executing the tool. If at least one of the credentials has an `expiresAt` field, GPTScript will also\nset the environment variable `GPTSCRIPT_CREDENTIAL_EXPIRATION`, which contains the nearest expiration time out of all\ncredentials referenced by the tool, in RFC 3339 format. That way, it can be referenced in the tool body if needed.\nHere is an example:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 14,
                  "endLine": 85,
                  "snippet": {
                    "text": "Parameter: env: the environment variable to set\nParameter: val: the value to set it to\n\n#!/usr/bin/env bash\n\necho \"{\\\"env\\\":{\\\"$ENV\\\":\\\"$VAL\\\"}}\"\n```\n\n",
                    "rendered": {
                      "text": "Parameter: env: the environment variable to set\nParameter: val: the value to set it to\n\n#!/usr/bin/env bash\n\necho \"{\\\"env\\\":{\\\"$ENV\\\":\\\"$VAL\\\"}}\"\n```\n\n",
                      "markdown": "`Parameter: env: the environment variable to set\nParameter: val: the value to set it to\n\n#!/usr/bin/env bash\n\necho \"{\\\"env\\\":{\\\"$ENV\\\":\\\"$VAL\\\"}}\"\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 33,
                  "snippet": {
                    "text": "```yaml\nCredentials: my-credential-tool.gpt as myCred\n\n#!/usr/bin/env bash\n\necho \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n```\n\n",
                    "rendered": {
                      "text": "```yaml\nCredentials: my-credential-tool.gpt as myCred\n\n#!/usr/bin/env bash\n\necho \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n```\n\n",
                      "markdown": "````yaml\nCredentials: my-credential-tool.gpt as myCred\n\n#!/usr/bin/env bash\n\necho \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 14,
                  "endLine": 19,
                  "snippet": {
                    "text": "# my-credential-tool.gpt\nName: my-credential-tool\n\n#!/usr/bin/env bash\n\noutput=$(gptscript -q --disable-cache sys.prompt '{\"message\":\"Please enter your fake credential.\",\"fields\":\"credential\",\"sensitive\":\"true\"}')\ncredential=$(echo $output | jq -r '.credential')\necho \"{\\\"env\\\":{\\\"MY_ENV_VAR\\\":\\\"$credential\\\"}}\"\n",
                    "rendered": {
                      "text": "# my-credential-tool.gpt\nName: my-credential-tool\n\n#!/usr/bin/env bash\n\noutput=$(gptscript -q --disable-cache sys.prompt '{\"message\":\"Please enter your fake credential.\",\"fields\":\"credential\",\"sensitive\":\"true\"}')\ncredential=$(echo $output | jq -r '.credential')\necho \"{\\\"env\\\":{\\\"MY_ENV_VAR\\\":\\\"$credential\\\"}}\"\n",
                      "markdown": "`# my-credential-tool.gpt\nName: my-credential-tool\n\n#!/usr/bin/env bash\n\noutput=$(gptscript -q --disable-cache sys.prompt '{\"message\":\"Please enter your fake credential.\",\"fields\":\"credential\",\"sensitive\":\"true\"}')\ncredential=$(echo $output | jq -r '.credential')\necho \"{\\\"env\\\":{\\\"MY_ENV_VAR\\\":\\\"$credential\\\"}}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 62,
                  "endLine": 271,
                  "endColumn": 68,
                  "snippet": {
                    "text": "```\n\nWhen you show a credential like this, GPTScript will first look for `myCred` in the `one` context. If it doesn't find it\nthere, it will look for it in the `two` context. If it doesn't find it in either context, it will print an error message.\n\n:::note\nYou cannot specify stacked contexts when doing `gptscript credential delete`. GPTScript will return an error if\n",
                    "rendered": {
                      "text": "```\n\nWhen you show a credential like this, GPTScript will first look for `myCred` in the `one` context. If it doesn't find it\nthere, it will look for it in the `two` context. If it doesn't find it in either context, it will print an error message.\n\n:::note\nYou cannot specify stacked contexts when doing `gptscript credential delete`. GPTScript will return an error if\n",
                      "markdown": "````\n\nWhen you show a credential like this, GPTScript will first look for `myCred` in the `one` context. If it doesn't find it\nthere, it will look for it in the `two` context. If it doesn't find it in either context, it will print an error message.\n\n:::note\nYou cannot specify stacked contexts when doing `gptscript credential delete`. GPTScript will return an error if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 112,
                  "endLine": 270,
                  "endColumn": 118,
                  "snippet": {
                    "text": "gptscript --credential-context one,two credential show myCred\n```\n\nWhen you show a credential like this, GPTScript will first look for `myCred` in the `one` context. If it doesn't find it\nthere, it will look for it in the `two` context. If it doesn't find it in either context, it will print an error message.\n\n:::note\n",
                    "rendered": {
                      "text": "gptscript --credential-context one,two credential show myCred\n```\n\nWhen you show a credential like this, GPTScript will first look for `myCred` in the `one` context. If it doesn't find it\nthere, it will look for it in the `two` context. If it doesn't find it in either context, it will print an error message.\n\n:::note\n",
                      "markdown": "`gptscript --credential-context one,two credential show myCred\n```\n\nWhen you show a credential like this, GPTScript will first look for `myCred` in the `one` context. If it doesn't find it\nthere, it will look for it in the `two` context. If it doesn't find it in either context, it will print an error message.\n\n:::note\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 89,
                  "endLine": 247,
                  "endColumn": 95,
                  "snippet": {
                    "text": "```\n\nWhen GPTScript runs, it will first look for a credential called `myCred` in the `one` context.\nIf it doesn't find it there, it will look for it in the `two` context. If it also doesn't find it there,\nit will run the `my-credential-tool.gpt` tool to get the credential. It will then store the new credential into the `one`\ncontext, since that has the highest priority.\n\n",
                    "rendered": {
                      "text": "```\n\nWhen GPTScript runs, it will first look for a credential called `myCred` in the `one` context.\nIf it doesn't find it there, it will look for it in the `two` context. If it also doesn't find it there,\nit will run the `my-credential-tool.gpt` tool to get the credential. It will then store the new credential into the `one`\ncontext, since that has the highest priority.\n\n",
                      "markdown": "````\n\nWhen GPTScript runs, it will first look for a credential called `myCred` in the `one` context.\nIf it doesn't find it there, it will look for it in the `two` context. If it also doesn't find it there,\nit will run the `my-credential-tool.gpt` tool to get the credential. It will then store the new credential into the `one`\ncontext, since that has the highest priority.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 13,
                  "endLine": 247,
                  "endColumn": 19,
                  "snippet": {
                    "text": "```\n\nWhen GPTScript runs, it will first look for a credential called `myCred` in the `one` context.\nIf it doesn't find it there, it will look for it in the `two` context. If it also doesn't find it there,\nit will run the `my-credential-tool.gpt` tool to get the credential. It will then store the new credential into the `one`\ncontext, since that has the highest priority.\n\n",
                    "rendered": {
                      "text": "```\n\nWhen GPTScript runs, it will first look for a credential called `myCred` in the `one` context.\nIf it doesn't find it there, it will look for it in the `two` context. If it also doesn't find it there,\nit will run the `my-credential-tool.gpt` tool to get the credential. It will then store the new credential into the `one`\ncontext, since that has the highest priority.\n\n",
                      "markdown": "````\n\nWhen GPTScript runs, it will first look for a credential called `myCred` in the `one` context.\nIf it doesn't find it there, it will look for it in the `two` context. If it also doesn't find it there,\nit will run the `my-credential-tool.gpt` tool to get the credential. It will then store the new credential into the `one`\ncontext, since that has the highest priority.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 44,
                  "endLine": 232,
                  "endColumn": 52,
                  "snippet": {
                    "text": "We refer to this as \"stacked credential contexts\", or just stacked contexts for short. This allows you to specify an order\nof priority for credential contexts. This is best explained by example.\n\n### Example: stacked contexts when running a script that uses a credential\n\nLet's say you have two contexts, `one` and `two`, and you specify them like this:\n\n",
                    "rendered": {
                      "text": "We refer to this as \"stacked credential contexts\", or just stacked contexts for short. This allows you to specify an order\nof priority for credential contexts. This is best explained by example.\n\n### Example: stacked contexts when running a script that uses a credential\n\nLet's say you have two contexts, `one` and `two`, and you specify them like this:\n\n",
                      "markdown": "`We refer to this as \"stacked credential contexts\", or just stacked contexts for short. This allows you to specify an order\nof priority for credential contexts. This is best explained by example.\n\n### Example: stacked contexts when running a script that uses a credential\n\nLet's say you have two contexts, `one` and `two`, and you specify them like this:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 101,
                  "endLine": 212,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\nWhen a tool references a credential tool, GPTScript will add the environment variables from the credential to the tool's\nenvironment before executing the tool. If at least one of the credentials has an `expiresAt` field, GPTScript will also\nset the environment variable `GPTSCRIPT_CREDENTIAL_EXPIRATION`, which contains the nearest expiration time out of all\ncredentials referenced by the tool, in RFC 3339 format. That way, it can be referenced in the tool body if needed.\nHere is an example:\n\n",
                    "rendered": {
                      "text": "\nWhen a tool references a credential tool, GPTScript will add the environment variables from the credential to the tool's\nenvironment before executing the tool. If at least one of the credentials has an `expiresAt` field, GPTScript will also\nset the environment variable `GPTSCRIPT_CREDENTIAL_EXPIRATION`, which contains the nearest expiration time out of all\ncredentials referenced by the tool, in RFC 3339 format. That way, it can be referenced in the tool body if needed.\nHere is an example:\n\n",
                      "markdown": "`\nWhen a tool references a credential tool, GPTScript will add the environment variables from the credential to the tool's\nenvironment before executing the tool. If at least one of the credentials has an `expiresAt` field, GPTScript will also\nset the environment variable `GPTSCRIPT_CREDENTIAL_EXPIRATION`, which contains the nearest expiration time out of all\ncredentials referenced by the tool, in RFC 3339 format. That way, it can be referenced in the tool body if needed.\nHere is an example:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 63,
                  "endLine": 197,
                  "endColumn": 69,
                  "snippet": {
                    "text": "This is the full list of supported fields in the credential tool output:\n\n- `env` (type: object) - The environment variables to set.\n- `expiresAt` (type: string, timestamp in RFC3339 format) - The time when the credential expires.\n- `refreshToken` (type: string) - The refresh token to use to refresh the credential.\n\nWhen GPTScript tries to use a credential that has a defined `expiresAt` time, it will check if the credential has expired.\n",
                    "rendered": {
                      "text": "This is the full list of supported fields in the credential tool output:\n\n- `env` (type: object) - The environment variables to set.\n- `expiresAt` (type: string, timestamp in RFC3339 format) - The time when the credential expires.\n- `refreshToken` (type: string) - The refresh token to use to refresh the credential.\n\nWhen GPTScript tries to use a credential that has a defined `expiresAt` time, it will check if the credential has expired.\n",
                      "markdown": "`This is the full list of supported fields in the credential tool output:\n\n- `env` (type: object) - The environment variables to set.\n- `expiresAt` (type: string, timestamp in RFC3339 format) - The time when the credential expires.\n- `refreshToken` (type: string) - The refresh token to use to refresh the credential.\n\nWhen GPTScript tries to use a credential that has a defined `expiresAt` time, it will check if the credential has expired.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 81,
                  "endLine": 158,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\nYou can bypass credential tools and stored credentials by setting the `--credential-override` argument (or the\n`GPTSCRIPT_CREDENTIAL_OVERRIDE` environment variable) when running GPTScript. To set up a credential override, you\nneed to be aware of which environment variables the credential tool sets. You can find this out by running the\n`gptscript credential --show-env-vars` command.\n\nTo override multiple credentials, specify the `--credential-override` argument multiple times.\n",
                    "rendered": {
                      "text": "\nYou can bypass credential tools and stored credentials by setting the `--credential-override` argument (or the\n`GPTSCRIPT_CREDENTIAL_OVERRIDE` environment variable) when running GPTScript. To set up a credential override, you\nneed to be aware of which environment variables the credential tool sets. You can find this out by running the\n`gptscript credential --show-env-vars` command.\n\nTo override multiple credentials, specify the `--credential-override` argument multiple times.\n",
                      "markdown": "`\nYou can bypass credential tools and stored credentials by setting the `--credential-override` argument (or the\n`GPTSCRIPT_CREDENTIAL_OVERRIDE` environment variable) when running GPTScript. To set up a credential override, you\nneed to be aware of which environment variables the credential tool sets. You can find this out by running the\n`gptscript credential --show-env-vars` command.\n\nTo override multiple credentials, specify the `--credential-override` argument multiple times.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 32,
                  "endLine": 136,
                  "endColumn": 40,
                  "snippet": {
                    "text": "gptscript --credential-context my-azure-workspace my-azure-script.gpt\n```\n\nAny credentials fetched for that script will be stored in the `my-azure-workspace` context. If you were to call it again\nwith a different context, you would be able to give it a different set of credentials.\n\n## Listing and Deleting Stored Credentials\n",
                    "rendered": {
                      "text": "gptscript --credential-context my-azure-workspace my-azure-script.gpt\n```\n\nAny credentials fetched for that script will be stored in the `my-azure-workspace` context. If you were to call it again\nwith a different context, you would be able to give it a different set of credentials.\n\n## Listing and Deleting Stored Credentials\n",
                      "markdown": "`gptscript --credential-context my-azure-workspace my-azure-script.gpt\n```\n\nAny credentials fetched for that script will be stored in the `my-azure-workspace` context. If you were to call it again\nwith a different context, you would be able to give it a different set of credentials.\n\n## Listing and Deleting Stored Credentials\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 53,
                  "endLine": 92,
                  "endColumn": 58,
                  "snippet": {
                    "text": "When you reference this credential tool in another file, you can use syntax like this to set both parameters:\n\n```yaml\nCredential: my-credential-tool.gpt with MY_ENV_VAR as env and \"my value\" as val\n\n(tool stuff here)\n```\n",
                    "rendered": {
                      "text": "When you reference this credential tool in another file, you can use syntax like this to set both parameters:\n\n```yaml\nCredential: my-credential-tool.gpt with MY_ENV_VAR as env and \"my value\" as val\n\n(tool stuff here)\n```\n",
                      "markdown": "`When you reference this credential tool in another file, you can use syntax like this to set both parameters:\n\n```yaml\nCredential: my-credential-tool.gpt with MY_ENV_VAR as env and \"my value\" as val\n\n(tool stuff here)\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 14,
                  "endLine": 85,
                  "snippet": {
                    "text": "Parameter: env: the environment variable to set\nParameter: val: the value to set it to\n\n#!/usr/bin/env bash\n\necho \"{\\\"env\\\":{\\\"$ENV\\\":\\\"$VAL\\\"}}\"\n```\n\n",
                    "rendered": {
                      "text": "Parameter: env: the environment variable to set\nParameter: val: the value to set it to\n\n#!/usr/bin/env bash\n\necho \"{\\\"env\\\":{\\\"$ENV\\\":\\\"$VAL\\\"}}\"\n```\n\n",
                      "markdown": "`Parameter: env: the environment variable to set\nParameter: val: the value to set it to\n\n#!/usr/bin/env bash\n\necho \"{\\\"env\\\":{\\\"$ENV\\\":\\\"$VAL\\\"}}\"\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 86,
                  "endLine": 65,
                  "endColumn": 91,
                  "snippet": {
                    "text": "where you only need to set one environment variable. Here is an example of how to use it:\n\n```yaml\nCredentials: github.com/gptscript-ai/credential as myCredentialName with MY_ENV_VAR as env and \"this message will be displayed to the user\" as message and key as field\n\n(tool stuff here)\n```\n",
                    "rendered": {
                      "text": "where you only need to set one environment variable. Here is an example of how to use it:\n\n```yaml\nCredentials: github.com/gptscript-ai/credential as myCredentialName with MY_ENV_VAR as env and \"this message will be displayed to the user\" as message and key as field\n\n(tool stuff here)\n```\n",
                      "markdown": "`where you only need to set one environment variable. Here is an example of how to use it:\n\n```yaml\nCredentials: github.com/gptscript-ai/credential as myCredentialName with MY_ENV_VAR as env and \"this message will be displayed to the user\" as message and key as field\n\n(tool stuff here)\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 24,
                  "endLine": 42,
                  "endColumn": 32,
                  "snippet": {
                    "text": ":::\n\nWhen you run the script, GPTScript will call the credential provider tool first, set the environment variables from its\noutput, and then run the script body. The credential provider tool is called by GPTScript itself. GPTScript does not ask the\nLLM about it or even tell the LLM about the tool.\n\nIf GPTScript has called the credential provider tool in the same context (more on that later), then it will use the stored\n",
                    "rendered": {
                      "text": ":::\n\nWhen you run the script, GPTScript will call the credential provider tool first, set the environment variables from its\noutput, and then run the script body. The credential provider tool is called by GPTScript itself. GPTScript does not ask the\nLLM about it or even tell the LLM about the tool.\n\nIf GPTScript has called the credential provider tool in the same context (more on that later), then it will use the stored\n",
                      "markdown": "`:::\n\nWhen you run the script, GPTScript will call the credential provider tool first, set the environment variables from its\noutput, and then run the script body. The credential provider tool is called by GPTScript itself. GPTScript does not ask the\nLLM about it or even tell the LLM about the tool.\n\nIf GPTScript has called the credential provider tool in the same context (more on that later), then it will use the stored\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 33,
                  "snippet": {
                    "text": "```yaml\nCredentials: my-credential-tool.gpt as myCred\n\n#!/usr/bin/env bash\n\necho \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n```\n\n",
                    "rendered": {
                      "text": "```yaml\nCredentials: my-credential-tool.gpt as myCred\n\n#!/usr/bin/env bash\n\necho \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n```\n\n",
                      "markdown": "````yaml\nCredentials: my-credential-tool.gpt as myCred\n\n#!/usr/bin/env bash\n\necho \"The value of MY_ENV_VAR is $MY_ENV_VAR\"\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/04-credential-tools.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 14,
                  "endLine": 19,
                  "snippet": {
                    "text": "# my-credential-tool.gpt\nName: my-credential-tool\n\n#!/usr/bin/env bash\n\noutput=$(gptscript -q --disable-cache sys.prompt '{\"message\":\"Please enter your fake credential.\",\"fields\":\"credential\",\"sensitive\":\"true\"}')\ncredential=$(echo $output | jq -r '.credential')\necho \"{\\\"env\\\":{\\\"MY_ENV_VAR\\\":\\\"$credential\\\"}}\"\n",
                    "rendered": {
                      "text": "# my-credential-tool.gpt\nName: my-credential-tool\n\n#!/usr/bin/env bash\n\noutput=$(gptscript -q --disable-cache sys.prompt '{\"message\":\"Please enter your fake credential.\",\"fields\":\"credential\",\"sensitive\":\"true\"}')\ncredential=$(echo $output | jq -r '.credential')\necho \"{\\\"env\\\":{\\\"MY_ENV_VAR\\\":\\\"$credential\\\"}}\"\n",
                      "markdown": "`# my-credential-tool.gpt\nName: my-credential-tool\n\n#!/usr/bin/env bash\n\noutput=$(gptscript -q --disable-cache sys.prompt '{\"message\":\"Please enter your fake credential.\",\"fields\":\"credential\",\"sensitive\":\"true\"}')\ncredential=$(echo $output | jq -r '.credential')\necho \"{\\\"env\\\":{\\\"MY_ENV_VAR\\\":\\\"$credential\\\"}}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/main.yaml"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 48,
                  "endLine": 47,
                  "endColumn": 58,
                  "snippet": {
                    "text": "          AWS_REGION: ${{ secrets.R2_REGION }}\n          AWS_S3_BUCKET: ${{ secrets.R2_BUCKET }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}\n          AWS_S3_ENDPOINT: ${{ secrets.R2_ENDPOINT_URL }}\n",
                    "rendered": {
                      "text": "          AWS_REGION: ${{ secrets.R2_REGION }}\n          AWS_S3_BUCKET: ${{ secrets.R2_BUCKET }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}\n          AWS_S3_ENDPOINT: ${{ secrets.R2_ENDPOINT_URL }}\n",
                      "markdown": "`          AWS_REGION: ${{ secrets.R2_REGION }}\n          AWS_S3_BUCKET: ${{ secrets.R2_BUCKET }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}\n          AWS_S3_ENDPOINT: ${{ secrets.R2_ENDPOINT_URL }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/monitor/fd.go"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 114,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ntype fd struct {\n\tprj     *types.Program\n\tenv     []string\n\tinput   string\n\tfile    *os.File\n\trunLock sync.Mutex\n",
                    "rendered": {
                      "text": "\ntype fd struct {\n\tprj     *types.Program\n\tenv     []string\n\tinput   string\n\tfile    *os.File\n\trunLock sync.Mutex\n",
                      "markdown": "`\ntype fd struct {\n\tprj     *types.Program\n\tenv     []string\n\tinput   string\n\tfile    *os.File\n\trunLock sync.Mutex\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/monitor/fd.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 66,
                  "endLine": 42,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\t}, nil\n}\n\nfunc (s *fileFactory) Start(_ context.Context, prg *types.Program, env []string, input string) (runner.Monitor, error) {\n\ts.lock.Lock()\n\ts.runningCount++\n\tif s.runningCount == 1 {\n",
                    "rendered": {
                      "text": "\t}, nil\n}\n\nfunc (s *fileFactory) Start(_ context.Context, prg *types.Program, env []string, input string) (runner.Monitor, error) {\n\ts.lock.Lock()\n\ts.runningCount++\n\tif s.runningCount == 1 {\n",
                      "markdown": "`\t}, nil\n}\n\nfunc (s *fileFactory) Start(_ context.Context, prg *types.Program, env []string, input string) (runner.Monitor, error) {\n\ts.lock.Lock()\n\ts.runningCount++\n\tif s.runningCount == 1 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/prompt.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\nfunc (s *server) prompt(w http.ResponseWriter, r *http.Request) {\n\tlogger := gcontext.GetLogger(r.Context())\n\tif r.Header.Get(\"Authorization\") != \"Bearer \"+s.token {\n\t\twriteError(logger, w, http.StatusUnauthorized, fmt.Errorf(\"invalid token\"))\n\t\treturn\n\t}\n",
                    "rendered": {
                      "text": "\nfunc (s *server) prompt(w http.ResponseWriter, r *http.Request) {\n\tlogger := gcontext.GetLogger(r.Context())\n\tif r.Header.Get(\"Authorization\") != \"Bearer \"+s.token {\n\t\twriteError(logger, w, http.StatusUnauthorized, fmt.Errorf(\"invalid token\"))\n\t\treturn\n\t}\n",
                      "markdown": "`\nfunc (s *server) prompt(w http.ResponseWriter, r *http.Request) {\n\tlogger := gcontext.GetLogger(r.Context())\n\tif r.Header.Get(\"Authorization\") != \"Bearer \"+s.token {\n\t\twriteError(logger, w, http.StatusUnauthorized, fmt.Errorf(\"invalid token\"))\n\t\treturn\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/routes.go"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 133,
                  "endLine": 84,
                  "endColumn": 138,
                  "snippet": {
                    "text": "\n// version will return the output of `gptscript --version`\nfunc (s *server) version(w http.ResponseWriter, r *http.Request) {\n\twriteResponse(gcontext.GetLogger(r.Context()), w, map[string]any{\"stdout\": fmt.Sprintf(\"%s version %s\", version.ProgramName, version.Get().String())})\n}\n\n// listTools will return the output of `gptscript --list-tools`\n",
                    "rendered": {
                      "text": "\n// version will return the output of `gptscript --version`\nfunc (s *server) version(w http.ResponseWriter, r *http.Request) {\n\twriteResponse(gcontext.GetLogger(r.Context()), w, map[string]any{\"stdout\": fmt.Sprintf(\"%s version %s\", version.ProgramName, version.Get().String())})\n}\n\n// listTools will return the output of `gptscript --list-tools`\n",
                      "markdown": "`\n// version will return the output of `gptscript --version`\nfunc (s *server) version(w http.ResponseWriter, r *http.Request) {\n\twriteResponse(gcontext.GetLogger(r.Context()), w, map[string]any{\"stdout\": fmt.Sprintf(\"%s version %s\", version.ProgramName, version.Get().String())})\n}\n\n// listTools will return the output of `gptscript --list-tools`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/routes.go"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 7,
                  "endLine": 169,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\treqObject.Env = append(os.Environ(), reqObject.Env...)\n\t// Don't overwrite the PromptURLEnvVar if it is already set in the environment.\n\tvar promptTokenAlreadySet bool\n\tfor _, env := range reqObject.Env {\n\t\tif v, ok := strings.CutPrefix(env, types.PromptTokenEnvVar+\"=\"); ok && v != \"\" {\n\t\t\tpromptTokenAlreadySet = true\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\treqObject.Env = append(os.Environ(), reqObject.Env...)\n\t// Don't overwrite the PromptURLEnvVar if it is already set in the environment.\n\tvar promptTokenAlreadySet bool\n\tfor _, env := range reqObject.Env {\n\t\tif v, ok := strings.CutPrefix(env, types.PromptTokenEnvVar+\"=\"); ok && v != \"\" {\n\t\t\tpromptTokenAlreadySet = true\n\t\t\tbreak\n",
                      "markdown": "`\treqObject.Env = append(os.Environ(), reqObject.Env...)\n\t// Don't overwrite the PromptURLEnvVar if it is already set in the environment.\n\tvar promptTokenAlreadySet bool\n\tfor _, env := range reqObject.Env {\n\t\tif v, ok := strings.CutPrefix(env, types.PromptTokenEnvVar+\"=\"); ok && v != \"\" {\n\t\t\tpromptTokenAlreadySet = true\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/types.go"
                },
                "region": {
                  "startLine": 260,
                  "endLine": 260,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\ttypes.Prompt `json:\",inline\"`\n\tID           string           `json:\"id,omitempty\"`\n\tType         runner.EventType `json:\"type,omitempty\"`\n\tTime         time.Time        `json:\"time,omitempty\"`\n}\n\ntype credentialsRequest struct {\n",
                    "rendered": {
                      "text": "\ttypes.Prompt `json:\",inline\"`\n\tID           string           `json:\"id,omitempty\"`\n\tType         runner.EventType `json:\"type,omitempty\"`\n\tTime         time.Time        `json:\"time,omitempty\"`\n}\n\ntype credentialsRequest struct {\n",
                      "markdown": "`\ttypes.Prompt `json:\",inline\"`\n\tID           string           `json:\"id,omitempty\"`\n\tType         runner.EventType `json:\"type,omitempty\"`\n\tTime         time.Time        `json:\"time,omitempty\"`\n}\n\ntype credentialsRequest struct {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/types.go"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ntype modelsRequest struct {\n\tProviders           []string `json:\"providers\"`\n\tEnv                 []string `json:\"env\"`\n\tCredentialOverrides []string `json:\"credentialOverrides\"`\n}\n\n",
                    "rendered": {
                      "text": "\ntype modelsRequest struct {\n\tProviders           []string `json:\"providers\"`\n\tEnv                 []string `json:\"env\"`\n\tCredentialOverrides []string `json:\"credentialOverrides\"`\n}\n\n",
                      "markdown": "`\ntype modelsRequest struct {\n\tProviders           []string `json:\"providers\"`\n\tEnv                 []string `json:\"env\"`\n\tCredentialOverrides []string `json:\"credentialOverrides\"`\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/sdkserver/types.go"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tInput                string   `json:\"input\"`\n\tChatState            string   `json:\"chatState\"`\n\tWorkspace            string   `json:\"workspace\"`\n\tEnv                  []string `json:\"env\"`\n\tCredentialContexts   []string `json:\"credentialContexts\"`\n\tCredentialOverrides  []string `json:\"credentialOverrides\"`\n\tConfirm              bool     `json:\"confirm\"`\n",
                    "rendered": {
                      "text": "\tInput                string   `json:\"input\"`\n\tChatState            string   `json:\"chatState\"`\n\tWorkspace            string   `json:\"workspace\"`\n\tEnv                  []string `json:\"env\"`\n\tCredentialContexts   []string `json:\"credentialContexts\"`\n\tCredentialOverrides  []string `json:\"credentialOverrides\"`\n\tConfirm              bool     `json:\"confirm\"`\n",
                      "markdown": "`\tInput                string   `json:\"input\"`\n\tChatState            string   `json:\"chatState\"`\n\tWorkspace            string   `json:\"workspace\"`\n\tEnv                  []string `json:\"env\"`\n\tCredentialContexts   []string `json:\"credentialContexts\"`\n\tCredentialOverrides  []string `json:\"credentialOverrides\"`\n\tConfirm              bool     `json:\"confirm\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/tests/runner_test.go"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 17,
                  "endLine": 875,
                  "endColumn": 72019,
                  "snippet": {
                    "text": "\tcontent, err := io.ReadAll(gunzip)\n\trequire.NoError(t, err)\n\n\tautogold.Expect(\"\").Equal(t, string(content))\n}\n\nfunc TestSysContext(t *testing.T) {\n",
                    "rendered": {
                      "text": "\tcontent, err := io.ReadAll(gunzip)\n\trequire.NoError(t, err)\n\n\tautogold.Expect(\"\").Equal(t, string(content))\n}\n\nfunc TestSysContext(t *testing.T) {\n",
                      "markdown": "`\tcontent, err := io.ReadAll(gunzip)\n\trequire.NoError(t, err)\n\n\tautogold.Expect(\"\").Equal(t, string(content))\n}\n\nfunc TestSysContext(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/debugcmd/debug.go"
                },
                "region": {
                  "startLine": 90,
                  "endLine": 90,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tw.r.lock.Lock()\n\tdefer w.r.lock.Unlock()\n\n\tcp := make([]byte, len(data))\n\tcopy(cp, data)\n\n\tw.r.entries = append(w.r.entries, entry{\n",
                    "rendered": {
                      "text": "\tw.r.lock.Lock()\n\tdefer w.r.lock.Unlock()\n\n\tcp := make([]byte, len(data))\n\tcopy(cp, data)\n\n\tw.r.entries = append(w.r.entries, entry{\n",
                      "markdown": "`\tw.r.lock.Lock()\n\tdefer w.r.lock.Unlock()\n\n\tcp := make([]byte, len(data))\n\tcopy(cp, data)\n\n\tw.r.entries = append(w.r.entries, entry{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/debugcmd/debug.go"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "endColumn": 5,
                  "snippet": {
                    "text": "type WrappedCmd struct {\n\tc   *exec.Cmd\n\tr   recorder\n\tEnv []string\n\tDir string\n}\n\n",
                    "rendered": {
                      "text": "type WrappedCmd struct {\n\tc   *exec.Cmd\n\tr   recorder\n\tEnv []string\n\tDir string\n}\n\n",
                      "markdown": "`type WrappedCmd struct {\n\tc   *exec.Cmd\n\tr   recorder\n\tEnv []string\n\tDir string\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 16,
                  "endLine": 67,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.Username, a.Password, _ = strings.Cut(string(data), \":\")\n\t\ta.Auth = \"\"\n\t}\n\treturn nil\n",
                    "rendered": {
                      "text": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.Username, a.Password, _ = strings.Cut(string(data), \":\")\n\t\ta.Auth = \"\"\n\t}\n\treturn nil\n",
                      "markdown": "`\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.Username, a.Password, _ = strings.Cut(string(data), \":\")\n\t\ta.Auth = \"\"\n\t}\n\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 5,
                  "endLine": 52,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n\tcp.ServerAddress = \"\"\n\treturn json.Marshal((types.AuthConfig)(cp))\n",
                    "rendered": {
                      "text": "\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n\tcp.ServerAddress = \"\"\n\treturn json.Marshal((types.AuthConfig)(cp))\n",
                      "markdown": "`\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n\tcp.ServerAddress = \"\"\n\treturn json.Marshal((types.AuthConfig)(cp))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 76,
                  "endLine": 50,
                  "endColumn": 84,
                  "snippet": {
                    "text": "func (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n",
                    "rendered": {
                      "text": "func (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n",
                      "markdown": "`func (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 28,
                  "endLine": 49,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nfunc (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n",
                    "rendered": {
                      "text": "\nfunc (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n",
                      "markdown": "`\nfunc (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 63,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\tif a.Auth != \"\" {\n\t\tdata, err := base64.StdEncoding.DecodeString(a.Auth)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n",
                    "rendered": {
                      "text": "\t\treturn err\n\t}\n\tif a.Auth != \"\" {\n\t\tdata, err := base64.StdEncoding.DecodeString(a.Auth)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n",
                      "markdown": "`\t\treturn err\n\t}\n\tif a.Auth != \"\" {\n\t\tdata, err := base64.StdEncoding.DecodeString(a.Auth)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 12,
                  "endLine": 50,
                  "endColumn": 18,
                  "snippet": {
                    "text": "func (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n",
                    "rendered": {
                      "text": "func (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n",
                      "markdown": "`func (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n\t\tcp.Password = \"\"\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 11,
                  "endLine": 4,
                  "endColumn": 17,
                  "snippet": {
                    "text": "package config\n\nimport (\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n",
                    "rendered": {
                      "text": "package config\n\nimport (\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n",
                      "markdown": "`package config\n\nimport (\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 55,
                  "endLine": 179,
                  "endColumn": 59,
                  "snippet": {
                    "text": "\t\tdefault:\n\t\t\terrMsg += \" (use file)\"\n\t\t}\n\t\terrMsg += fmt.Sprintf(\"\\nPlease edit your config file at %s to fix this.\", result.location)\n\n\t\treturn nil, errors.New(errMsg)\n\t}\n",
                    "rendered": {
                      "text": "\t\tdefault:\n\t\t\terrMsg += \" (use file)\"\n\t\t}\n\t\terrMsg += fmt.Sprintf(\"\\nPlease edit your config file at %s to fix this.\", result.location)\n\n\t\treturn nil, errors.New(errMsg)\n\t}\n",
                      "markdown": "`\t\tdefault:\n\t\t\terrMsg += \" (use file)\"\n\t\t}\n\t\terrMsg += fmt.Sprintf(\"\\nPlease edit your config file at %s to fix this.\", result.location)\n\n\t\treturn nil, errors.New(errMsg)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tif c == nil {\n\t\treturn nil\n\t}\n\tcp := *c\n\tcp.Auths = map[string]AuthConfig{}\n\tfor k := range c.Auths {\n\t\tcp.Auths[k] = AuthConfig{\n",
                    "rendered": {
                      "text": "\tif c == nil {\n\t\treturn nil\n\t}\n\tcp := *c\n\tcp.Auths = map[string]AuthConfig{}\n\tfor k := range c.Auths {\n\t\tcp.Auths[k] = AuthConfig{\n",
                      "markdown": "`\tif c == nil {\n\t\treturn nil\n\t}\n\tcp := *c\n\tcp.Auths = map[string]AuthConfig{}\n\tfor k := range c.Auths {\n\t\tcp.Auths[k] = AuthConfig{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/config/cliconfig.go"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "endColumn": 4,
                  "snippet": {
                    "text": "type AuthConfig types.AuthConfig\n\nfunc (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n",
                    "rendered": {
                      "text": "type AuthConfig types.AuthConfig\n\nfunc (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n",
                      "markdown": "`type AuthConfig types.AuthConfig\n\nfunc (a AuthConfig) MarshalJSON() ([]byte, error) {\n\tcp := a\n\tif cp.Username != \"\" || cp.Password != \"\" {\n\t\tcp.Auth = base64.StdEncoding.EncodeToString([]byte(cp.Username + \":\" + cp.Password))\n\t\tcp.Username = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runtimemanager.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 83,
                  "endLine": 40,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\t})\n}\n\nfunc (r runtimeManagerLogger) GetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error) {\n\treturn r.rm.GetContext(mvl.WithInfo(ctx, r), tool, cmd, env)\n}\n\n",
                    "rendered": {
                      "text": "\t})\n}\n\nfunc (r runtimeManagerLogger) GetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error) {\n\treturn r.rm.GetContext(mvl.WithInfo(ctx, r), tool, cmd, env)\n}\n\n",
                      "markdown": "`\t})\n}\n\nfunc (r runtimeManagerLogger) GetContext(ctx context.Context, tool types.Tool, cmd, env []string) (string, []string, error) {\n\treturn r.rm.GetContext(mvl.WithInfo(ctx, r), tool, cmd, env)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/output.go"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 70,
                  "endLine": 12,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\"github.com/gptscript-ai/gptscript/pkg/types\"\n)\n\nfunc (r *Runner) handleOutput(callCtx engine.Context, monitor Monitor, env []string, state *State, retErr error) (*State, error) {\n\toutputToolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeOutput)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\"github.com/gptscript-ai/gptscript/pkg/types\"\n)\n\nfunc (r *Runner) handleOutput(callCtx engine.Context, monitor Monitor, env []string, state *State, retErr error) (*State, error) {\n\toutputToolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeOutput)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\t\"github.com/gptscript-ai/gptscript/pkg/types\"\n)\n\nfunc (r *Runner) handleOutput(callCtx engine.Context, monitor Monitor, env []string, state *State, retErr error) (*State, error) {\n\toutputToolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeOutput)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 14,
                  "endLine": 225,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t// Handle request body\n\tif instructions.BodyContentMIME != \"\" {\n\t\tres := gjson.Get(input, \"requestBodyContent\")\n\t\tvar body bytes.Buffer\n\t\tswitch instructions.BodyContentMIME {\n\t\tcase \"application/json\":\n",
                    "rendered": {
                      "text": "\n\t// Handle request body\n\tif instructions.BodyContentMIME != \"\" {\n\t\tres := gjson.Get(input, \"requestBodyContent\")\n\t\tvar body bytes.Buffer\n\t\tswitch instructions.BodyContentMIME {\n\t\tcase \"application/json\":\n",
                      "markdown": "`\n\t// Handle request body\n\tif instructions.BodyContentMIME != \"\" {\n\t\tres := gjson.Get(input, \"requestBodyContent\")\n\t\tvar body bytes.Buffer\n\t\tswitch instructions.BodyContentMIME {\n\t\tcase \"application/json\":\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 16,
                  "endLine": 210,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\t\t// If there is a bearer token set for the whole server, and no Authorization header has been defined, use it.\n\t\tif token, ok := envMap[\"GPTSCRIPT_\"+env.ToEnvLike(u.Hostname())+\"_BEARER_TOKEN\"]; ok {\n\t\t\tif req.Header.Get(\"Authorization\") == \"\" {\n\t\t\t\treq.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t\t}\n\t\t}\n",
                    "rendered": {
                      "text": "\n\t\t// If there is a bearer token set for the whole server, and no Authorization header has been defined, use it.\n\t\tif token, ok := envMap[\"GPTSCRIPT_\"+env.ToEnvLike(u.Hostname())+\"_BEARER_TOKEN\"]; ok {\n\t\t\tif req.Header.Get(\"Authorization\") == \"\" {\n\t\t\t\treq.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t\t}\n\t\t}\n",
                      "markdown": "`\n\t\t// If there is a bearer token set for the whole server, and no Authorization header has been defined, use it.\n\t\tif token, ok := envMap[\"GPTSCRIPT_\"+env.ToEnvLike(u.Hostname())+\"_BEARER_TOKEN\"]; ok {\n\t\t\tif req.Header.Get(\"Authorization\") == \"\" {\n\t\t\t\treq.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t\t}\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 15,
                  "endLine": 109,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t}\n\tcase openapi.RunTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\t\targs := gjson.Get(input, \"args\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n\t\t\tmatch, err := openapi.MatchFilters(strings.Split(filter, \"|\"), operation)\n",
                    "rendered": {
                      "text": "\t\t}\n\tcase openapi.RunTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\t\targs := gjson.Get(input, \"args\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n\t\t\tmatch, err := openapi.MatchFilters(strings.Split(filter, \"|\"), operation)\n",
                      "markdown": "`\t\t}\n\tcase openapi.RunTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\t\targs := gjson.Get(input, \"args\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n\t\t\tmatch, err := openapi.MatchFilters(strings.Split(filter, \"|\"), operation)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 20,
                  "endLine": 108,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tResult: ptr(string(schemaJSON)),\n\t\t}\n\tcase openapi.RunTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\t\targs := gjson.Get(input, \"args\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n",
                    "rendered": {
                      "text": "\t\t\tResult: ptr(string(schemaJSON)),\n\t\t}\n\tcase openapi.RunTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\t\targs := gjson.Get(input, \"args\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n",
                      "markdown": "`\t\t\tResult: ptr(string(schemaJSON)),\n\t\t}\n\tcase openapi.RunTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\t\targs := gjson.Get(input, \"args\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 20,
                  "endLine": 60,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tResult: ptr(string(opListJSON)),\n\t\t}\n\tcase openapi.GetSchemaTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n\t\t\tmatch, err := openapi.MatchFilters(strings.Split(filter, \"|\"), operation)\n",
                    "rendered": {
                      "text": "\t\t\tResult: ptr(string(opListJSON)),\n\t\t}\n\tcase openapi.GetSchemaTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n\t\t\tmatch, err := openapi.MatchFilters(strings.Split(filter, \"|\"), operation)\n",
                      "markdown": "`\t\t\tResult: ptr(string(opListJSON)),\n\t\t}\n\tcase openapi.GetSchemaTool:\n\t\toperation := gjson.Get(input, \"operation\").String()\n\n\t\tif filter != \"\" && filter != openapi.NoFilter {\n\t\t\tmatch, err := openapi.MatchFilters(strings.Split(filter, \"|\"), operation)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 7,
                  "endLine": 166,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\tenvMap := map[string]string{}\n\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n",
                    "rendered": {
                      "text": "\n\tenvMap := map[string]string{}\n\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n",
                      "markdown": "`\n\tenvMap := map[string]string{}\n\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/openapi.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 7,
                  "endLine": 22,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nfunc (e *Engine) runOpenAPIRevamp(tool types.Tool, input string) (*Return, error) {\n\tenvMap := make(map[string]string, len(e.Env))\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n",
                    "rendered": {
                      "text": "\nfunc (e *Engine) runOpenAPIRevamp(tool types.Tool, input string) (*Return, error) {\n\tenvMap := make(map[string]string, len(e.Env))\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n",
                      "markdown": "`\nfunc (e *Engine) runOpenAPIRevamp(tool types.Tool, input string) (*Return, error) {\n\tenvMap := make(map[string]string, len(e.Env))\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/http.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 15,
                  "endLine": 93,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\tif resp.Header.Get(\"Content-Type\") == \"application/json\" && strings.HasPrefix(string(content), \"\\\"\") {\n\t\t// This is dumb hack when something returns a string in JSON format, just decode it to a string\n\t\tvar s string\n\t\tif err := json.Unmarshal(content, &s); err == nil {\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\tif resp.Header.Get(\"Content-Type\") == \"application/json\" && strings.HasPrefix(string(content), \"\\\"\") {\n\t\t// This is dumb hack when something returns a string in JSON format, just decode it to a string\n\t\tvar s string\n\t\tif err := json.Unmarshal(content, &s); err == nil {\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\tif resp.Header.Get(\"Content-Type\") == \"application/json\" && strings.HasPrefix(string(content), \"\\\"\") {\n\t\t// This is dumb hack when something returns a string in JSON format, just decode it to a string\n\t\tvar s string\n\t\tif err := json.Unmarshal(content, &s); err == nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/http.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 36,
                  "endLine": 44,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t}\n\t\treferencedTool, ok := prg.ToolSet[referencedToolRefs[0].ToolID]\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"failed to find tool [%s] for [%s]\", referencedToolName, parsed.Hostname())\n\t\t}\n\t\ttoolURL, err = e.startDaemon(referencedTool)\n\t\tif err != nil {\n",
                    "rendered": {
                      "text": "\t\t}\n\t\treferencedTool, ok := prg.ToolSet[referencedToolRefs[0].ToolID]\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"failed to find tool [%s] for [%s]\", referencedToolName, parsed.Hostname())\n\t\t}\n\t\ttoolURL, err = e.startDaemon(referencedTool)\n\t\tif err != nil {\n",
                      "markdown": "`\t\t}\n\t\treferencedTool, ok := prg.ToolSet[referencedToolRefs[0].ToolID]\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"failed to find tool [%s] for [%s]\", referencedToolName, parsed.Hostname())\n\t\t}\n\t\ttoolURL, err = e.startDaemon(referencedTool)\n\t\tif err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/engine/http.go"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 12,
                  "snippet": {
                    "text": "func (e *Engine) runHTTP(ctx context.Context, prg *types.Program, tool types.Tool, input string) (cmdRet *Return, cmdErr error) {\n\tenvMap := map[string]string{}\n\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n",
                    "rendered": {
                      "text": "func (e *Engine) runHTTP(ctx context.Context, prg *types.Program, tool types.Tool, input string) (cmdRet *Return, cmdErr error) {\n\tenvMap := map[string]string{}\n\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n",
                      "markdown": "`func (e *Engine) runHTTP(ctx context.Context, prg *types.Program, tool types.Tool, input string) (cmdRet *Return, cmdErr error) {\n\tenvMap := map[string]string{}\n\n\tfor _, env := range e.Env {\n\t\tk, v, _ := strings.Cut(env, \"=\")\n\t\tenvMap[k] = v\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/busybox_test.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package busybox\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "package busybox\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                      "markdown": "`package busybox\n\nimport (\n\t\"context\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/log.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package busybox\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                    "rendered": {
                      "text": "package busybox\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                      "markdown": "`package busybox\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/credential.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 11,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\treturn \"\", err\n\t\t}\n\n\t\tk = gjson.Get(result, \"key\").String()\n\t\tif err := credStore.Add(ctx, credentials.Credential{\n\t\t\tToolName: credName,\n\t\t\tType:     credentials.CredentialTypeModelProvider,\n",
                    "rendered": {
                      "text": "\t\t\treturn \"\", err\n\t\t}\n\n\t\tk = gjson.Get(result, \"key\").String()\n\t\tif err := credStore.Add(ctx, credentials.Credential{\n\t\t\tToolName: credName,\n\t\t\tType:     credentials.CredentialTypeModelProvider,\n",
                      "markdown": "`\t\t\treturn \"\", err\n\t\t}\n\n\t\tk = gjson.Get(result, \"key\").String()\n\t\tif err := credStore.Add(ctx, credentials.Credential{\n\t\t\tToolName: credName,\n\t\t\tType:     credentials.CredentialTypeModelProvider,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/credential.go"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 31,
                  "endLine": 12,
                  "endColumn": 36,
                  "snippet": {
                    "text": ")\n\nfunc GetModelProviderCredential(ctx context.Context, credStore credentials.CredentialStore, credName, env, message string, envs []string) (string, error) {\n\tcred, exists, err := credStore.Get(ctx, credName)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n",
                    "rendered": {
                      "text": ")\n\nfunc GetModelProviderCredential(ctx context.Context, credStore credentials.CredentialStore, credName, env, message string, envs []string) (string, error) {\n\tcred, exists, err := credStore.Get(ctx, credName)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n",
                      "markdown": "`)\n\nfunc GetModelProviderCredential(ctx context.Context, credStore credentials.CredentialStore, credName, env, message string, envs []string) (string, error) {\n\tcred, exists, err := credStore.Get(ctx, credName)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/server.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 14,
                  "endLine": 37,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t\treturn ctx\n\t\t},\n\t\tHandler: http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Header.Get(\"Authorization\") != \"Bearer \"+token {\n\t\t\t\trw.WriteHeader(http.StatusUnauthorized)\n\t\t\t\t_, _ = rw.Write([]byte(\"Unauthorized (invalid token)\"))\n\t\t\t\treturn\n",
                    "rendered": {
                      "text": "\t\t\treturn ctx\n\t\t},\n\t\tHandler: http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Header.Get(\"Authorization\") != \"Bearer \"+token {\n\t\t\t\trw.WriteHeader(http.StatusUnauthorized)\n\t\t\t\t_, _ = rw.Write([]byte(\"Unauthorized (invalid token)\"))\n\t\t\t\treturn\n",
                      "markdown": "`\t\t\treturn ctx\n\t\t},\n\t\tHandler: http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Header.Get(\"Authorization\") != \"Bearer \"+token {\n\t\t\t\trw.WriteHeader(http.StatusUnauthorized)\n\t\t\t\t_, _ = rw.Write([]byte(\"Unauthorized (invalid token)\"))\n\t\t\t\treturn\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/prompt/server.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 17,
                  "endColumn": 12,
                  "snippet": {
                    "text": ")\n\nfunc NewServer(ctx context.Context, envs []string) ([]string, error) {\n\tfor _, env := range envs {\n\t\tfor _, k := range []string{types.PromptURLEnvVar, types.PromptTokenEnvVar} {\n\t\t\tv, ok := strings.CutPrefix(env, k+\"=\")\n\t\t\tif ok && v != \"\" {\n",
                    "rendered": {
                      "text": ")\n\nfunc NewServer(ctx context.Context, envs []string) ([]string, error) {\n\tfor _, env := range envs {\n\t\tfor _, k := range []string{types.PromptURLEnvVar, types.PromptTokenEnvVar} {\n\t\t\tv, ok := strings.CutPrefix(env, k+\"=\")\n\t\t\tif ok && v != \"\" {\n",
                      "markdown": "`)\n\nfunc NewServer(ctx context.Context, envs []string) ([]string, error) {\n\tfor _, env := range envs {\n\t\tfor _, k := range []string{types.PromptURLEnvVar, types.PromptTokenEnvVar} {\n\t\t\tv, ok := strings.CutPrefix(env, k+\"=\")\n\t\t\tif ok && v != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/gptscript.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 22,
                  "endLine": 187,
                  "endColumn": 27,
                  "snippet": {
                    "text": "func (r *GPTScript) Customize(cmd *cobra.Command) {\n\tcmd.Flags().SetInterspersed(false)\n\tcmd.Use = version.ProgramName + \" [flags] PROGRAM_FILE [INPUT...]\"\n\tcmd.Version = version.Get().String()\n\tcmd.CompletionOptions.HiddenDefaultCmd = true\n\tcmd.TraverseChildren = true\n\n",
                    "rendered": {
                      "text": "func (r *GPTScript) Customize(cmd *cobra.Command) {\n\tcmd.Flags().SetInterspersed(false)\n\tcmd.Use = version.ProgramName + \" [flags] PROGRAM_FILE [INPUT...]\"\n\tcmd.Version = version.Get().String()\n\tcmd.CompletionOptions.HiddenDefaultCmd = true\n\tcmd.TraverseChildren = true\n\n",
                      "markdown": "`func (r *GPTScript) Customize(cmd *cobra.Command) {\n\tcmd.Flags().SetInterspersed(false)\n\tcmd.Use = version.ProgramName + \" [flags] PROGRAM_FILE [INPUT...]\"\n\tcmd.Version = version.Get().String()\n\tcmd.CompletionOptions.HiddenDefaultCmd = true\n\tcmd.TraverseChildren = true\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/gptscript.go"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 57,
                  "endLine": 369,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t\t\tif !(strings.HasPrefix(file, \"http://\") || strings.HasPrefix(file, \"https://\") || strings.HasPrefix(file, \"github.com\")) {\n\t\t\t\tabsPathToScript, err := filepath.Abs(file)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"cannot determine absolute path to script %s: %v\", file, err)\n\t\t\t\t}\n\t\t\t\tgptOpt.Env = append(gptOpt.Env, \"SCRIPTS_PATH=\"+filepath.Dir(absPathToScript))\n\t\t\t\tfile = strings.TrimSuffix(filepath.Base(file), \".gpt\")\n",
                    "rendered": {
                      "text": "\t\t\tif !(strings.HasPrefix(file, \"http://\") || strings.HasPrefix(file, \"https://\") || strings.HasPrefix(file, \"github.com\")) {\n\t\t\t\tabsPathToScript, err := filepath.Abs(file)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"cannot determine absolute path to script %s: %v\", file, err)\n\t\t\t\t}\n\t\t\t\tgptOpt.Env = append(gptOpt.Env, \"SCRIPTS_PATH=\"+filepath.Dir(absPathToScript))\n\t\t\t\tfile = strings.TrimSuffix(filepath.Base(file), \".gpt\")\n",
                      "markdown": "`\t\t\tif !(strings.HasPrefix(file, \"http://\") || strings.HasPrefix(file, \"https://\") || strings.HasPrefix(file, \"github.com\")) {\n\t\t\t\tabsPathToScript, err := filepath.Abs(file)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"cannot determine absolute path to script %s: %v\", file, err)\n\t\t\t\t}\n\t\t\t\tgptOpt.Env = append(gptOpt.Env, \"SCRIPTS_PATH=\"+filepath.Dir(absPathToScript))\n\t\t\t\tfile = strings.TrimSuffix(filepath.Base(file), \".gpt\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/gptscript.go"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 88,
                  "endLine": 70,
                  "endColumn": 93,
                  "snippet": {
                    "text": "de (ex: --credential-override github.com/example/cred-tool:API_TOKEN=1234)\"`\n\tChatState                string   `usage:\"The chat state to continue, or null to start a new chat and return the state\" local:\"true\"`\n\tForceChat                bool     `usage:\"Force an interactive chat session if even the top level tool is not a chat tool\" local:\"true\"`\n\tForceSequential          bool     `usage:\"Force parallel calls to run sequentially\" local:\"true\"`\n\tWorkspace                string   `usage:\"Directory to use for the workspace, if specified it will not be deleted on exit\"`\n\tUI                       bool ",
                    "rendered": {
                      "text": "de (ex: --credential-override github.com/example/cred-tool:API_TOKEN=1234)\"`\n\tChatState                string   `usage:\"The chat state to continue, or null to start a new chat and return the state\" local:\"true\"`\n\tForceChat                bool     `usage:\"Force an interactive chat session if even the top level tool is not a chat tool\" local:\"true\"`\n\tForceSequential          bool     `usage:\"Force parallel calls to run sequentially\" local:\"true\"`\n\tWorkspace                string   `usage:\"Directory to use for the workspace, if specified it will not be deleted on exit\"`\n\tUI                       bool ",
                      "markdown": "`de (ex: --credential-override github.com/example/cred-tool:API_TOKEN=1234)\"`\n\tChatState                string   `usage:\"The chat state to continue, or null to start a new chat and return the state\" local:\"true\"`\n\tForceChat                bool     `usage:\"Force an interactive chat session if even the top level tool is not a chat tool\" local:\"true\"`\n\tForceSequential          bool     `usage:\"Force parallel calls to run sequentially\" local:\"true\"`\n\tWorkspace                string   `usage:\"Directory to use for the workspace, if specified it will not be deleted on exit\"`\n\tUI                       bool `"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/cli/gptscript.go"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 45,
                  "endLine": 57,
                  "endColumn": 50,
                  "snippet": {
                    "text": "tring `usage:\"Save output to a file, or - for stdout\" short:\"o\"`\n\tEventsStreamTo string `usage:\"Stream events to this location, could be a file descriptor/handle (e.g. fd://2), filename, or named pipe (e.g. \\\\\\\\.\\\\pipe\\\\my-pipe)\" name:\"events-stream-to\"`\n\t// Input should not be using GPTSCRIPT_INPUT env var because that is the same value that is set in tool executions\n\tInput                    string   `usage:\"Read input from a file (\\\"-\\\" for stdin)\" short:\"f\" env:\"GPTSCRIPT_INPUT_FILE\"`\n\tSubTool                  string   `usage:\"Use tool of this name, not the first tool in file\" local:\"true\"`\n\tAs",
                    "rendered": {
                      "text": "tring `usage:\"Save output to a file, or - for stdout\" short:\"o\"`\n\tEventsStreamTo string `usage:\"Stream events to this location, could be a file descriptor/handle (e.g. fd://2), filename, or named pipe (e.g. \\\\\\\\.\\\\pipe\\\\my-pipe)\" name:\"events-stream-to\"`\n\t// Input should not be using GPTSCRIPT_INPUT env var because that is the same value that is set in tool executions\n\tInput                    string   `usage:\"Read input from a file (\\\"-\\\" for stdin)\" short:\"f\" env:\"GPTSCRIPT_INPUT_FILE\"`\n\tSubTool                  string   `usage:\"Use tool of this name, not the first tool in file\" local:\"true\"`\n\tAs",
                      "markdown": "`tring `usage:\"Save output to a file, or - for stdout\" short:\"o\"`\n\tEventsStreamTo string `usage:\"Stream events to this location, could be a file descriptor/handle (e.g. fd://2), filename, or named pipe (e.g. \\\\\\\\.\\\\pipe\\\\my-pipe)\" name:\"events-stream-to\"`\n\t// Input should not be using GPTSCRIPT_INPUT env var because that is the same value that is set in tool executions\n\tInput                    string   `usage:\"Read input from a file (\\\"-\\\" for stdin)\" short:\"f\" env:\"GPTSCRIPT_INPUT_FILE\"`\n\tSubTool                  string   `usage:\"Use tool of this name, not the first tool in file\" local:\"true\"`\n\tAs`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/helpers.go"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 6,
                  "snippet": {
                    "text": "func GPTScriptExec(args ...string) (string, error) {\n\tcmd := exec.Command(\"../bin/gptscript\", args...)\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"..\\\\bin\\\\gptscript.exe\", args...)\n\t}\n\n\tout, err := cmd.CombinedOutput()\n",
                    "rendered": {
                      "text": "func GPTScriptExec(args ...string) (string, error) {\n\tcmd := exec.Command(\"../bin/gptscript\", args...)\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"..\\\\bin\\\\gptscript.exe\", args...)\n\t}\n\n\tout, err := cmd.CombinedOutput()\n",
                      "markdown": "`func GPTScriptExec(args ...string) (string, error) {\n\tcmd := exec.Command(\"../bin/gptscript\", args...)\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"..\\\\bin\\\\gptscript.exe\", args...)\n\t}\n\n\tout, err := cmd.CombinedOutput()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/integration/helpers.go"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "endColumn": 5,
                  "snippet": {
                    "text": ")\n\nfunc GPTScriptExec(args ...string) (string, error) {\n\tcmd := exec.Command(\"../bin/gptscript\", args...)\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"..\\\\bin\\\\gptscript.exe\", args...)\n\t}\n",
                    "rendered": {
                      "text": ")\n\nfunc GPTScriptExec(args ...string) (string, error) {\n\tcmd := exec.Command(\"../bin/gptscript\", args...)\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"..\\\\bin\\\\gptscript.exe\", args...)\n\t}\n",
                      "markdown": "`)\n\nfunc GPTScriptExec(args ...string) (string, error) {\n\tcmd := exec.Command(\"../bin/gptscript\", args...)\n\tif runtime.GOOS == \"windows\" {\n\t\tcmd = exec.Command(\"..\\\\bin\\\\gptscript.exe\", args...)\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 56,
                  "endLine": 85,
                  "endColumn": 60,
                  "snippet": {
                    "text": "This tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n\n",
                    "rendered": {
                      "text": "This tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n\n",
                      "markdown": "`This tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 26,
                  "endLine": 84,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n",
                    "rendered": {
                      "text": "\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n",
                      "markdown": "`\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 9,
                  "endLine": 80,
                  "endColumn": 13,
                  "snippet": {
                    "text": "gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n",
                    "rendered": {
                      "text": "gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n",
                      "markdown": "`gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 63,
                  "snippet": {
                    "text": "---\nName: learn-gh\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands. Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\ngh --help\ngh repo --help\n",
                    "rendered": {
                      "text": "---\nName: learn-gh\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands. Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\ngh --help\ngh repo --help\n",
                      "markdown": "`---\nName: learn-gh\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands. Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\ngh --help\ngh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 45,
                  "endLine": 47,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n`Chat: true` turns this tool into a \"chat-able\" tool, which we also call an \"agent\".\nThis causes the tool to run as an interactive chatbot, asking for user input and providing output.\nIf `Chat` is set to `false` (or not specified at all), the tool will run once without user interaction and exit.\nThis is useful for automated tasks, but right now we are working on an agent, so we set it to `true`.\n\nLastly, there is the **tool body**, which in this case is a simple prompt, letting the LLM know that it should use the `gh` command and follow the user's instructions.\n",
                    "rendered": {
                      "text": "\n`Chat: true` turns this tool into a \"chat-able\" tool, which we also call an \"agent\".\nThis causes the tool to run as an interactive chatbot, asking for user input and providing output.\nIf `Chat` is set to `false` (or not specified at all), the tool will run once without user interaction and exit.\nThis is useful for automated tasks, but right now we are working on an agent, so we set it to `true`.\n\nLastly, there is the **tool body**, which in this case is a simple prompt, letting the LLM know that it should use the `gh` command and follow the user's instructions.\n",
                      "markdown": "`\n`Chat: true` turns this tool into a \"chat-able\" tool, which we also call an \"agent\".\nThis causes the tool to run as an interactive chatbot, asking for user input and providing output.\nIf `Chat` is set to `false` (or not specified at all), the tool will run once without user interaction and exit.\nThis is useful for automated tasks, but right now we are working on an agent, so we set it to `true`.\n\nLastly, there is the **tool body**, which in this case is a simple prompt, letting the LLM know that it should use the `gh` command and follow the user's instructions.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 40,
                  "endLine": 87,
                  "endColumn": 48,
                  "snippet": {
                    "text": "The body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n\n## Running the tool\n\n",
                    "rendered": {
                      "text": "The body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n\n## Running the tool\n\n",
                      "markdown": "`The body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n\n## Running the tool\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 26,
                  "endLine": 84,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n",
                    "rendered": {
                      "text": "\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n",
                      "markdown": "`\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\nThe body of this tool is a bash script, rather than a prompt.\nThis context tool will be run by GPTScript automatically at the start of execution, and its output will be provided to the LLM.\nWe're running a bunch of `--help` commands in the `gh` CLI so that the LLM can understand how to use it.\nGPTScript knows that this tool body is a script rather than a prompt because it begins with `#!`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 92,
                  "endLine": 80,
                  "endColumn": 100,
                  "snippet": {
                    "text": "gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n",
                    "rendered": {
                      "text": "gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n",
                      "markdown": "`gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 16,
                  "endLine": 80,
                  "endColumn": 21,
                  "snippet": {
                    "text": "gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n",
                    "rendered": {
                      "text": "gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n",
                      "markdown": "`gh release create --help\n```\n\nThe `---` at the top of this tool is a block separator. It's how we delineate tools within a script file.\n\nThis tool has a `Name` field. We named this tool `learn-gh` so that it matches the `Context: learn-gh` line from the entrypoint tool.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 14,
                  "endLine": 63,
                  "snippet": {
                    "text": "---\nName: learn-gh\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands. Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\ngh --help\ngh repo --help\n",
                    "rendered": {
                      "text": "---\nName: learn-gh\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands. Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\ngh --help\ngh repo --help\n",
                      "markdown": "`---\nName: learn-gh\n\n#!/usr/bin/env bash\n\necho \"The following is the help text for the gh cli and some of its sub-commands. Use these when figuring out how to construct new commands. Note that the --search flag is used for filtering and sorting as well; there is no dedicated --sort flag.\"\ngh --help\ngh repo --help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 19,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nFirst, open up a new file in your favorite editor. We'll call the file `cli-demo.gpt`.\n\n```\nvim cli-demo.gpt\n```\n\nAll edits below are assumed to be in this file.\n",
                    "rendered": {
                      "text": "\nFirst, open up a new file in your favorite editor. We'll call the file `cli-demo.gpt`.\n\n```\nvim cli-demo.gpt\n```\n\nAll edits below are assumed to be in this file.\n",
                      "markdown": "`\nFirst, open up a new file in your favorite editor. We'll call the file `cli-demo.gpt`.\n\n```\nvim cli-demo.gpt\n```\n\nAll edits below are assumed to be in this file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/02-examples/01-cli.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 12,
                  "snippet": {
                    "text": "This guide will show you how to build a GPTScript that integrates with the `gh` CLI for GitHub.\n\n:::warning\nThis script **does not install** or configure `gh`. We assume you've done that already.\nYou must be logged in via `gh auth login`. [See here for more details](https://docs.github.com/en/github-cli/github-cli/quickstart)\n:::\n\n",
                    "rendered": {
                      "text": "This guide will show you how to build a GPTScript that integrates with the `gh` CLI for GitHub.\n\n:::warning\nThis script **does not install** or configure `gh`. We assume you've done that already.\nYou must be logged in via `gh auth login`. [See here for more details](https://docs.github.com/en/github-cli/github-cli/quickstart)\n:::\n\n",
                      "markdown": "`This guide will show you how to build a GPTScript that integrates with the `gh` CLI for GitHub.\n\n:::warning\nThis script **does not install** or configure `gh`. We assume you've done that already.\nYou must be logged in via `gh auth login`. [See here for more details](https://docs.github.com/en/github-cli/github-cli/quickstart)\n:::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "endLine": 60,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n\t;fi\n\n",
                    "rendered": {
                      "text": "\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n\t;fi\n\n",
                      "markdown": "`\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n\t;fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 6,
                  "snippet": {
                    "text": "validate-docs: gen-docs\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn build\n\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n",
                    "rendered": {
                      "text": "validate-docs: gen-docs\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn build\n\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n",
                      "markdown": "`validate-docs: gen-docs\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn build\n\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# Ensure docs build without errors. Makes sure generated docs are in-sync with CLI.\nvalidate-docs: gen-docs\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn build\n\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n",
                    "rendered": {
                      "text": "\n# Ensure docs build without errors. Makes sure generated docs are in-sync with CLI.\nvalidate-docs: gen-docs\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn build\n\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n",
                      "markdown": "`\n# Ensure docs build without errors. Makes sure generated docs are in-sync with CLI.\nvalidate-docs: gen-docs\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn build\n\tif [ -n \"$$(git status --porcelain --untracked-files=no)\" ]; then \\\n\t\tgit status --porcelain --untracked-files=no; \\\n\t\techo \"Encountered dirty repo!\"; \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n# This will initialize the node_modules needed to run the docs dev server. Run this before running serve-docs\ninit-docs:\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn install\n\n# Ensure docs build without errors. Makes sure generated docs are in-sync with CLI.\nvalidate-docs: gen-docs\n",
                    "rendered": {
                      "text": "\n# This will initialize the node_modules needed to run the docs dev server. Run this before running serve-docs\ninit-docs:\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn install\n\n# Ensure docs build without errors. Makes sure generated docs are in-sync with CLI.\nvalidate-docs: gen-docs\n",
                      "markdown": "`\n# This will initialize the node_modules needed to run the docs dev server. Run this before running serve-docs\ninit-docs:\n\tdocker run --rm --workdir=/docs -v $${PWD}/docs:/docs node:18-buster yarn install\n\n# Ensure docs build without errors. Makes sure generated docs are in-sync with CLI.\nvalidate-docs: gen-docs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "endLine": 39,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status --porcelain; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n\t;fi\n\n",
                    "rendered": {
                      "text": "\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status --porcelain; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n\t;fi\n\n",
                      "markdown": "`\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status --porcelain; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n\t;fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nvalidate: tidy lint\n\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status --porcelain; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n",
                    "rendered": {
                      "text": "\nvalidate: tidy lint\n\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status --porcelain; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n",
                      "markdown": "`\nvalidate: tidy lint\n\tif [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\tgit status --porcelain; \\\n\t\techo \"Encountered dirty repo!\"; \\\n\t\tgit diff; \\\n\t\texit 1 \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 107,
                  "endLine": 29,
                  "endColumn": 112,
                  "snippet": {
                    "text": "lint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n\tgolangci-lint run\n",
                    "rendered": {
                      "text": "lint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n\tgolangci-lint run\n",
                      "markdown": "`lint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n\tgolangci-lint run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 7,
                  "snippet": {
                    "text": "lint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n\tgolangci-lint run\n",
                    "rendered": {
                      "text": "lint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n\tgolangci-lint run\n",
                      "markdown": "`lint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n\tgolangci-lint run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/Makefile"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 19,
                  "endLine": 28,
                  "endColumn": 25,
                  "snippet": {
                    "text": "GOLANGCI_LINT_VERSION ?= v1.60.1\nlint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n",
                    "rendered": {
                      "text": "GOLANGCI_LINT_VERSION ?= v1.60.1\nlint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n",
                      "markdown": "`GOLANGCI_LINT_VERSION ?= v1.60.1\nlint:\n\tif ! command -v golangci-lint &> /dev/null; then \\\n  \t\techo \"Could not find golangci-lint, installing version $(GOLANGCI_LINT_VERSION).\"; \\\n\t\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin $(GOLANGCI_LINT_VERSION); \\\n\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/input.go"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\t\"github.com/gptscript-ai/gptscript/pkg/types\"\n)\n\nfunc (r *Runner) handleInput(callCtx engine.Context, monitor Monitor, env []string, input string) (string, error) {\n\tinputToolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeInput)\n\tif err != nil {\n\t\treturn \"\", err\n",
                    "rendered": {
                      "text": "\t\"github.com/gptscript-ai/gptscript/pkg/types\"\n)\n\nfunc (r *Runner) handleInput(callCtx engine.Context, monitor Monitor, env []string, input string) (string, error) {\n\tinputToolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeInput)\n\tif err != nil {\n\t\treturn \"\", err\n",
                      "markdown": "`\t\"github.com/gptscript-ai/gptscript/pkg/types\"\n)\n\nfunc (r *Runner) handleInput(callCtx engine.Context, monitor Monitor, env []string, input string) (string, error) {\n\tinputToolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeInput)\n\tif err != nil {\n\t\treturn \"\", err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 31,
                  "endLine": 876,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", toolName, err)\n\t\t\t}\n\t\t} else if credentialAlias != \"\" {\n\t\t\tc, exists, err = r.credStore.Get(callCtx.Ctx, credentialAlias)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", credentialAlias, err)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", toolName, err)\n\t\t\t}\n\t\t} else if credentialAlias != \"\" {\n\t\t\tc, exists, err = r.credStore.Get(callCtx.Ctx, credentialAlias)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", credentialAlias, err)\n\t\t\t}\n",
                      "markdown": "`\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", toolName, err)\n\t\t\t}\n\t\t} else if credentialAlias != \"\" {\n\t\t\tc, exists, err = r.credStore.Get(callCtx.Ctx, credentialAlias)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", credentialAlias, err)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 871,
                  "startColumn": 31,
                  "endLine": 871,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t// Only try to look up the cred if the tool is on GitHub or has an alias.\n\t\t// If it is a GitHub tool and has an alias, the alias overrides the tool name, so we use it as the credential name.\n\t\tif isGitHubTool(toolName) && credentialAlias == \"\" {\n\t\t\tc, exists, err = r.credStore.Get(callCtx.Ctx, toolName)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", toolName, err)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t// Only try to look up the cred if the tool is on GitHub or has an alias.\n\t\t// If it is a GitHub tool and has an alias, the alias overrides the tool name, so we use it as the credential name.\n\t\tif isGitHubTool(toolName) && credentialAlias == \"\" {\n\t\t\tc, exists, err = r.credStore.Get(callCtx.Ctx, toolName)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", toolName, err)\n\t\t\t}\n",
                      "markdown": "`\t\t// Only try to look up the cred if the tool is on GitHub or has an alias.\n\t\t// If it is a GitHub tool and has an alias, the alias overrides the tool name, so we use it as the credential name.\n\t\tif isGitHubTool(toolName) && credentialAlias == \"\" {\n\t\t\tc, exists, err = r.credStore.Get(callCtx.Ctx, toolName)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to get credentials for tool %s: %w\", toolName, err)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 76,
                  "endLine": 814,
                  "endColumn": 123,
                  "snippet": {
                    "text": "\treturn content\n}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n",
                    "rendered": {
                      "text": "\treturn content\n}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n",
                      "markdown": "`\treturn content\n}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 77,
                  "endLine": 815,
                  "endColumn": 81,
                  "snippet": {
                    "text": "}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n\n",
                    "rendered": {
                      "text": "}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n\n",
                      "markdown": "`}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 977,
                  "startColumn": 1,
                  "endLine": 977,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t}\n\n\tif nearestExpiration != nil {\n\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", credentials.CredentialExpiration, nearestExpiration.Format(time.RFC3339)))\n\t}\n\n\treturn env, nil\n",
                    "rendered": {
                      "text": "\t}\n\n\tif nearestExpiration != nil {\n\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", credentials.CredentialExpiration, nearestExpiration.Format(time.RFC3339)))\n\t}\n\n\treturn env, nil\n",
                      "markdown": "`\t}\n\n\tif nearestExpiration != nil {\n\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", credentials.CredentialExpiration, nearestExpiration.Format(time.RFC3339)))\n\t}\n\n\treturn env, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 972,
                  "startColumn": 2,
                  "endLine": 972,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t}\n\n\t\tfor k, v := range resultCredential.Env {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\t}\n\n\t\tfor k, v := range resultCredential.Env {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\t}\n\n\t\tfor k, v := range resultCredential.Env {\n\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 3,
                  "endLine": 896,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"failed to marshal credential: %w\", err)\n\t\t\t\t}\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", credentials.ExistingCredential, string(credJSON)))\n\t\t\t}\n\n\t\t\t// Get the input for the credential tool, if there is any.\n",
                    "rendered": {
                      "text": "\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"failed to marshal credential: %w\", err)\n\t\t\t\t}\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", credentials.ExistingCredential, string(credJSON)))\n\t\t\t}\n\n\t\t\t// Get the input for the credential tool, if there is any.\n",
                      "markdown": "`\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"failed to marshal credential: %w\", err)\n\t\t\t\t}\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", credentials.ExistingCredential, string(credJSON)))\n\t\t\t}\n\n\t\t\t// Get the input for the credential tool, if there is any.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 3,
                  "endLine": 851,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t// Check whether the credential was overridden before we attempt to find it in the store or run the tool.\n\t\tif override, exists := credOverrides[credName]; exists {\n\t\t\tfor k, v := range override {\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t// Check whether the credential was overridden before we attempt to find it in the store or run the tool.\n\t\tif override, exists := credOverrides[credName]; exists {\n\t\t\tfor k, v := range override {\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n",
                      "markdown": "`\t\t// Check whether the credential was overridden before we attempt to find it in the store or run the tool.\n\t\tif override, exists := credOverrides[credName]; exists {\n\t\t\tfor k, v := range override {\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 69,
                  "endLine": 848,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\t\tcredName = credentialAlias\n\t\t}\n\n\t\t// Check whether the credential was overridden before we attempt to find it in the store or run the tool.\n\t\tif override, exists := credOverrides[credName]; exists {\n\t\t\tfor k, v := range override {\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n",
                    "rendered": {
                      "text": "\t\t\tcredName = credentialAlias\n\t\t}\n\n\t\t// Check whether the credential was overridden before we attempt to find it in the store or run the tool.\n\t\tif override, exists := credOverrides[credName]; exists {\n\t\t\tfor k, v := range override {\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n",
                      "markdown": "`\t\t\tcredName = credentialAlias\n\t\t}\n\n\t\t// Check whether the credential was overridden before we attempt to find it in the store or run the tool.\n\t\tif override, exists := credOverrides[credName]; exists {\n\t\t\tfor k, v := range override {\n\t\t\t\tenv = append(env, fmt.Sprintf(\"%s=%s\", k, v))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 75,
                  "endLine": 814,
                  "endColumn": 80,
                  "snippet": {
                    "text": "\treturn content\n}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n",
                    "rendered": {
                      "text": "\treturn content\n}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n",
                      "markdown": "`\treturn content\n}\n\nfunc (r *Runner) handleCredentials(callCtx engine.Context, monitor Monitor, env []string, credToolRefs []types.ToolReference) ([]string, error) {\n\t// Since credential tools (usually) prompt the user, we want to only run one at a time.\n\tr.credMutex.Lock()\n\tdefer r.credMutex.Unlock()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 3,
                  "endLine": 762,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\td := r.newDispatcher(callCtx.Ctx)\n\n\t// Sort the id so if sequential the results are predictable\n\tids := maps.Keys(state.Continuation.Calls)\n\tsort.Strings(ids)\n\n",
                    "rendered": {
                      "text": "\n\td := r.newDispatcher(callCtx.Ctx)\n\n\t// Sort the id so if sequential the results are predictable\n\tids := maps.Keys(state.Continuation.Calls)\n\tsort.Strings(ids)\n\n",
                      "markdown": "`\n\td := r.newDispatcher(callCtx.Ctx)\n\n\t// Sort the id so if sequential the results are predictable\n\tids := maps.Keys(state.Continuation.Calls)\n\tsort.Strings(ids)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 56,
                  "endLine": 755,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\treturn nil, nil, fmt.Errorf(\"invalid state, failed to find subCall for subCallID [%s]\", state.SubCallID)\n\t\t}\n\t\treturn state, callResults, nil\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\treturn nil, nil, fmt.Errorf(\"invalid state, failed to find subCall for subCallID [%s]\", state.SubCallID)\n\t\t}\n\t\treturn state, callResults, nil\n\t}\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\treturn nil, nil, fmt.Errorf(\"invalid state, failed to find subCall for subCallID [%s]\", state.SubCallID)\n\t\t}\n\t\treturn state, callResults, nil\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 66,
                  "endLine": 722,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\treturn newParallelDispatcher(ctx)\n}\n\nfunc (r *Runner) subCalls(callCtx engine.Context, monitor Monitor, env []string, state *State, toolCategory engine.ToolCategory) (_ *State, callResults []SubCallResult, _ error) {\n\tvar resultLock sync.Mutex\n\n\tif state.Continuation != nil {\n",
                    "rendered": {
                      "text": "\treturn newParallelDispatcher(ctx)\n}\n\nfunc (r *Runner) subCalls(callCtx engine.Context, monitor Monitor, env []string, state *State, toolCategory engine.ToolCategory) (_ *State, callResults []SubCallResult, _ error) {\n\tvar resultLock sync.Mutex\n\n\tif state.Continuation != nil {\n",
                      "markdown": "`\treturn newParallelDispatcher(ctx)\n}\n\nfunc (r *Runner) subCalls(callCtx engine.Context, monitor Monitor, env []string, state *State, toolCategory engine.ToolCategory) (_ *State, callResults []SubCallResult, _ error) {\n\tvar resultLock sync.Mutex\n\n\tif state.Continuation != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 98,
                  "endLine": 694,
                  "endColumn": 103,
                  "snippet": {
                    "text": "\treturn state, err\n}\n\nfunc (r *Runner) subCallResume(ctx context.Context, parentContext engine.Context, monitor Monitor, env []string, toolID, callID string, state *State, toolCategory engine.ToolCategory) (*State, error) {\n\tcallCtx, err := parentContext.SubCallContext(ctx, \"\", toolID, callID, toolCategory)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn state, err\n}\n\nfunc (r *Runner) subCallResume(ctx context.Context, parentContext engine.Context, monitor Monitor, env []string, toolID, callID string, state *State, toolCategory engine.ToolCategory) (*State, error) {\n\tcallCtx, err := parentContext.SubCallContext(ctx, \"\", toolID, callID, toolCategory)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn state, err\n}\n\nfunc (r *Runner) subCallResume(ctx context.Context, parentContext engine.Context, monitor Monitor, env []string, toolID, callID string, state *State, toolCategory engine.ToolCategory) (*State, error) {\n\tcallCtx, err := parentContext.SubCallContext(ctx, \"\", toolID, callID, toolCategory)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 92,
                  "endLine": 673,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc (r *Runner) subCall(ctx context.Context, parentContext engine.Context, monitor Monitor, env []string, toolID, input, callID string, toolCategory engine.ToolCategory) (*State, error) {\n\tcallCtx, err := parentContext.SubCallContext(ctx, input, toolID, callID, toolCategory)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc (r *Runner) subCall(ctx context.Context, parentContext engine.Context, monitor Monitor, env []string, toolID, input, callID string, toolCategory engine.ToolCategory) (*State, error) {\n\tcallCtx, err := parentContext.SubCallContext(ctx, input, toolID, callID, toolCategory)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\t}\n}\n\nfunc (r *Runner) subCall(ctx context.Context, parentContext engine.Context, monitor Monitor, env []string, toolID, input, callID string, toolCategory engine.ToolCategory) (*State, error) {\n\tcallCtx, err := parentContext.SubCallContext(ctx, input, toolID, callID, toolCategory)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 64,
                  "endLine": 493,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\tInput   string `json:\"input,omitempty\"`\n}\n\nfunc (r *Runner) resume(callCtx engine.Context, monitor Monitor, env []string, state *State) (retState *State, retErr error) {\n\tdefer func() {\n\t\tretState, retErr = r.handleOutput(callCtx, monitor, env, retState, retErr)\n\t}()\n",
                    "rendered": {
                      "text": "\tInput   string `json:\"input,omitempty\"`\n}\n\nfunc (r *Runner) resume(callCtx engine.Context, monitor Monitor, env []string, state *State) (retState *State, retErr error) {\n\tdefer func() {\n\t\tretState, retErr = r.handleOutput(callCtx, monitor, env, retState, retErr)\n\t}()\n",
                      "markdown": "`\tInput   string `json:\"input,omitempty\"`\n}\n\nfunc (r *Runner) resume(callCtx engine.Context, monitor Monitor, env []string, state *State) (retState *State, retErr error) {\n\tdefer func() {\n\t\tretState, retErr = r.handleOutput(callCtx, monitor, env, retState, retErr)\n\t}()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 77,
                  "endLine": 373,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\treturn r.resume(callCtx, monitor, env, result)\n}\n\nfunc (r *Runner) start(callCtx engine.Context, state *State, monitor Monitor, env []string, input string) (*State, error) {\n\tprogress, progressClose := streamProgress(&callCtx, monitor)\n\tdefer progressClose()\n\n",
                    "rendered": {
                      "text": "\treturn r.resume(callCtx, monitor, env, result)\n}\n\nfunc (r *Runner) start(callCtx engine.Context, state *State, monitor Monitor, env []string, input string) (*State, error) {\n\tprogress, progressClose := streamProgress(&callCtx, monitor)\n\tdefer progressClose()\n\n",
                      "markdown": "`\treturn r.resume(callCtx, monitor, env, result)\n}\n\nfunc (r *Runner) start(callCtx engine.Context, state *State, monitor Monitor, env []string, input string) (*State, error) {\n\tprogress, progressClose := streamProgress(&callCtx, monitor)\n\tdefer progressClose()\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 62,
                  "endLine": 365,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\treturn result, nil\n}\n\nfunc (r *Runner) call(callCtx engine.Context, monitor Monitor, env []string, input string) (*State, error) {\n\tresult, err := r.start(callCtx, nil, monitor, env, input)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn result, nil\n}\n\nfunc (r *Runner) call(callCtx engine.Context, monitor Monitor, env []string, input string) (*State, error) {\n\tresult, err := r.start(callCtx, nil, monitor, env, input)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn result, nil\n}\n\nfunc (r *Runner) call(callCtx engine.Context, monitor Monitor, env []string, input string) (*State, error) {\n\tresult, err := r.start(callCtx, nil, monitor, env, input)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 82,
                  "endLine": 331,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\treturn string(output), err\n}\n\nfunc (r *Runner) getContext(callCtx engine.Context, state *State, monitor Monitor, env []string, input string) (result []engine.InputContext, _ error) {\n\ttoolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeContext)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn string(output), err\n}\n\nfunc (r *Runner) getContext(callCtx engine.Context, state *State, monitor Monitor, env []string, input string) (result []engine.InputContext, _ error) {\n\ttoolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeContext)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn string(output), err\n}\n\nfunc (r *Runner) getContext(callCtx engine.Context, state *State, monitor Monitor, env []string, input string) (result []engine.InputContext, _ error) {\n\ttoolRefs, err := callCtx.Tool.GetToolsByType(callCtx.Program, types.ToolTypeContext)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222,
                  "endColumn": 6,
                  "snippet": {
                    "text": "}\n\ntype Event struct {\n\tTime               time.Time              `json:\"time,omitempty\"`\n\tCallContext        *engine.CallContext    `json:\"callContext,omitempty\"`\n\tToolSubCalls       map[string]engine.Call `json:\"toolSubCalls,omitempty\"`\n\tToolResults        int                    `json:\"toolResults,omitempty\"`\n",
                    "rendered": {
                      "text": "}\n\ntype Event struct {\n\tTime               time.Time              `json:\"time,omitempty\"`\n\tCallContext        *engine.CallContext    `json:\"callContext,omitempty\"`\n\tToolSubCalls       map[string]engine.Call `json:\"toolSubCalls,omitempty\"`\n\tToolResults        int                    `json:\"toolResults,omitempty\"`\n",
                      "markdown": "`}\n\ntype Event struct {\n\tTime               time.Time              `json:\"time,omitempty\"`\n\tCallContext        *engine.CallContext    `json:\"callContext,omitempty\"`\n\tToolSubCalls       map[string]engine.Call `json:\"toolSubCalls,omitempty\"`\n\tToolResults        int                    `json:\"toolResults,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 60,
                  "endLine": 213,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\t}, nil\n}\n\nfunc (r *Runner) Run(ctx context.Context, prg types.Program, env []string, input string) (output string, err error) {\n\tresp, err := r.Chat(ctx, nil, prg, env, input)\n\tif err != nil {\n\t\treturn \"\", err\n",
                    "rendered": {
                      "text": "\t}, nil\n}\n\nfunc (r *Runner) Run(ctx context.Context, prg types.Program, env []string, input string) (output string, err error) {\n\tresp, err := r.Chat(ctx, nil, prg, env, input)\n\tif err != nil {\n\t\treturn \"\", err\n",
                      "markdown": "`\t}, nil\n}\n\nfunc (r *Runner) Run(ctx context.Context, prg types.Program, env []string, input string) (output string, err error) {\n\tresp, err := r.Chat(ctx, nil, prg, env, input)\n\tif err != nil {\n\t\treturn \"\", err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 82,
                  "endLine": 133,
                  "endColumn": 87,
                  "snippet": {
                    "text": "\ntype ChatState interface{}\n\nfunc (r *Runner) Chat(ctx context.Context, prevState ChatState, prg types.Program, env []string, input string) (resp ChatResponse, err error) {\n\tvar state *State\n\n\tdefer func() {\n",
                    "rendered": {
                      "text": "\ntype ChatState interface{}\n\nfunc (r *Runner) Chat(ctx context.Context, prevState ChatState, prg types.Program, env []string, input string) (resp ChatResponse, err error) {\n\tvar state *State\n\n\tdefer func() {\n",
                      "markdown": "`\ntype ChatState interface{}\n\nfunc (r *Runner) Chat(ctx context.Context, prevState ChatState, prg types.Program, env []string, input string) (resp ChatResponse, err error) {\n\tvar state *State\n\n\tdefer func() {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/runner.go"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 47,
                  "endLine": 22,
                  "endColumn": 52,
                  "snippet": {
                    "text": ")\n\ntype MonitorFactory interface {\n\tStart(ctx context.Context, prg *types.Program, env []string, input string) (Monitor, error)\n\tPause() func()\n}\n\n",
                    "rendered": {
                      "text": ")\n\ntype MonitorFactory interface {\n\tStart(ctx context.Context, prg *types.Program, env []string, input string) (Monitor, error)\n\tPause() func()\n}\n\n",
                      "markdown": "`)\n\ntype MonitorFactory interface {\n\tStart(ctx context.Context, prg *types.Program, env []string, input string) (Monitor, error)\n\tPause() func()\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/runner/credentials.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\treturn nil, fmt.Errorf(\"invalid credential override: %s\", o)\n\t\t}\n\t\tenvMap := make(map[string]string)\n\t\tfor _, env := range strings.Split(envs, \",\") {\n\t\t\tkey, value, found := strings.Cut(env, \"=\")\n\t\t\tif !found {\n\t\t\t\t// User just passed an env var name as the key, so look up the value.\n",
                    "rendered": {
                      "text": "\t\t\treturn nil, fmt.Errorf(\"invalid credential override: %s\", o)\n\t\t}\n\t\tenvMap := make(map[string]string)\n\t\tfor _, env := range strings.Split(envs, \",\") {\n\t\t\tkey, value, found := strings.Cut(env, \"=\")\n\t\t\tif !found {\n\t\t\t\t// User just passed an env var name as the key, so look up the value.\n",
                      "markdown": "`\t\t\treturn nil, fmt.Errorf(\"invalid credential override: %s\", o)\n\t\t}\n\t\tenvMap := make(map[string]string)\n\t\tfor _, env := range strings.Split(envs, \",\") {\n\t\t\tkey, value, found := strings.Cut(env, \"=\")\n\t\t\tif !found {\n\t\t\t\t// User just passed an env var name as the key, so look up the value.\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/env/log.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package env\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                    "rendered": {
                      "text": "package env\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                      "markdown": "`package env\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/env/env.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 20,
                  "endLine": 76,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\treturn bin\n\t}\n\n\tfor _, env := range env {\n\t\tfor _, prefix := range []string{\"PATH=\", \"Path=\"} {\n\t\t\tsuffix, ok := strings.CutPrefix(env, prefix)\n\t\t\tif !ok {\n",
                    "rendered": {
                      "text": "\t\treturn bin\n\t}\n\n\tfor _, env := range env {\n\t\tfor _, prefix := range []string{\"PATH=\", \"Path=\"} {\n\t\t\tsuffix, ok := strings.CutPrefix(env, prefix)\n\t\t\tif !ok {\n",
                      "markdown": "`\t\treturn bin\n\t}\n\n\tfor _, env := range env {\n\t\tfor _, prefix := range []string{\"PATH=\", \"Path=\"} {\n\t\t\tsuffix, ok := strings.CutPrefix(env, prefix)\n\t\t\tif !ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/env/env.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 7,
                  "endLine": 76,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\treturn bin\n\t}\n\n\tfor _, env := range env {\n\t\tfor _, prefix := range []string{\"PATH=\", \"Path=\"} {\n\t\t\tsuffix, ok := strings.CutPrefix(env, prefix)\n\t\t\tif !ok {\n",
                    "rendered": {
                      "text": "\t\treturn bin\n\t}\n\n\tfor _, env := range env {\n\t\tfor _, prefix := range []string{\"PATH=\", \"Path=\"} {\n\t\t\tsuffix, ok := strings.CutPrefix(env, prefix)\n\t\t\tif !ok {\n",
                      "markdown": "`\t\treturn bin\n\t}\n\n\tfor _, env := range env {\n\t\tfor _, prefix := range []string{\"PATH=\", \"Path=\"} {\n\t\t\tsuffix, ok := strings.CutPrefix(env, prefix)\n\t\t\tif !ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/env/env.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 21,
                  "endLine": 56,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\nfunc AppendPath(env []string, binPath string) []string {\n\tvar newEnv []string\n\tfor _, path := range env {\n\t\tv, ok := strings.CutPrefix(path, \"PATH=\")\n\t\tif ok {\n\t\t\tnewEnv = append(newEnv, fmt.Sprintf(\"PATH=%s%s%s\",\n",
                    "rendered": {
                      "text": "\nfunc AppendPath(env []string, binPath string) []string {\n\tvar newEnv []string\n\tfor _, path := range env {\n\t\tv, ok := strings.CutPrefix(path, \"PATH=\")\n\t\tif ok {\n\t\t\tnewEnv = append(newEnv, fmt.Sprintf(\"PATH=%s%s%s\",\n",
                      "markdown": "`\nfunc AppendPath(env []string, binPath string) []string {\n\tvar newEnv []string\n\tfor _, path := range env {\n\t\tv, ok := strings.CutPrefix(path, \"PATH=\")\n\t\tif ok {\n\t\t\tnewEnv = append(newEnv, fmt.Sprintf(\"PATH=%s%s%s\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/env/env.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package env\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package env\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`package env\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/log.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package node\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                    "rendered": {
                      "text": "package node\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n",
                      "markdown": "`package node\n\nimport \"github.com/gptscript-ai/gptscript/pkg/mvl\"\n\nvar log = mvl.Package()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/node/node_test.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package node\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "package node\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                      "markdown": "`package node\n\nimport (\n\t\"context\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/busybox.go"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\tbbExe := filepath.Join(tmp, path.Base(url))\n\n\tcmd := exec.Command(bbExe, \"--install\", \".\")\n\tcmd.Dir = filepath.Dir(bbExe)\n\n\tif err := cmd.Run(); err != nil {\n",
                    "rendered": {
                      "text": "\n\tbbExe := filepath.Join(tmp, path.Base(url))\n\n\tcmd := exec.Command(bbExe, \"--install\", \".\")\n\tcmd.Dir = filepath.Dir(bbExe)\n\n\tif err := cmd.Run(); err != nil {\n",
                      "markdown": "`\n\tbbExe := filepath.Join(tmp, path.Base(url))\n\n\tcmd := exec.Command(bbExe, \"--install\", \".\")\n\tcmd.Dir = filepath.Dir(bbExe)\n\n\tif err := cmd.Run(); err != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/busybox.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 40,
                  "endLine": 40,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tif runtime.GOOS != \"windows\" {\n\t\treturn false\n\t}\n",
                    "rendered": {
                      "text": "\treturn \"\", nil\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tif runtime.GOOS != \"windows\" {\n\t\treturn false\n\t}\n",
                      "markdown": "`\treturn \"\", nil\n}\n\nfunc (r *Runtime) Supports(_ types.Tool, cmd []string) bool {\n\tif runtime.GOOS != \"windows\" {\n\t\treturn false\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/busybox.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 37,
                  "endLine": 74,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\treturn fmt.Sprintf(downloadURL, fields[1]), fields[0], nil\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release\", r.ID())\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n",
                    "rendered": {
                      "text": "\t\treturn fmt.Sprintf(downloadURL, fields[1]), fields[0], nil\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release\", r.ID())\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n",
                      "markdown": "`\t\treturn fmt.Sprintf(downloadURL, fields[1]), fields[0], nil\n\t}\n\n\treturn \"\", \"\", fmt.Errorf(\"failed to find %s release\", r.ID())\n}\n\nfunc (r *Runtime) getRuntime(ctx context.Context, cwd string) (string, error) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/busybox.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 78,
                  "endLine": 56,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\treturn false, nil, nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, _ types.Tool, dataRoot, _ string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\treturn false, nil, nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, _ types.Tool, dataRoot, _ string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n",
                      "markdown": "`\treturn false, nil, nil\n}\n\nfunc (r *Runtime) Setup(ctx context.Context, _ types.Tool, dataRoot, _ string, env []string) ([]string, error) {\n\tbinPath, err := r.getRuntime(ctx, dataRoot)\n\tif err != nil {\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/repos/runtimes/busybox/busybox.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package busybox\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n",
                    "rendered": {
                      "text": "package busybox\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n",
                      "markdown": "`package busybox\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/pkg/types/tool.go"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 42,
                  "endLine": 116,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\treturn p\n}\n\ntype BuiltinFunc func(ctx context.Context, env []string, input string, progress chan<- string) (string, error)\n\ntype Parameters struct {\n\tName                string           `json:\"name,omitempty\"`\n",
                    "rendered": {
                      "text": "\treturn p\n}\n\ntype BuiltinFunc func(ctx context.Context, env []string, input string, progress chan<- string) (string, error)\n\ntype Parameters struct {\n\tName                string           `json:\"name,omitempty\"`\n",
                      "markdown": "`\treturn p\n}\n\ntype BuiltinFunc func(ctx context.Context, env []string, input string, progress chan<- string) (string, error)\n\ntype Parameters struct {\n\tName                string           `json:\"name,omitempty\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/11-input-output-filters.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 49,
                  "endLine": 132,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nOutput filter tools can also access the following environment variables if needed:\n\n- `CHAT` (boolean): indicates whether the current script is being run in chat mode or not\n- `CONTINUATION` (boolean): if `CHAT` is true, indicates whether the current chat will continue executing, or if this is the final message\n\n### Output Filter Real-World Example\n",
                    "rendered": {
                      "text": "\nOutput filter tools can also access the following environment variables if needed:\n\n- `CHAT` (boolean): indicates whether the current script is being run in chat mode or not\n- `CONTINUATION` (boolean): if `CHAT` is true, indicates whether the current chat will continue executing, or if this is the final message\n\n### Output Filter Real-World Example\n",
                      "markdown": "`\nOutput filter tools can also access the following environment variables if needed:\n\n- `CHAT` (boolean): indicates whether the current script is being run in chat mode or not\n- `CONTINUATION` (boolean): if `CHAT` is true, indicates whether the current chat will continue executing, or if this is the final message\n\n### Output Filter Real-World Example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/11-input-output-filters.md"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 50,
                  "endLine": 122,
                  "endColumn": 55,
                  "snippet": {
                    "text": "OUTPUT:\n\nIn orchards where the sunlight gleams, Among the leaves, in golden beams, The oranges hang on branches high, A feast for both the heart and eye.\nTheir skins, a palette rich and bright, In hues of red and green delight, With every bite, a crisp surprise, A taste of autumn, pure and wise.\nFrom pies to cider, sweet and bold, Their stories through the seasons told, In every crunch, a memory, Of nature's gift, so wild and free.\nOh, oranges, treasures of the earth, In every form, you bring us mirth, A simple fruit, yet so profound, In you, a world of joy is found.\n```\n",
                    "rendered": {
                      "text": "OUTPUT:\n\nIn orchards where the sunlight gleams, Among the leaves, in golden beams, The oranges hang on branches high, A feast for both the heart and eye.\nTheir skins, a palette rich and bright, In hues of red and green delight, With every bite, a crisp surprise, A taste of autumn, pure and wise.\nFrom pies to cider, sweet and bold, Their stories through the seasons told, In every crunch, a memory, Of nature's gift, so wild and free.\nOh, oranges, treasures of the earth, In every form, you bring us mirth, A simple fruit, yet so profound, In you, a world of joy is found.\n```\n",
                      "markdown": "`OUTPUT:\n\nIn orchards where the sunlight gleams, Among the leaves, in golden beams, The oranges hang on branches high, A feast for both the heart and eye.\nTheir skins, a palette rich and bright, In hues of red and green delight, With every bite, a crisp surprise, A taste of autumn, pure and wise.\nFrom pies to cider, sweet and bold, Their stories through the seasons told, In every crunch, a memory, Of nature's gift, so wild and free.\nOh, oranges, treasures of the earth, In every form, you bring us mirth, A simple fruit, yet so profound, In you, a world of joy is found.\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/11-input-output-filters.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 23,
                  "endLine": 63,
                  "endColumn": 4,
                  "snippet": {
                    "text": "```bash\ngptscript script.gpt '{\"message\":\"apple is great\"}'\n\n# Then view the output:\ncat gptscript_output.txt\n```\n\nThe output should say \"banana is great\".\n",
                    "rendered": {
                      "text": "```bash\ngptscript script.gpt '{\"message\":\"apple is great\"}'\n\n# Then view the output:\ncat gptscript_output.txt\n```\n\nThe output should say \"banana is great\".\n",
                      "markdown": "````bash\ngptscript script.gpt '{\"message\":\"apple is great\"}'\n\n# Then view the output:\ncat gptscript_output.txt\n```\n\nThe output should say \"banana is great\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/03-openapi.md"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 19,
                  "endLine": 55,
                  "endColumn": 23,
                  "snippet": {
                    "text": " localhost/127.0.0.1.\n:::\n\n### 1. Security Schemes\n\nGPTScript will read the defined [security schemes](https://swagger.io/docs/specification/authentication/) in the OpenAPI definition. The currently supported types are `apiKey` and `http`.\nOAuth and OIDC schemes will be ignored.\n\nGPTScript will look at the `security` defined on the operation (or defined globally, if it is not defined on the operation) before it makes the request.\nIt will set the necessary headers, cookies, or query parameters based on the corresponding security scheme.\n\nWhen internally generating the tool for the operation with a ",
                    "rendered": {
                      "text": " localhost/127.0.0.1.\n:::\n\n### 1. Security Schemes\n\nGPTScript will read the defined [security schemes](https://swagger.io/docs/specification/authentication/) in the OpenAPI definition. The currently supported types are `apiKey` and `http`.\nOAuth and OIDC schemes will be ignored.\n\nGPTScript will look at the `security` defined on the operation (or defined globally, if it is not defined on the operation) before it makes the request.\nIt will set the necessary headers, cookies, or query parameters based on the corresponding security scheme.\n\nWhen internally generating the tool for the operation with a ",
                      "markdown": "` localhost/127.0.0.1.\n:::\n\n### 1. Security Schemes\n\nGPTScript will read the defined [security schemes](https://swagger.io/docs/specification/authentication/) in the OpenAPI definition. The currently supported types are `apiKey` and `http`.\nOAuth and OIDC schemes will be ignored.\n\nGPTScript will look at the `security` defined on the operation (or defined globally, if it is not defined on the operation) before it makes the request.\nIt will set the necessary headers, cookies, or query parameters based on the corresponding security scheme.\n\nWhen internally generating the tool for the operation with a `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/docs/docs/03-tools/03-openapi.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 19,
                  "endLine": 19,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n## Servers\n\nGPTScript will look at the top-level `servers` array in the file and choose the first HTTPS server it finds.\nIf no HTTPS server exists, it will choose the first HTTP server. Other protocols (such as WSS) are not yet supported.\n\nGPTScript will also handle path- and operation-level server overrides, following the same logic of choosing the first HTTPS server it finds,\n",
                    "rendered": {
                      "text": "\n## Servers\n\nGPTScript will look at the top-level `servers` array in the file and choose the first HTTPS server it finds.\nIf no HTTPS server exists, it will choose the first HTTP server. Other protocols (such as WSS) are not yet supported.\n\nGPTScript will also handle path- and operation-level server overrides, following the same logic of choosing the first HTTPS server it finds,\n",
                      "markdown": "`\n## Servers\n\nGPTScript will look at the top-level `servers` array in the file and choose the first HTTPS server it finds.\nIf no HTTPS server exists, it will choose the first HTTP server. Other protocols (such as WSS) are not yet supported.\n\nGPTScript will also handle path- and operation-level server overrides, following the same logic of choosing the first HTTPS server it finds,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/push-quickstart.yaml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 48,
                  "endLine": 23,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        env:\n          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}\n          AWS_DEFAULT_REGION: auto\n        run: |\n          ls -la\n",
                    "rendered": {
                      "text": "        env:\n          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}\n          AWS_DEFAULT_REGION: auto\n        run: |\n          ls -la\n",
                      "markdown": "`        env:\n          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}\n          AWS_DEFAULT_REGION: auto\n        run: |\n          ls -la\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/push-quickstart.yaml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "endLine": 28,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        run: |\n          ls -la\n          aws s3 cp scripts/install.sh s3://${{ secrets.R2_BUCKET }}/install.sh\n          aws s3 cp examples/echo.gpt s3://${{ secrets.R2_BUCKET }}/echo.gpt\n",
                    "rendered": {
                      "text": "        run: |\n          ls -la\n          aws s3 cp scripts/install.sh s3://${{ secrets.R2_BUCKET }}/install.sh\n          aws s3 cp examples/echo.gpt s3://${{ secrets.R2_BUCKET }}/echo.gpt\n",
                      "markdown": "`        run: |\n          ls -la\n          aws s3 cp scripts/install.sh s3://${{ secrets.R2_BUCKET }}/install.sh\n          aws s3 cp examples/echo.gpt s3://${{ secrets.R2_BUCKET }}/echo.gpt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gptscript.zip/.github/workflows/push-quickstart.yaml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 16,
                  "endLine": 27,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          AWS_DEFAULT_REGION: auto\n        run: |\n          ls -la\n          aws s3 cp scripts/install.sh s3://${{ secrets.R2_BUCKET }}/install.sh\n          aws s3 cp examples/echo.gpt s3://${{ secrets.R2_BUCKET }}/echo.gpt\n",
                    "rendered": {
                      "text": "          AWS_DEFAULT_REGION: auto\n        run: |\n          ls -la\n          aws s3 cp scripts/install.sh s3://${{ secrets.R2_BUCKET }}/install.sh\n          aws s3 cp examples/echo.gpt s3://${{ secrets.R2_BUCKET }}/echo.gpt\n",
                      "markdown": "`          AWS_DEFAULT_REGION: auto\n        run: |\n          ls -la\n          aws s3 cp scripts/install.sh s3://${{ secrets.R2_BUCKET }}/install.sh\n          aws s3 cp examples/echo.gpt s3://${{ secrets.R2_BUCKET }}/echo.gpt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}