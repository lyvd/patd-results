{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/log_stripping.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 46,
                  "endLine": 16,
                  "endColumn": 50,
                  "snippet": {
                    "text": "```\n\nThe compiler will remove the log messages whose severities are less than\nthe specified integer value. Since `VLOG` logs at the severity level\n`INFO` (numeric value `0`), setting `GOOGLE_STRIP_LOG` to 1 or greater\nremoves all log messages associated with `VLOG`s as well as `INFO` log\nstatements.\n",
                    "rendered": {
                      "text": "```\n\nThe compiler will remove the log messages whose severities are less than\nthe specified integer value. Since `VLOG` logs at the severity level\n`INFO` (numeric value `0`), setting `GOOGLE_STRIP_LOG` to 1 or greater\nremoves all log messages associated with `VLOG`s as well as `INFO` log\nstatements.\n",
                      "markdown": "````\n\nThe compiler will remove the log messages whose severities are less than\nthe specified integer value. Since `VLOG` logs at the severity level\n`INFO` (numeric value `0`), setting `GOOGLE_STRIP_LOG` to 1 or greater\nremoves all log messages associated with `VLOG`s as well as `INFO` log\nstatements.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 26,
                  "endLine": 38,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nUnless otherwise specified, glog uses the format\n\n    <tmp>/<program name>.<hostname>.<user name>.log.<severity level>.<date>-<time>.<pid>\n\nfor log filenames written to a directory designated as `<tmp>` and\ndetermined according to the following rules.\n",
                    "rendered": {
                      "text": "\nUnless otherwise specified, glog uses the format\n\n    <tmp>/<program name>.<hostname>.<user name>.log.<severity level>.<date>-<time>.<pid>\n\nfor log filenames written to a directory designated as `<tmp>` and\ndetermined according to the following rules.\n",
                      "markdown": "`\nUnless otherwise specified, glog uses the format\n\n    <tmp>/<program name>.<hostname>.<user name>.log.<severity level>.<date>-<time>.<pid>\n\nfor log filenames written to a directory designated as `<tmp>` and\ndetermined according to the following rules.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 64,
                  "endLine": 380,
                  "endColumn": 68,
                  "snippet": {
                    "text": "`#!cpp nullptr`s are equal.\n\n!!! note\n    Both arguments may be temporary objects which are destructed at the\n    end of the current *full expression*, such as\n\n    ``` cpp\n",
                    "rendered": {
                      "text": "`#!cpp nullptr`s are equal.\n\n!!! note\n    Both arguments may be temporary objects which are destructed at the\n    end of the current *full expression*, such as\n\n    ``` cpp\n",
                      "markdown": "``#!cpp nullptr`s are equal.\n\n!!! note\n    Both arguments may be temporary objects which are destructed at the\n    end of the current *full expression*, such as\n\n    ``` cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 18,
                  "endLine": 336,
                  "endColumn": 22,
                  "snippet": {
                    "text": "We are very careful to ensure that each argument is evaluated exactly\nonce, and that anything which is legal to pass as a function argument is legal\nhere. In particular, the arguments may be temporary expressions which will end\nup being destroyed at the end of the apparent statement, for example:\n\n``` cpp\nCHECK_EQ(string(\"abc\")[1], ’b’);\n",
                    "rendered": {
                      "text": "We are very careful to ensure that each argument is evaluated exactly\nonce, and that anything which is legal to pass as a function argument is legal\nhere. In particular, the arguments may be temporary expressions which will end\nup being destroyed at the end of the apparent statement, for example:\n\n``` cpp\nCHECK_EQ(string(\"abc\")[1], ’b’);\n",
                      "markdown": "`We are very careful to ensure that each argument is evaluated exactly\nonce, and that anything which is legal to pass as a function argument is legal\nhere. In particular, the arguments may be temporary expressions which will end\nup being destroyed at the end of the apparent statement, for example:\n\n``` cpp\nCHECK_EQ(string(\"abc\")[1], ’b’);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 3,
                  "endLine": 236,
                  "snippet": {
                    "text": "\nVerbose logging can be controlled from the command line on a per-module basis:\n\n``` bash\n--vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n```\n\nSpecifying these options will specifically:\n",
                    "rendered": {
                      "text": "\nVerbose logging can be controlled from the command line on a per-module basis:\n\n``` bash\n--vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n```\n\nSpecifying these options will specifically:\n",
                      "markdown": "`\nVerbose logging can be controlled from the command line on a per-module basis:\n\n``` bash\n--vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n```\n\nSpecifying these options will specifically:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 56,
                  "endLine": 231,
                  "endColumn": 60,
                  "snippet": {
                    "text": "common values for them are small positive integers. For example, if you write\n`#!cpp VLOG(0)`, you should specify `--v=-1` or lower to silence it. This is less\nuseful since we may not want verbose logs by default in most cases. The `VLOG`\nmacros always log at the `INFO` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module basis:\n\n",
                    "rendered": {
                      "text": "common values for them are small positive integers. For example, if you write\n`#!cpp VLOG(0)`, you should specify `--v=-1` or lower to silence it. This is less\nuseful since we may not want verbose logs by default in most cases. The `VLOG`\nmacros always log at the `INFO` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module basis:\n\n",
                      "markdown": "`common values for them are small positive integers. For example, if you write\n`#!cpp VLOG(0)`, you should specify `--v=-1` or lower to silence it. This is less\nuseful since we may not want verbose logs by default in most cases. The `VLOG`\nmacros always log at the `INFO` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module basis:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 21,
                  "snippet": {
                    "text": "common values for them are small positive integers. For example, if you write\n`#!cpp VLOG(0)`, you should specify `--v=-1` or lower to silence it. This is less\nuseful since we may not want verbose logs by default in most cases. The `VLOG`\nmacros always log at the `INFO` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module basis:\n\n",
                    "rendered": {
                      "text": "common values for them are small positive integers. For example, if you write\n`#!cpp VLOG(0)`, you should specify `--v=-1` or lower to silence it. This is less\nuseful since we may not want verbose logs by default in most cases. The `VLOG`\nmacros always log at the `INFO` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module basis:\n\n",
                      "markdown": "`common values for them are small positive integers. For example, if you write\n`#!cpp VLOG(0)`, you should specify `--v=-1` or lower to silence it. This is less\nuseful since we may not want verbose logs by default in most cases. The `VLOG`\nmacros always log at the `INFO` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module basis:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 28,
                  "endLine": 160,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nThe \"Got lots of cookies\" message is logged only when the variable\n`num_cookies` exceeds 10. If a line of code is executed many times, it may be\nuseful to only log a message at certain intervals. This kind of logging is most\nuseful for informational messages.\n\n``` cpp\n",
                    "rendered": {
                      "text": "\nThe \"Got lots of cookies\" message is logged only when the variable\n`num_cookies` exceeds 10. If a line of code is executed many times, it may be\nuseful to only log a message at certain intervals. This kind of logging is most\nuseful for informational messages.\n\n``` cpp\n",
                      "markdown": "`\nThe \"Got lots of cookies\" message is logged only when the variable\n`num_cookies` exceeds 10. If a line of code is executed many times, it may be\nuseful to only log a message at certain intervals. This kind of logging is most\nuseful for informational messages.\n\n``` cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 3,
                  "endLine": 236,
                  "snippet": {
                    "text": "\nVerbose logging can be controlled from the command line on a per-module basis:\n\n``` bash\n--vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n```\n\nSpecifying these options will specifically:\n",
                    "rendered": {
                      "text": "\nVerbose logging can be controlled from the command line on a per-module basis:\n\n``` bash\n--vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n```\n\nSpecifying these options will specifically:\n",
                      "markdown": "`\nVerbose logging can be controlled from the command line on a per-module basis:\n\n``` bash\n--vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n```\n\nSpecifying these options will specifically:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 22,
                  "endLine": 110,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nFor each log entry, the callback will be invoked with a reference to a\n`google::LogMessage` instance containing the severity, filename, line\nnumber, thread ID, and time of the event. It will also be given a\nreference to the output stream, whose contents will be prepended to the actual\nmessage in the final log line.\n\n",
                    "rendered": {
                      "text": "\nFor each log entry, the callback will be invoked with a reference to a\n`google::LogMessage` instance containing the severity, filename, line\nnumber, thread ID, and time of the event. It will also be given a\nreference to the output stream, whose contents will be prepended to the actual\nmessage in the final log line.\n\n",
                      "markdown": "`\nFor each log entry, the callback will be invoked with a reference to a\n`google::LogMessage` instance containing the severity, filename, line\nnumber, thread ID, and time of the event. It will also be given a\nreference to the output stream, whose contents will be prepended to the actual\nmessage in the final log line.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/logging.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 25,
                  "endLine": 85,
                  "endColumn": 31,
                  "snippet": {
                    "text": "     | The year                                                              |\n  | `mm`                | The month (zero padded; i.e., May is `05`)                            |\n  | `dd`                | The day (zero padded)                                                 |\n  | `hh:mm:ss.uuuuuu`   | Time in hours, minutes and fractional seconds                         |\n  | `threadid`          | The space-padded thread ID                                            |\n  | `file`              | The file name                                                         |\n  | `line`              | The line nu",
                    "rendered": {
                      "text": "     | The year                                                              |\n  | `mm`                | The month (zero padded; i.e., May is `05`)                            |\n  | `dd`                | The day (zero padded)                                                 |\n  | `hh:mm:ss.uuuuuu`   | Time in hours, minutes and fractional seconds                         |\n  | `threadid`          | The space-padded thread ID                                            |\n  | `file`              | The file name                                                         |\n  | `line`              | The line nu",
                      "markdown": "`     | The year                                                              |\n  | `mm`                | The month (zero padded; i.e., May is `05`)                            |\n  | `dd`                | The day (zero padded)                                                 |\n  | `hh:mm:ss.uuuuuu`   | Time in hours, minutes and fractional seconds                         |\n  | `threadid`          | The space-padded thread ID                                            |\n  | `file`              | The file name                                                         |\n  | `line`              | The line nu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/unwinder.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 68,
                  "endLine": 51,
                  "snippet": {
                    "text": "As we already mentioned, glibc's unwinder has a deadlock issue. However, if you\ndon't use `InstallFailureSignalHandler()` or you don't worry about the rare\npossibilities of deadlocks, you can use this stack-unwinder. If you specify no\noptions and `libunwind` isn't detected on your system, the configure script\nchooses this unwinder by default.\n\n### Frame Pointer based Stack-unwinder\n\n",
                    "rendered": {
                      "text": "As we already mentioned, glibc's unwinder has a deadlock issue. However, if you\ndon't use `InstallFailureSignalHandler()` or you don't worry about the rare\npossibilities of deadlocks, you can use this stack-unwinder. If you specify no\noptions and `libunwind` isn't detected on your system, the configure script\nchooses this unwinder by default.\n\n### Frame Pointer based Stack-unwinder\n\n",
                      "markdown": "`As we already mentioned, glibc's unwinder has a deadlock issue. However, if you\ndon't use `InstallFailureSignalHandler()` or you don't worry about the rare\npossibilities of deadlocks, you can use this stack-unwinder. If you specify no\noptions and `libunwind` isn't detected on your system, the configure script\nchooses this unwinder by default.\n\n### Frame Pointer based Stack-unwinder\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/unwinder.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 23,
                  "endLine": 42,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n## Alternative Stack-unwinder\n\nIf you cannot or do not wish to install `libunwind`, you can still try to use\ntwo kinds of stack-unwinder:\n\n### glibc Built-in Stack-unwinder\n",
                    "rendered": {
                      "text": "\n## Alternative Stack-unwinder\n\nIf you cannot or do not wish to install `libunwind`, you can still try to use\ntwo kinds of stack-unwinder:\n\n### glibc Built-in Stack-unwinder\n",
                      "markdown": "`\n## Alternative Stack-unwinder\n\nIf you cannot or do not wish to install `libunwind`, you can still try to use\ntwo kinds of stack-unwinder:\n\n### glibc Built-in Stack-unwinder\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/unwinder.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 15,
                  "endLine": 34,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nAlso, if you link binaries statically, make sure that you add\n`-Wl,--eh-frame-hdr` to your linker options. This is required so that\n`libunwind` can find the information generated by the compiler required for\nstack unwinding.\n\nUsing `-static` is rare, though, so unless you know this will affect you it\n",
                    "rendered": {
                      "text": "\nAlso, if you link binaries statically, make sure that you add\n`-Wl,--eh-frame-hdr` to your linker options. This is required so that\n`libunwind` can find the information generated by the compiler required for\nstack unwinding.\n\nUsing `-static` is rare, though, so unless you know this will affect you it\n",
                      "markdown": "`\nAlso, if you link binaries statically, make sure that you add\n`-Wl,--eh-frame-hdr` to your linker options. This is required so that\n`libunwind` can find the information generated by the compiler required for\nstack unwinding.\n\nUsing `-static` is rare, though, so unless you know this will affect you it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/sinks.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 13,
                  "endLine": 23,
                  "endColumn": 19,
                  "snippet": {
                    "text": "```\n\nThe user must implement `#!cpp google::LogSink::send`, which is called by the\nlibrary every time a message is logged.\n\n!!! warning \"Possible deadlock due to nested logging\"\n    This method can't use `LOG()` or `CHECK()` as logging system mutex(s) are\n",
                    "rendered": {
                      "text": "```\n\nThe user must implement `#!cpp google::LogSink::send`, which is called by the\nlibrary every time a message is logged.\n\n!!! warning \"Possible deadlock due to nested logging\"\n    This method can't use `LOG()` or `CHECK()` as logging system mutex(s) are\n",
                      "markdown": "````\n\nThe user must implement `#!cpp google::LogSink::send`, which is called by the\nlibrary every time a message is logged.\n\n!!! warning \"Possible deadlock due to nested logging\"\n    This method can't use `LOG()` or `CHECK()` as logging system mutex(s) are\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/packages.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 25,
                  "snippet": {
                    "text": "You can download and install glog using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n``` bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n",
                    "rendered": {
                      "text": "You can download and install glog using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n``` bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n",
                      "markdown": "`You can download and install glog using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n``` bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/packages.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 3,
                  "endLine": 9,
                  "snippet": {
                    "text": "You can download and install glog using the [conan](https://conan.io)\npackage manager:\n\n``` bash\npip install conan\nconan install -r conancenter glog/<glog-version>@\n```\n\n",
                    "rendered": {
                      "text": "You can download and install glog using the [conan](https://conan.io)\npackage manager:\n\n``` bash\npip install conan\nconan install -r conancenter glog/<glog-version>@\n```\n\n",
                      "markdown": "`You can download and install glog using the [conan](https://conan.io)\npackage manager:\n\n``` bash\npip install conan\nconan install -r conancenter glog/<glog-version>@\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/packages.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 25,
                  "snippet": {
                    "text": "You can download and install glog using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n``` bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n",
                    "rendered": {
                      "text": "You can download and install glog using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n``` bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n",
                      "markdown": "`You can download and install glog using the\n[vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n``` bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/packages.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 3,
                  "endLine": 9,
                  "snippet": {
                    "text": "You can download and install glog using the [conan](https://conan.io)\npackage manager:\n\n``` bash\npip install conan\nconan install -r conancenter glog/<glog-version>@\n```\n\n",
                    "rendered": {
                      "text": "You can download and install glog using the [conan](https://conan.io)\npackage manager:\n\n``` bash\npip install conan\nconan install -r conancenter glog/<glog-version>@\n```\n\n",
                      "markdown": "`You can download and install glog using the [conan](https://conan.io)\npackage manager:\n\n``` bash\npip install conan\nconan install -r conancenter glog/<glog-version>@\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 30,
                  "endLine": 82,
                  "endColumn": 34,
                  "snippet": {
                    "text": "The exceptions are the flags related to destination files. For instance, you\nmight want to set `FLAGS_log_dir` before calling `google::InitGoogleLogging`.\n\n!!! example \"Setting `log_dir` at runtime\"\n    ``` cpp\n    LOG(INFO) << \"file\";\n    // Most flags work immediately after updating values.\n",
                    "rendered": {
                      "text": "The exceptions are the flags related to destination files. For instance, you\nmight want to set `FLAGS_log_dir` before calling `google::InitGoogleLogging`.\n\n!!! example \"Setting `log_dir` at runtime\"\n    ``` cpp\n    LOG(INFO) << \"file\";\n    // Most flags work immediately after updating values.\n",
                      "markdown": "`The exceptions are the flags related to destination files. For instance, you\nmight want to set `FLAGS_log_dir` before calling `google::InitGoogleLogging`.\n\n!!! example \"Setting `log_dir` at runtime\"\n    ``` cpp\n    LOG(INFO) << \"file\";\n    // Most flags work immediately after updating values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 60,
                  "endLine": 78,
                  "endColumn": 68,
                  "snippet": {
                    "text": "## Modifying Flags Programmatically\n\nYou can also modify flag values in your program by modifying global variables\n`FLAGS_*`. Most settings start working immediately after you update `FLAGS_*`.\nThe exceptions are the flags related to destination files. For instance, you\nmight want to set `FLAGS_log_dir` before calling `google::InitGoogleLogging`.\n\n",
                    "rendered": {
                      "text": "## Modifying Flags Programmatically\n\nYou can also modify flag values in your program by modifying global variables\n`FLAGS_*`. Most settings start working immediately after you update `FLAGS_*`.\nThe exceptions are the flags related to destination files. For instance, you\nmight want to set `FLAGS_log_dir` before calling `google::InitGoogleLogging`.\n\n",
                      "markdown": "`## Modifying Flags Programmatically\n\nYou can also modify flag values in your program by modifying global variables\n`FLAGS_*`. Most settings start working immediately after you update `FLAGS_*`.\nThe exceptions are the flags related to destination files. For instance, you\nmight want to set `FLAGS_log_dir` before calling `google::InitGoogleLogging`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n`minloglevel` (`int`, default=0, which is `INFO`)\n\n:   Log messages at or above this level. Again, the numbers of severity\n    levels `INFO`, `WARNING`, `ERROR`, and `FATAL` are 0, 1, 2, and 3,\n    respectively.\n\n",
                    "rendered": {
                      "text": "\n`minloglevel` (`int`, default=0, which is `INFO`)\n\n:   Log messages at or above this level. Again, the numbers of severity\n    levels `INFO`, `WARNING`, `ERROR`, and `FATAL` are 0, 1, 2, and 3,\n    respectively.\n\n",
                      "markdown": "`\n`minloglevel` (`int`, default=0, which is `INFO`)\n\n:   Log messages at or above this level. Again, the numbers of severity\n    levels `INFO`, `WARNING`, `ERROR`, and `FATAL` are 0, 1, 2, and 3,\n    respectively.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 21,
                  "endLine": 41,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n`stderrthreshold` (`int`, default=2, which is `ERROR`)\n\n:   Copy log messages at or above this level to `stderr` in addition to\n    logfiles. The numbers of severity levels `INFO`, `WARNING`, `ERROR`,\n    and `FATAL` are 0, 1, 2, and 3, respectively.\n\n",
                    "rendered": {
                      "text": "\n`stderrthreshold` (`int`, default=2, which is `ERROR`)\n\n:   Copy log messages at or above this level to `stderr` in addition to\n    logfiles. The numbers of severity levels `INFO`, `WARNING`, `ERROR`,\n    and `FATAL` are 0, 1, 2, and 3, respectively.\n\n",
                      "markdown": "`\n`stderrthreshold` (`int`, default=2, which is `ERROR`)\n\n:   Copy log messages at or above this level to `stderr` in addition to\n    logfiles. The numbers of severity levels `INFO`, `WARNING`, `ERROR`,\n    and `FATAL` are 0, 1, 2, and 3, respectively.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 30,
                  "snippet": {
                    "text": "environment variables, prefixing the flag name with `GLOG_`, e.g.,\n\n!!! example \"Activate `logtostderr` without gflags\"\n    ``` bash\n    GLOG_logtostderr=1 ./your_application\n    ```\n\nThe following flags are most commonly used:\n",
                    "rendered": {
                      "text": "environment variables, prefixing the flag name with `GLOG_`, e.g.,\n\n!!! example \"Activate `logtostderr` without gflags\"\n    ``` bash\n    GLOG_logtostderr=1 ./your_application\n    ```\n\nThe following flags are most commonly used:\n",
                      "markdown": "`environment variables, prefixing the flag name with `GLOG_`, e.g.,\n\n!!! example \"Activate `logtostderr` without gflags\"\n    ``` bash\n    GLOG_logtostderr=1 ./your_application\n    ```\n\nThe following flags are most commonly used:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 7,
                  "endLine": 15,
                  "snippet": {
                    "text": "\n!!! example \"Activate `--logtostderr` in an application from the command line\"\n    A binary `you_application` that uses glog can be started using\n    ``` bash\n    ./your_application --logtostderr=1\n    ```\n    to log to `stderr` instead of writing the output to a log file.\n\n",
                    "rendered": {
                      "text": "\n!!! example \"Activate `--logtostderr` in an application from the command line\"\n    A binary `you_application` that uses glog can be started using\n    ``` bash\n    ./your_application --logtostderr=1\n    ```\n    to log to `stderr` instead of writing the output to a log file.\n\n",
                      "markdown": "`\n!!! example \"Activate `--logtostderr` in an application from the command line\"\n    A binary `you_application` that uses glog can be started using\n    ``` bash\n    ./your_application --logtostderr=1\n    ```\n    to log to `stderr` instead of writing the output to a log file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 30,
                  "snippet": {
                    "text": "environment variables, prefixing the flag name with `GLOG_`, e.g.,\n\n!!! example \"Activate `logtostderr` without gflags\"\n    ``` bash\n    GLOG_logtostderr=1 ./your_application\n    ```\n\nThe following flags are most commonly used:\n",
                    "rendered": {
                      "text": "environment variables, prefixing the flag name with `GLOG_`, e.g.,\n\n!!! example \"Activate `logtostderr` without gflags\"\n    ``` bash\n    GLOG_logtostderr=1 ./your_application\n    ```\n\nThe following flags are most commonly used:\n",
                      "markdown": "`environment variables, prefixing the flag name with `GLOG_`, e.g.,\n\n!!! example \"Activate `logtostderr` without gflags\"\n    ``` bash\n    GLOG_logtostderr=1 ./your_application\n    ```\n\nThe following flags are most commonly used:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/flags.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 7,
                  "endLine": 15,
                  "snippet": {
                    "text": "\n!!! example \"Activate `--logtostderr` in an application from the command line\"\n    A binary `you_application` that uses glog can be started using\n    ``` bash\n    ./your_application --logtostderr=1\n    ```\n    to log to `stderr` instead of writing the output to a log file.\n\n",
                    "rendered": {
                      "text": "\n!!! example \"Activate `--logtostderr` in an application from the command line\"\n    A binary `you_application` that uses glog can be started using\n    ``` bash\n    ./your_application --logtostderr=1\n    ```\n    to log to `stderr` instead of writing the output to a log file.\n\n",
                      "markdown": "`\n!!! example \"Activate `--logtostderr` in an application from the command line\"\n    A binary `you_application` that uses glog can be started using\n    ``` bash\n    ./your_application --logtostderr=1\n    ```\n    to log to `stderr` instead of writing the output to a log file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/base/commandlineflags.h"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 40,
                  "endLine": 134,
                  "endColumn": 67,
                  "snippet": {
                    "text": "// These macros (could be functions, but I don't want to bother with a .cc\n// file), make it easier to initialize flags from the environment.\n\n#define EnvToString(envname, dflt) (!getenv(envname) ? (dflt) : getenv(envname))\n\n#define EnvToBool(envname, dflt) \\\n  (!getenv(envname) ? (dflt)     \\\n",
                    "rendered": {
                      "text": "// These macros (could be functions, but I don't want to bother with a .cc\n// file), make it easier to initialize flags from the environment.\n\n#define EnvToString(envname, dflt) (!getenv(envname) ? (dflt) : getenv(envname))\n\n#define EnvToBool(envname, dflt) \\\n  (!getenv(envname) ? (dflt)     \\\n",
                      "markdown": "`// These macros (could be functions, but I don't want to bother with a .cc\n// file), make it easier to initialize flags from the environment.\n\n#define EnvToString(envname, dflt) (!getenv(envname) ? (dflt) : getenv(envname))\n\n#define EnvToBool(envname, dflt) \\\n  (!getenv(envname) ? (dflt)     \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/base/commandlineflags.h"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 8,
                  "endLine": 134,
                  "endColumn": 40,
                  "snippet": {
                    "text": "// These macros (could be functions, but I don't want to bother with a .cc\n// file), make it easier to initialize flags from the environment.\n\n#define EnvToString(envname, dflt) (!getenv(envname) ? (dflt) : getenv(envname))\n\n#define EnvToBool(envname, dflt) \\\n  (!getenv(envname) ? (dflt)     \\\n",
                    "rendered": {
                      "text": "// These macros (could be functions, but I don't want to bother with a .cc\n// file), make it easier to initialize flags from the environment.\n\n#define EnvToString(envname, dflt) (!getenv(envname) ? (dflt) : getenv(envname))\n\n#define EnvToBool(envname, dflt) \\\n  (!getenv(envname) ? (dflt)     \\\n",
                      "markdown": "`// These macros (could be functions, but I don't want to bother with a .cc\n// file), make it easier to initialize flags from the environment.\n\n#define EnvToString(envname, dflt) (!getenv(envname) ? (dflt) : getenv(envname))\n\n#define EnvToBool(envname, dflt) \\\n  (!getenv(envname) ? (dflt)     \\\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 1353,
                  "startColumn": 23,
                  "endLine": 1353,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    return false;\n  }\n\n  std::copy_n(unmangled.get(), std::min(n, out_size), out);\n  return status == 0;\n#else\n  State state;\n",
                    "rendered": {
                      "text": "    return false;\n  }\n\n  std::copy_n(unmangled.get(), std::min(n, out_size), out);\n  return status == 0;\n#else\n  State state;\n",
                      "markdown": "`    return false;\n  }\n\n  std::copy_n(unmangled.get(), std::min(n, out_size), out);\n  return status == 0;\n#else\n  State state;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 4,
                  "endLine": 1269,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  }\n  *state = copy;\n\n  // Expand abbreviations like \"St\" => \"std\".\n  if (ParseOneCharToken(state, 'S')) {\n    const AbbrevPair* p;\n    for (p = kSubstitutionList; p->abbrev != nullptr; ++p) {\n",
                    "rendered": {
                      "text": "  }\n  *state = copy;\n\n  // Expand abbreviations like \"St\" => \"std\".\n  if (ParseOneCharToken(state, 'S')) {\n    const AbbrevPair* p;\n    for (p = kSubstitutionList; p->abbrev != nullptr; ++p) {\n",
                      "markdown": "`  }\n  *state = copy;\n\n  // Expand abbreviations like \"St\" => \"std\".\n  if (ParseOneCharToken(state, 'S')) {\n    const AbbrevPair* p;\n    for (p = kSubstitutionList; p->abbrev != nullptr; ++p) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 15,
                  "endLine": 231,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  return true;\n}\n\n// Append \"str\" at \"out_cur\".  If there is an overflow, \"overflowed\"\n// is set to true for later use.  The output string is ensured to\n// always terminate with '\\0' as long as there is no overflow.\nvoid Append(State* state, const char* const str, ssize_t length) {\n",
                    "rendered": {
                      "text": "  return true;\n}\n\n// Append \"str\" at \"out_cur\".  If there is an overflow, \"overflowed\"\n// is set to true for later use.  The output string is ensured to\n// always terminate with '\\0' as long as there is no overflow.\nvoid Append(State* state, const char* const str, ssize_t length) {\n",
                      "markdown": "`  return true;\n}\n\n// Append \"str\" at \"out_cur\".  If there is an overflow, \"overflowed\"\n// is set to true for later use.  The output string is ensured to\n// always terminate with '\\0' as long as there is no overflow.\nvoid Append(State* state, const char* const str, ssize_t length) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 15,
                  "endLine": 195,
                  "endColumn": 19,
                  "snippet": {
                    "text": "}\n\n// Returns true and advances \"mangled_cur\" if we find any character in\n// \"char_class\" at \"mangled_cur\" position.\nbool ParseCharClass(State* state, const char* char_class) {\n  const char* p = char_class;\n  for (; *p != '\\0'; ++p) {\n",
                    "rendered": {
                      "text": "}\n\n// Returns true and advances \"mangled_cur\" if we find any character in\n// \"char_class\" at \"mangled_cur\" position.\nbool ParseCharClass(State* state, const char* char_class) {\n  const char* p = char_class;\n  for (; *p != '\\0'; ++p) {\n",
                      "markdown": "`}\n\n// Returns true and advances \"mangled_cur\" if we find any character in\n// \"char_class\" at \"mangled_cur\" position.\nbool ParseCharClass(State* state, const char* char_class) {\n  const char* p = char_class;\n  for (; *p != '\\0'; ++p) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 2,
                  "endLine": 183,
                  "endColumn": 6,
                  "snippet": {
                    "text": "}\n\n// Returns true and advances \"mangled_cur\" if we find \"two_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"two_char_token\" does\n// not contain '\\0'.\nbool ParseTwoCharToken(State* state, const char* two_char_token) {\n  if (state->mangled_cur[0] == two_char_token[0] &&\n",
                    "rendered": {
                      "text": "}\n\n// Returns true and advances \"mangled_cur\" if we find \"two_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"two_char_token\" does\n// not contain '\\0'.\nbool ParseTwoCharToken(State* state, const char* two_char_token) {\n  if (state->mangled_cur[0] == two_char_token[0] &&\n",
                      "markdown": "`}\n\n// Returns true and advances \"mangled_cur\" if we find \"two_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"two_char_token\" does\n// not contain '\\0'.\nbool ParseTwoCharToken(State* state, const char* two_char_token) {\n  if (state->mangled_cur[0] == two_char_token[0] &&\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 2,
                  "endLine": 172,
                  "endColumn": 6,
                  "snippet": {
                    "text": "}\n\n// Returns true and advances \"mangled_cur\" if we find \"one_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"one_char_token\" does\n// not contain '\\0'.\nbool ParseOneCharToken(State* state, const char one_char_token) {\n  if (state->mangled_cur[0] == one_char_token) {\n",
                    "rendered": {
                      "text": "}\n\n// Returns true and advances \"mangled_cur\" if we find \"one_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"one_char_token\" does\n// not contain '\\0'.\nbool ParseOneCharToken(State* state, const char one_char_token) {\n  if (state->mangled_cur[0] == one_char_token) {\n",
                      "markdown": "`}\n\n// Returns true and advances \"mangled_cur\" if we find \"one_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"one_char_token\" does\n// not contain '\\0'.\nbool ParseOneCharToken(State* state, const char one_char_token) {\n  if (state->mangled_cur[0] == one_char_token) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 28,
                  "endLine": 137,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  return len;\n}\n\n// Returns true if \"str\" has at least \"n\" characters remaining.\nbool AtLeastNumCharsRemaining(const char* str, ssize_t n) {\n  for (ssize_t i = 0; i < n; ++i) {\n    if (str[i] == '\\0') {\n",
                    "rendered": {
                      "text": "  return len;\n}\n\n// Returns true if \"str\" has at least \"n\" characters remaining.\nbool AtLeastNumCharsRemaining(const char* str, ssize_t n) {\n  for (ssize_t i = 0; i < n; ++i) {\n    if (str[i] == '\\0') {\n",
                      "markdown": "`  return len;\n}\n\n// Returns true if \"str\" has at least \"n\" characters remaining.\nbool AtLeastNumCharsRemaining(const char* str, ssize_t n) {\n  for (ssize_t i = 0; i < n; ++i) {\n    if (str[i] == '\\0') {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 4,
                  "endLine": 1269,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  }\n  *state = copy;\n\n  // Expand abbreviations like \"St\" => \"std\".\n  if (ParseOneCharToken(state, 'S')) {\n    const AbbrevPair* p;\n    for (p = kSubstitutionList; p->abbrev != nullptr; ++p) {\n",
                    "rendered": {
                      "text": "  }\n  *state = copy;\n\n  // Expand abbreviations like \"St\" => \"std\".\n  if (ParseOneCharToken(state, 'S')) {\n    const AbbrevPair* p;\n    for (p = kSubstitutionList; p->abbrev != nullptr; ++p) {\n",
                      "markdown": "`  }\n  *state = copy;\n\n  // Expand abbreviations like \"St\" => \"std\".\n  if (ParseOneCharToken(state, 'S')) {\n    const AbbrevPair* p;\n    for (p = kSubstitutionList; p->abbrev != nullptr; ++p) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 48,
                  "endLine": 194,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return false;\n}\n\n// Returns true and advances \"mangled_cur\" if we find any character in\n// \"char_class\" at \"mangled_cur\" position.\nbool ParseCharClass(State* state, const char* char_class) {\n  const char* p = char_class;\n",
                    "rendered": {
                      "text": "  return false;\n}\n\n// Returns true and advances \"mangled_cur\" if we find any character in\n// \"char_class\" at \"mangled_cur\" position.\nbool ParseCharClass(State* state, const char* char_class) {\n  const char* p = char_class;\n",
                      "markdown": "`  return false;\n}\n\n// Returns true and advances \"mangled_cur\" if we find any character in\n// \"char_class\" at \"mangled_cur\" position.\nbool ParseCharClass(State* state, const char* char_class) {\n  const char* p = char_class;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 48,
                  "endLine": 182,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  return false;\n}\n\n// Returns true and advances \"mangled_cur\" if we find \"two_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"two_char_token\" does\n// not contain '\\0'.\nbool ParseTwoCharToken(State* state, const char* two_char_token) {\n",
                    "rendered": {
                      "text": "  return false;\n}\n\n// Returns true and advances \"mangled_cur\" if we find \"two_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"two_char_token\" does\n// not contain '\\0'.\nbool ParseTwoCharToken(State* state, const char* two_char_token) {\n",
                      "markdown": "`  return false;\n}\n\n// Returns true and advances \"mangled_cur\" if we find \"two_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"two_char_token\" does\n// not contain '\\0'.\nbool ParseTwoCharToken(State* state, const char* two_char_token) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle.cc"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 48,
                  "endLine": 171,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  state->arg_level = 0;\n}\n\n// Returns true and advances \"mangled_cur\" if we find \"one_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"one_char_token\" does\n// not contain '\\0'.\nbool ParseOneCharToken(State* state, const char one_char_token) {\n",
                    "rendered": {
                      "text": "  state->arg_level = 0;\n}\n\n// Returns true and advances \"mangled_cur\" if we find \"one_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"one_char_token\" does\n// not contain '\\0'.\nbool ParseOneCharToken(State* state, const char one_char_token) {\n",
                      "markdown": "`  state->arg_level = 0;\n}\n\n// Returns true and advances \"mangled_cur\" if we find \"one_char_token\"\n// at \"mangled_cur\" position.  It is assumed that \"one_char_token\" does\n// not contain '\\0'.\nbool ParseOneCharToken(State* state, const char one_char_token) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/dcheck_unittest/glog_dcheck.cc"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 71,
                  "endLine": 40,
                  "snippet": {
                    "text": "  google::InstallFailureSignalHandler();\n\n#if defined(_MSC_VER)\n  // Avoid presenting an interactive dialog that will cause the test to time\n  // out.\n  _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n#endif  // defined(_MSC_VER)\n\n",
                    "rendered": {
                      "text": "  google::InstallFailureSignalHandler();\n\n#if defined(_MSC_VER)\n  // Avoid presenting an interactive dialog that will cause the test to time\n  // out.\n  _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n#endif  // defined(_MSC_VER)\n\n",
                      "markdown": "`  google::InstallFailureSignalHandler();\n\n#if defined(_MSC_VER)\n  // Avoid presenting an interactive dialog that will cause the test to time\n  // out.\n  _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n#endif  // defined(_MSC_VER)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/CMakeLists.txt"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 4,
                  "endLine": 959,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  # There should be no output\n  set_tests_properties (dcheck_off PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Release,MinSizeRel>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"\"\n  )\nendif (BUILD_TESTING)\n",
                    "rendered": {
                      "text": "  # There should be no output\n  set_tests_properties (dcheck_off PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Release,MinSizeRel>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"\"\n  )\nendif (BUILD_TESTING)\n",
                      "markdown": "`  # There should be no output\n  set_tests_properties (dcheck_off PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Release,MinSizeRel>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"\"\n  )\nendif (BUILD_TESTING)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/CMakeLists.txt"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 4,
                  "endLine": 936,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  )\n  set_tests_properties (dcheck_on PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Debug,RelWithDebInfo>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"Assert failed: false\"\n  )\n\n",
                    "rendered": {
                      "text": "  )\n  set_tests_properties (dcheck_on PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Debug,RelWithDebInfo>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"Assert failed: false\"\n  )\n\n",
                      "markdown": "`  )\n  set_tests_properties (dcheck_on PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Debug,RelWithDebInfo>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"Assert failed: false\"\n  )\n\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/stacktrace_unittest.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 54,
                  "endLine": 49,
                  "endColumn": 62,
                  "snippet": {
                    "text": "// Obtain a backtrace, verify that the expected callers are present in the\n// backtrace, and maybe print the backtrace to stdout.\n\n// The sequence of functions whose return addresses we expect to see in the\n// backtrace.\nconst int BACKTRACE_STEPS = 6;\n\n",
                    "rendered": {
                      "text": "// Obtain a backtrace, verify that the expected callers are present in the\n// backtrace, and maybe print the backtrace to stdout.\n\n// The sequence of functions whose return addresses we expect to see in the\n// backtrace.\nconst int BACKTRACE_STEPS = 6;\n\n",
                      "markdown": "`// Obtain a backtrace, verify that the expected callers are present in the\n// backtrace, and maybe print the backtrace to stdout.\n\n// The sequence of functions whose return addresses we expect to see in the\n// backtrace.\nconst int BACKTRACE_STEPS = 6;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/cmake/FindUnwind.cmake"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 10,
                  "endLine": 1,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# - Try to find libunwind\n# Once done this will define\n#\n#  Unwind_FOUND - system has libunwind\n",
                    "rendered": {
                      "text": "# - Try to find libunwind\n# Once done this will define\n#\n#  Unwind_FOUND - system has libunwind\n",
                      "markdown": "`# - Try to find libunwind\n# Once done this will define\n#\n#  Unwind_FOUND - system has libunwind\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 22,
                  "endLine": 45,
                  "endColumn": 36,
                  "snippet": {
                    "text": "static const char* DefaultLogDir() {\n  constexpr const char* const names[]{\"GOOGLE_LOG_DIR\", \"TEST_TMPDIR\"};\n  for (const char* const name : names) {\n    const char* const env = std::getenv(name);\n    if (env != nullptr && env[0] != '\\0') {\n      return env;\n    }\n",
                    "rendered": {
                      "text": "static const char* DefaultLogDir() {\n  constexpr const char* const names[]{\"GOOGLE_LOG_DIR\", \"TEST_TMPDIR\"};\n  for (const char* const name : names) {\n    const char* const env = std::getenv(name);\n    if (env != nullptr && env[0] != '\\0') {\n      return env;\n    }\n",
                      "markdown": "`static const char* DefaultLogDir() {\n  constexpr const char* const names[]{\"GOOGLE_LOG_DIR\", \"TEST_TMPDIR\"};\n  for (const char* const name : names) {\n    const char* const env = std::getenv(name);\n    if (env != nullptr && env[0] != '\\0') {\n      return env;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 53,
                  "snippet": {
                    "text": "                 \"Stop attempting to log to disk if the disk is full.\");\n\nGLOG_DEFINE_string(log_backtrace_at, \"\",\n                   \"Emit a backtrace when logging at file:linenum.\");\n\nGLOG_DEFINE_bool(log_utc_time, false, \"Use UTC time for logging.\");\n\n",
                    "rendered": {
                      "text": "                 \"Stop attempting to log to disk if the disk is full.\");\n\nGLOG_DEFINE_string(log_backtrace_at, \"\",\n                   \"Emit a backtrace when logging at file:linenum.\");\n\nGLOG_DEFINE_bool(log_utc_time, false, \"Use UTC time for logging.\");\n\n",
                      "markdown": "`                 \"Stop attempting to log to disk if the disk is full.\");\n\nGLOG_DEFINE_string(log_backtrace_at, \"\",\n                   \"Emit a backtrace when logging at file:linenum.\");\n\nGLOG_DEFINE_bool(log_utc_time, false, \"Use UTC time for logging.\");\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 44,
                  "endLine": 118,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                  \"Clean overdue logs every this many seconds\");\n\nGLOG_DEFINE_int32(logemaillevel, 999,\n                  \"Email log messages logged at this level or higher\"\n                  \" (0 means email all; 3 means email FATAL only;\"\n                  \" ...)\");\nGLOG_DEFINE_string(logmailer, \"\", \"Mailer used to send logging email\");\n",
                    "rendered": {
                      "text": "                  \"Clean overdue logs every this many seconds\");\n\nGLOG_DEFINE_int32(logemaillevel, 999,\n                  \"Email log messages logged at this level or higher\"\n                  \" (0 means email all; 3 means email FATAL only;\"\n                  \" ...)\");\nGLOG_DEFINE_string(logmailer, \"\", \"Mailer used to send logging email\");\n",
                      "markdown": "`                  \"Clean overdue logs every this many seconds\");\n\nGLOG_DEFINE_int32(logemaillevel, 999,\n                  \"Email log messages logged at this level or higher\"\n                  \" (0 means email all; 3 means email FATAL only;\"\n                  \" ...)\");\nGLOG_DEFINE_string(logmailer, \"\", \"Mailer used to send logging email\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 42,
                  "endLine": 112,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                  \" (-1 means don't buffer; 0 means buffer INFO only;\"\n                  \" ...)\");\nGLOG_DEFINE_int32(logbufsecs, 30,\n                  \"Buffer log messages for at most this many seconds\");\n\nGLOG_DEFINE_int32(logcleansecs, 60 * 5,  // every 5 minutes\n                  \"Clean overdue logs every this many seconds\");\n",
                    "rendered": {
                      "text": "                  \" (-1 means don't buffer; 0 means buffer INFO only;\"\n                  \" ...)\");\nGLOG_DEFINE_int32(logbufsecs, 30,\n                  \"Buffer log messages for at most this many seconds\");\n\nGLOG_DEFINE_int32(logcleansecs, 60 * 5,  // every 5 minutes\n                  \"Clean overdue logs every this many seconds\");\n",
                      "markdown": "`                  \" (-1 means don't buffer; 0 means buffer INFO only;\"\n                  \" ...)\");\nGLOG_DEFINE_int32(logbufsecs, 30,\n                  \"Buffer log messages for at most this many seconds\");\n\nGLOG_DEFINE_int32(logcleansecs, 60 * 5,  // every 5 minutes\n                  \"Clean overdue logs every this many seconds\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 45,
                  "endLine": 108,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                  \"Messages logged at a lower level than this don't \"\n                  \"actually get logged anywhere\");\nGLOG_DEFINE_int32(logbuflevel, 0,\n                  \"Buffer log messages logged at this level or lower\"\n                  \" (-1 means don't buffer; 0 means buffer INFO only;\"\n                  \" ...)\");\nGLOG_DEFINE_int32(logbufsecs, 30,\n",
                    "rendered": {
                      "text": "                  \"Messages logged at a lower level than this don't \"\n                  \"actually get logged anywhere\");\nGLOG_DEFINE_int32(logbuflevel, 0,\n                  \"Buffer log messages logged at this level or lower\"\n                  \" (-1 means don't buffer; 0 means buffer INFO only;\"\n                  \" ...)\");\nGLOG_DEFINE_int32(logbufsecs, 30,\n",
                      "markdown": "`                  \"Messages logged at a lower level than this don't \"\n                  \"actually get logged anywhere\");\nGLOG_DEFINE_int32(logbuflevel, 0,\n                  \"Buffer log messages logged at this level or lower\"\n                  \" (-1 means don't buffer; 0 means buffer INFO only;\"\n                  \" ...)\");\nGLOG_DEFINE_int32(logbufsecs, 30,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 34,
                  "endLine": 105,
                  "endColumn": 38,
                  "snippet": {
                    "text": "GLOG_DEFINE_bool(log_year_in_prefix, true,\n                 \"Include the year in the log prefix\");\nGLOG_DEFINE_int32(minloglevel, 0,\n                  \"Messages logged at a lower level than this don't \"\n                  \"actually get logged anywhere\");\nGLOG_DEFINE_int32(logbuflevel, 0,\n                  \"Buffer log messages logged at this level or lower\"\n",
                    "rendered": {
                      "text": "GLOG_DEFINE_bool(log_year_in_prefix, true,\n                 \"Include the year in the log prefix\");\nGLOG_DEFINE_int32(minloglevel, 0,\n                  \"Messages logged at a lower level than this don't \"\n                  \"actually get logged anywhere\");\nGLOG_DEFINE_int32(logbuflevel, 0,\n                  \"Buffer log messages logged at this level or lower\"\n",
                      "markdown": "`GLOG_DEFINE_bool(log_year_in_prefix, true,\n                 \"Include the year in the log prefix\");\nGLOG_DEFINE_int32(minloglevel, 0,\n                  \"Messages logged at a lower level than this don't \"\n                  \"actually get logged anywhere\");\nGLOG_DEFINE_int32(logbuflevel, 0,\n                  \"Buffer log messages logged at this level or lower\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 39,
                  "endLine": 99,
                  "endColumn": 43,
                  "snippet": {
                    "text": "                   \"log messages go to these email addresses \"\n                   \"in addition to logfiles\");\nGLOG_DEFINE_bool(log_file_header, true,\n                 \"Write the file header at the start of each log file\");\nGLOG_DEFINE_bool(log_prefix, true,\n                 \"Prepend the log prefix to the start of each log line\");\nGLOG_DEFINE_bool(log_year_in_prefix, true,\n",
                    "rendered": {
                      "text": "                   \"log messages go to these email addresses \"\n                   \"in addition to logfiles\");\nGLOG_DEFINE_bool(log_file_header, true,\n                 \"Write the file header at the start of each log file\");\nGLOG_DEFINE_bool(log_prefix, true,\n                 \"Prepend the log prefix to the start of each log line\");\nGLOG_DEFINE_bool(log_year_in_prefix, true,\n",
                      "markdown": "`                   \"log messages go to these email addresses \"\n                   \"in addition to logfiles\");\nGLOG_DEFINE_bool(log_file_header, true,\n                 \"Write the file header at the start of each log file\");\nGLOG_DEFINE_bool(log_prefix, true,\n                 \"Prepend the log prefix to the start of each log line\");\nGLOG_DEFINE_bool(log_year_in_prefix, true,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 21,
                  "snippet": {
                    "text": "// when they run a program without having to look in another file.\nGLOG_DEFINE_int32(\n    stderrthreshold, google::GLOG_ERROR,\n    \"log messages at or above this level are copied to stderr in \"\n    \"addition to logfiles.  This flag obsoletes --alsologtostderr.\");\n\nGLOG_DEFINE_string(alsologtoemail, \"\",\n",
                    "rendered": {
                      "text": "// when they run a program without having to look in another file.\nGLOG_DEFINE_int32(\n    stderrthreshold, google::GLOG_ERROR,\n    \"log messages at or above this level are copied to stderr in \"\n    \"addition to logfiles.  This flag obsoletes --alsologtostderr.\");\n\nGLOG_DEFINE_string(alsologtoemail, \"\",\n",
                      "markdown": "`// when they run a program without having to look in another file.\nGLOG_DEFINE_int32(\n    stderrthreshold, google::GLOG_ERROR,\n    \"log messages at or above this level are copied to stderr in \"\n    \"addition to logfiles.  This flag obsoletes --alsologtostderr.\");\n\nGLOG_DEFINE_string(alsologtoemail, \"\",\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 33,
                  "endLine": 65,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\nGLOG_DEFINE_bool(timestamp_in_logfile_name,\n                 BoolFromEnv(\"GOOGLE_TIMESTAMP_IN_LOGFILE_NAME\", true),\n                 \"put a timestamp at the end of the log file name\");\nGLOG_DEFINE_bool(logtostderr, BoolFromEnv(\"GOOGLE_LOGTOSTDERR\", false),\n                 \"log messages go to stderr instead of logfiles\");\nGLOG_DEFINE_bool(alsologtostderr, BoolFromEnv(\"GOOGLE_ALSOLOGTOSTDERR\", false),\n",
                    "rendered": {
                      "text": "\nGLOG_DEFINE_bool(timestamp_in_logfile_name,\n                 BoolFromEnv(\"GOOGLE_TIMESTAMP_IN_LOGFILE_NAME\", true),\n                 \"put a timestamp at the end of the log file name\");\nGLOG_DEFINE_bool(logtostderr, BoolFromEnv(\"GOOGLE_LOGTOSTDERR\", false),\n                 \"log messages go to stderr instead of logfiles\");\nGLOG_DEFINE_bool(alsologtostderr, BoolFromEnv(\"GOOGLE_ALSOLOGTOSTDERR\", false),\n",
                      "markdown": "`\nGLOG_DEFINE_bool(timestamp_in_logfile_name,\n                 BoolFromEnv(\"GOOGLE_TIMESTAMP_IN_LOGFILE_NAME\", true),\n                 \"put a timestamp at the end of the log file name\");\nGLOG_DEFINE_bool(logtostderr, BoolFromEnv(\"GOOGLE_LOGTOSTDERR\", false),\n                 \"log messages go to stderr instead of logfiles\");\nGLOG_DEFINE_bool(alsologtostderr, BoolFromEnv(\"GOOGLE_ALSOLOGTOSTDERR\", false),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 46,
                  "endLine": 143,
                  "endColumn": 52,
                  "snippet": {
                    "text": "GLOG_DEFINE_string(log_backtrace_at, \"\",\n                   \"Emit a backtrace when logging at file:linenum.\");\n\nGLOG_DEFINE_bool(log_utc_time, false, \"Use UTC time for logging.\");\n\nGLOG_DEFINE_int32(v, 0,\n                  \"Show all VLOG(m) messages for m <= this.\"\n",
                    "rendered": {
                      "text": "GLOG_DEFINE_string(log_backtrace_at, \"\",\n                   \"Emit a backtrace when logging at file:linenum.\");\n\nGLOG_DEFINE_bool(log_utc_time, false, \"Use UTC time for logging.\");\n\nGLOG_DEFINE_int32(v, 0,\n                  \"Show all VLOG(m) messages for m <= this.\"\n",
                      "markdown": "`GLOG_DEFINE_string(log_backtrace_at, \"\",\n                   \"Emit a backtrace when logging at file:linenum.\");\n\nGLOG_DEFINE_bool(log_utc_time, false, \"Use UTC time for logging.\");\n\nGLOG_DEFINE_int32(v, 0,\n                  \"Show all VLOG(m) messages for m <= this.\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/flags.cc"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 21,
                  "endLine": 45,
                  "endColumn": 26,
                  "snippet": {
                    "text": "static const char* DefaultLogDir() {\n  constexpr const char* const names[]{\"GOOGLE_LOG_DIR\", \"TEST_TMPDIR\"};\n  for (const char* const name : names) {\n    const char* const env = std::getenv(name);\n    if (env != nullptr && env[0] != '\\0') {\n      return env;\n    }\n",
                    "rendered": {
                      "text": "static const char* DefaultLogDir() {\n  constexpr const char* const names[]{\"GOOGLE_LOG_DIR\", \"TEST_TMPDIR\"};\n  for (const char* const name : names) {\n    const char* const env = std::getenv(name);\n    if (env != nullptr && env[0] != '\\0') {\n      return env;\n    }\n",
                      "markdown": "`static const char* DefaultLogDir() {\n  constexpr const char* const names[]{\"GOOGLE_LOG_DIR\", \"TEST_TMPDIR\"};\n  for (const char* const name : names) {\n    const char* const env = std::getenv(name);\n    if (env != nullptr && env[0] != '\\0') {\n      return env;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/utilities.h"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 12,
                  "endLine": 243,
                  "endColumn": 17,
                  "snippet": {
                    "text": "// temporaries.\n\nconstexpr bool operator==(const FileDescriptor& lhs, int rhs) noexcept {\n  return lhs.get() == rhs;\n}\n\nconstexpr bool operator==(int lhs, const FileDescriptor& rhs) noexcept {\n",
                    "rendered": {
                      "text": "// temporaries.\n\nconstexpr bool operator==(const FileDescriptor& lhs, int rhs) noexcept {\n  return lhs.get() == rhs;\n}\n\nconstexpr bool operator==(int lhs, const FileDescriptor& rhs) noexcept {\n",
                      "markdown": "`// temporaries.\n\nconstexpr bool operator==(const FileDescriptor& lhs, int rhs) noexcept {\n  return lhs.get() == rhs;\n}\n\nconstexpr bool operator==(int lhs, const FileDescriptor& rhs) noexcept {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/utilities.h"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 50,
                  "endLine": 122,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  int line_number{0};\n  const char* message{nullptr};\n\n  // We'll also store a bit of stack trace context at the time of crash as\n  // it may not be available later on.\n  void* stack[32];\n  int depth{0};\n",
                    "rendered": {
                      "text": "  int line_number{0};\n  const char* message{nullptr};\n\n  // We'll also store a bit of stack trace context at the time of crash as\n  // it may not be available later on.\n  void* stack[32];\n  int depth{0};\n",
                      "markdown": "`  int line_number{0};\n  const char* message{nullptr};\n\n  // We'll also store a bit of stack trace context at the time of crash as\n  // it may not be available later on.\n  void* stack[32];\n  int depth{0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/utilities.h"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 41,
                  "endLine": 91,
                  "endColumn": 45,
                  "snippet": {
                    "text": "//\n// 2) Our hand-coded stack-unwinder.  This depends on a certain stack\n//    layout, which is used by gcc (and those systems using a\n//    gcc-compatible ABI) on x86 systems, at least since gcc 2.95.\n//    It uses the frame pointer to do its work.\n//\n// 3) The gdb unwinder -- also the one used by the c++ exception code.\n",
                    "rendered": {
                      "text": "//\n// 2) Our hand-coded stack-unwinder.  This depends on a certain stack\n//    layout, which is used by gcc (and those systems using a\n//    gcc-compatible ABI) on x86 systems, at least since gcc 2.95.\n//    It uses the frame pointer to do its work.\n//\n// 3) The gdb unwinder -- also the one used by the c++ exception code.\n",
                      "markdown": "`//\n// 2) Our hand-coded stack-unwinder.  This depends on a certain stack\n//    layout, which is used by gcc (and those systems using a\n//    gcc-compatible ABI) on x86 systems, at least since gcc 2.95.\n//    It uses the frame pointer to do its work.\n//\n// 3) The gdb unwinder -- also the one used by the c++ exception code.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/utilities.h"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 57,
                  "endLine": 122,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  int line_number{0};\n  const char* message{nullptr};\n\n  // We'll also store a bit of stack trace context at the time of crash as\n  // it may not be available later on.\n  void* stack[32];\n  int depth{0};\n",
                    "rendered": {
                      "text": "  int line_number{0};\n  const char* message{nullptr};\n\n  // We'll also store a bit of stack trace context at the time of crash as\n  // it may not be available later on.\n  void* stack[32];\n  int depth{0};\n",
                      "markdown": "`  int line_number{0};\n  const char* message{nullptr};\n\n  // We'll also store a bit of stack trace context at the time of crash as\n  // it may not be available later on.\n  void* stack[32];\n  int depth{0};\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/utilities.h"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 9,
                  "endLine": 94,
                  "endColumn": 14,
                  "snippet": {
                    "text": "//    gcc-compatible ABI) on x86 systems, at least since gcc 2.95.\n//    It uses the frame pointer to do its work.\n//\n// 3) The gdb unwinder -- also the one used by the c++ exception code.\n//    It's obviously well-tested, but has a fatal flaw: it can call\n//    malloc() from the unwinder.  This is a problem because we're\n//    trying to use the unwinder to instrument malloc().\n",
                    "rendered": {
                      "text": "//    gcc-compatible ABI) on x86 systems, at least since gcc 2.95.\n//    It uses the frame pointer to do its work.\n//\n// 3) The gdb unwinder -- also the one used by the c++ exception code.\n//    It's obviously well-tested, but has a fatal flaw: it can call\n//    malloc() from the unwinder.  This is a problem because we're\n//    trying to use the unwinder to instrument malloc().\n",
                      "markdown": "`//    gcc-compatible ABI) on x86 systems, at least since gcc 2.95.\n//    It uses the frame pointer to do its work.\n//\n// 3) The gdb unwinder -- also the one used by the c++ exception code.\n//    It's obviously well-tested, but has a fatal flaw: it can call\n//    malloc() from the unwinder.  This is a problem because we're\n//    trying to use the unwinder to instrument malloc().\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 70,
                  "endLine": 102,
                  "endColumn": 89,
                  "snippet": {
                    "text": "      - name: Setup Release Environment\n        if: matrix.build_type != 'Debug'\n        run: |\n          echo \"CXXFLAGS=/Zi ${{env.CXXFLAGS}}\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n\n      - name: Configure\n        run: |\n",
                    "rendered": {
                      "text": "      - name: Setup Release Environment\n        if: matrix.build_type != 'Debug'\n        run: |\n          echo \"CXXFLAGS=/Zi ${{env.CXXFLAGS}}\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n\n      - name: Configure\n        run: |\n",
                      "markdown": "`      - name: Setup Release Environment\n        if: matrix.build_type != 'Debug'\n        run: |\n          echo \"CXXFLAGS=/Zi ${{env.CXXFLAGS}}\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n\n      - name: Configure\n        run: |\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 72,
                  "endLine": 97,
                  "endColumn": 92,
                  "snippet": {
                    "text": "          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Setup Release Environment\n        if: matrix.build_type != 'Debug'\n",
                    "rendered": {
                      "text": "          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Setup Release Environment\n        if: matrix.build_type != 'Debug'\n",
                      "markdown": "`          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Setup Release Environment\n        if: matrix.build_type != 'Debug'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 71,
                  "endLine": 96,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Setup Release Environment\n",
                    "rendered": {
                      "text": "        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Setup Release Environment\n",
                      "markdown": "`        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Setup Release Environment\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 83,
                  "endLine": 95,
                  "endColumn": 102,
                  "snippet": {
                    "text": "      - name: Setup Environment\n        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n",
                    "rendered": {
                      "text": "      - name: Setup Environment\n        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n",
                      "markdown": "`      - name: Setup Environment\n        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 81,
                  "endLine": 94,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n      - name: Setup Environment\n        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n",
                    "rendered": {
                      "text": "\n      - name: Setup Environment\n        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n",
                      "markdown": "`\n      - name: Setup Environment\n        run: |\n          echo \"GTest_ROOT=$((Get-Item .).FullName)/gtest\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"gflags_ROOT=$((Get-Item .).FullName)/gflags\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gtest/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n          echo \"${{github.workspace}}/gflags/bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 9,
                  "endLine": 191,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - name: Setup Coverage Dependencies\n        if: matrix.build_type == 'Debug'\n        run: |\n          pip install 'gcovr==7.0'\n\n      - name: Setup Environment\n        if: matrix.build_type == 'Debug'\n",
                    "rendered": {
                      "text": "      - name: Setup Coverage Dependencies\n        if: matrix.build_type == 'Debug'\n        run: |\n          pip install 'gcovr==7.0'\n\n      - name: Setup Environment\n        if: matrix.build_type == 'Debug'\n",
                      "markdown": "`      - name: Setup Coverage Dependencies\n        if: matrix.build_type == 'Debug'\n        run: |\n          pip install 'gcovr==7.0'\n\n      - name: Setup Environment\n        if: matrix.build_type == 'Debug'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2416,
                  "startColumn": 18,
                  "endLine": 2416,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#  ifdef HAVE__CHSIZE_S\n  if (_chsize_s(fd.get(), write_offset) != 0) {\n#  else\n  if (ftruncate(fd.get(), write_offset) == -1) {\n#  endif\n    PLOG(ERROR) << \"Unable to truncate \" << path;\n  }\n",
                    "rendered": {
                      "text": "#  ifdef HAVE__CHSIZE_S\n  if (_chsize_s(fd.get(), write_offset) != 0) {\n#  else\n  if (ftruncate(fd.get(), write_offset) == -1) {\n#  endif\n    PLOG(ERROR) << \"Unable to truncate \" << path;\n  }\n",
                      "markdown": "`#  ifdef HAVE__CHSIZE_S\n  if (_chsize_s(fd.get(), write_offset) != 0) {\n#  else\n  if (ftruncate(fd.get(), write_offset) == -1) {\n#  endif\n    PLOG(ERROR) << \"Unable to truncate \" << path;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2414,
                  "startColumn": 18,
                  "endLine": 2414,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    // end of the file after our last read() above, we lose their latest\n    // data. Too bad ...\n#  ifdef HAVE__CHSIZE_S\n  if (_chsize_s(fd.get(), write_offset) != 0) {\n#  else\n  if (ftruncate(fd.get(), write_offset) == -1) {\n#  endif\n",
                    "rendered": {
                      "text": "    // end of the file after our last read() above, we lose their latest\n    // data. Too bad ...\n#  ifdef HAVE__CHSIZE_S\n  if (_chsize_s(fd.get(), write_offset) != 0) {\n#  else\n  if (ftruncate(fd.get(), write_offset) == -1) {\n#  endif\n",
                      "markdown": "`    // end of the file after our last read() above, we lose their latest\n    // data. Too bad ...\n#  ifdef HAVE__CHSIZE_S\n  if (_chsize_s(fd.get(), write_offset) != 0) {\n#  else\n  if (ftruncate(fd.get(), write_offset) == -1) {\n#  endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2398,
                  "startColumn": 17,
                  "endLine": 2398,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  while ((bytesin = pread(fd.get(), copybuf, sizeof(copybuf), read_offset)) >\n         0) {\n    bytesout =\n        pwrite(fd.get(), copybuf, static_cast<size_t>(bytesin), write_offset);\n    if (bytesout == -1) {\n      PLOG(ERROR) << \"Unable to write to \" << path;\n      break;\n",
                    "rendered": {
                      "text": "  while ((bytesin = pread(fd.get(), copybuf, sizeof(copybuf), read_offset)) >\n         0) {\n    bytesout =\n        pwrite(fd.get(), copybuf, static_cast<size_t>(bytesin), write_offset);\n    if (bytesout == -1) {\n      PLOG(ERROR) << \"Unable to write to \" << path;\n      break;\n",
                      "markdown": "`  while ((bytesin = pread(fd.get(), copybuf, sizeof(copybuf), read_offset)) >\n         0) {\n    bytesout =\n        pwrite(fd.get(), copybuf, static_cast<size_t>(bytesin), write_offset);\n    if (bytesout == -1) {\n      PLOG(ERROR) << \"Unable to write to \" << path;\n      break;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2395,
                  "startColumn": 28,
                  "endLine": 2395,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  read_offset = statbuf.st_size - static_cast<off_t>(keep);\n  write_offset = 0;\n  ssize_t bytesin, bytesout;\n  while ((bytesin = pread(fd.get(), copybuf, sizeof(copybuf), read_offset)) >\n         0) {\n    bytesout =\n        pwrite(fd.get(), copybuf, static_cast<size_t>(bytesin), write_offset);\n",
                    "rendered": {
                      "text": "  read_offset = statbuf.st_size - static_cast<off_t>(keep);\n  write_offset = 0;\n  ssize_t bytesin, bytesout;\n  while ((bytesin = pread(fd.get(), copybuf, sizeof(copybuf), read_offset)) >\n         0) {\n    bytesout =\n        pwrite(fd.get(), copybuf, static_cast<size_t>(bytesin), write_offset);\n",
                      "markdown": "`  read_offset = statbuf.st_size - static_cast<off_t>(keep);\n  write_offset = 0;\n  ssize_t bytesin, bytesout;\n  while ((bytesin = pread(fd.get(), copybuf, sizeof(copybuf), read_offset)) >\n         0) {\n    bytesout =\n        pwrite(fd.get(), copybuf, static_cast<size_t>(bytesin), write_offset);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2377,
                  "startColumn": 14,
                  "endLine": 2377,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    return;\n  }\n\n  if (fstat(fd.get(), &statbuf) == -1) {\n    PLOG(ERROR) << \"Unable to fstat()\";\n    return;\n  }\n",
                    "rendered": {
                      "text": "    return;\n  }\n\n  if (fstat(fd.get(), &statbuf) == -1) {\n    PLOG(ERROR) << \"Unable to fstat()\";\n    return;\n  }\n",
                      "markdown": "`    return;\n  }\n\n  if (fstat(fd.get(), &statbuf) == -1) {\n    PLOG(ERROR) << \"Unable to fstat()\";\n    return;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2363,
                  "startColumn": 22,
                  "endLine": 2363,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      // rather scary.\n      // Instead just truncate the file to something we can manage\n#  ifdef HAVE__CHSIZE_S\n      if (_chsize_s(fd.get(), 0) != 0) {\n#  else\n      if (truncate(path, 0) == -1) {\n#  endif\n",
                    "rendered": {
                      "text": "      // rather scary.\n      // Instead just truncate the file to something we can manage\n#  ifdef HAVE__CHSIZE_S\n      if (_chsize_s(fd.get(), 0) != 0) {\n#  else\n      if (truncate(path, 0) == -1) {\n#  endif\n",
                      "markdown": "`      // rather scary.\n      // Instead just truncate the file to something we can manage\n#  ifdef HAVE__CHSIZE_S\n      if (_chsize_s(fd.get(), 0) != 0) {\n#  else\n      if (truncate(path, 0) == -1) {\n#  endif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1275,
                  "startColumn": 24,
                  "endLine": 1275,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        // Only advise when >= 2MiB to drop\n#  if defined(HAVE_POSIX_FADVISE)\n        posix_fadvise(\n            fileno(file_.get()), static_cast<off_t>(dropped_mem_length_),\n            static_cast<off_t>(this_drop_length), POSIX_FADV_DONTNEED);\n#  endif\n        dropped_mem_length_ = total_drop_length;\n",
                    "rendered": {
                      "text": "        // Only advise when >= 2MiB to drop\n#  if defined(HAVE_POSIX_FADVISE)\n        posix_fadvise(\n            fileno(file_.get()), static_cast<off_t>(dropped_mem_length_),\n            static_cast<off_t>(this_drop_length), POSIX_FADV_DONTNEED);\n#  endif\n        dropped_mem_length_ = total_drop_length;\n",
                      "markdown": "`        // Only advise when >= 2MiB to drop\n#  if defined(HAVE_POSIX_FADVISE)\n        posix_fadvise(\n            fileno(file_.get()), static_cast<off_t>(dropped_mem_length_),\n            static_cast<off_t>(this_drop_length), POSIX_FADV_DONTNEED);\n#  endif\n        dropped_mem_length_ = total_drop_length;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 41,
                  "endLine": 1242,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    // 4096 bytes. fwrite() returns 4096 for message lengths that are\n    // greater than 4096, thereby indicating an error.\n    errno = 0;\n    fwrite(message, 1, message_len, file_.get());\n    if (FLAGS_stop_logging_if_full_disk &&\n        errno == ENOSPC) {  // disk full, stop writing to disk\n      stop_writing = true;  // until the disk is\n",
                    "rendered": {
                      "text": "    // 4096 bytes. fwrite() returns 4096 for message lengths that are\n    // greater than 4096, thereby indicating an error.\n    errno = 0;\n    fwrite(message, 1, message_len, file_.get());\n    if (FLAGS_stop_logging_if_full_disk &&\n        errno == ENOSPC) {  // disk full, stop writing to disk\n      stop_writing = true;  // until the disk is\n",
                      "markdown": "`    // 4096 bytes. fwrite() returns 4096 for message lengths that are\n    // greater than 4096, thereby indicating an error.\n    errno = 0;\n    fwrite(message, 1, message_len, file_.get());\n    if (FLAGS_stop_logging_if_full_disk &&\n        errno == ENOSPC) {  // disk full, stop writing to disk\n      stop_writing = true;  // until the disk is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1228,
                  "startColumn": 60,
                  "endLine": 1228,
                  "endColumn": 65,
                  "snippet": {
                    "text": "      const string& file_header_string = file_header_stream.str();\n\n      const size_t header_len = file_header_string.size();\n      fwrite(file_header_string.data(), 1, header_len, file_.get());\n      file_length_ += header_len;\n      bytes_since_flush_ += header_len;\n    }\n",
                    "rendered": {
                      "text": "      const string& file_header_string = file_header_stream.str();\n\n      const size_t header_len = file_header_string.size();\n      fwrite(file_header_string.data(), 1, header_len, file_.get());\n      file_length_ += header_len;\n      bytes_since_flush_ += header_len;\n    }\n",
                      "markdown": "`      const string& file_header_string = file_header_stream.str();\n\n      const size_t header_len = file_header_string.size();\n      fwrite(file_header_string.data(), 1, header_len, file_.get());\n      file_length_ += header_len;\n      bytes_since_flush_ += header_len;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 19,
                  "endLine": 1042,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  // https://github.com/golang/go/issues/27638 - make sure we seek to the end to\n  // append empirically replicated with wine over mingw build\n  if (!FLAGS_timestamp_in_logfile_name) {\n    if (fseek(file_.get(), 0, SEEK_END) != 0) {\n      return false;\n    }\n  }\n",
                    "rendered": {
                      "text": "  // https://github.com/golang/go/issues/27638 - make sure we seek to the end to\n  // append empirically replicated with wine over mingw build\n  if (!FLAGS_timestamp_in_logfile_name) {\n    if (fseek(file_.get(), 0, SEEK_END) != 0) {\n      return false;\n    }\n  }\n",
                      "markdown": "`  // https://github.com/golang/go/issues/27638 - make sure we seek to the end to\n  // append empirically replicated with wine over mingw build\n  if (!FLAGS_timestamp_in_logfile_name) {\n    if (fseek(file_.get(), 0, SEEK_END) != 0) {\n      return false;\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1023,
                  "startColumn": 26,
                  "endLine": 1023,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  w_lock.l_whence = SEEK_SET;\n  w_lock.l_len = 0;\n\n  int wlock_ret = fcntl(fd.get(), F_SETLK, &w_lock);\n  if (wlock_ret == -1) {\n    return false;\n  }\n",
                    "rendered": {
                      "text": "  w_lock.l_whence = SEEK_SET;\n  w_lock.l_len = 0;\n\n  int wlock_ret = fcntl(fd.get(), F_SETLK, &w_lock);\n  if (wlock_ret == -1) {\n    return false;\n  }\n",
                      "markdown": "`  w_lock.l_whence = SEEK_SET;\n  w_lock.l_len = 0;\n\n  int wlock_ret = fcntl(fd.get(), F_SETLK, &w_lock);\n  if (wlock_ret == -1) {\n    return false;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 10,
                  "endLine": 1004,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  if (!fd) return false;\n#ifdef HAVE_FCNTL\n  // Mark the file close-on-exec. We don't really care if this fails\n  fcntl(fd.get(), F_SETFD, FD_CLOEXEC);\n\n  // Mark the file as exclusive write access to avoid two clients logging to the\n  // same file. This applies particularly when !FLAGS_timestamp_in_logfile_name\n",
                    "rendered": {
                      "text": "  if (!fd) return false;\n#ifdef HAVE_FCNTL\n  // Mark the file close-on-exec. We don't really care if this fails\n  fcntl(fd.get(), F_SETFD, FD_CLOEXEC);\n\n  // Mark the file as exclusive write access to avoid two clients logging to the\n  // same file. This applies particularly when !FLAGS_timestamp_in_logfile_name\n",
                      "markdown": "`  if (!fd) return false;\n#ifdef HAVE_FCNTL\n  // Mark the file close-on-exec. We don't really care if this fails\n  fcntl(fd.get(), F_SETFD, FD_CLOEXEC);\n\n  // Mark the file as exclusive write access to avoid two clients logging to the\n  // same file. This applies particularly when !FLAGS_timestamp_in_logfile_name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 977,
                  "startColumn": 16,
                  "endLine": 977,
                  "endColumn": 21,
                  "snippet": {
                    "text": "void LogFileObject::FlushUnlocked(\n    const std::chrono::system_clock::time_point& now) {\n  if (file_ != nullptr) {\n    fflush(file_.get());\n    bytes_since_flush_ = 0;\n  }\n  // Figure out when we are due for another flush.\n",
                    "rendered": {
                      "text": "void LogFileObject::FlushUnlocked(\n    const std::chrono::system_clock::time_point& now) {\n  if (file_ != nullptr) {\n    fflush(file_.get());\n    bytes_since_flush_ = 0;\n  }\n  // Figure out when we are due for another flush.\n",
                      "markdown": "`void LogFileObject::FlushUnlocked(\n    const std::chrono::system_clock::time_point& now) {\n  if (file_ != nullptr) {\n    fflush(file_.get());\n    bytes_since_flush_ = 0;\n  }\n  // Figure out when we are due for another flush.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 36,
                  "endLine": 884,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    log_destinations_[severity] =\n        std::make_unique<LogDestination>(severity, nullptr);\n  }\n  return log_destinations_[severity].get();\n}\n\nvoid LogDestination::DeleteLogDestinations() {\n",
                    "rendered": {
                      "text": "    log_destinations_[severity] =\n        std::make_unique<LogDestination>(severity, nullptr);\n  }\n  return log_destinations_[severity].get();\n}\n\nvoid LogDestination::DeleteLogDestinations() {\n",
                      "markdown": "`    log_destinations_[severity] =\n        std::make_unique<LogDestination>(severity, nullptr);\n  }\n  return log_destinations_[severity].get();\n}\n\nvoid LogDestination::DeleteLogDestinations() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1207,
                  "startColumn": 70,
                  "endLine": 1207,
                  "endColumn": 78,
                  "snippet": {
                    "text": "                         << tm_time.tm_hour << ':' << setw(2) << tm_time.tm_min\n                         << ':' << setw(2) << tm_time.tm_sec\n                         << (FLAGS_log_utc_time ? \" UTC\\n\" : \"\\n\")\n                         << \"Running on machine: \" << LogDestination::hostname()\n                         << '\\n';\n\n      if (!g_application_fingerprint.empty()) {\n",
                    "rendered": {
                      "text": "                         << tm_time.tm_hour << ':' << setw(2) << tm_time.tm_min\n                         << ':' << setw(2) << tm_time.tm_sec\n                         << (FLAGS_log_utc_time ? \" UTC\\n\" : \"\\n\")\n                         << \"Running on machine: \" << LogDestination::hostname()\n                         << '\\n';\n\n      if (!g_application_fingerprint.empty()) {\n",
                      "markdown": "`                         << tm_time.tm_hour << ':' << setw(2) << tm_time.tm_min\n                         << ':' << setw(2) << tm_time.tm_sec\n                         << (FLAGS_log_utc_time ? \" UTC\\n\" : \"\\n\")\n                         << \"Running on machine: \" << LogDestination::hostname()\n                         << '\\n';\n\n      if (!g_application_fingerprint.empty()) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 52,
                  "endLine": 1173,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      // deadlock. Simply use a name like invalid-user.\n      if (uidname.empty()) uidname = \"invalid-user\";\n\n      stripped_filename = stripped_filename + '.' + hostname + '.' + uidname +\n                          \".log.\" + LogSeverityNames[severity_] + '.';\n      // We're going to (potentially) try to put logs in several different dirs\n      const vector<string>& log_dirs = GetLoggingDirectories();\n",
                    "rendered": {
                      "text": "      // deadlock. Simply use a name like invalid-user.\n      if (uidname.empty()) uidname = \"invalid-user\";\n\n      stripped_filename = stripped_filename + '.' + hostname + '.' + uidname +\n                          \".log.\" + LogSeverityNames[severity_] + '.';\n      // We're going to (potentially) try to put logs in several different dirs\n      const vector<string>& log_dirs = GetLoggingDirectories();\n",
                      "markdown": "`      // deadlock. Simply use a name like invalid-user.\n      if (uidname.empty()) uidname = \"invalid-user\";\n\n      stripped_filename = stripped_filename + '.' + hostname + '.' + uidname +\n                          \".log.\" + LogSeverityNames[severity_] + '.';\n      // We're going to (potentially) try to put logs in several different dirs\n      const vector<string>& log_dirs = GetLoggingDirectories();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1164,
                  "startColumn": 19,
                  "endLine": 1164,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      string stripped_filename(\n          glog_internal_namespace_::ProgramInvocationShortName());\n      string hostname;\n      GetHostName(&hostname);\n\n      string uidname = MyUserName();\n      // We should not call CHECK() here because this function can be\n",
                    "rendered": {
                      "text": "      string stripped_filename(\n          glog_internal_namespace_::ProgramInvocationShortName());\n      string hostname;\n      GetHostName(&hostname);\n\n      string uidname = MyUserName();\n      // We should not call CHECK() here because this function can be\n",
                      "markdown": "`      string stripped_filename(\n          glog_internal_namespace_::ProgramInvocationShortName());\n      string hostname;\n      GetHostName(&hostname);\n\n      string uidname = MyUserName();\n      // We should not call CHECK() here because this function can be\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 13,
                  "endLine": 1163,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      // \"/tmp\", and \".\"\n      string stripped_filename(\n          glog_internal_namespace_::ProgramInvocationShortName());\n      string hostname;\n      GetHostName(&hostname);\n\n      string uidname = MyUserName();\n",
                    "rendered": {
                      "text": "      // \"/tmp\", and \".\"\n      string stripped_filename(\n          glog_internal_namespace_::ProgramInvocationShortName());\n      string hostname;\n      GetHostName(&hostname);\n\n      string uidname = MyUserName();\n",
                      "markdown": "`      // \"/tmp\", and \".\"\n      string stripped_filename(\n          glog_internal_namespace_::ProgramInvocationShortName());\n      string hostname;\n      GetHostName(&hostname);\n\n      string uidname = MyUserName();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 26,
                  "endLine": 1152,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    } else {\n      // If no base filename for logs of this severity has been set, use a\n      // default base filename of\n      // \"<program name>.<hostname>.<user name>.log.<severity level>.\".  So\n      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n",
                    "rendered": {
                      "text": "    } else {\n      // If no base filename for logs of this severity has been set, use a\n      // default base filename of\n      // \"<program name>.<hostname>.<user name>.log.<severity level>.\".  So\n      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n",
                      "markdown": "`    } else {\n      // If no base filename for logs of this severity has been set, use a\n      // default base filename of\n      // \"<program name>.<hostname>.<user name>.log.<severity level>.\".  So\n      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 16,
                  "endLine": 808,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    const string subject(\n        string(\"[LOG] \") + LogSeverityNames[severity] + \": \" +\n        glog_internal_namespace_::ProgramInvocationShortName());\n    string body(hostname());\n    body += \"\\n\\n\";\n    body.append(message, len);\n\n",
                    "rendered": {
                      "text": "    const string subject(\n        string(\"[LOG] \") + LogSeverityNames[severity] + \": \" +\n        glog_internal_namespace_::ProgramInvocationShortName());\n    string body(hostname());\n    body += \"\\n\\n\";\n    body.append(message, len);\n\n",
                      "markdown": "`    const string subject(\n        string(\"[LOG] \") + LogSeverityNames[severity] + \": \" +\n        glog_internal_namespace_::ProgramInvocationShortName());\n    string body(hostname());\n    body += \"\\n\\n\";\n    body.append(message, len);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 601,
                  "startColumn": 9,
                  "endLine": 601,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      hostname_ = \"(unknown)\";\n    }\n  }\n  return hostname_;\n}\n\nLogDestination::LogDestination(LogSeverity severity, const char* base_filename)\n",
                    "rendered": {
                      "text": "      hostname_ = \"(unknown)\";\n    }\n  }\n  return hostname_;\n}\n\nLogDestination::LogDestination(LogSeverity severity, const char* base_filename)\n",
                      "markdown": "`      hostname_ = \"(unknown)\";\n    }\n  }\n  return hostname_;\n}\n\nLogDestination::LogDestination(LogSeverity severity, const char* base_filename)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 6,
                  "endLine": 598,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n  }\n  return hostname_;\n",
                    "rendered": {
                      "text": "  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n  }\n  return hostname_;\n",
                      "markdown": "`  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n  }\n  return hostname_;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 8,
                  "endLine": 597,
                  "endColumn": 16,
                  "snippet": {
                    "text": "const string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n  }\n",
                    "rendered": {
                      "text": "const string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n  }\n",
                      "markdown": "`const string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 17,
                  "endLine": 596,
                  "endColumn": 25,
                  "snippet": {
                    "text": "/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n",
                    "rendered": {
                      "text": "/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n",
                      "markdown": "`/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 6,
                  "endLine": 595,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n",
                    "rendered": {
                      "text": "\n/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n",
                      "markdown": "`\n/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n      hostname_ = \"(unknown)\";\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 30,
                  "endLine": 594,
                  "endColumn": 38,
                  "snippet": {
                    "text": "bool LogDestination::terminal_supports_color_ = TerminalSupportsColor();\n\n/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n",
                    "rendered": {
                      "text": "bool LogDestination::terminal_supports_color_ = TerminalSupportsColor();\n\n/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n",
                      "markdown": "`bool LogDestination::terminal_supports_color_ = TerminalSupportsColor();\n\n/* static */\nconst string& LogDestination::hostname() {\n  if (hostname_.empty()) {\n    GetHostName(&hostname_);\n    if (hostname_.empty()) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 23,
                  "endLine": 587,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    99999;\n\nstring LogDestination::addresses_;\nstring LogDestination::hostname_;\n\nstd::unique_ptr<vector<LogSink*>> LogDestination::sinks_;\nLogDestination::SinkMutex LogDestination::sink_mutex_;\n",
                    "rendered": {
                      "text": "    99999;\n\nstring LogDestination::addresses_;\nstring LogDestination::hostname_;\n\nstd::unique_ptr<vector<LogSink*>> LogDestination::sinks_;\nLogDestination::SinkMutex LogDestination::sink_mutex_;\n",
                      "markdown": "`    99999;\n\nstring LogDestination::addresses_;\nstring LogDestination::hostname_;\n\nstd::unique_ptr<vector<LogSink*>> LogDestination::sinks_;\nLogDestination::SinkMutex LogDestination::sink_mutex_;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 16,
                  "endLine": 567,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  static std::unique_ptr<LogDestination> log_destinations_[NUM_SEVERITIES];\n  static std::underlying_type_t<LogSeverity> email_logging_severity_;\n  static string addresses_;\n  static string hostname_;\n  static bool terminal_supports_color_;\n\n  // arbitrary global logging destinations.\n",
                    "rendered": {
                      "text": "  static std::unique_ptr<LogDestination> log_destinations_[NUM_SEVERITIES];\n  static std::underlying_type_t<LogSeverity> email_logging_severity_;\n  static string addresses_;\n  static string hostname_;\n  static bool terminal_supports_color_;\n\n  // arbitrary global logging destinations.\n",
                      "markdown": "`  static std::unique_ptr<LogDestination> log_destinations_[NUM_SEVERITIES];\n  static std::underlying_type_t<LogSeverity> email_logging_severity_;\n  static string addresses_;\n  static string hostname_;\n  static bool terminal_supports_color_;\n\n  // arbitrary global logging destinations.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 23,
                  "endLine": 499,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  // Really this number is arbitrary.\n  static const int kNetworkBytes = 1400;\n\n  static const string& hostname();\n  static const bool& terminal_supports_color() {\n    return terminal_supports_color_;\n  }\n",
                    "rendered": {
                      "text": "  // Really this number is arbitrary.\n  static const int kNetworkBytes = 1400;\n\n  static const string& hostname();\n  static const bool& terminal_supports_color() {\n    return terminal_supports_color_;\n  }\n",
                      "markdown": "`  // Really this number is arbitrary.\n  static const int kNetworkBytes = 1400;\n\n  static const string& hostname();\n  static const bool& terminal_supports_color() {\n    return terminal_supports_color_;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 3,
                  "endLine": 170,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  }\n#else\n#  warning There is no way to retrieve the host name.\n  *hostname = \"(unknown)\";\n#endif\n}\n\n",
                    "rendered": {
                      "text": "  }\n#else\n#  warning There is no way to retrieve the host name.\n  *hostname = \"(unknown)\";\n#endif\n}\n\n",
                      "markdown": "`  }\n#else\n#  warning There is no way to retrieve the host name.\n  *hostname = \"(unknown)\";\n#endif\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 4,
                  "endLine": 166,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  if (GetComputerNameA(buf, &len)) {\n    *hostname = buf;\n  } else {\n    hostname->clear();\n  }\n#else\n#  warning There is no way to retrieve the host name.\n",
                    "rendered": {
                      "text": "  if (GetComputerNameA(buf, &len)) {\n    *hostname = buf;\n  } else {\n    hostname->clear();\n  }\n#else\n#  warning There is no way to retrieve the host name.\n",
                      "markdown": "`  if (GetComputerNameA(buf, &len)) {\n    *hostname = buf;\n  } else {\n    hostname->clear();\n  }\n#else\n#  warning There is no way to retrieve the host name.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 5,
                  "endLine": 164,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  char buf[MAX_COMPUTERNAME_LENGTH + 1];\n  DWORD len = MAX_COMPUTERNAME_LENGTH + 1;\n  if (GetComputerNameA(buf, &len)) {\n    *hostname = buf;\n  } else {\n    hostname->clear();\n  }\n",
                    "rendered": {
                      "text": "  char buf[MAX_COMPUTERNAME_LENGTH + 1];\n  DWORD len = MAX_COMPUTERNAME_LENGTH + 1;\n  if (GetComputerNameA(buf, &len)) {\n    *hostname = buf;\n  } else {\n    hostname->clear();\n  }\n",
                      "markdown": "`  char buf[MAX_COMPUTERNAME_LENGTH + 1];\n  DWORD len = MAX_COMPUTERNAME_LENGTH + 1;\n  if (GetComputerNameA(buf, &len)) {\n    *hostname = buf;\n  } else {\n    hostname->clear();\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 3,
                  "endLine": 159,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    // ensure null termination on failure\n    *buf.nodename = '\\0';\n  }\n  *hostname = buf.nodename;\n#elif defined(GLOG_OS_WINDOWS)\n  char buf[MAX_COMPUTERNAME_LENGTH + 1];\n  DWORD len = MAX_COMPUTERNAME_LENGTH + 1;\n",
                    "rendered": {
                      "text": "    // ensure null termination on failure\n    *buf.nodename = '\\0';\n  }\n  *hostname = buf.nodename;\n#elif defined(GLOG_OS_WINDOWS)\n  char buf[MAX_COMPUTERNAME_LENGTH + 1];\n  DWORD len = MAX_COMPUTERNAME_LENGTH + 1;\n",
                      "markdown": "`    // ensure null termination on failure\n    *buf.nodename = '\\0';\n  }\n  *hostname = buf.nodename;\n#elif defined(GLOG_OS_WINDOWS)\n  char buf[MAX_COMPUTERNAME_LENGTH + 1];\n  DWORD len = MAX_COMPUTERNAME_LENGTH + 1;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 32,
                  "endLine": 152,
                  "endColumn": 40,
                  "snippet": {
                    "text": "}\n#endif  // !HAVE_PWRITE\n\nstatic void GetHostName(string* hostname) {\n#if defined(HAVE_SYS_UTSNAME_H)\n  struct utsname buf;\n  if (uname(&buf) < 0) {\n",
                    "rendered": {
                      "text": "}\n#endif  // !HAVE_PWRITE\n\nstatic void GetHostName(string* hostname) {\n#if defined(HAVE_SYS_UTSNAME_H)\n  struct utsname buf;\n  if (uname(&buf) < 0) {\n",
                      "markdown": "`}\n#endif  // !HAVE_PWRITE\n\nstatic void GetHostName(string* hostname) {\n#if defined(HAVE_SYS_UTSNAME_H)\n  struct utsname buf;\n  if (uname(&buf) < 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2201,
                  "startColumn": 10,
                  "endLine": 2201,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      logmailer = ShellEscape(FLAGS_logmailer);\n    }\n\n    string cmd =\n        logmailer + \" -s\" + ShellEscape(subject) + \" \" + ShellEscape(dest);\n    if (use_logging) {\n      VLOG(4) << \"Mailing command: \" << cmd;\n",
                    "rendered": {
                      "text": "      logmailer = ShellEscape(FLAGS_logmailer);\n    }\n\n    string cmd =\n        logmailer + \" -s\" + ShellEscape(subject) + \" \" + ShellEscape(dest);\n    if (use_logging) {\n      VLOG(4) << \"Mailing command: \" << cmd;\n",
                      "markdown": "`      logmailer = ShellEscape(FLAGS_logmailer);\n    }\n\n    string cmd =\n        logmailer + \" -s\" + ShellEscape(subject) + \" \" + ShellEscape(dest);\n    if (use_logging) {\n      VLOG(4) << \"Mailing command: \" << cmd;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1496,
                  "startColumn": 63,
                  "endLine": 1496,
                  "endColumn": 67,
                  "snippet": {
                    "text": "static logging::internal::LogMessageData fatal_msg_data_shared;\n\n#ifdef GLOG_THREAD_LOCAL_STORAGE\n// Static thread-local log data space to use, because typically at most one\n// LogMessageData object exists (in this case glog makes zero heap memory\n// allocations).\nstatic thread_local bool thread_data_available = true;\n",
                    "rendered": {
                      "text": "static logging::internal::LogMessageData fatal_msg_data_shared;\n\n#ifdef GLOG_THREAD_LOCAL_STORAGE\n// Static thread-local log data space to use, because typically at most one\n// LogMessageData object exists (in this case glog makes zero heap memory\n// allocations).\nstatic thread_local bool thread_data_available = true;\n",
                      "markdown": "`static logging::internal::LogMessageData fatal_msg_data_shared;\n\n#ifdef GLOG_THREAD_LOCAL_STORAGE\n// Static thread-local log data space to use, because typically at most one\n// LogMessageData object exists (in this case glog makes zero heap memory\n// allocations).\nstatic thread_local bool thread_data_available = true;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1258,
                  "startColumn": 48,
                  "endLine": 1258,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    return;  // no need to flush\n  }\n\n  // See important msgs *now*.  Also, flush logs at least every 10^6 chars,\n  // or every \"FLAGS_logbufsecs\" seconds.\n  if (force_flush || (bytes_since_flush_ >= 1000000) ||\n      (timestamp >= next_flush_time_)) {\n",
                    "rendered": {
                      "text": "    return;  // no need to flush\n  }\n\n  // See important msgs *now*.  Also, flush logs at least every 10^6 chars,\n  // or every \"FLAGS_logbufsecs\" seconds.\n  if (force_flush || (bytes_since_flush_ >= 1000000) ||\n      (timestamp >= next_flush_time_)) {\n",
                      "markdown": "`    return;  // no need to flush\n  }\n\n  // See important msgs *now*.  Also, flush logs at least every 10^6 chars,\n  // or every \"FLAGS_logbufsecs\" seconds.\n  if (force_flush || (bytes_since_flush_ >= 1000000) ||\n      (timestamp >= next_flush_time_)) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 42,
                  "endLine": 490,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  static void SetStderrLogging(LogSeverity min_severity);\n  static void SetEmailLogging(LogSeverity min_severity, const char* addresses);\n  static void LogToStderr();\n  // Flush all log files that are at least at the given severity level\n  static void FlushLogFiles(int min_severity);\n  static void FlushLogFilesUnsafe(int min_severity);\n\n",
                    "rendered": {
                      "text": "  static void SetStderrLogging(LogSeverity min_severity);\n  static void SetEmailLogging(LogSeverity min_severity, const char* addresses);\n  static void LogToStderr();\n  // Flush all log files that are at least at the given severity level\n  static void FlushLogFiles(int min_severity);\n  static void FlushLogFilesUnsafe(int min_severity);\n\n",
                      "markdown": "`  static void SetStderrLogging(LogSeverity min_severity);\n  static void SetEmailLogging(LogSeverity min_severity, const char* addresses);\n  static void LogToStderr();\n  // Flush all log files that are at least at the given severity level\n  static void FlushLogFiles(int min_severity);\n  static void FlushLogFilesUnsafe(int min_severity);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 33,
                  "endLine": 490,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  static void SetStderrLogging(LogSeverity min_severity);\n  static void SetEmailLogging(LogSeverity min_severity, const char* addresses);\n  static void LogToStderr();\n  // Flush all log files that are at least at the given severity level\n  static void FlushLogFiles(int min_severity);\n  static void FlushLogFilesUnsafe(int min_severity);\n\n",
                    "rendered": {
                      "text": "  static void SetStderrLogging(LogSeverity min_severity);\n  static void SetEmailLogging(LogSeverity min_severity, const char* addresses);\n  static void LogToStderr();\n  // Flush all log files that are at least at the given severity level\n  static void FlushLogFiles(int min_severity);\n  static void FlushLogFilesUnsafe(int min_severity);\n\n",
                      "markdown": "`  static void SetStderrLogging(LogSeverity min_severity);\n  static void SetEmailLogging(LogSeverity min_severity, const char* addresses);\n  static void LogToStderr();\n  // Flush all log files that are at least at the given severity level\n  static void FlushLogFiles(int min_severity);\n  static void FlushLogFilesUnsafe(int min_severity);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 41,
                  "endLine": 466,
                  "endColumn": 45,
                  "snippet": {
                    "text": "  std::chrono::minutes overdue_{\n      std::chrono::duration<int, std::ratio<kSecondsInWeek>>{1}};\n  std::chrono::system_clock::time_point\n      next_cleanup_time_;  // cycle count at which to clean overdue log\n};\n\nLogCleaner log_cleaner;\n",
                    "rendered": {
                      "text": "  std::chrono::minutes overdue_{\n      std::chrono::duration<int, std::ratio<kSecondsInWeek>>{1}};\n  std::chrono::system_clock::time_point\n      next_cleanup_time_;  // cycle count at which to clean overdue log\n};\n\nLogCleaner log_cleaner;\n",
                      "markdown": "`  std::chrono::minutes overdue_{\n      std::chrono::duration<int, std::ratio<kSecondsInWeek>>{1}};\n  std::chrono::system_clock::time_point\n      next_cleanup_time_;  // cycle count at which to clean overdue log\n};\n\nLogCleaner log_cleaner;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 39,
                  "endLine": 424,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  uint32 file_length_{0};\n  unsigned int rollover_attempt_;\n  std::chrono::system_clock::time_point\n      next_flush_time_;  // cycle count at which to flush log\n  std::chrono::system_clock::time_point start_time_;\n\n  // Actually create a logfile using the value of base_filename_ and the\n",
                    "rendered": {
                      "text": "  uint32 file_length_{0};\n  unsigned int rollover_attempt_;\n  std::chrono::system_clock::time_point\n      next_flush_time_;  // cycle count at which to flush log\n  std::chrono::system_clock::time_point start_time_;\n\n  // Actually create a logfile using the value of base_filename_ and the\n",
                      "markdown": "`  uint32 file_length_{0};\n  unsigned int rollover_attempt_;\n  std::chrono::system_clock::time_point\n      next_flush_time_;  // cycle count at which to flush log\n  std::chrono::system_clock::time_point start_time_;\n\n  // Actually create a logfile using the value of base_filename_ and the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 26,
                  "endLine": 325,
                  "endColumn": 30,
                  "snippet": {
                    "text": "// lock it does so.\nstatic std::mutex log_mutex;\n\n// Number of messages sent at each severity.  Under log_mutex.\nint64 LogMessage::num_messages_[NUM_SEVERITIES] = {0, 0, 0, 0};\n\n// Globally disable log writing (if disk is full)\n",
                    "rendered": {
                      "text": "// lock it does so.\nstatic std::mutex log_mutex;\n\n// Number of messages sent at each severity.  Under log_mutex.\nint64 LogMessage::num_messages_[NUM_SEVERITIES] = {0, 0, 0, 0};\n\n// Globally disable log writing (if disk is full)\n",
                      "markdown": "`// lock it does so.\nstatic std::mutex log_mutex;\n\n// Number of messages sent at each severity.  Under log_mutex.\nint64 LogMessage::num_messages_[NUM_SEVERITIES] = {0, 0, 0, 0};\n\n// Globally disable log writing (if disk is full)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 45,
                  "endLine": 318,
                  "endColumn": 49,
                  "snippet": {
                    "text": "}  // namespace internal\n}  // namespace logging\n\n// A mutex that allows only one thread to log at a time, to keep things from\n// getting jumbled.  Some other very uncommon logging operations (like\n// changing the destination file for log messages of a given severity) also\n// lock this mutex.  Please be sure that anybody who might possibly need to\n",
                    "rendered": {
                      "text": "}  // namespace internal\n}  // namespace logging\n\n// A mutex that allows only one thread to log at a time, to keep things from\n// getting jumbled.  Some other very uncommon logging operations (like\n// changing the destination file for log messages of a given severity) also\n// lock this mutex.  Please be sure that anybody who might possibly need to\n",
                      "markdown": "`}  // namespace internal\n}  // namespace logging\n\n// A mutex that allows only one thread to log at a time, to keep things from\n// getting jumbled.  Some other very uncommon logging operations (like\n// changing the destination file for log messages of a given severity) also\n// lock this mutex.  Please be sure that anybody who might possibly need to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 13,
                  "endLine": 297,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  LogSeverity severity_;  // What level is this LogMessage logged at?\n  int line_;              // line number where logging call is.\n  void (LogMessage::*send_method_)();  // Call this in destructor to send\n  union {  // At most one of these is used: union to keep the size low.\n    LogSink* sink_;  // nullptr or sink to send message to\n    std::vector<std::string>*\n        outvec_;            // nullptr or vector to push message onto\n",
                    "rendered": {
                      "text": "  LogSeverity severity_;  // What level is this LogMessage logged at?\n  int line_;              // line number where logging call is.\n  void (LogMessage::*send_method_)();  // Call this in destructor to send\n  union {  // At most one of these is used: union to keep the size low.\n    LogSink* sink_;  // nullptr or sink to send message to\n    std::vector<std::string>*\n        outvec_;            // nullptr or vector to push message onto\n",
                      "markdown": "`  LogSeverity severity_;  // What level is this LogMessage logged at?\n  int line_;              // line number where logging call is.\n  void (LogMessage::*send_method_)();  // Call this in destructor to send\n  union {  // At most one of these is used: union to keep the size low.\n    LogSink* sink_;  // nullptr or sink to send message to\n    std::vector<std::string>*\n        outvec_;            // nullptr or vector to push message onto\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2273,
                  "startColumn": 31,
                  "endLine": 2273,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  };\n\n  for (auto d : candidates) {\n    if (!d) continue;  // Empty env var\n\n    // Make sure we don't surprise anyone who's expecting a '/'\n    string dstr = d;\n",
                    "rendered": {
                      "text": "  };\n\n  for (auto d : candidates) {\n    if (!d) continue;  // Empty env var\n\n    // Make sure we don't surprise anyone who's expecting a '/'\n    string dstr = d;\n",
                      "markdown": "`  };\n\n  for (auto d : candidates) {\n    if (!d) continue;  // Empty env var\n\n    // Make sure we don't surprise anyone who's expecting a '/'\n    string dstr = d;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2258,
                  "startColumn": 47,
                  "endLine": 2258,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  list.push_back(\"C:\\\\TMP\\\\\");\n  list.push_back(\"C:\\\\TEMP\\\\\");\n#else\n  // Directories, in order of preference. If we find a dir that\n  // exists, we stop adding other less-preferred dirs\n  const char* candidates[] = {\n      // Non-null only during unittest/regtest\n",
                    "rendered": {
                      "text": "  list.push_back(\"C:\\\\TMP\\\\\");\n  list.push_back(\"C:\\\\TEMP\\\\\");\n#else\n  // Directories, in order of preference. If we find a dir that\n  // exists, we stop adding other less-preferred dirs\n  const char* candidates[] = {\n      // Non-null only during unittest/regtest\n",
                      "markdown": "`  list.push_back(\"C:\\\\TMP\\\\\");\n  list.push_back(\"C:\\\\TEMP\\\\\");\n#else\n  // Directories, in order of preference. If we find a dir that\n  // exists, we stop adding other less-preferred dirs\n  const char* candidates[] = {\n      // Non-null only during unittest/regtest\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2249,
                  "startColumn": 28,
                  "endLine": 2249,
                  "endColumn": 34,
                  "snippet": {
                    "text": "static void GetTempDirectories(vector<string>& list) {\n  list.clear();\n#ifdef GLOG_OS_WINDOWS\n  // On windows we'll try to find a directory in this order:\n  //   C:/Documents & Settings/whomever/TEMP (or whatever GetTempPath() is)\n  //   C:/TMP/\n  //   C:/TEMP/\n",
                    "rendered": {
                      "text": "static void GetTempDirectories(vector<string>& list) {\n  list.clear();\n#ifdef GLOG_OS_WINDOWS\n  // On windows we'll try to find a directory in this order:\n  //   C:/Documents & Settings/whomever/TEMP (or whatever GetTempPath() is)\n  //   C:/TMP/\n  //   C:/TEMP/\n",
                      "markdown": "`static void GetTempDirectories(vector<string>& list) {\n  list.clear();\n#ifdef GLOG_OS_WINDOWS\n  // On windows we'll try to find a directory in this order:\n  //   C:/Documents & Settings/whomever/TEMP (or whatever GetTempPath() is)\n  //   C:/TMP/\n  //   C:/TEMP/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2228,
                  "startColumn": 39,
                  "endLine": 2228,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      if (use_logging) {\n        LOG(ERROR) << \"Unable to send mail to \" << dest;\n      } else {\n        fprintf(stderr, \"Unable to send mail to %s\\n\", dest);\n      }\n    }\n  }\n",
                    "rendered": {
                      "text": "      if (use_logging) {\n        LOG(ERROR) << \"Unable to send mail to \" << dest;\n      } else {\n        fprintf(stderr, \"Unable to send mail to %s\\n\", dest);\n      }\n    }\n  }\n",
                      "markdown": "`      if (use_logging) {\n        LOG(ERROR) << \"Unable to send mail to \" << dest;\n      } else {\n        fprintf(stderr, \"Unable to send mail to %s\\n\", dest);\n      }\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2226,
                  "startColumn": 37,
                  "endLine": 2226,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      return ok;\n    } else {\n      if (use_logging) {\n        LOG(ERROR) << \"Unable to send mail to \" << dest;\n      } else {\n        fprintf(stderr, \"Unable to send mail to %s\\n\", dest);\n      }\n",
                    "rendered": {
                      "text": "      return ok;\n    } else {\n      if (use_logging) {\n        LOG(ERROR) << \"Unable to send mail to \" << dest;\n      } else {\n        fprintf(stderr, \"Unable to send mail to %s\\n\", dest);\n      }\n",
                      "markdown": "`      return ok;\n    } else {\n      if (use_logging) {\n        LOG(ERROR) << \"Unable to send mail to \" << dest;\n      } else {\n        fprintf(stderr, \"Unable to send mail to %s\\n\", dest);\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2219,
                  "startColumn": 43,
                  "endLine": 2219,
                  "endColumn": 49,
                  "snippet": {
                    "text": "          LOG(ERROR) << \"Problems sending mail to \" << dest << \": \"\n                     << StrError(errno);\n        } else {\n          fprintf(stderr, \"Problems sending mail to %s: %s\\n\", dest,\n                  StrError(errno).c_str());\n        }\n      }\n",
                    "rendered": {
                      "text": "          LOG(ERROR) << \"Problems sending mail to \" << dest << \": \"\n                     << StrError(errno);\n        } else {\n          fprintf(stderr, \"Problems sending mail to %s: %s\\n\", dest,\n                  StrError(errno).c_str());\n        }\n      }\n",
                      "markdown": "`          LOG(ERROR) << \"Problems sending mail to \" << dest << \": \"\n                     << StrError(errno);\n        } else {\n          fprintf(stderr, \"Problems sending mail to %s: %s\\n\", dest,\n                  StrError(errno).c_str());\n        }\n      }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 2216,
                  "startColumn": 41,
                  "endLine": 2216,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      bool ok = pclose(pipe) != -1;\n      if (!ok) {\n        if (use_logging) {\n          LOG(ERROR) << \"Problems sending mail to \" << dest << \": \"\n                     << StrError(errno);\n        } else {\n          fprintf(stderr, \"Problems sending mail to %s: %s\\n\", dest,\n",
                    "rendered": {
                      "text": "      bool ok = pclose(pipe) != -1;\n      if (!ok) {\n        if (use_logging) {\n          LOG(ERROR) << \"Problems sending mail to \" << dest << \": \"\n                     << StrError(errno);\n        } else {\n          fprintf(stderr, \"Problems sending mail to %s: %s\\n\", dest,\n",
                      "markdown": "`      bool ok = pclose(pipe) != -1;\n      if (!ok) {\n        if (use_logging) {\n          LOG(ERROR) << \"Problems sending mail to \" << dest << \": \"\n                     << StrError(errno);\n        } else {\n          fprintf(stderr, \"Problems sending mail to %s: %s\\n\", dest,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1474,
                  "startColumn": 10,
                  "endLine": 1474,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    const auto last_modified_time =\n        std::chrono::system_clock::from_time_t(file_stat.st_mtime);\n    const auto diff = current_time - last_modified_time;\n    return diff >= overdue_;\n  }\n\n  // If failed to get file stat, don't return true!\n",
                    "rendered": {
                      "text": "    const auto last_modified_time =\n        std::chrono::system_clock::from_time_t(file_stat.st_mtime);\n    const auto diff = current_time - last_modified_time;\n    return diff >= overdue_;\n  }\n\n  // If failed to get file stat, don't return true!\n",
                      "markdown": "`    const auto last_modified_time =\n        std::chrono::system_clock::from_time_t(file_stat.st_mtime);\n    const auto diff = current_time - last_modified_time;\n    return diff >= overdue_;\n  }\n\n  // If failed to get file stat, don't return true!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1473,
                  "startColumn": 14,
                  "endLine": 1473,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  if (stat(filepath.c_str(), &file_stat) == 0) {\n    const auto last_modified_time =\n        std::chrono::system_clock::from_time_t(file_stat.st_mtime);\n    const auto diff = current_time - last_modified_time;\n    return diff >= overdue_;\n  }\n\n",
                    "rendered": {
                      "text": "  if (stat(filepath.c_str(), &file_stat) == 0) {\n    const auto last_modified_time =\n        std::chrono::system_clock::from_time_t(file_stat.st_mtime);\n    const auto diff = current_time - last_modified_time;\n    return diff >= overdue_;\n  }\n\n",
                      "markdown": "`  if (stat(filepath.c_str(), &file_stat) == 0) {\n    const auto last_modified_time =\n        std::chrono::system_clock::from_time_t(file_stat.st_mtime);\n    const auto diff = current_time - last_modified_time;\n    return diff >= overdue_;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1467,
                  "startColumn": 33,
                  "endLine": 1467,
                  "endColumn": 39,
                  "snippet": {
                    "text": "bool LogCleaner::IsLogLastModifiedOver(\n    const string& filepath,\n    const std::chrono::system_clock::time_point& current_time) const {\n  // Try to get the last modified time of this file.\n  struct stat file_stat;\n\n  if (stat(filepath.c_str(), &file_stat) == 0) {\n",
                    "rendered": {
                      "text": "bool LogCleaner::IsLogLastModifiedOver(\n    const string& filepath,\n    const std::chrono::system_clock::time_point& current_time) const {\n  // Try to get the last modified time of this file.\n  struct stat file_stat;\n\n  if (stat(filepath.c_str(), &file_stat) == 0) {\n",
                      "markdown": "`bool LogCleaner::IsLogLastModifiedOver(\n    const string& filepath,\n    const std::chrono::system_clock::time_point& current_time) const {\n  // Try to get the last modified time of this file.\n  struct stat file_stat;\n\n  if (stat(filepath.c_str(), &file_stat) == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1156,
                  "startColumn": 64,
                  "endLine": 1156,
                  "endColumn": 70,
                  "snippet": {
                    "text": "      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n      // and 4354 is the pid of the logging process.  The date & time reflect\n      // when the file was created for output.\n      //\n      // Where does the file get put?  Successively try the directories\n",
                    "rendered": {
                      "text": "      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n      // and 4354 is the pid of the logging process.  The date & time reflect\n      // when the file was created for output.\n      //\n      // Where does the file get put?  Successively try the directories\n",
                      "markdown": "`      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n      // and 4354 is the pid of the logging process.  The date & time reflect\n      // when the file was created for output.\n      //\n      // Where does the file get put?  Successively try the directories\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1155,
                  "startColumn": 57,
                  "endLine": 1155,
                  "endColumn": 63,
                  "snippet": {
                    "text": "      // \"<program name>.<hostname>.<user name>.log.<severity level>.\".  So\n      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n      // and 4354 is the pid of the logging process.  The date & time reflect\n      // when the file was created for output.\n      //\n",
                    "rendered": {
                      "text": "      // \"<program name>.<hostname>.<user name>.log.<severity level>.\".  So\n      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n      // and 4354 is the pid of the logging process.  The date & time reflect\n      // when the file was created for output.\n      //\n",
                      "markdown": "`      // \"<program name>.<hostname>.<user name>.log.<severity level>.\".  So\n      // logfiles will have names like\n      // webserver.examplehost.root.log.INFO.19990817-150000.4354, where\n      // 19990817 is a date (1999 August 17), 150000 is a time (15:00:00),\n      // and 4354 is the pid of the logging process.  The date & time reflect\n      // when the file was created for output.\n      //\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 68,
                  "endLine": 1119,
                  "snippet": {
                    "text": "\n  // If there's no destination file, make one before outputting\n  if (file_ == nullptr) {\n    // Try to rollover the log file every 32 log messages.  The only time\n    // this could matter would be when we have trouble creating the log\n    // file.  If that happens, we'll lose lots of log messages, of course!\n    if (++rollover_attempt_ != kRolloverAttemptFrequency) return;\n    rollover_attempt_ = 0;\n",
                    "rendered": {
                      "text": "\n  // If there's no destination file, make one before outputting\n  if (file_ == nullptr) {\n    // Try to rollover the log file every 32 log messages.  The only time\n    // this could matter would be when we have trouble creating the log\n    // file.  If that happens, we'll lose lots of log messages, of course!\n    if (++rollover_attempt_ != kRolloverAttemptFrequency) return;\n    rollover_attempt_ = 0;\n",
                      "markdown": "`\n  // If there's no destination file, make one before outputting\n  if (file_ == nullptr) {\n    // Try to rollover the log file every 32 log messages.  The only time\n    // this could matter would be when we have trouble creating the log\n    // file.  If that happens, we'll lose lots of log messages, of course!\n    if (++rollover_attempt_ != kRolloverAttemptFrequency) return;\n    rollover_attempt_ = 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1048,
                  "startColumn": 36,
                  "endLine": 1048,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  }\n#endif\n  // We try to create a symlink called <program_name>.<severity>,\n  // which is easier to use.  (Every time we create a new logfile,\n  // we destroy the old symlink and create a new one, so it always\n  // points to the latest logfile.)  If it fails, we're sad but it's\n  // no error.\n",
                    "rendered": {
                      "text": "  }\n#endif\n  // We try to create a symlink called <program_name>.<severity>,\n  // which is easier to use.  (Every time we create a new logfile,\n  // we destroy the old symlink and create a new one, so it always\n  // points to the latest logfile.)  If it fails, we're sad but it's\n  // no error.\n",
                      "markdown": "`  }\n#endif\n  // We try to create a symlink called <program_name>.<severity>,\n  // which is easier to use.  (Every time we create a new logfile,\n  // we destroy the old symlink and create a new one, so it always\n  // points to the latest logfile.)  If it fails, we're sad but it's\n  // no error.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 15,
                  "endLine": 1016,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  // (write) and we will never read from it inside the process.\n  // TODO: windows implementation of this (as flock is not available on\n  // mingw).\n  static struct flock w_lock;\n\n  w_lock.l_type = F_WRLCK;\n  w_lock.l_start = 0;\n",
                    "rendered": {
                      "text": "  // (write) and we will never read from it inside the process.\n  // TODO: windows implementation of this (as flock is not available on\n  // mingw).\n  static struct flock w_lock;\n\n  w_lock.l_type = F_WRLCK;\n  w_lock.l_start = 0;\n",
                      "markdown": "`  // (write) and we will never read from it inside the process.\n  // TODO: windows implementation of this (as flock is not available on\n  // mingw).\n  static struct flock w_lock;\n\n  w_lock.l_type = F_WRLCK;\n  w_lock.l_start = 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging.cc"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 45,
                  "endLine": 1014,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  // This will work after a fork as it is not inherited (not stored in the fd).\n  // Lock will not be lost because the file is opened with exclusive lock\n  // (write) and we will never read from it inside the process.\n  // TODO: windows implementation of this (as flock is not available on\n  // mingw).\n  static struct flock w_lock;\n\n",
                    "rendered": {
                      "text": "  // This will work after a fork as it is not inherited (not stored in the fd).\n  // Lock will not be lost because the file is opened with exclusive lock\n  // (write) and we will never read from it inside the process.\n  // TODO: windows implementation of this (as flock is not available on\n  // mingw).\n  static struct flock w_lock;\n\n",
                      "markdown": "`  // This will work after a fork as it is not inherited (not stored in the fd).\n  // Lock will not be lost because the file is opened with exclusive lock\n  // (write) and we will never read from it inside the process.\n  // TODO: windows implementation of this (as flock is not available on\n  // mingw).\n  static struct flock w_lock;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_striplog_test.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 34,
                  "endLine": 44,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        exit 1\n    fi\n\n    strings -n 10 $binary | sort | awk '/TESTMESSAGE/ {printf \"%s \", $2}'\n}\n\n# Die if \"$1\" != \"$2\", print $3 as death reason\n",
                    "rendered": {
                      "text": "        exit 1\n    fi\n\n    strings -n 10 $binary | sort | awk '/TESTMESSAGE/ {printf \"%s \", $2}'\n}\n\n# Die if \"$1\" != \"$2\", print $3 as death reason\n",
                      "markdown": "`        exit 1\n    fi\n\n    strings -n 10 $binary | sort | awk '/TESTMESSAGE/ {printf \"%s \", $2}'\n}\n\n# Die if \"$1\" != \"$2\", print $3 as death reason\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_striplog_test.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 27,
                  "endLine": 44,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        exit 1\n    fi\n\n    strings -n 10 $binary | sort | awk '/TESTMESSAGE/ {printf \"%s \", $2}'\n}\n\n# Die if \"$1\" != \"$2\", print $3 as death reason\n",
                    "rendered": {
                      "text": "        exit 1\n    fi\n\n    strings -n 10 $binary | sort | awk '/TESTMESSAGE/ {printf \"%s \", $2}'\n}\n\n# Die if \"$1\" != \"$2\", print $3 as death reason\n",
                      "markdown": "`        exit 1\n    fi\n\n    strings -n 10 $binary | sort | awk '/TESTMESSAGE/ {printf \"%s \", $2}'\n}\n\n# Die if \"$1\" != \"$2\", print $3 as death reason\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_striplog_test.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 25,
                  "endLine": 40,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    elif test -e \"$1.exe\"; then\n        binary=\"$1.exe\"\n    else\n        echo \"We coundn't find $1 binary.\"\n        exit 1\n    fi\n\n",
                    "rendered": {
                      "text": "    elif test -e \"$1.exe\"; then\n        binary=\"$1.exe\"\n    else\n        echo \"We coundn't find $1 binary.\"\n        exit 1\n    fi\n\n",
                      "markdown": "`    elif test -e \"$1.exe\"; then\n        binary=\"$1.exe\"\n    else\n        echo \"We coundn't find $1 binary.\"\n        exit 1\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/cmake/TestPackageConfig.cmake"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 29,
                  "endLine": 16,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  # modified again (e.g., for MinGW AppVeyor CI builds) by adding back the\n  # directory containing git.exe. Incidentally, the Git installation directory\n  # also contains sh.exe which causes MinGW Makefile generation to fail.\n  COMMAND ${CMAKE_COMMAND} -E env PATH=${PATH}\n  ${CMAKE_COMMAND} -C ${INITIAL_CACHE}\n    -G ${GENERATOR}\n    ${_ADDITIONAL_ARGS}\n",
                    "rendered": {
                      "text": "  # modified again (e.g., for MinGW AppVeyor CI builds) by adding back the\n  # directory containing git.exe. Incidentally, the Git installation directory\n  # also contains sh.exe which causes MinGW Makefile generation to fail.\n  COMMAND ${CMAKE_COMMAND} -E env PATH=${PATH}\n  ${CMAKE_COMMAND} -C ${INITIAL_CACHE}\n    -G ${GENERATOR}\n    ${_ADDITIONAL_ARGS}\n",
                      "markdown": "`  # modified again (e.g., for MinGW AppVeyor CI builds) by adding back the\n  # directory containing git.exe. Incidentally, the Git installation directory\n  # also contains sh.exe which causes MinGW Makefile generation to fail.\n  COMMAND ${CMAKE_COMMAND} -E env PATH=${PATH}\n  ${CMAKE_COMMAND} -C ${INITIAL_CACHE}\n    -G ${GENERATOR}\n    ${_ADDITIONAL_ARGS}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/cmake/TestPackageConfig.cmake"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 51,
                  "endLine": 14,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  # Capture the PATH environment variable content set during project generation\n  # stage. This is required because later during the build stage the PATH is\n  # modified again (e.g., for MinGW AppVeyor CI builds) by adding back the\n  # directory containing git.exe. Incidentally, the Git installation directory\n  # also contains sh.exe which causes MinGW Makefile generation to fail.\n  COMMAND ${CMAKE_COMMAND} -E env PATH=${PATH}\n  ${CMAKE_COMMAND} -C ${INITIAL_CACHE}\n",
                    "rendered": {
                      "text": "  # Capture the PATH environment variable content set during project generation\n  # stage. This is required because later during the build stage the PATH is\n  # modified again (e.g., for MinGW AppVeyor CI builds) by adding back the\n  # directory containing git.exe. Incidentally, the Git installation directory\n  # also contains sh.exe which causes MinGW Makefile generation to fail.\n  COMMAND ${CMAKE_COMMAND} -E env PATH=${PATH}\n  ${CMAKE_COMMAND} -C ${INITIAL_CACHE}\n",
                      "markdown": "`  # Capture the PATH environment variable content set during project generation\n  # stage. This is required because later during the build stage the PATH is\n  # modified again (e.g., for MinGW AppVeyor CI builds) by adding back the\n  # directory containing git.exe. Incidentally, the Git installation directory\n  # also contains sh.exe which causes MinGW Makefile generation to fail.\n  COMMAND ${CMAKE_COMMAND} -E env PATH=${PATH}\n  ${CMAKE_COMMAND} -C ${INITIAL_CACHE}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/macos.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 14,
                  "endLine": 41,
                  "snippet": {
                    "text": "          echo 'LDFLAGS=--coverage' >> $GITHUB_ENV\n\n      - name: Configure\n        shell: bash\n        env:\n          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror -pedantic-errors ${{env.CXXFLAGS}}\n        run: |\n          cmake -S . -B build_${{matrix.build_type}} \\\n",
                    "rendered": {
                      "text": "          echo 'LDFLAGS=--coverage' >> $GITHUB_ENV\n\n      - name: Configure\n        shell: bash\n        env:\n          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror -pedantic-errors ${{env.CXXFLAGS}}\n        run: |\n          cmake -S . -B build_${{matrix.build_type}} \\\n",
                      "markdown": "`          echo 'LDFLAGS=--coverage' >> $GITHUB_ENV\n\n      - name: Configure\n        shell: bash\n        env:\n          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror -pedantic-errors ${{env.CXXFLAGS}}\n        run: |\n          cmake -S . -B build_${{matrix.build_type}} \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/macos.yml"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 14,
                  "endLine": 41,
                  "snippet": {
                    "text": "          echo 'LDFLAGS=--coverage' >> $GITHUB_ENV\n\n      - name: Configure\n        shell: bash\n        env:\n          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror -pedantic-errors ${{env.CXXFLAGS}}\n        run: |\n          cmake -S . -B build_${{matrix.build_type}} \\\n",
                    "rendered": {
                      "text": "          echo 'LDFLAGS=--coverage' >> $GITHUB_ENV\n\n      - name: Configure\n        shell: bash\n        env:\n          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror -pedantic-errors ${{env.CXXFLAGS}}\n        run: |\n          cmake -S . -B build_${{matrix.build_type}} \\\n",
                      "markdown": "`          echo 'LDFLAGS=--coverage' >> $GITHUB_ENV\n\n      - name: Configure\n        shell: bash\n        env:\n          CXXFLAGS: -Wall -Wextra -Wsign-conversion -Wtautological-compare -Wformat-nonliteral -Wundef -Werror -pedantic-errors ${{env.CXXFLAGS}}\n        run: |\n          cmake -S . -B build_${{matrix.build_type}} \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 5,
                  "endLine": 1,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# Set update schedule for GitHub Actions\n\nversion: 2\nupdates:\n",
                    "rendered": {
                      "text": "# Set update schedule for GitHub Actions\n\nversion: 2\nupdates:\n",
                      "markdown": "`# Set update schedule for GitHub Actions\n\nversion: 2\nupdates:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/contribute.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 14,
                  "endLine": 48,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n    for each change. This provides consistency throughout the project,\n    and ensures that commit messages are able to be formatted properly\n    by various git tools.\n4.  Finally, push the commits to your fork and submit a [pull\n    request](https://help.github.com/articles/creating-a-pull-request).\n",
                    "rendered": {
                      "text": "    messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n    for each change. This provides consistency throughout the project,\n    and ensures that commit messages are able to be formatted properly\n    by various git tools.\n4.  Finally, push the commits to your fork and submit a [pull\n    request](https://help.github.com/articles/creating-a-pull-request).\n",
                      "markdown": "`    messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n    for each change. This provides consistency throughout the project,\n    and ensures that commit messages are able to be formatted properly\n    by various git tools.\n4.  Finally, push the commits to your fork and submit a [pull\n    request](https://help.github.com/articles/creating-a-pull-request).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 63,
                  "snippet": {
                    "text": "  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n  cmake --build build --target install\n  ```\n\nOnce successfully built, glog can be [integrated into own projects](usage.md).\n",
                    "rendered": {
                      "text": "  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n  cmake --build build --target install\n  ```\n\nOnce successfully built, glog can be [integrated into own projects](usage.md).\n",
                      "markdown": "`  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n  cmake --build build --target install\n  ```\n\nOnce successfully built, glog can be [integrated into own projects](usage.md).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 59,
                  "snippet": {
                    "text": "  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n",
                    "rendered": {
                      "text": "  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n",
                      "markdown": "`  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "endLine": 55,
                  "snippet": {
                    "text": "  --help` for the available generators. Also see `-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with `-T host=x64`.\n3.  Afterwards, generated files can be used to compile the project.\n  ``` bash\n  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n",
                    "rendered": {
                      "text": "  --help` for the available generators. Also see `-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with `-T host=x64`.\n3.  Afterwards, generated files can be used to compile the project.\n  ``` bash\n  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n",
                      "markdown": "`  --help` for the available generators. Also see `-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with `-T host=x64`.\n3.  Afterwards, generated files can be used to compile the project.\n  ``` bash\n  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 5,
                  "endLine": 46,
                  "snippet": {
                    "text": "  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n  ``` bash\n  cmake -S . -B build -G \"Unix Makefiles\"\n  ```\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n",
                    "rendered": {
                      "text": "  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n  ``` bash\n  cmake -S . -B build -G \"Unix Makefiles\"\n  ```\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n",
                      "markdown": "`  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n  ``` bash\n  cmake -S . -B build -G \"Unix Makefiles\"\n  ```\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 5,
                  "endLine": 41,
                  "snippet": {
                    "text": "Make as build tool is as follows:\n\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n",
                    "rendered": {
                      "text": "Make as build tool is as follows:\n\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n",
                      "markdown": "`Make as build tool is as follows:\n\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 63,
                  "snippet": {
                    "text": "  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n  cmake --build build --target install\n  ```\n\nOnce successfully built, glog can be [integrated into own projects](usage.md).\n",
                    "rendered": {
                      "text": "  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n  cmake --build build --target install\n  ```\n\nOnce successfully built, glog can be [integrated into own projects](usage.md).\n",
                      "markdown": "`  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n  cmake --build build --target install\n  ```\n\nOnce successfully built, glog can be [integrated into own projects](usage.md).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "endLine": 59,
                  "snippet": {
                    "text": "  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n",
                    "rendered": {
                      "text": "  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n",
                      "markdown": "`  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n  cmake --build build --target test\n  ```\n5.  Install the built files (optional).\n  ``` bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 5,
                  "endLine": 55,
                  "snippet": {
                    "text": "  --help` for the available generators. Also see `-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with `-T host=x64`.\n3.  Afterwards, generated files can be used to compile the project.\n  ``` bash\n  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n",
                    "rendered": {
                      "text": "  --help` for the available generators. Also see `-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with `-T host=x64`.\n3.  Afterwards, generated files can be used to compile the project.\n  ``` bash\n  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n",
                      "markdown": "`  --help` for the available generators. Also see `-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with `-T host=x64`.\n3.  Afterwards, generated files can be used to compile the project.\n  ``` bash\n  cmake --build build\n  ```\n4.  Test the build software (optional).\n  ``` bash\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 5,
                  "endLine": 46,
                  "snippet": {
                    "text": "  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n  ``` bash\n  cmake -S . -B build -G \"Unix Makefiles\"\n  ```\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n",
                    "rendered": {
                      "text": "  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n  ``` bash\n  cmake -S . -B build -G \"Unix Makefiles\"\n  ```\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n",
                      "markdown": "`  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n  ``` bash\n  cmake -S . -B build -G \"Unix Makefiles\"\n  ```\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 1,
                  "endLine": 41,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n",
                    "rendered": {
                      "text": "\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n",
                      "markdown": "`\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/build.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 5,
                  "endLine": 41,
                  "snippet": {
                    "text": "Make as build tool is as follows:\n\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n",
                    "rendered": {
                      "text": "Make as build tool is as follows:\n\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n",
                      "markdown": "`Make as build tool is as follows:\n\n1.  Clone the repository and change into source directory.\n  ``` bash\n  git clone https://github.com/google/glog.git\n  cd glog\n  ```\n2.  Run CMake to configure the build tree.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/log_cleaner.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 28,
                  "endLine": 21,
                  "endColumn": 32,
                  "snippet": {
                    "text": "performed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\ngoogle::DisableLogCleaner();\n```\n",
                    "rendered": {
                      "text": "performed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\ngoogle::DisableLogCleaner();\n```\n",
                      "markdown": "`performed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\ngoogle::DisableLogCleaner();\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/log_cleaner.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 35,
                  "endLine": 21,
                  "endColumn": 41,
                  "snippet": {
                    "text": "performed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\ngoogle::DisableLogCleaner();\n```\n",
                    "rendered": {
                      "text": "performed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\ngoogle::DisableLogCleaner();\n```\n",
                      "markdown": "`performed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\ngoogle::DisableLogCleaner();\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/log_cleaner.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 8,
                  "endLine": 19,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nAnd then glog will check if there are overdue logs whenever a flush is\nperformed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\n",
                    "rendered": {
                      "text": "\nAnd then glog will check if there are overdue logs whenever a flush is\nperformed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\n",
                      "markdown": "`\nAnd then glog will check if there are overdue logs whenever a flush is\nperformed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be `unlink`()ed.\n\nThis feature can be disabled at any time (if it has been enabled) using\n``` cpp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/failures.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "endLine": 11,
                  "endColumn": 19,
                  "snippet": {
                    "text": "google::InstallFailureSignalHandler()`. The following is an example of output\nfrom the signal handler.\n\n    *** Aborted at 1225095260 (unix time) try \"date -d @1225095260\" if you are using GNU date ***\n    *** SIGSEGV (@0x0) received by PID 17711 (TID 0x7f893090a6f0) from PID 0; stack trace: ***\n    PC: @           0x412eb1 TestWaitingLogSink::send()\n        @     0x7f892fb417d0 (unknown)\n",
                    "rendered": {
                      "text": "google::InstallFailureSignalHandler()`. The following is an example of output\nfrom the signal handler.\n\n    *** Aborted at 1225095260 (unix time) try \"date -d @1225095260\" if you are using GNU date ***\n    *** SIGSEGV (@0x0) received by PID 17711 (TID 0x7f893090a6f0) from PID 0; stack trace: ***\n    PC: @           0x412eb1 TestWaitingLogSink::send()\n        @     0x7f892fb417d0 (unknown)\n",
                      "markdown": "`google::InstallFailureSignalHandler()`. The following is an example of output\nfrom the signal handler.\n\n    *** Aborted at 1225095260 (unix time) try \"date -d @1225095260\" if you are using GNU date ***\n    *** SIGSEGV (@0x0) received by PID 17711 (TID 0x7f893090a6f0) from PID 0; stack trace: ***\n    PC: @           0x412eb1 TestWaitingLogSink::send()\n        @     0x7f892fb417d0 (unknown)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/docs/failures.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 20,
                  "endLine": 44,
                  "endColumn": 28,
                  "snippet": {
                    "text": "2. The message length in characters.\n\n!!! warning \"Possible overflow errors\"\n    Users should not expect the `message` string to be null-terminated.\n\n## User-defined Failure Function\n\n",
                    "rendered": {
                      "text": "2. The message length in characters.\n\n!!! warning \"Possible overflow errors\"\n    Users should not expect the `message` string to be null-terminated.\n\n## User-defined Failure Function\n\n",
                      "markdown": "`2. The message length in characters.\n\n!!! warning \"Possible overflow errors\"\n    Users should not expect the `message` string to be null-terminated.\n\n## User-defined Failure Function\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 40,
                  "endLine": 797,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      out_size -= static_cast<size_t>(num_bytes_written);\n    }\n  }\n  if (!GetSymbolFromObjectFile(object_fd.get(), pc0, out, out_size,\n                               base_address)) {\n    if (out[1] && !g_symbolize_callback) {\n      // The object file containing PC was opened successfully however the\n",
                    "rendered": {
                      "text": "      out_size -= static_cast<size_t>(num_bytes_written);\n    }\n  }\n  if (!GetSymbolFromObjectFile(object_fd.get(), pc0, out, out_size,\n                               base_address)) {\n    if (out[1] && !g_symbolize_callback) {\n      // The object file containing PC was opened successfully however the\n",
                      "markdown": "`      out_size -= static_cast<size_t>(num_bytes_written);\n    }\n  }\n  if (!GetSymbolFromObjectFile(object_fd.get(), pc0, out, out_size,\n                               base_address)) {\n    if (out[1] && !g_symbolize_callback) {\n      // The object file containing PC was opened successfully however the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 38,
                  "endLine": 791,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    // wrong for prelinked shared libraries and PIE executables.\n    uint64_t relocation = (elf_type == ET_DYN) ? start_address : 0;\n    int num_bytes_written =\n        g_symbolize_callback(object_fd.get(), pc, out, out_size, relocation);\n    if (num_bytes_written > 0) {\n      out += static_cast<size_t>(num_bytes_written);\n      out_size -= static_cast<size_t>(num_bytes_written);\n",
                    "rendered": {
                      "text": "    // wrong for prelinked shared libraries and PIE executables.\n    uint64_t relocation = (elf_type == ET_DYN) ? start_address : 0;\n    int num_bytes_written =\n        g_symbolize_callback(object_fd.get(), pc, out, out_size, relocation);\n    if (num_bytes_written > 0) {\n      out += static_cast<size_t>(num_bytes_written);\n      out_size -= static_cast<size_t>(num_bytes_written);\n",
                      "markdown": "`    // wrong for prelinked shared libraries and PIE executables.\n    uint64_t relocation = (elf_type == ET_DYN) ? start_address : 0;\n    int num_bytes_written =\n        g_symbolize_callback(object_fd.get(), pc, out, out_size, relocation);\n    if (num_bytes_written > 0) {\n      out += static_cast<size_t>(num_bytes_written);\n      out_size -= static_cast<size_t>(num_bytes_written);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 781,
                  "startColumn": 41,
                  "endLine": 781,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    // Failed to determine the object file containing PC.  Bail out.\n    return false;\n  }\n  int elf_type = FileGetElfType(object_fd.get());\n  if (elf_type == -1) {\n    return false;\n  }\n",
                    "rendered": {
                      "text": "    // Failed to determine the object file containing PC.  Bail out.\n    return false;\n  }\n  int elf_type = FileGetElfType(object_fd.get());\n  if (elf_type == -1) {\n    return false;\n  }\n",
                      "markdown": "`    // Failed to determine the object file containing PC.  Bail out.\n    return false;\n  }\n  int elf_type = FileGetElfType(object_fd.get());\n  if (elf_type == -1) {\n    return false;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 26,
                  "endLine": 594,
                  "endColumn": 31,
                  "snippet": {
                    "text": "          for (unsigned i = 0; i != ehdr.e_phnum; ++i) {\n            ElfW(Phdr) phdr;\n            if (ReadFromOffsetExact(\n                    mem_fd.get(), &phdr, sizeof(phdr),\n                    start_address + ehdr.e_phoff + i * sizeof(phdr)) &&\n                phdr.p_type == PT_LOAD && phdr.p_offset == 0) {\n              base_address = start_address - phdr.p_vaddr;\n",
                    "rendered": {
                      "text": "          for (unsigned i = 0; i != ehdr.e_phnum; ++i) {\n            ElfW(Phdr) phdr;\n            if (ReadFromOffsetExact(\n                    mem_fd.get(), &phdr, sizeof(phdr),\n                    start_address + ehdr.e_phoff + i * sizeof(phdr)) &&\n                phdr.p_type == PT_LOAD && phdr.p_offset == 0) {\n              base_address = start_address - phdr.p_vaddr;\n",
                      "markdown": "`          for (unsigned i = 0; i != ehdr.e_phnum; ++i) {\n            ElfW(Phdr) phdr;\n            if (ReadFromOffsetExact(\n                    mem_fd.get(), &phdr, sizeof(phdr),\n                    start_address + ehdr.e_phoff + i * sizeof(phdr)) &&\n                phdr.p_type == PT_LOAD && phdr.p_offset == 0) {\n              base_address = start_address - phdr.p_vaddr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 574,
                  "startColumn": 34,
                  "endLine": 574,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    ElfW(Ehdr) ehdr;\n    // Skip non-readable maps.\n    if (flags_start[0] == 'r' &&\n        ReadFromOffsetExact(mem_fd.get(), &ehdr, sizeof(ElfW(Ehdr)),\n                            start_address) &&\n        memcmp(ehdr.e_ident, ELFMAG, SELFMAG) == 0) {\n      switch (ehdr.e_type) {\n",
                    "rendered": {
                      "text": "    ElfW(Ehdr) ehdr;\n    // Skip non-readable maps.\n    if (flags_start[0] == 'r' &&\n        ReadFromOffsetExact(mem_fd.get(), &ehdr, sizeof(ElfW(Ehdr)),\n                            start_address) &&\n        memcmp(ehdr.e_ident, ELFMAG, SELFMAG) == 0) {\n      switch (ehdr.e_type) {\n",
                      "markdown": "`    ElfW(Ehdr) ehdr;\n    // Skip non-readable maps.\n    if (flags_start[0] == 'r' &&\n        ReadFromOffsetExact(mem_fd.get(), &ehdr, sizeof(ElfW(Ehdr)),\n                            start_address) &&\n        memcmp(ehdr.e_ident, ELFMAG, SELFMAG) == 0) {\n      switch (ehdr.e_type) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 27,
                  "endLine": 530,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  // Iterate over maps and look for the map containing the pc.  Then\n  // look into the symbol tables inside.\n  char buf[1024];  // Big enough for line of sane /proc/self/maps\n  LineReader reader(maps_fd.get(), buf, sizeof(buf), 0);\n  while (true) {\n    const char* cursor;\n    const char* eol;\n",
                    "rendered": {
                      "text": "  // Iterate over maps and look for the map containing the pc.  Then\n  // look into the symbol tables inside.\n  char buf[1024];  // Big enough for line of sane /proc/self/maps\n  LineReader reader(maps_fd.get(), buf, sizeof(buf), 0);\n  while (true) {\n    const char* cursor;\n    const char* eol;\n",
                      "markdown": "`  // Iterate over maps and look for the map containing the pc.  Then\n  // look into the symbol tables inside.\n  char buf[1024];  // Big enough for line of sane /proc/self/maps\n  LineReader reader(maps_fd.get(), buf, sizeof(buf), 0);\n  while (true) {\n    const char* cursor;\n    const char* eol;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 929,
                  "startColumn": 33,
                  "endLine": 929,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      std::size_t fnlen = std::strlen(line.FileName);\n      // Determine the number of digits (base 10) necessary to represent the\n      // line number\n      std::size_t digits = 1;  // At least one digit required\n      for (DWORD value = line.LineNumber; (value /= 10) != 0; ++digits) {\n      }\n      constexpr std::size_t extralen = 4;  // space + parens () + :\n",
                    "rendered": {
                      "text": "      std::size_t fnlen = std::strlen(line.FileName);\n      // Determine the number of digits (base 10) necessary to represent the\n      // line number\n      std::size_t digits = 1;  // At least one digit required\n      for (DWORD value = line.LineNumber; (value /= 10) != 0; ++digits) {\n      }\n      constexpr std::size_t extralen = 4;  // space + parens () + :\n",
                      "markdown": "`      std::size_t fnlen = std::strlen(line.FileName);\n      // Determine the number of digits (base 10) necessary to represent the\n      // line number\n      std::size_t digits = 1;  // At least one digit required\n      for (DWORD value = line.LineNumber; (value /= 10) != 0; ++digits) {\n      }\n      constexpr std::size_t extralen = 4;  // space + parens () + :\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 59,
                  "endLine": 677,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  char* start = buf;\n\n  // Loop until we have converted the entire number. Output at least one\n  // character (i.e. '0').\n  char* ptr = start;\n  do {\n",
                    "rendered": {
                      "text": "\n  char* start = buf;\n\n  // Loop until we have converted the entire number. Output at least one\n  // character (i.e. '0').\n  char* ptr = start;\n  do {\n",
                      "markdown": "`\n  char* start = buf;\n\n  // Loop until we have converted the entire number. Output at least one\n  // character (i.e. '0').\n  char* ptr = start;\n  do {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 27,
                  "endLine": 664,
                  "endColumn": 31,
                  "snippet": {
                    "text": "// NOTE: code from sandbox/linux/seccomp-bpf/demo.cc.\nstatic char* itoa_r(uintptr_t i, char* buf, size_t sz, unsigned base,\n                    size_t padding) {\n  // Make sure we can write at least one NUL byte.\n  size_t n = 1;\n  if (n > sz) {\n    return nullptr;\n",
                    "rendered": {
                      "text": "// NOTE: code from sandbox/linux/seccomp-bpf/demo.cc.\nstatic char* itoa_r(uintptr_t i, char* buf, size_t sz, unsigned base,\n                    size_t padding) {\n  // Make sure we can write at least one NUL byte.\n  size_t n = 1;\n  if (n > sz) {\n    return nullptr;\n",
                      "markdown": "`// NOTE: code from sandbox/linux/seccomp-bpf/demo.cc.\nstatic char* itoa_r(uintptr_t i, char* buf, size_t sz, unsigned base,\n                    size_t padding) {\n  // Make sure we can write at least one NUL byte.\n  size_t n = 1;\n  if (n > sz) {\n    return nullptr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 11,
                  "endLine": 629,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    ++cursor;  // Skip ' '.\n\n    // Skip to file name.  \"cursor\" now points to dev.  We need to\n    // skip at least two spaces for dev and inode.\n    int num_spaces = 0;\n    while (cursor < eol) {\n      if (*cursor == ' ') {\n",
                    "rendered": {
                      "text": "    ++cursor;  // Skip ' '.\n\n    // Skip to file name.  \"cursor\" now points to dev.  We need to\n    // skip at least two spaces for dev and inode.\n    int num_spaces = 0;\n    while (cursor < eol) {\n      if (*cursor == ' ') {\n",
                      "markdown": "`    ++cursor;  // Skip ' '.\n\n    // Skip to file name.  \"cursor\" now points to dev.  We need to\n    // skip at least two spaces for dev and inode.\n    int num_spaces = 0;\n    while (cursor < eol) {\n      if (*cursor == ' ') {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 16,
                  "endLine": 565,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    while (cursor < eol && *cursor != ' ') {\n      ++cursor;\n    }\n    // We expect at least four letters for flags (ex. \"r-xp\").\n    if (cursor == eol || cursor < flags_start + 4) {\n      return nullptr;  // Malformed line.\n    }\n",
                    "rendered": {
                      "text": "    while (cursor < eol && *cursor != ' ') {\n      ++cursor;\n    }\n    // We expect at least four letters for flags (ex. \"r-xp\").\n    if (cursor == eol || cursor < flags_start + 4) {\n      return nullptr;  // Malformed line.\n    }\n",
                      "markdown": "`    while (cursor < eol && *cursor != ' ') {\n      ++cursor;\n    }\n    // We expect at least four letters for flags (ex. \"r-xp\").\n    if (cursor == eol || cursor < flags_start + 4) {\n      return nullptr;  // Malformed line.\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 39,
                  "endLine": 315,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    const size_t NUM_SYMBOLS = 64U;\n#    endif\n\n    // Read at most NUM_SYMBOLS symbols at once to save read() calls.\n    ElfW(Sym) buf[NUM_SYMBOLS];\n    size_t num_symbols_to_read = std::min(NUM_SYMBOLS, num_symbols - i);\n    const ssize_t len =\n",
                    "rendered": {
                      "text": "    const size_t NUM_SYMBOLS = 64U;\n#    endif\n\n    // Read at most NUM_SYMBOLS symbols at once to save read() calls.\n    ElfW(Sym) buf[NUM_SYMBOLS];\n    size_t num_symbols_to_read = std::min(NUM_SYMBOLS, num_symbols - i);\n    const ssize_t len =\n",
                      "markdown": "`    const size_t NUM_SYMBOLS = 64U;\n#    endif\n\n    // Read at most NUM_SYMBOLS symbols at once to save read() calls.\n    ElfW(Sym) buf[NUM_SYMBOLS];\n    size_t num_symbols_to_read = std::min(NUM_SYMBOLS, num_symbols - i);\n    const ssize_t len =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 11,
                  "endLine": 315,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    const size_t NUM_SYMBOLS = 64U;\n#    endif\n\n    // Read at most NUM_SYMBOLS symbols at once to save read() calls.\n    ElfW(Sym) buf[NUM_SYMBOLS];\n    size_t num_symbols_to_read = std::min(NUM_SYMBOLS, num_symbols - i);\n    const ssize_t len =\n",
                    "rendered": {
                      "text": "    const size_t NUM_SYMBOLS = 64U;\n#    endif\n\n    // Read at most NUM_SYMBOLS symbols at once to save read() calls.\n    ElfW(Sym) buf[NUM_SYMBOLS];\n    size_t num_symbols_to_read = std::min(NUM_SYMBOLS, num_symbols - i);\n    const ssize_t len =\n",
                      "markdown": "`    const size_t NUM_SYMBOLS = 64U;\n#    endif\n\n    // Read at most NUM_SYMBOLS symbols at once to save read() calls.\n    ElfW(Sym) buf[NUM_SYMBOLS];\n    size_t num_symbols_to_read = std::min(NUM_SYMBOLS, num_symbols - i);\n    const ssize_t len =\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 36,
                  "endLine": 278,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    if (n_read == -1) {\n      return false;\n    } else if (static_cast<size_t>(n_read) != name_len) {\n      // Short read -- name could be at end of file.\n      continue;\n    }\n    if (memcmp(header_name, name, name_len) == 0) {\n",
                    "rendered": {
                      "text": "    if (n_read == -1) {\n      return false;\n    } else if (static_cast<size_t>(n_read) != name_len) {\n      // Short read -- name could be at end of file.\n      continue;\n    }\n    if (memcmp(header_name, name, name_len) == 0) {\n",
                      "markdown": "`    if (n_read == -1) {\n      return false;\n    } else if (static_cast<size_t>(n_read) != name_len) {\n      // Short read -- name could be at end of file.\n      continue;\n    }\n    if (memcmp(header_name, name, name_len) == 0) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 36,
                  "endLine": 213,
                  "endColumn": 40,
                  "snippet": {
                    "text": "                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n",
                    "rendered": {
                      "text": "                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n",
                      "markdown": "`                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 9,
                  "endLine": 213,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n",
                    "rendered": {
                      "text": "                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n",
                      "markdown": "`                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 43,
                  "endLine": 182,
                  "endColumn": 47,
                  "snippet": {
                    "text": "}\n\n// Try reading exactly \"count\" bytes from \"offset\" bytes in a file\n// pointed by \"fd\" into the buffer starting at \"buf\" while handling\n// short reads and EINTR.  On success, return true. Otherwise, return\n// false.\nstatic bool ReadFromOffsetExact(const int fd, void* buf, const size_t count,\n",
                    "rendered": {
                      "text": "}\n\n// Try reading exactly \"count\" bytes from \"offset\" bytes in a file\n// pointed by \"fd\" into the buffer starting at \"buf\" while handling\n// short reads and EINTR.  On success, return true. Otherwise, return\n// false.\nstatic bool ReadFromOffsetExact(const int fd, void* buf, const size_t count,\n",
                      "markdown": "`}\n\n// Try reading exactly \"count\" bytes from \"offset\" bytes in a file\n// pointed by \"fd\" into the buffer starting at \"buf\" while handling\n// short reads and EINTR.  On success, return true. Otherwise, return\n// false.\nstatic bool ReadFromOffsetExact(const int fd, void* buf, const size_t count,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 43,
                  "endLine": 154,
                  "endColumn": 47,
                  "snippet": {
                    "text": "}  // namespace\n\n// Read up to \"count\" bytes from \"offset\" in the file pointed by file\n// descriptor \"fd\" into the buffer starting at \"buf\" while handling short reads\n// and EINTR.  On success, return the number of bytes read.  Otherwise, return\n// -1.\nstatic ssize_t ReadFromOffset(const int fd, void* buf, const size_t count,\n",
                    "rendered": {
                      "text": "}  // namespace\n\n// Read up to \"count\" bytes from \"offset\" in the file pointed by file\n// descriptor \"fd\" into the buffer starting at \"buf\" while handling short reads\n// and EINTR.  On success, return the number of bytes read.  Otherwise, return\n// -1.\nstatic ssize_t ReadFromOffset(const int fd, void* buf, const size_t count,\n",
                      "markdown": "`}  // namespace\n\n// Read up to \"count\" bytes from \"offset\" in the file pointed by file\n// descriptor \"fd\" into the buffer starting at \"buf\" while handling short reads\n// and EINTR.  On success, return the number of bytes read.  Otherwise, return\n// -1.\nstatic ssize_t ReadFromOffset(const int fd, void* buf, const size_t count,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 26,
                  "endLine": 588,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          // the virtual address from the address where the ELF header was\n          // mapped to get the base address.\n          //\n          // If we fail to find a segment for file offset 0, use the address\n          // of the ELF header as the base address.\n          base_address = start_address;\n          for (unsigned i = 0; i != ehdr.e_phnum; ++i) {\n",
                    "rendered": {
                      "text": "          // the virtual address from the address where the ELF header was\n          // mapped to get the base address.\n          //\n          // If we fail to find a segment for file offset 0, use the address\n          // of the ELF header as the base address.\n          base_address = start_address;\n          for (unsigned i = 0; i != ehdr.e_phnum; ++i) {\n",
                      "markdown": "`          // the virtual address from the address where the ELF header was\n          // mapped to get the base address.\n          //\n          // If we fail to find a segment for file offset 0, use the address\n          // of the ELF header as the base address.\n          base_address = start_address;\n          for (unsigned i = 0; i != ehdr.e_phnum; ++i) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 12,
                  "endLine": 582,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          base_address = 0;\n          break;\n        case ET_DYN:\n          // Find the segment containing file offset 0. This will correspond\n          // to the ELF header that we just read. Normally this will have\n          // virtual address 0, but this is not guaranteed. We must subtract\n          // the virtual address from the address where the ELF header was\n",
                    "rendered": {
                      "text": "          base_address = 0;\n          break;\n        case ET_DYN:\n          // Find the segment containing file offset 0. This will correspond\n          // to the ELF header that we just read. Normally this will have\n          // virtual address 0, but this is not guaranteed. We must subtract\n          // the virtual address from the address where the ELF header was\n",
                      "markdown": "`          base_address = 0;\n          break;\n        case ET_DYN:\n          // Find the segment containing file offset 0. This will correspond\n          // to the ELF header that we just read. Normally this will have\n          // virtual address 0, but this is not guaranteed. We must subtract\n          // the virtual address from the address where the ELF header was\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 9,
                  "endLine": 565,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    while (cursor < eol && *cursor != ' ') {\n      ++cursor;\n    }\n    // We expect at least four letters for flags (ex. \"r-xp\").\n    if (cursor == eol || cursor < flags_start + 4) {\n      return nullptr;  // Malformed line.\n    }\n",
                    "rendered": {
                      "text": "    while (cursor < eol && *cursor != ' ') {\n      ++cursor;\n    }\n    // We expect at least four letters for flags (ex. \"r-xp\").\n    if (cursor == eol || cursor < flags_start + 4) {\n      return nullptr;  // Malformed line.\n    }\n",
                      "markdown": "`    while (cursor < eol && *cursor != ' ') {\n      ++cursor;\n    }\n    // We expect at least four letters for flags (ex. \"r-xp\").\n    if (cursor == eol || cursor < flags_start + 4) {\n      return nullptr;  // Malformed line.\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 41,
                  "endLine": 213,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n",
                    "rendered": {
                      "text": "                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n",
                      "markdown": "`                                                      const size_t sh_offset,\n                                                      ElfW(Word) type,\n                                                      ElfW(Shdr) * out) {\n  // Read at most 16 section headers at a time to save read calls.\n  ElfW(Shdr) buf[16];\n  for (size_t i = 0; i < sh_num;) {\n    const size_t num_bytes_left = (sh_num - i) * sizeof(buf[0]);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 44,
                  "endLine": 329,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  // (See WARNING above.)\n  //\n  // AFTER this point, we do unsafe things, like using LOG()!\n  // The process could be terminated or hung at any time.  We try to\n  // do more useful things first and riskier things later.\n\n  // Flush the logs before we do anything in case 'anything'\n",
                    "rendered": {
                      "text": "  // (See WARNING above.)\n  //\n  // AFTER this point, we do unsafe things, like using LOG()!\n  // The process could be terminated or hung at any time.  We try to\n  // do more useful things first and riskier things later.\n\n  // Flush the logs before we do anything in case 'anything'\n",
                      "markdown": "`  // (See WARNING above.)\n  //\n  // AFTER this point, we do unsafe things, like using LOG()!\n  // The process could be terminated or hung at any time.  We try to\n  // do more useful things first and riskier things later.\n\n  // Flush the logs before we do anything in case 'anything'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 37,
                  "endLine": 175,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  time_t time_in_sec = time(nullptr);\n  char buf[256];  // Big enough for time info.\n  MinimalFormatter formatter(buf, sizeof(buf));\n  formatter.AppendString(\"*** Aborted at \");\n  formatter.AppendUint64(static_cast<uint64>(time_in_sec), 10);\n  formatter.AppendString(\" (unix time)\");\n  formatter.AppendString(\" try \\\"date -d @\");\n",
                    "rendered": {
                      "text": "  time_t time_in_sec = time(nullptr);\n  char buf[256];  // Big enough for time info.\n  MinimalFormatter formatter(buf, sizeof(buf));\n  formatter.AppendString(\"*** Aborted at \");\n  formatter.AppendUint64(static_cast<uint64>(time_in_sec), 10);\n  formatter.AppendString(\" (unix time)\");\n  formatter.AppendString(\" try \\\"date -d @\");\n",
                      "markdown": "`  time_t time_in_sec = time(nullptr);\n  char buf[256];  // Big enough for time info.\n  MinimalFormatter formatter(buf, sizeof(buf));\n  formatter.AppendString(\"*** Aborted at \");\n  formatter.AppendUint64(static_cast<uint64>(time_in_sec), 10);\n  formatter.AppendString(\" (unix time)\");\n  formatter.AppendString(\" try \\\"date -d @\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 15,
                  "endLine": 296,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n\n  // First dump time info.\n  DumpTimeInfo();\n\n#if !defined(GLOG_OS_WINDOWS)\n",
                    "rendered": {
                      "text": "  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n\n  // First dump time info.\n  DumpTimeInfo();\n\n#if !defined(GLOG_OS_WINDOWS)\n",
                      "markdown": "`  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n\n  // First dump time info.\n  DumpTimeInfo();\n\n#if !defined(GLOG_OS_WINDOWS)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 40,
                  "endLine": 293,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n  // This is the first time we enter the signal handler.  We are going to\n  // do some interesting stuff from here.\n  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n\n  // First dump time info.\n",
                    "rendered": {
                      "text": "\n  // This is the first time we enter the signal handler.  We are going to\n  // do some interesting stuff from here.\n  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n\n  // First dump time info.\n",
                      "markdown": "`\n  // This is the first time we enter the signal handler.  We are going to\n  // do some interesting stuff from here.\n  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n\n  // First dump time info.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 22,
                  "endLine": 291,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#endif\n) {\n\n  // This is the first time we enter the signal handler.  We are going to\n  // do some interesting stuff from here.\n  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n",
                    "rendered": {
                      "text": "#endif\n) {\n\n  // This is the first time we enter the signal handler.  We are going to\n  // do some interesting stuff from here.\n  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n",
                      "markdown": "`#endif\n) {\n\n  // This is the first time we enter the signal handler.  We are going to\n  // do some interesting stuff from here.\n  // TODO(satorux): We might want to set timeout here using alarm(), but\n  // mixing alarm() and sleep() can be a bad idea.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 35,
                  "endLine": 173,
                  "endColumn": 41,
                  "snippet": {
                    "text": "// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n  char buf[256];  // Big enough for time info.\n  MinimalFormatter formatter(buf, sizeof(buf));\n  formatter.AppendString(\"*** Aborted at \");\n  formatter.AppendUint64(static_cast<uint64>(time_in_sec), 10);\n",
                    "rendered": {
                      "text": "// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n  char buf[256];  // Big enough for time info.\n  MinimalFormatter formatter(buf, sizeof(buf));\n  formatter.AppendString(\"*** Aborted at \");\n  formatter.AppendUint64(static_cast<uint64>(time_in_sec), 10);\n",
                      "markdown": "`// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n  char buf[256];  // Big enough for time info.\n  MinimalFormatter formatter(buf, sizeof(buf));\n  formatter.AppendString(\"*** Aborted at \");\n  formatter.AppendUint64(static_cast<uint64>(time_in_sec), 10);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 56,
                  "endLine": 169,
                  "endColumn": 62,
                  "snippet": {
                    "text": "// The writer function can be changed by InstallFailureWriter().\nvoid (*g_failure_writer)(const char* data, size_t size) = WriteToStderr;\n\n// Dumps time information.  We don't dump human-readable time information\n// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n",
                    "rendered": {
                      "text": "// The writer function can be changed by InstallFailureWriter().\nvoid (*g_failure_writer)(const char* data, size_t size) = WriteToStderr;\n\n// Dumps time information.  We don't dump human-readable time information\n// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n",
                      "markdown": "`// The writer function can be changed by InstallFailureWriter().\nvoid (*g_failure_writer)(const char* data, size_t size) = WriteToStderr;\n\n// Dumps time information.  We don't dump human-readable time information\n// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler.cc"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 8,
                  "endLine": 169,
                  "endColumn": 14,
                  "snippet": {
                    "text": "// The writer function can be changed by InstallFailureWriter().\nvoid (*g_failure_writer)(const char* data, size_t size) = WriteToStderr;\n\n// Dumps time information.  We don't dump human-readable time information\n// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n",
                    "rendered": {
                      "text": "// The writer function can be changed by InstallFailureWriter().\nvoid (*g_failure_writer)(const char* data, size_t size) = WriteToStderr;\n\n// Dumps time information.  We don't dump human-readable time information\n// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n",
                      "markdown": "`// The writer function can be changed by InstallFailureWriter().\nvoid (*g_failure_writer)(const char* data, size_t size) = WriteToStderr;\n\n// Dumps time information.  We don't dump human-readable time information\n// as localtime() is not guaranteed to be async signal safe.\nvoid DumpTimeInfo() {\n  time_t time_in_sec = time(nullptr);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 36,
                  "endLine": 125,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# Test for a case the program installs a custom failure writer that writes\n# stuff to stdout instead of stderr.\n$BINARY dump_to_stdout 1> signalhandler.out4\nfor pattern in SIGABRT main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out4; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                    "rendered": {
                      "text": "# Test for a case the program installs a custom failure writer that writes\n# stuff to stdout instead of stderr.\n$BINARY dump_to_stdout 1> signalhandler.out4\nfor pattern in SIGABRT main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out4; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                      "markdown": "`# Test for a case the program installs a custom failure writer that writes\n# stuff to stdout instead of stderr.\n$BINARY dump_to_stdout 1> signalhandler.out4\nfor pattern in SIGABRT main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out4; then\n    die \"'$pattern' should appear in the output\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 62,
                  "endLine": 116,
                  "endColumn": 66,
                  "snippet": {
                    "text": "$BINARY die_in_thread 2> signalhandler.out3\nEXPECTED_TID=\"`sed 's/ .*//; q' signalhandler.out3`\"\n\nfor pattern in SIGFPE DieInThread \"TID $EXPECTED_TID\" \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out3; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                    "rendered": {
                      "text": "$BINARY die_in_thread 2> signalhandler.out3\nEXPECTED_TID=\"`sed 's/ .*//; q' signalhandler.out3`\"\n\nfor pattern in SIGFPE DieInThread \"TID $EXPECTED_TID\" \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out3; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                      "markdown": "`$BINARY die_in_thread 2> signalhandler.out3\nEXPECTED_TID=\"`sed 's/ .*//; q' signalhandler.out3`\"\n\nfor pattern in SIGFPE DieInThread \"TID $EXPECTED_TID\" \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out3; then\n    die \"'$pattern' should appear in the output\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 60,
                  "endLine": 106,
                  "endColumn": 64,
                  "snippet": {
                    "text": "if [ x`uname` = \"xLinux\" ]; then\n  from_pid=\"from PID $$\"\nfi\nfor pattern in SIGTERM \"by PID $!\" \"$from_pid\" main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out2; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                    "rendered": {
                      "text": "if [ x`uname` = \"xLinux\" ]; then\n  from_pid=\"from PID $$\"\nfi\nfor pattern in SIGTERM \"by PID $!\" \"$from_pid\" main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out2; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                      "markdown": "`if [ x`uname` = \"xLinux\" ]; then\n  from_pid=\"from PID $$\"\nfi\nfor pattern in SIGTERM \"by PID $!\" \"$from_pid\" main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out2; then\n    die \"'$pattern' should appear in the output\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 43,
                  "endLine": 77,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n# Test for a case the program kills itself by SIGSEGV.\nGOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1\nfor pattern in SIGSEGV 0xdead main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out1; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                    "rendered": {
                      "text": "\n# Test for a case the program kills itself by SIGSEGV.\nGOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1\nfor pattern in SIGSEGV 0xdead main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out1; then\n    die \"'$pattern' should appear in the output\"\n  fi\n",
                      "markdown": "`\n# Test for a case the program kills itself by SIGSEGV.\nGOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1\nfor pattern in SIGSEGV 0xdead main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out1; then\n    die \"'$pattern' should appear in the output\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 6,
                  "endLine": 126,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# stuff to stdout instead of stderr.\n$BINARY dump_to_stdout 1> signalhandler.out4\nfor pattern in SIGABRT main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out4; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                    "rendered": {
                      "text": "# stuff to stdout instead of stderr.\n$BINARY dump_to_stdout 1> signalhandler.out4\nfor pattern in SIGABRT main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out4; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                      "markdown": "`# stuff to stdout instead of stderr.\n$BINARY dump_to_stdout 1> signalhandler.out4\nfor pattern in SIGABRT main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out4; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 6,
                  "endLine": 117,
                  "endColumn": 12,
                  "snippet": {
                    "text": "EXPECTED_TID=\"`sed 's/ .*//; q' signalhandler.out3`\"\n\nfor pattern in SIGFPE DieInThread \"TID $EXPECTED_TID\" \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out3; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                    "rendered": {
                      "text": "EXPECTED_TID=\"`sed 's/ .*//; q' signalhandler.out3`\"\n\nfor pattern in SIGFPE DieInThread \"TID $EXPECTED_TID\" \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out3; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                      "markdown": "`EXPECTED_TID=\"`sed 's/ .*//; q' signalhandler.out3`\"\n\nfor pattern in SIGFPE DieInThread \"TID $EXPECTED_TID\" \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out3; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "endLine": 107,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  from_pid=\"from PID $$\"\nfi\nfor pattern in SIGTERM \"by PID $!\" \"$from_pid\" main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out2; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                    "rendered": {
                      "text": "  from_pid=\"from PID $$\"\nfi\nfor pattern in SIGTERM \"by PID $!\" \"$from_pid\" main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out2; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                      "markdown": "`  from_pid=\"from PID $$\"\nfi\nfor pattern in SIGTERM \"by PID $!\" \"$from_pid\" main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out2; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 4,
                  "endLine": 94,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# Wait until \"looping\" is written in the file.  This indicates the program\n# is ready to accept signals.\nwhile true; do\n  if grep --quiet looping signalhandler.out2; then\n    break\n  fi\ndone\n",
                    "rendered": {
                      "text": "# Wait until \"looping\" is written in the file.  This indicates the program\n# is ready to accept signals.\nwhile true; do\n  if grep --quiet looping signalhandler.out2; then\n    break\n  fi\ndone\n",
                      "markdown": "`# Wait until \"looping\" is written in the file.  This indicates the program\n# is ready to accept signals.\nwhile true; do\n  if grep --quiet looping signalhandler.out2; then\n    break\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 4,
                  "endLine": 82,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    die \"'$pattern' should appear in the output\"\n  fi\ndone\nif ! grep --quiet \"a message before segv\" $LOG_INFO; then\n  die \"'a message before segv' should appear in the INFO log\"\nfi\nrm -f $LOG_INFO\n",
                    "rendered": {
                      "text": "    die \"'$pattern' should appear in the output\"\n  fi\ndone\nif ! grep --quiet \"a message before segv\" $LOG_INFO; then\n  die \"'a message before segv' should appear in the INFO log\"\nfi\nrm -f $LOG_INFO\n",
                      "markdown": "`    die \"'$pattern' should appear in the output\"\n  fi\ndone\nif ! grep --quiet \"a message before segv\" $LOG_INFO; then\n  die \"'a message before segv' should appear in the INFO log\"\nfi\nrm -f $LOG_INFO\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 6,
                  "endLine": 78,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# Test for a case the program kills itself by SIGSEGV.\nGOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1\nfor pattern in SIGSEGV 0xdead main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out1; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                    "rendered": {
                      "text": "# Test for a case the program kills itself by SIGSEGV.\nGOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1\nfor pattern in SIGSEGV 0xdead main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out1; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n",
                      "markdown": "`# Test for a case the program kills itself by SIGSEGV.\nGOOGLE_LOG_DIR=. $BINARY segv 2> signalhandler.out1\nfor pattern in SIGSEGV 0xdead main \"Aborted at [0-9]\"; do\n  if ! grep --quiet \"$pattern\" signalhandler.out1; then\n    die \"'$pattern' should appear in the output\"\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 21,
                  "endLine": 58,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  # For windows\n  BINARY=\"./signalhandler_unittest.exe\"\n  if ! test -e \"$BINARY\"; then\n    echo \"We coundn't find demangle_unittest binary.\"\n    exit 1\n  fi\nfi\n",
                    "rendered": {
                      "text": "  # For windows\n  BINARY=\"./signalhandler_unittest.exe\"\n  if ! test -e \"$BINARY\"; then\n    echo \"We coundn't find demangle_unittest binary.\"\n    exit 1\n  fi\nfi\n",
                      "markdown": "`  # For windows\n  BINARY=\"./signalhandler_unittest.exe\"\n  if ! test -e \"$BINARY\"; then\n    echo \"We coundn't find demangle_unittest binary.\"\n    exit 1\n  fi\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/striplog_unittest.cc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 71,
                  "endLine": 69,
                  "snippet": {
                    "text": "\nint main(int, char* argv[]) {\n#if defined(_MSC_VER)\n  // Avoid presenting an interactive dialog that will cause the test to time\n  // out.\n  _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n#endif  // defined(_MSC_VER)\n  std::signal(SIGABRT, handle_abort);\n",
                    "rendered": {
                      "text": "\nint main(int, char* argv[]) {\n#if defined(_MSC_VER)\n  // Avoid presenting an interactive dialog that will cause the test to time\n  // out.\n  _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n#endif  // defined(_MSC_VER)\n  std::signal(SIGABRT, handle_abort);\n",
                      "markdown": "`\nint main(int, char* argv[]) {\n#if defined(_MSC_VER)\n  // Avoid presenting an interactive dialog that will cause the test to time\n  // out.\n  _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n#endif  // defined(_MSC_VER)\n  std::signal(SIGABRT, handle_abort);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/emscripten.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 22,
                  "endLine": 35,
                  "snippet": {
                    "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                    "rendered": {
                      "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                      "markdown": "`\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/emscripten.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 10,
                  "snippet": {
                    "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: Emscripten-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                    "rendered": {
                      "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: Emscripten-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                      "markdown": "`  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: Emscripten-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/emscripten.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 45,
                  "endLine": 35,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                    "rendered": {
                      "text": "      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                      "markdown": "`      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/emscripten.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 14,
                  "endLine": 34,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n",
                    "rendered": {
                      "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n",
                      "markdown": "`\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/emscripten.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 10,
                  "snippet": {
                    "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: Emscripten-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                    "rendered": {
                      "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: Emscripten-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                      "markdown": "`  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: Emscripten-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/mkdocs.yml"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 5,
                  "endLine": 104,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    description: >-\n      We use cookies to recognize your repeated visits and preferences, as well\n      as to measure the effectiveness of our documentation and whether users\n      find what they're searching for. With your consent, you're helping us to\n      make our documentation better.\nnav:\n  - Getting Started:\n",
                    "rendered": {
                      "text": "    description: >-\n      We use cookies to recognize your repeated visits and preferences, as well\n      as to measure the effectiveness of our documentation and whether users\n      find what they're searching for. With your consent, you're helping us to\n      make our documentation better.\nnav:\n  - Getting Started:\n",
                      "markdown": "`    description: >-\n      We use cookies to recognize your repeated visits and preferences, as well\n      as to measure the effectiveness of our documentation and whether users\n      find what they're searching for. With your consent, you're helping us to\n      make our documentation better.\nnav:\n  - Getting Started:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/fuzz_demangle.cc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 6,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 63,
                  "endLine": 560,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nstatic inline bool MungeAndDiffTestStdout(const string& golden_filename) {\n  return MungeAndDiffTest(golden_filename,\n                          s_captured_streams.at(fileno(stdout)).get());\n}\n\n// Save flags used from logging_unittest.cc.\n",
                    "rendered": {
                      "text": "\nstatic inline bool MungeAndDiffTestStdout(const string& golden_filename) {\n  return MungeAndDiffTest(golden_filename,\n                          s_captured_streams.at(fileno(stdout)).get());\n}\n\n// Save flags used from logging_unittest.cc.\n",
                      "markdown": "`\nstatic inline bool MungeAndDiffTestStdout(const string& golden_filename) {\n  return MungeAndDiffTest(golden_filename,\n                          s_captured_streams.at(fileno(stdout)).get());\n}\n\n// Save flags used from logging_unittest.cc.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 63,
                  "endLine": 555,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\nstatic inline bool MungeAndDiffTestStderr(const string& golden_filename) {\n  return MungeAndDiffTest(golden_filename,\n                          s_captured_streams.at(fileno(stderr)).get());\n}\n\nstatic inline bool MungeAndDiffTestStdout(const string& golden_filename) {\n",
                    "rendered": {
                      "text": "\nstatic inline bool MungeAndDiffTestStderr(const string& golden_filename) {\n  return MungeAndDiffTest(golden_filename,\n                          s_captured_streams.at(fileno(stderr)).get());\n}\n\nstatic inline bool MungeAndDiffTestStdout(const string& golden_filename) {\n",
                      "markdown": "`\nstatic inline bool MungeAndDiffTestStderr(const string& golden_filename) {\n  return MungeAndDiffTest(golden_filename,\n                          s_captured_streams.at(fileno(stderr)).get());\n}\n\nstatic inline bool MungeAndDiffTestStdout(const string& golden_filename) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 59,
                  "endLine": 519,
                  "endColumn": 64,
                  "snippet": {
                    "text": "                                    CapturedStream* cap) {\n  auto pos = s_captured_streams.find(fileno(stdout));\n\n  if (pos != s_captured_streams.end() && cap == pos->second.get()) {\n    CHECK(cap) << \": did you forget CaptureTestStdout()?\";\n  } else {\n    CHECK(cap) << \": did you forget CaptureTestStderr()?\";\n",
                    "rendered": {
                      "text": "                                    CapturedStream* cap) {\n  auto pos = s_captured_streams.find(fileno(stdout));\n\n  if (pos != s_captured_streams.end() && cap == pos->second.get()) {\n    CHECK(cap) << \": did you forget CaptureTestStdout()?\";\n  } else {\n    CHECK(cap) << \": did you forget CaptureTestStderr()?\";\n",
                      "markdown": "`                                    CapturedStream* cap) {\n  auto pos = s_captured_streams.find(fileno(stdout));\n\n  if (pos != s_captured_streams.end() && cap == pos->second.get()) {\n    CHECK(cap) << \": did you forget CaptureTestStdout()?\";\n  } else {\n    CHECK(cap) << \": did you forget CaptureTestStderr()?\";\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 40,
                  "endLine": 512,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nstatic inline void WriteToFile(const string& body, const string& file) {\n  std::unique_ptr<FILE> fp{fopen(file.c_str(), \"wb\")};\n  fwrite(body.data(), 1, body.size(), fp.get());\n}\n\nstatic inline bool MungeAndDiffTest(const string& golden_filename,\n",
                    "rendered": {
                      "text": "\nstatic inline void WriteToFile(const string& body, const string& file) {\n  std::unique_ptr<FILE> fp{fopen(file.c_str(), \"wb\")};\n  fwrite(body.data(), 1, body.size(), fp.get());\n}\n\nstatic inline bool MungeAndDiffTest(const string& golden_filename,\n",
                      "markdown": "`\nstatic inline void WriteToFile(const string& body, const string& file) {\n  std::unique_ptr<FILE> fp{fopen(file.c_str(), \"wb\")};\n  fwrite(body.data(), 1, body.size(), fp.get());\n}\n\nstatic inline bool MungeAndDiffTest(const string& golden_filename,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 28,
                  "endLine": 488,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  CHECK(fp != nullptr) << filename << \": couldn't open\";\n  char buf[4096];\n  string result;\n  while (fgets(buf, 4095, fp.get())) {\n    string line = MungeLine(buf);\n    const size_t str_size = 256;\n    char null_str[str_size];\n",
                    "rendered": {
                      "text": "  CHECK(fp != nullptr) << filename << \": couldn't open\";\n  char buf[4096];\n  string result;\n  while (fgets(buf, 4095, fp.get())) {\n    string line = MungeLine(buf);\n    const size_t str_size = 256;\n    char null_str[str_size];\n",
                      "markdown": "`  CHECK(fp != nullptr) << filename << \": couldn't open\";\n  char buf[4096];\n  string result;\n  while (fgets(buf, 4095, fp.get())) {\n    string line = MungeLine(buf);\n    const size_t str_size = 256;\n    char null_str[str_size];\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 44,
                  "endLine": 409,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n  // Read the captured file.\n  std::unique_ptr<FILE> file{fopen(cap->filename().c_str(), \"r\")};\n  const string content = ReadEntireFile(file.get());\n  file.reset();\n\n  return content;\n",
                    "rendered": {
                      "text": "\n  // Read the captured file.\n  std::unique_ptr<FILE> file{fopen(cap->filename().c_str(), \"r\")};\n  const string content = ReadEntireFile(file.get());\n  file.reset();\n\n  return content;\n",
                      "markdown": "`\n  // Read the captured file.\n  std::unique_ptr<FILE> file{fopen(cap->filename().c_str(), \"r\")};\n  const string content = ReadEntireFile(file.get());\n  file.reset();\n\n  return content;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 31,
                  "endLine": 345,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    // Restore original stream\n    if (uncaptured_fd_) {\n      fflush(nullptr);\n      CHECK(dup2(uncaptured_fd_.get(), fd_) != -1);\n    }\n  }\n\n",
                    "rendered": {
                      "text": "    // Restore original stream\n    if (uncaptured_fd_) {\n      fflush(nullptr);\n      CHECK(dup2(uncaptured_fd_.get(), fd_) != -1);\n    }\n  }\n\n",
                      "markdown": "`    // Restore original stream\n    if (uncaptured_fd_) {\n      fflush(nullptr);\n      CHECK(dup2(uncaptured_fd_.get(), fd_) != -1);\n    }\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 21,
                  "endLine": 336,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n    // Send stdout/stderr to this file\n    fflush(nullptr);\n    CHECK(dup2(cap_fd.get(), fd_) != -1);\n    CHECK(cap_fd.close() != -1);\n  }\n\n",
                    "rendered": {
                      "text": "\n    // Send stdout/stderr to this file\n    fflush(nullptr);\n    CHECK(dup2(cap_fd.get(), fd_) != -1);\n    CHECK(cap_fd.close() != -1);\n  }\n\n",
                      "markdown": "`\n    // Send stdout/stderr to this file\n    fflush(nullptr);\n    CHECK(dup2(cap_fd.get(), fd_) != -1);\n    CHECK(cap_fd.close() != -1);\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/googletest.h"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 41,
                  "endLine": 111,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\nDEFINE_string(test_tmpdir, GetTempDir(), \"Dir we use for temp files\");\nDEFINE_string(test_srcdir, TEST_SRC_DIR,\n              \"Source-dir root, needed to find glog_unittest_flagfile\");\nDEFINE_bool(run_benchmark, false, \"If true, run benchmarks\");\n#ifdef NDEBUG\nDEFINE_int32(benchmark_iters, 100000000, \"Number of iterations per benchmark\");\n",
                    "rendered": {
                      "text": "\nDEFINE_string(test_tmpdir, GetTempDir(), \"Dir we use for temp files\");\nDEFINE_string(test_srcdir, TEST_SRC_DIR,\n              \"Source-dir root, needed to find glog_unittest_flagfile\");\nDEFINE_bool(run_benchmark, false, \"If true, run benchmarks\");\n#ifdef NDEBUG\nDEFINE_int32(benchmark_iters, 100000000, \"Number of iterations per benchmark\");\n",
                      "markdown": "`\nDEFINE_string(test_tmpdir, GetTempDir(), \"Dir we use for temp files\");\nDEFINE_string(test_srcdir, TEST_SRC_DIR,\n              \"Source-dir root, needed to find glog_unittest_flagfile\");\nDEFINE_bool(run_benchmark, false, \"If true, run benchmarks\");\n#ifdef NDEBUG\nDEFINE_int32(benchmark_iters, 100000000, \"Number of iterations per benchmark\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 17,
                  "endLine": 248,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                     base, base_length)) {\n      site_flag_value = &info->vlog_level;\n      // value at info->vlog_level is now what controls\n      // the VLOG at the caller site forever\n      break;\n    }\n  }\n",
                    "rendered": {
                      "text": "                     base, base_length)) {\n      site_flag_value = &info->vlog_level;\n      // value at info->vlog_level is now what controls\n      // the VLOG at the caller site forever\n      break;\n    }\n  }\n",
                      "markdown": "`                     base, base_length)) {\n      site_flag_value = &info->vlog_level;\n      // value at info->vlog_level is now what controls\n      // the VLOG at the caller site forever\n      break;\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 14,
                  "endLine": 247,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    if (SafeFNMatch_(info->module_pattern.c_str(), info->module_pattern.size(),\n                     base, base_length)) {\n      site_flag_value = &info->vlog_level;\n      // value at info->vlog_level is now what controls\n      // the VLOG at the caller site forever\n      break;\n    }\n",
                    "rendered": {
                      "text": "    if (SafeFNMatch_(info->module_pattern.c_str(), info->module_pattern.size(),\n                     base, base_length)) {\n      site_flag_value = &info->vlog_level;\n      // value at info->vlog_level is now what controls\n      // the VLOG at the caller site forever\n      break;\n    }\n",
                      "markdown": "`    if (SafeFNMatch_(info->module_pattern.c_str(), info->module_pattern.size(),\n                     base, base_length)) {\n      site_flag_value = &info->vlog_level;\n      // value at info->vlog_level is now what controls\n      // the VLOG at the caller site forever\n      break;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 14,
                  "endLine": 238,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  }\n\n  // TODO: Trim out _unittest suffix?  Perhaps it is better to have\n  // the extra control and just leave it there.\n\n  // find target in vector of modules, replace site_flag_value with\n  // a module-specific verbose level, if any.\n",
                    "rendered": {
                      "text": "  }\n\n  // TODO: Trim out _unittest suffix?  Perhaps it is better to have\n  // the extra control and just leave it there.\n\n  // find target in vector of modules, replace site_flag_value with\n  // a module-specific verbose level, if any.\n",
                      "markdown": "`  }\n\n  // TODO: Trim out _unittest suffix?  Perhaps it is better to have\n  // the extra control and just leave it there.\n\n  // find target in vector of modules, replace site_flag_value with\n  // a module-specific verbose level, if any.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 40,
                  "endLine": 142,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    if (vmodule == nullptr) break;\n    vmodule++;  // Skip past \",\"\n  }\n  if (head) {  // Put them into the list at the head:\n    tail->next = vmodule_list;\n    vmodule_list = head;\n  }\n",
                    "rendered": {
                      "text": "    if (vmodule == nullptr) break;\n    vmodule++;  // Skip past \",\"\n  }\n  if (head) {  // Put them into the list at the head:\n    tail->next = vmodule_list;\n    vmodule_list = head;\n  }\n",
                      "markdown": "`    if (vmodule == nullptr) break;\n    vmodule++;  // Skip past \",\"\n  }\n  if (head) {  // Put them into the list at the head:\n    tail->next = vmodule_list;\n    vmodule_list = head;\n  }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 51,
                  "endLine": 92,
                  "endColumn": 55,
                  "snippet": {
                    "text": "// List of per-module log levels from FLAGS_vmodule.\n// Once created each element is never deleted/modified\n// except for the vlog_level: other threads will read VModuleInfo blobs\n// w/o locks and we'll store pointers to vlog_level at VLOG locations\n// that will never go away.\n// We can't use an STL struct here as we wouldn't know\n// when it's safe to delete/update it: other threads need to use it w/o locks.\n",
                    "rendered": {
                      "text": "// List of per-module log levels from FLAGS_vmodule.\n// Once created each element is never deleted/modified\n// except for the vlog_level: other threads will read VModuleInfo blobs\n// w/o locks and we'll store pointers to vlog_level at VLOG locations\n// that will never go away.\n// We can't use an STL struct here as we wouldn't know\n// when it's safe to delete/update it: other threads need to use it w/o locks.\n",
                      "markdown": "`// List of per-module log levels from FLAGS_vmodule.\n// Once created each element is never deleted/modified\n// except for the vlog_level: other threads will read VModuleInfo blobs\n// w/o locks and we'll store pointers to vlog_level at VLOG locations\n// that will never go away.\n// We can't use an STL struct here as we wouldn't know\n// when it's safe to delete/update it: other threads need to use it w/o locks.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 4,
                  "endLine": 240,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  // TODO: Trim out _unittest suffix?  Perhaps it is better to have\n  // the extra control and just leave it there.\n\n  // find target in vector of modules, replace site_flag_value with\n  // a module-specific verbose level, if any.\n  for (const VModuleInfo* info = vmodule_list; info != nullptr;\n       info = info->next) {\n",
                    "rendered": {
                      "text": "  // TODO: Trim out _unittest suffix?  Perhaps it is better to have\n  // the extra control and just leave it there.\n\n  // find target in vector of modules, replace site_flag_value with\n  // a module-specific verbose level, if any.\n  for (const VModuleInfo* info = vmodule_list; info != nullptr;\n       info = info->next) {\n",
                      "markdown": "`  // TODO: Trim out _unittest suffix?  Perhaps it is better to have\n  // the extra control and just leave it there.\n\n  // find target in vector of modules, replace site_flag_value with\n  // a module-specific verbose level, if any.\n  for (const VModuleInfo* info = vmodule_list; info != nullptr;\n       info = info->next) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 5,
                  "endLine": 135,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      } else {\n        head = info;\n      }\n      tail = info;\n    }\n    // Skip past this entry\n    vmodule = strchr(sep, ',');\n",
                    "rendered": {
                      "text": "      } else {\n        head = info;\n      }\n      tail = info;\n    }\n    // Skip past this entry\n    vmodule = strchr(sep, ',');\n",
                      "markdown": "`      } else {\n        head = info;\n      }\n      tail = info;\n    }\n    // Skip past this entry\n    vmodule = strchr(sep, ',');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 7,
                  "endLine": 133,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      if (head) {\n        tail->next = info;\n      } else {\n        head = info;\n      }\n      tail = info;\n    }\n",
                    "rendered": {
                      "text": "      if (head) {\n        tail->next = info;\n      } else {\n        head = info;\n      }\n      tail = info;\n    }\n",
                      "markdown": "`      if (head) {\n        tail->next = info;\n      } else {\n        head = info;\n      }\n      tail = info;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 14,
                  "endLine": 122,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  const char* vmodule = FLAGS_vmodule.c_str();\n  const char* sep;\n  VModuleInfo* head = nullptr;\n  VModuleInfo* tail = nullptr;\n  while ((sep = strchr(vmodule, '=')) != nullptr) {\n    string pattern(vmodule, static_cast<size_t>(sep - vmodule));\n    int module_level;\n",
                    "rendered": {
                      "text": "  const char* vmodule = FLAGS_vmodule.c_str();\n  const char* sep;\n  VModuleInfo* head = nullptr;\n  VModuleInfo* tail = nullptr;\n  while ((sep = strchr(vmodule, '=')) != nullptr) {\n    string pattern(vmodule, static_cast<size_t>(sep - vmodule));\n    int module_level;\n",
                      "markdown": "`  const char* vmodule = FLAGS_vmodule.c_str();\n  const char* sep;\n  VModuleInfo* head = nullptr;\n  VModuleInfo* tail = nullptr;\n  while ((sep = strchr(vmodule, '=')) != nullptr) {\n    string pattern(vmodule, static_cast<size_t>(sep - vmodule));\n    int module_level;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 14,
                  "endLine": 121,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  inited_vmodule = false;\n  const char* vmodule = FLAGS_vmodule.c_str();\n  const char* sep;\n  VModuleInfo* head = nullptr;\n  VModuleInfo* tail = nullptr;\n  while ((sep = strchr(vmodule, '=')) != nullptr) {\n    string pattern(vmodule, static_cast<size_t>(sep - vmodule));\n",
                    "rendered": {
                      "text": "  inited_vmodule = false;\n  const char* vmodule = FLAGS_vmodule.c_str();\n  const char* sep;\n  VModuleInfo* head = nullptr;\n  VModuleInfo* tail = nullptr;\n  while ((sep = strchr(vmodule, '=')) != nullptr) {\n    string pattern(vmodule, static_cast<size_t>(sep - vmodule));\n",
                      "markdown": "`  inited_vmodule = false;\n  const char* vmodule = FLAGS_vmodule.c_str();\n  const char* sep;\n  VModuleInfo* head = nullptr;\n  VModuleInfo* tail = nullptr;\n  while ((sep = strchr(vmodule, '=')) != nullptr) {\n    string pattern(vmodule, static_cast<size_t>(sep - vmodule));\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/vlog_is_on.cc"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 13,
                  "endLine": 106,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n// This protects the following global variables.\nstatic std::mutex vmodule_mutex;\n// Pointer to head of the VModuleInfo list.\n// It's a map from module pattern to logging level for those module(s).\nstatic VModuleInfo* vmodule_list = nullptr;\nstatic SiteFlag* cached_site_list = nullptr;\n",
                    "rendered": {
                      "text": "\n// This protects the following global variables.\nstatic std::mutex vmodule_mutex;\n// Pointer to head of the VModuleInfo list.\n// It's a map from module pattern to logging level for those module(s).\nstatic VModuleInfo* vmodule_list = nullptr;\nstatic SiteFlag* cached_site_list = nullptr;\n",
                      "markdown": "`\n// This protects the following global variables.\nstatic std::mutex vmodule_mutex;\n// Pointer to head of the VModuleInfo list.\n// It's a map from module pattern to logging level for those module(s).\nstatic VModuleInfo* vmodule_list = nullptr;\nstatic SiteFlag* cached_site_list = nullptr;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize_unittest.cc"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 43,
                  "endLine": 463,
                  "endColumn": 47,
                  "snippet": {
                    "text": "#if defined(HAVE_SYMBOLIZE) && defined(HAVE_STACKTRACE)\n#  if defined(HAVE_ELF_H) || defined(HAVE_SYS_EXEC_ELF_H)\n  // We don't want to get affected by the callback interface, that may be\n  // used to install some callback function at InitGoogle() time.\n  InstallSymbolizeCallback(nullptr);\n\n  TestWithPCInsideInlineFunction();\n",
                    "rendered": {
                      "text": "#if defined(HAVE_SYMBOLIZE) && defined(HAVE_STACKTRACE)\n#  if defined(HAVE_ELF_H) || defined(HAVE_SYS_EXEC_ELF_H)\n  // We don't want to get affected by the callback interface, that may be\n  // used to install some callback function at InitGoogle() time.\n  InstallSymbolizeCallback(nullptr);\n\n  TestWithPCInsideInlineFunction();\n",
                      "markdown": "`#if defined(HAVE_SYMBOLIZE) && defined(HAVE_STACKTRACE)\n#  if defined(HAVE_ELF_H) || defined(HAVE_SYS_EXEC_ELF_H)\n  // We don't want to get affected by the callback interface, that may be\n  // used to install some callback function at InitGoogle() time.\n  InstallSymbolizeCallback(nullptr);\n\n  TestWithPCInsideInlineFunction();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize_unittest.cc"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 64,
                  "endLine": 227,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  g_pc_to_symbolize = pc;\n\n  // The alt-signal-stack cannot be heap allocated because there is a\n  // bug in glibc-2.2 where some signal handler setup code looks at the\n  // current stack pointer to figure out what thread is currently running.\n  // Therefore, the alternate stack must be allocated from the main stack\n  // itself.\n",
                    "rendered": {
                      "text": "  g_pc_to_symbolize = pc;\n\n  // The alt-signal-stack cannot be heap allocated because there is a\n  // bug in glibc-2.2 where some signal handler setup code looks at the\n  // current stack pointer to figure out what thread is currently running.\n  // Therefore, the alternate stack must be allocated from the main stack\n  // itself.\n",
                      "markdown": "`  g_pc_to_symbolize = pc;\n\n  // The alt-signal-stack cannot be heap allocated because there is a\n  // bug in glibc-2.2 where some signal handler setup code looks at the\n  // current stack pointer to figure out what thread is currently running.\n  // Therefore, the alternate stack must be allocated from the main stack\n  // itself.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize_unittest.cc"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 30,
                  "endLine": 195,
                  "endColumn": 34,
                  "snippet": {
                    "text": "const int kAlternateStackSize = 8096;\nconst char kAlternateStackFillValue = 0x55;\n\n// These helper functions look at the alternate stack buffer, and figure\n// out what portion of this buffer has been touched - this is the stack\n// consumption of the signal handler running on this alternate stack.\nstatic ATTRIBUTE_NOINLINE bool StackGrowsDown(int* x) {\n",
                    "rendered": {
                      "text": "const int kAlternateStackSize = 8096;\nconst char kAlternateStackFillValue = 0x55;\n\n// These helper functions look at the alternate stack buffer, and figure\n// out what portion of this buffer has been touched - this is the stack\n// consumption of the signal handler running on this alternate stack.\nstatic ATTRIBUTE_NOINLINE bool StackGrowsDown(int* x) {\n",
                      "markdown": "`const int kAlternateStackSize = 8096;\nconst char kAlternateStackFillValue = 0x55;\n\n// These helper functions look at the alternate stack buffer, and figure\n// out what portion of this buffer has been touched - this is the stack\n// consumption of the signal handler running on this alternate stack.\nstatic ATTRIBUTE_NOINLINE bool StackGrowsDown(int* x) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/symbolize_unittest.cc"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 45,
                  "endLine": 166,
                  "endColumn": 49,
                  "snippet": {
                    "text": "// a signal handler (for SIGUSR1 say) that calls the Symbolize function\n// on an alternate stack. This alternate stack is initialized to some\n// known pattern (0x55, 0x55, 0x55, ...). We then self-send this signal,\n// and after the signal handler returns, look at the alternate stack\n// buffer to see what portion has been touched.\n//\n// This trick gives us the the stack footprint of the signal handler.\n",
                    "rendered": {
                      "text": "// a signal handler (for SIGUSR1 say) that calls the Symbolize function\n// on an alternate stack. This alternate stack is initialized to some\n// known pattern (0x55, 0x55, 0x55, ...). We then self-send this signal,\n// and after the signal handler returns, look at the alternate stack\n// buffer to see what portion has been touched.\n//\n// This trick gives us the the stack footprint of the signal handler.\n",
                      "markdown": "`// a signal handler (for SIGUSR1 say) that calls the Symbolize function\n// on an alternate stack. This alternate stack is initialized to some\n// known pattern (0x55, 0x55, 0x55, ...). We then self-send this signal,\n// and after the signal handler returns, look at the alternate stack\n// buffer to see what portion has been touched.\n//\n// This trick gives us the the stack footprint of the signal handler.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "endLine": 89,
                  "endColumn": 9,
                  "snippet": {
                    "text": "if grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n    die \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT\"\nfi\n\n",
                    "rendered": {
                      "text": "if grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n    die \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT\"\nfi\n\n",
                      "markdown": "`if grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n    die \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT\"\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 46,
                  "endLine": 87,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\n# Check if mangled symbols exist.  They must not exist.\nif grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n    die \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT\"\n",
                    "rendered": {
                      "text": "\n# Check if mangled symbols exist.  They must not exist.\nif grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n    die \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT\"\n",
                      "markdown": "`\n# Check if mangled symbols exist.  They must not exist.\nif grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n    die \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 2,
                  "endLine": 86,
                  "endColumn": 8,
                  "snippet": {
                    "text": "fi\n\n# Check if mangled symbols exist.  They must not exist.\nif grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n",
                    "rendered": {
                      "text": "fi\n\n# Check if mangled symbols exist.  They must not exist.\nif grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n",
                      "markdown": "`fi\n\n# Check if mangled symbols exist.  They must not exist.\nif grep --quiet '^_Z' \"$DM_OUTPUT\"; then\n    MANGLED=`grep '^_Z' \"$DM_OUTPUT\" | wc -l | awk '{ print \\$1 }'`\n    echo \"Mangled symbols ($MANGLED out of $NM_LINES) found in $DM_OUTPUT:\"\n    grep '^_Z' \"$DM_OUTPUT\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 30,
                  "endLine": 78,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n# Calculate the numbers of lines.\nNM_LINES=`wc -l \"$NM_OUTPUT\" | awk '{ print $1 }'`\nDM_LINES=`wc -l \"$DM_OUTPUT\" | awk '{ print $1 }'`\n\n# Compare the numbers of lines.  They must be the same.\nif test \"$NM_LINES\" != \"$DM_LINES\"; then\n",
                    "rendered": {
                      "text": "\n# Calculate the numbers of lines.\nNM_LINES=`wc -l \"$NM_OUTPUT\" | awk '{ print $1 }'`\nDM_LINES=`wc -l \"$DM_OUTPUT\" | awk '{ print $1 }'`\n\n# Compare the numbers of lines.  They must be the same.\nif test \"$NM_LINES\" != \"$DM_LINES\"; then\n",
                      "markdown": "`\n# Calculate the numbers of lines.\nNM_LINES=`wc -l \"$NM_OUTPUT\" | awk '{ print $1 }'`\nDM_LINES=`wc -l \"$DM_OUTPUT\" | awk '{ print $1 }'`\n\n# Compare the numbers of lines.  They must be the same.\nif test \"$NM_LINES\" != \"$DM_LINES\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 30,
                  "endLine": 77,
                  "endColumn": 35,
                  "snippet": {
                    "text": "GLOG_demangle_filter=1 \"$DEMANGLER\" --demangle_filter < \"$NM_OUTPUT\" > \"$DM_OUTPUT\"\n\n# Calculate the numbers of lines.\nNM_LINES=`wc -l \"$NM_OUTPUT\" | awk '{ print $1 }'`\nDM_LINES=`wc -l \"$DM_OUTPUT\" | awk '{ print $1 }'`\n\n# Compare the numbers of lines.  They must be the same.\n",
                    "rendered": {
                      "text": "GLOG_demangle_filter=1 \"$DEMANGLER\" --demangle_filter < \"$NM_OUTPUT\" > \"$DM_OUTPUT\"\n\n# Calculate the numbers of lines.\nNM_LINES=`wc -l \"$NM_OUTPUT\" | awk '{ print $1 }'`\nDM_LINES=`wc -l \"$DM_OUTPUT\" | awk '{ print $1 }'`\n\n# Compare the numbers of lines.  They must be the same.\n",
                      "markdown": "`GLOG_demangle_filter=1 \"$DEMANGLER\" --demangle_filter < \"$NM_OUTPUT\" > \"$DM_OUTPUT\"\n\n# Calculate the numbers of lines.\nNM_LINES=`wc -l \"$NM_OUTPUT\" | awk '{ print $1 }'`\nDM_LINES=`wc -l \"$DM_OUTPUT\" | awk '{ print $1 }'`\n\n# Compare the numbers of lines.  They must be the same.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 4,
                  "endLine": 67,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# Check if mangled symbols exist. If there are none, we quit.\n# The binary is more likely compiled with GCC 2.95 or something old.\nif ! grep --quiet '^_Z' \"$NM_OUTPUT\"; then\n    echo \"PASS\"\n    exit 0\nfi\n",
                    "rendered": {
                      "text": "\n# Check if mangled symbols exist. If there are none, we quit.\n# The binary is more likely compiled with GCC 2.95 or something old.\nif ! grep --quiet '^_Z' \"$NM_OUTPUT\"; then\n    echo \"PASS\"\n    exit 0\nfi\n",
                      "markdown": "`\n# Check if mangled symbols exist. If there are none, we quit.\n# The binary is more likely compiled with GCC 2.95 or something old.\nif ! grep --quiet '^_Z' \"$NM_OUTPUT\"; then\n    echo \"PASS\"\n    exit 0\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 15,
                  "endLine": 63,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n# Extract C++ mangled symbols from libbase.so.\nNM_OUTPUT=\"demangle.nm\"\nnm \"$LIBGLOG\" | perl -nle 'print $1 if /\\s(_Z\\S+$)/' > \"$NM_OUTPUT\"\n\n# Check if mangled symbols exist. If there are none, we quit.\n# The binary is more likely compiled with GCC 2.95 or something old.\n",
                    "rendered": {
                      "text": "\n# Extract C++ mangled symbols from libbase.so.\nNM_OUTPUT=\"demangle.nm\"\nnm \"$LIBGLOG\" | perl -nle 'print $1 if /\\s(_Z\\S+$)/' > \"$NM_OUTPUT\"\n\n# Check if mangled symbols exist. If there are none, we quit.\n# The binary is more likely compiled with GCC 2.95 or something old.\n",
                      "markdown": "`\n# Extract C++ mangled symbols from libbase.so.\nNM_OUTPUT=\"demangle.nm\"\nnm \"$LIBGLOG\" | perl -nle 'print $1 if /\\s(_Z\\S+$)/' > \"$NM_OUTPUT\"\n\n# Check if mangled symbols exist. If there are none, we quit.\n# The binary is more likely compiled with GCC 2.95 or something old.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/demangle_unittest.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 21,
                  "endLine": 56,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  # For windows\n  DEMANGLER=\"./demangle_unittest.exe\"\n  if ! test -e \"$DEMANGLER\"; then\n    echo \"We coundn't find demangle_unittest binary.\"\n    exit 1\n  fi\nfi\n",
                    "rendered": {
                      "text": "  # For windows\n  DEMANGLER=\"./demangle_unittest.exe\"\n  if ! test -e \"$DEMANGLER\"; then\n    echo \"We coundn't find demangle_unittest binary.\"\n    exit 1\n  fi\nfi\n",
                      "markdown": "`  # For windows\n  DEMANGLER=\"./demangle_unittest.exe\"\n  if ! test -e \"$DEMANGLER\"; then\n    echo \"We coundn't find demangle_unittest binary.\"\n    exit 1\n  fi\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/signalhandler_unittest.cc"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 21,
                  "endLine": 105,
                  "snippet": {
                    "text": "    fprintf(stderr, \"signal handler installed: %s\\n\",\n            IsFailureSignalHandlerInstalled() ? \"true\" : \"false\");\n  } else {\n    // Tell the shell script\n    puts(\"OK\");\n  }\n#endif\n  return 0;\n",
                    "rendered": {
                      "text": "    fprintf(stderr, \"signal handler installed: %s\\n\",\n            IsFailureSignalHandlerInstalled() ? \"true\" : \"false\");\n  } else {\n    // Tell the shell script\n    puts(\"OK\");\n  }\n#endif\n  return 0;\n",
                      "markdown": "`    fprintf(stderr, \"signal handler installed: %s\\n\",\n            IsFailureSignalHandlerInstalled() ? \"true\" : \"false\");\n  } else {\n    // Tell the shell script\n    puts(\"OK\");\n  }\n#endif\n  return 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "endLine": 34,
                  "snippet": {
                    "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n            gcovr \\\n",
                    "rendered": {
                      "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n            gcovr \\\n",
                      "markdown": "`\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n            gcovr \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 10,
                  "snippet": {
                    "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                    "rendered": {
                      "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                      "markdown": "`  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 45,
                  "endLine": 34,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n            gcovr \\\n",
                    "rendered": {
                      "text": "      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n            gcovr \\\n",
                      "markdown": "`      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n            gcovr \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 14,
                  "endLine": 33,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n",
                    "rendered": {
                      "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n",
                      "markdown": "`\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-suggests --no-install-recommends \\\n            g++ \\\n            cmake \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 10,
                  "snippet": {
                    "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                    "rendered": {
                      "text": "  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n",
                      "markdown": "`  build-linux:\n    defaults:\n      run:\n        shell: bash\n    name: GCC-C++${{matrix.std}}-${{matrix.build_type}}-${{matrix.lib}}\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/glog-modules.cmake.in"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 65,
                  "endLine": 14,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\nif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\n",
                    "rendered": {
                      "text": "\nif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\n",
                      "markdown": "`\nif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/glog-modules.cmake.in"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 28,
                  "snippet": {
                    "text": "if (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\ncmake_policy (POP)\n",
                    "rendered": {
                      "text": "if (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\ncmake_policy (POP)\n",
                      "markdown": "`if (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\ncmake_policy (POP)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1015,
                  "startColumn": 19,
                  "endLine": 1015,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  // File should contain the suffix of the original file\n  const size_t buf_size = static_cast<size_t>(statbuf.st_size) + 1;\n  std::vector<char> buf(buf_size);\n  CHECK_ERR(read(fd.get(), buf.data(), buf_size));\n\n  const char* p = buf.data();\n  size_t checked = 0;\n",
                    "rendered": {
                      "text": "  // File should contain the suffix of the original file\n  const size_t buf_size = static_cast<size_t>(statbuf.st_size) + 1;\n  std::vector<char> buf(buf_size);\n  CHECK_ERR(read(fd.get(), buf.data(), buf_size));\n\n  const char* p = buf.data();\n  size_t checked = 0;\n",
                      "markdown": "`  // File should contain the suffix of the original file\n  const size_t buf_size = static_cast<size_t>(statbuf.st_size) + 1;\n  std::vector<char> buf(buf_size);\n  CHECK_ERR(read(fd.get(), buf.data(), buf_size));\n\n  const char* p = buf.data();\n  size_t checked = 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1010,
                  "startColumn": 20,
                  "endLine": 1010,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  struct stat statbuf;\n  CHECK_ERR(fstat(fd.get(), &statbuf));\n  CHECK_EQ(static_cast<size_t>(statbuf.st_size), expect);\n  CHECK_ERR(lseek(fd.get(), 0, SEEK_SET));\n\n  // File should contain the suffix of the original file\n  const size_t buf_size = static_cast<size_t>(statbuf.st_size) + 1;\n",
                    "rendered": {
                      "text": "  struct stat statbuf;\n  CHECK_ERR(fstat(fd.get(), &statbuf));\n  CHECK_EQ(static_cast<size_t>(statbuf.st_size), expect);\n  CHECK_ERR(lseek(fd.get(), 0, SEEK_SET));\n\n  // File should contain the suffix of the original file\n  const size_t buf_size = static_cast<size_t>(statbuf.st_size) + 1;\n",
                      "markdown": "`  struct stat statbuf;\n  CHECK_ERR(fstat(fd.get(), &statbuf));\n  CHECK_EQ(static_cast<size_t>(statbuf.st_size), expect);\n  CHECK_ERR(lseek(fd.get(), 0, SEEK_SET));\n\n  // File should contain the suffix of the original file\n  const size_t buf_size = static_cast<size_t>(statbuf.st_size) + 1;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1008,
                  "startColumn": 20,
                  "endLine": 1008,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  // File should now be shorter\n  struct stat statbuf;\n  CHECK_ERR(fstat(fd.get(), &statbuf));\n  CHECK_EQ(static_cast<size_t>(statbuf.st_size), expect);\n  CHECK_ERR(lseek(fd.get(), 0, SEEK_SET));\n\n",
                    "rendered": {
                      "text": "\n  // File should now be shorter\n  struct stat statbuf;\n  CHECK_ERR(fstat(fd.get(), &statbuf));\n  CHECK_EQ(static_cast<size_t>(statbuf.st_size), expect);\n  CHECK_ERR(lseek(fd.get(), 0, SEEK_SET));\n\n",
                      "markdown": "`\n  // File should now be shorter\n  struct stat statbuf;\n  CHECK_ERR(fstat(fd.get(), &statbuf));\n  CHECK_EQ(static_cast<size_t>(statbuf.st_size), expect);\n  CHECK_ERR(lseek(fd.get(), 0, SEEK_SET));\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 22,
                  "endLine": 1000,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  written = 0;\n  while (written < ksize) {\n    size_t bytes = min(ksize - written, keep_size);\n    CHECK_ERR(write(fd.get(), keepstr, bytes));\n    written += bytes;\n  }\n\n",
                    "rendered": {
                      "text": "  written = 0;\n  while (written < ksize) {\n    size_t bytes = min(ksize - written, keep_size);\n    CHECK_ERR(write(fd.get(), keepstr, bytes));\n    written += bytes;\n  }\n\n",
                      "markdown": "`  written = 0;\n  while (written < ksize) {\n    size_t bytes = min(ksize - written, keep_size);\n    CHECK_ERR(write(fd.get(), keepstr, bytes));\n    written += bytes;\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 22,
                  "endLine": 994,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  size_t written = 0;\n  while (written < dsize) {\n    size_t bytes = min(dsize - written, discard_size);\n    CHECK_ERR(write(fd.get(), discardstr, bytes));\n    written += bytes;\n  }\n  written = 0;\n",
                    "rendered": {
                      "text": "  size_t written = 0;\n  while (written < dsize) {\n    size_t bytes = min(dsize - written, discard_size);\n    CHECK_ERR(write(fd.get(), discardstr, bytes));\n    written += bytes;\n  }\n  written = 0;\n",
                      "markdown": "`  size_t written = 0;\n  while (written < dsize) {\n    size_t bytes = min(dsize - written, discard_size);\n    CHECK_ERR(write(fd.get(), discardstr, bytes));\n    written += bytes;\n  }\n  written = 0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 37,
                  "endLine": 797,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  std::unique_ptr<std::FILE> file{fopen(files[0].c_str(), \"r\")};\n  CHECK(file != nullptr) << \": could not open \" << files[0];\n  char buf[1000];\n  while (fgets(buf, sizeof(buf), file.get()) != nullptr) {\n    char* first = strstr(buf, expected_string.c_str());\n    // if first == nullptr, not found.\n    // Terser than if (checkInFileOrNot && first != nullptr || !check...\n",
                    "rendered": {
                      "text": "  std::unique_ptr<std::FILE> file{fopen(files[0].c_str(), \"r\")};\n  CHECK(file != nullptr) << \": could not open \" << files[0];\n  char buf[1000];\n  while (fgets(buf, sizeof(buf), file.get()) != nullptr) {\n    char* first = strstr(buf, expected_string.c_str());\n    // if first == nullptr, not found.\n    // Terser than if (checkInFileOrNot && first != nullptr || !check...\n",
                      "markdown": "`  std::unique_ptr<std::FILE> file{fopen(files[0].c_str(), \"r\")};\n  CHECK(file != nullptr) << \": could not open \" << files[0];\n  char buf[1000];\n  while (fgets(buf, sizeof(buf), file.get()) != nullptr) {\n    char* first = strstr(buf, expected_string.c_str());\n    // if first == nullptr, not found.\n    // Terser than if (checkInFileOrNot && first != nullptr || !check...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1491,
                  "startColumn": 12,
                  "endLine": 1491,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                kBacktraceAtLine);\n  FLAGS_log_backtrace_at = where;\n\n  // The LOG at the specified line should include a stacktrace which includes\n  // the name of the containing function, followed by the log message.\n  // We use HasSubstr()s instead of ContainsRegex() for environments\n  // which don't have regexp.\n",
                    "rendered": {
                      "text": "                kBacktraceAtLine);\n  FLAGS_log_backtrace_at = where;\n\n  // The LOG at the specified line should include a stacktrace which includes\n  // the name of the containing function, followed by the log message.\n  // We use HasSubstr()s instead of ContainsRegex() for environments\n  // which don't have regexp.\n",
                      "markdown": "`                kBacktraceAtLine);\n  FLAGS_log_backtrace_at = where;\n\n  // The LOG at the specified line should include a stacktrace which includes\n  // the name of the containing function, followed by the log message.\n  // We use HasSubstr()s instead of ContainsRegex() for environments\n  // which don't have regexp.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1376,
                  "startColumn": 26,
                  "endLine": 1376,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  CHECK_EQ(msg, StrError(errcode));\n}\n\n// Simple routines to look at the sizes of generated code for LOG(FATAL) and\n// CHECK(..) via objdump\n/*\nstatic void MyFatal() {\n",
                    "rendered": {
                      "text": "  CHECK_EQ(msg, StrError(errcode));\n}\n\n// Simple routines to look at the sizes of generated code for LOG(FATAL) and\n// CHECK(..) via objdump\n/*\nstatic void MyFatal() {\n",
                      "markdown": "`  CHECK_EQ(msg, StrError(errcode));\n}\n\n// Simple routines to look at the sizes of generated code for LOG(FATAL) and\n// CHECK(..) via objdump\n/*\nstatic void MyFatal() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1337,
                  "startColumn": 35,
                  "endLine": 1337,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  {\n    using namespace std::chrono_literals;\n    TestWaitingLogSink sink;\n    // Sleeps give the sink threads time to do all their work,\n    // so that we get a reliable log capture to compare to the golden file.\n    LOG(INFO) << \"Message 1\";\n    std::this_thread::sleep_for(60ms);\n",
                    "rendered": {
                      "text": "  {\n    using namespace std::chrono_literals;\n    TestWaitingLogSink sink;\n    // Sleeps give the sink threads time to do all their work,\n    // so that we get a reliable log capture to compare to the golden file.\n    LOG(INFO) << \"Message 1\";\n    std::this_thread::sleep_for(60ms);\n",
                      "markdown": "`  {\n    using namespace std::chrono_literals;\n    TestWaitingLogSink sink;\n    // Sleeps give the sink threads time to do all their work,\n    // so that we get a reliable log capture to compare to the golden file.\n    LOG(INFO) << \"Message 1\";\n    std::this_thread::sleep_for(60ms);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1257,
                  "startColumn": 29,
                  "endLine": 1257,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        mutex_.unlock();\n        break;\n      }\n      // Give the main thread time to log its message,\n      // so that we get a reliable log capture to compare to golden file.\n      // Same for the other sleep below.\n      std::this_thread::sleep_for(20ms);\n",
                    "rendered": {
                      "text": "        mutex_.unlock();\n        break;\n      }\n      // Give the main thread time to log its message,\n      // so that we get a reliable log capture to compare to golden file.\n      // Same for the other sleep below.\n      std::this_thread::sleep_for(20ms);\n",
                      "markdown": "`        mutex_.unlock();\n        break;\n      }\n      // Give the main thread time to log its message,\n      // so that we get a reliable log capture to compare to golden file.\n      // Same for the other sleep below.\n      std::this_thread::sleep_for(20ms);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1145,
                  "startColumn": 14,
                  "endLine": 1145,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        << timeLogger << \"Timed Message #\" << timeLogger.m_streamTimes;\n  }\n\n  // Calculate time between each call in nanoseconds for higher resolution to\n  // minimize error.\n  int64 nsBetweenCalls[LogTimes::MAX_CALLS - 1];\n  for (size_t i = 1; i < LogTimes::MAX_CALLS; ++i) {\n",
                    "rendered": {
                      "text": "        << timeLogger << \"Timed Message #\" << timeLogger.m_streamTimes;\n  }\n\n  // Calculate time between each call in nanoseconds for higher resolution to\n  // minimize error.\n  int64 nsBetweenCalls[LogTimes::MAX_CALLS - 1];\n  for (size_t i = 1; i < LogTimes::MAX_CALLS; ++i) {\n",
                      "markdown": "`        << timeLogger << \"Timed Message #\" << timeLogger.m_streamTimes;\n  }\n\n  // Calculate time between each call in nanoseconds for higher resolution to\n  // minimize error.\n  int64 nsBetweenCalls[LogTimes::MAX_CALLS - 1];\n  for (size_t i = 1; i < LogTimes::MAX_CALLS; ++i) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 14,
                  "endLine": 1126,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  t.m_callTimes[t.m_streamTimes++] = std::chrono::steady_clock::now();\n  return stream;\n}\n// get elapsed time in nanoseconds\nint64 elapsedTime_ns(const std::chrono::steady_clock::time_point& begin,\n                     const std::chrono::steady_clock::time_point& end) {\n  return std::chrono::duration_cast<std::chrono::nanoseconds>((end - begin))\n",
                    "rendered": {
                      "text": "  t.m_callTimes[t.m_streamTimes++] = std::chrono::steady_clock::now();\n  return stream;\n}\n// get elapsed time in nanoseconds\nint64 elapsedTime_ns(const std::chrono::steady_clock::time_point& begin,\n                     const std::chrono::steady_clock::time_point& end) {\n  return std::chrono::duration_cast<std::chrono::nanoseconds>((end - begin))\n",
                      "markdown": "`  t.m_callTimes[t.m_streamTimes++] = std::chrono::steady_clock::now();\n  return stream;\n}\n// get elapsed time in nanoseconds\nint64 elapsedTime_ns(const std::chrono::steady_clock::time_point& begin,\n                     const std::chrono::steady_clock::time_point& end) {\n  return std::chrono::duration_cast<std::chrono::nanoseconds>((end - begin))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 16,
                  "endLine": 1121,
                  "endColumn": 22,
                  "snippet": {
                    "text": "};\n// The stream operator is called by LOG_EVERY_T every time a logging event\n// occurs. Make sure to save the times for each call as they will be used later\n// to verify the time delta between each call.\nstd::ostream& operator<<(std::ostream& stream, LogTimeRecorder& t) {\n  t.m_callTimes[t.m_streamTimes++] = std::chrono::steady_clock::now();\n  return stream;\n",
                    "rendered": {
                      "text": "};\n// The stream operator is called by LOG_EVERY_T every time a logging event\n// occurs. Make sure to save the times for each call as they will be used later\n// to verify the time delta between each call.\nstd::ostream& operator<<(std::ostream& stream, LogTimeRecorder& t) {\n  t.m_callTimes[t.m_streamTimes++] = std::chrono::steady_clock::now();\n  return stream;\n",
                      "markdown": "`};\n// The stream operator is called by LOG_EVERY_T every time a logging event\n// occurs. Make sure to save the times for each call as they will be used later\n// to verify the time delta between each call.\nstd::ostream& operator<<(std::ostream& stream, LogTimeRecorder& t) {\n  t.m_callTimes[t.m_streamTimes++] = std::chrono::steady_clock::now();\n  return stream;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1119,
                  "startColumn": 53,
                  "endLine": 1119,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  size_t m_streamTimes{0};\n  std::chrono::steady_clock::time_point m_callTimes[LogTimes::MAX_CALLS];\n};\n// The stream operator is called by LOG_EVERY_T every time a logging event\n// occurs. Make sure to save the times for each call as they will be used later\n// to verify the time delta between each call.\nstd::ostream& operator<<(std::ostream& stream, LogTimeRecorder& t) {\n",
                    "rendered": {
                      "text": "  size_t m_streamTimes{0};\n  std::chrono::steady_clock::time_point m_callTimes[LogTimes::MAX_CALLS];\n};\n// The stream operator is called by LOG_EVERY_T every time a logging event\n// occurs. Make sure to save the times for each call as they will be used later\n// to verify the time delta between each call.\nstd::ostream& operator<<(std::ostream& stream, LogTimeRecorder& t) {\n",
                      "markdown": "`  size_t m_streamTimes{0};\n  std::chrono::steady_clock::time_point m_callTimes[LogTimes::MAX_CALLS];\n};\n// The stream operator is called by LOG_EVERY_T every time a logging event\n// occurs. Make sure to save the times for each call as they will be used later\n// to verify the time delta between each call.\nstd::ostream& operator<<(std::ostream& stream, LogTimeRecorder& t) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 24,
                  "endLine": 1101,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nnamespace LogTimes {\n// Log a \"message\" every 10ms, 10 times. These numbers are nice compromise\n// between total running time of 100ms and the period of 10ms. The period is\n// large enough such that any CPU and OS scheduling variation shouldn't affect\n// the results from the ideal case by more than 5% (500us or 0.5ms)\nconstexpr int64_t LOG_PERIOD_NS = 10000000;    // 10ms\n",
                    "rendered": {
                      "text": "\nnamespace LogTimes {\n// Log a \"message\" every 10ms, 10 times. These numbers are nice compromise\n// between total running time of 100ms and the period of 10ms. The period is\n// large enough such that any CPU and OS scheduling variation shouldn't affect\n// the results from the ideal case by more than 5% (500us or 0.5ms)\nconstexpr int64_t LOG_PERIOD_NS = 10000000;    // 10ms\n",
                      "markdown": "`\nnamespace LogTimes {\n// Log a \"message\" every 10ms, 10 times. These numbers are nice compromise\n// between total running time of 100ms and the period of 10ms. The period is\n// large enough such that any CPU and OS scheduling variation shouldn't affect\n// the results from the ideal case by more than 5% (500us or 0.5ms)\nconstexpr int64_t LOG_PERIOD_NS = 10000000;    // 10ms\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 1100,
                  "startColumn": 58,
                  "endLine": 1100,
                  "endColumn": 64,
                  "snippet": {
                    "text": "}\n\nnamespace LogTimes {\n// Log a \"message\" every 10ms, 10 times. These numbers are nice compromise\n// between total running time of 100ms and the period of 10ms. The period is\n// large enough such that any CPU and OS scheduling variation shouldn't affect\n// the results from the ideal case by more than 5% (500us or 0.5ms)\n",
                    "rendered": {
                      "text": "}\n\nnamespace LogTimes {\n// Log a \"message\" every 10ms, 10 times. These numbers are nice compromise\n// between total running time of 100ms and the period of 10ms. The period is\n// large enough such that any CPU and OS scheduling variation shouldn't affect\n// the results from the ideal case by more than 5% (500us or 0.5ms)\n",
                      "markdown": "`}\n\nnamespace LogTimes {\n// Log a \"message\" every 10ms, 10 times. These numbers are nice compromise\n// between total running time of 100ms and the period of 10ms. The period is\n// large enough such that any CPU and OS scheduling variation shouldn't affect\n// the results from the ideal case by more than 5% (500us or 0.5ms)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/src/logging_unittest.cc"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 27,
                  "endLine": 857,
                  "snippet": {
                    "text": "\nstatic void TestTwoProcessesWrite() {\n// test only implemented for platforms with fork & wait; the actual\n// implementation relies on flock\n#if defined(HAVE_SYS_WAIT_H) && defined(HAVE_UNISTD_H) && defined(HAVE_FCNTL)\n  fprintf(stderr,\n          \"==== Test setting log file basename and two processes writing - \"\n          \"second should fail\\n\");\n",
                    "rendered": {
                      "text": "\nstatic void TestTwoProcessesWrite() {\n// test only implemented for platforms with fork & wait; the actual\n// implementation relies on flock\n#if defined(HAVE_SYS_WAIT_H) && defined(HAVE_UNISTD_H) && defined(HAVE_FCNTL)\n  fprintf(stderr,\n          \"==== Test setting log file basename and two processes writing - \"\n          \"second should fail\\n\");\n",
                      "markdown": "`\nstatic void TestTwoProcessesWrite() {\n// test only implemented for platforms with fork & wait; the actual\n// implementation relies on flock\n#if defined(HAVE_SYS_WAIT_H) && defined(HAVE_UNISTD_H) && defined(HAVE_FCNTL)\n  fprintf(stderr,\n          \"==== Test setting log file basename and two processes writing - \"\n          \"second should fail\\n\");\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/android.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 22,
                  "endLine": 36,
                  "snippet": {
                    "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                    "rendered": {
                      "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                      "markdown": "`\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/android.yml"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 14,
                  "endLine": 16,
                  "snippet": {
                    "text": "      security-events: write\n    defaults:\n      run:\n        shell: bash\n    env:\n      NDK_VERSION: 26.0.10792818\n    strategy:\n      fail-fast: true\n",
                    "rendered": {
                      "text": "      security-events: write\n    defaults:\n      run:\n        shell: bash\n    env:\n      NDK_VERSION: 26.0.10792818\n    strategy:\n      fail-fast: true\n",
                      "markdown": "`      security-events: write\n    defaults:\n      run:\n        shell: bash\n    env:\n      NDK_VERSION: 26.0.10792818\n    strategy:\n      fail-fast: true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/android.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 45,
                  "endLine": 36,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                    "rendered": {
                      "text": "      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n",
                      "markdown": "`      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/android.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 14,
                  "endLine": 35,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n",
                    "rendered": {
                      "text": "\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n",
                      "markdown": "`\n      - name: Setup Dependencies\n        run: |\n          sudo apt-get update\n          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \\\n            cmake \\\n            ninja-build\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/.github/workflows/android.yml"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 14,
                  "endLine": 16,
                  "snippet": {
                    "text": "      security-events: write\n    defaults:\n      run:\n        shell: bash\n    env:\n      NDK_VERSION: 26.0.10792818\n    strategy:\n      fail-fast: true\n",
                    "rendered": {
                      "text": "      security-events: write\n    defaults:\n      run:\n        shell: bash\n    env:\n      NDK_VERSION: 26.0.10792818\n    strategy:\n      fail-fast: true\n",
                      "markdown": "`      security-events: write\n    defaults:\n      run:\n        shell: bash\n    env:\n      NDK_VERSION: 26.0.10792818\n    strategy:\n      fail-fast: true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2015-03-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.4\n\t* See git log for the details.\n\n2013-02-01  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2015-03-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.4\n\t* See git log for the details.\n\n2013-02-01  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2015-03-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.4\n\t* See git log for the details.\n\n2013-02-01  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "endLine": 29,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2017-05-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.5\n\t* See git log for the details.\n\n2015-03-09  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2017-05-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.5\n\t* See git log for the details.\n\n2015-03-09  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2017-05-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.5\n\t* See git log for the details.\n\n2015-03-09  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 6,
                  "endLine": 24,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2019-01-22  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.4.0.\n\t* See git log for the details.\n\n2017-05-09  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2019-01-22  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.4.0.\n\t* See git log for the details.\n\n2017-05-09  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2019-01-22  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.4.0.\n\t* See git log for the details.\n\n2017-05-09  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 19,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2021-05-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.5.0.\n\t* See git log for the details.\n\n2019-01-22  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2021-05-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.5.0.\n\t* See git log for the details.\n\n2019-01-22  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2021-05-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.5.0.\n\t* See git log for the details.\n\n2019-01-22  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "endLine": 14,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2022-04-05  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.6.0.\n\t* See git log for the details.\n\n2021-05-08  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2022-04-05  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.6.0.\n\t* See git log for the details.\n\n2021-05-08  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2022-04-05  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.6.0.\n\t* See git log for the details.\n\n2021-05-08  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2024-02-17  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.0.\n\t* See git log for the details.\n\n2022-04-05  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2024-02-17  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.0.\n\t* See git log for the details.\n\n2022-04-05  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2024-02-17  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.0.\n\t* See git log for the details.\n\n2022-04-05  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/glog.zip/ChangeLog"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 6,
                  "endLine": 4,
                  "endColumn": 11,
                  "snippet": {
                    "text": "2024-06-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.1.\n\t* See git log for the details.\n\n2024-02-17  Google Inc. <opensource@google.com>\n\n",
                    "rendered": {
                      "text": "2024-06-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.1.\n\t* See git log for the details.\n\n2024-02-17  Google Inc. <opensource@google.com>\n\n",
                      "markdown": "`2024-06-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.1.\n\t* See git log for the details.\n\n2024-02-17  Google Inc. <opensource@google.com>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}