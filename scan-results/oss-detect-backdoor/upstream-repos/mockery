{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceB0_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceB0_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceB0_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/parse_test.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 7,
                  "endLine": 85,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tassert.NoError(t, err) // Expect \"redeclared in this block\" if tags aren't respected\n\n\tfound := false\n\tfor _, node := range parser.Interfaces() {\n\t\tif node.Name == \"IfaceWithCustomBuildTagInComment\" {\n\t\t\tfound = true\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tassert.NoError(t, err) // Expect \"redeclared in this block\" if tags aren't respected\n\n\tfound := false\n\tfor _, node := range parser.Interfaces() {\n\t\tif node.Name == \"IfaceWithCustomBuildTagInComment\" {\n\t\t\tfound = true\n\t\t\tbreak\n",
                      "markdown": "`\tassert.NoError(t, err) // Expect \"redeclared in this block\" if tags aren't respected\n\n\tfound := false\n\tfor _, node := range parser.Interfaces() {\n\t\tif node.Name == \"IfaceWithCustomBuildTagInComment\" {\n\t\t\tfound = true\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator_test.go"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 10,
                  "endLine": 456,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tt.Run(\"Get no arguments\", func(t *testing.T) {\n\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\tm.On(\"Get\", []string(nil)).Return(true).Once()\n\t\tres := m.Get()\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n",
                    "rendered": {
                      "text": "\tt.Run(\"Get no arguments\", func(t *testing.T) {\n\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\tm.On(\"Get\", []string(nil)).Return(true).Once()\n\t\tres := m.Get()\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n",
                      "markdown": "`\tt.Run(\"Get no arguments\", func(t *testing.T) {\n\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\tm.On(\"Get\", []string(nil)).Return(true).Once()\n\t\tres := m.Get()\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator_test.go"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 10,
                  "endLine": 448,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\targs := []string{\"1\", \"2\", \"3\"}\n\t\tm.On(\"Get\", mock.Anything).Return(true).Once()\n\t\tres := m.Get(args...)\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n",
                    "rendered": {
                      "text": "\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\targs := []string{\"1\", \"2\", \"3\"}\n\t\tm.On(\"Get\", mock.Anything).Return(true).Once()\n\t\tres := m.Get(args...)\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n",
                      "markdown": "`\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\targs := []string{\"1\", \"2\", \"3\"}\n\t\tm.On(\"Get\", mock.Anything).Return(true).Once()\n\t\tres := m.Get(args...)\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator_test.go"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 10,
                  "endLine": 439,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\targs := []string{\"1\", \"2\", \"3\"}\n\t\tm.On(\"Get\", args).Return(true).Once()\n\t\tres := m.Get(args...)\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n",
                    "rendered": {
                      "text": "\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\targs := []string{\"1\", \"2\", \"3\"}\n\t\tm.On(\"Get\", args).Return(true).Once()\n\t\tres := m.Get(args...)\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n",
                      "markdown": "`\t\tm := mocks.RequesterVariadicOneArgument{}\n\t\targs := []string{\"1\", \"2\", \"3\"}\n\t\tm.On(\"Get\", args).Return(true).Once()\n\t\tres := m.Get(args...)\n\t\tassert.True(t, res)\n\t\tm.AssertExpectations(t)\n\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/assets/images/demo.cast"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 517,
                  "endLine": 82,
                  "endColumn": 521,
                  "snippet": {
                    "text": "INF\\u001b[0m Using config: /Users/landonclipp/git/vektra/mockery/.mockery.yaml \\u001b[36mdry-run=\\u001b[0mfalse \\u001b[36mversion=\\u001b[0mv2.23.2\\r\\n\\u001b[90m06 Apr 23 14:25 CDT\\u001b[0m \\u001b[31mWRN\\u001b[0m ALPHA FEATURE: use of the 'packages' config variable is currently in an alpha state. Use at your own risk. \\u001b[36mdiscussion=\\u001b[0mhttps://github.com/vektra/mockery/discussions/549 \\u001b[36mdry-run=\\u001b[0mfalse \\u001b[36mversion=\\u001b[0mv2.23.2\\r\\n\"]\n[15.079952, \"o\", \"\\u001b[90m06 Apr 23 14:25 CDT\\u001b[0m \\u001b[32mINF\\u001b[0m done parsing, loading \\u001b[36mdry-run=\\u001b[0mfa",
                    "rendered": {
                      "text": "INF\\u001b[0m Using config: /Users/landonclipp/git/vektra/mockery/.mockery.yaml \\u001b[36mdry-run=\\u001b[0mfalse \\u001b[36mversion=\\u001b[0mv2.23.2\\r\\n\\u001b[90m06 Apr 23 14:25 CDT\\u001b[0m \\u001b[31mWRN\\u001b[0m ALPHA FEATURE: use of the 'packages' config variable is currently in an alpha state. Use at your own risk. \\u001b[36mdiscussion=\\u001b[0mhttps://github.com/vektra/mockery/discussions/549 \\u001b[36mdry-run=\\u001b[0mfalse \\u001b[36mversion=\\u001b[0mv2.23.2\\r\\n\"]\n[15.079952, \"o\", \"\\u001b[90m06 Apr 23 14:25 CDT\\u001b[0m \\u001b[32mINF\\u001b[0m done parsing, loading \\u001b[36mdry-run=\\u001b[0mfa",
                      "markdown": "`INF\\u001b[0m Using config: /Users/landonclipp/git/vektra/mockery/.mockery.yaml \\u001b[36mdry-run=\\u001b[0mfalse \\u001b[36mversion=\\u001b[0mv2.23.2\\r\\n\\u001b[90m06 Apr 23 14:25 CDT\\u001b[0m \\u001b[31mWRN\\u001b[0m ALPHA FEATURE: use of the 'packages' config variable is currently in an alpha state. Use at your own risk. \\u001b[36mdiscussion=\\u001b[0mhttps://github.com/vektra/mockery/discussions/549 \\u001b[36mdry-run=\\u001b[0mfalse \\u001b[36mversion=\\u001b[0mv2.23.2\\r\\n\"]\n[15.079952, \"o\", \"\\u001b[90m06 Apr 23 14:25 CDT\\u001b[0m \\u001b[32mINF\\u001b[0m done parsing, loading \\u001b[36mdry-run=\\u001b[0mfa`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery.go"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 7,
                  "endLine": 94,
                  "snippet": {
                    "text": "\t}\n\n\tcmd.AddCommand(NewShowConfigCmd())\n\treturn cmd\n}\n\nfunc printStackTrace(e error) {\n\tfmt.Printf(\"%v\\n\", e)\n",
                    "rendered": {
                      "text": "\t}\n\n\tcmd.AddCommand(NewShowConfigCmd())\n\treturn cmd\n}\n\nfunc printStackTrace(e error) {\n\tfmt.Printf(\"%v\\n\", e)\n",
                      "markdown": "`\t}\n\n\tcmd.AddCommand(NewShowConfigCmd())\n\treturn cmd\n}\n\nfunc printStackTrace(e error) {\n\tfmt.Printf(\"%v\\n\", e)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery.go"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfunc NewRootCmd() *cobra.Command {\n\tviperCfg = viper.NewWithOptions(viper.KeyDelimiter(\"::\"))\n\tcmd := &cobra.Command{\n\t\tUse:   \"mockery\",\n\t\tShort: \"Generate mock objects for your Golang interfaces\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n",
                    "rendered": {
                      "text": "\nfunc NewRootCmd() *cobra.Command {\n\tviperCfg = viper.NewWithOptions(viper.KeyDelimiter(\"::\"))\n\tcmd := &cobra.Command{\n\t\tUse:   \"mockery\",\n\t\tShort: \"Generate mock objects for your Golang interfaces\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n",
                      "markdown": "`\nfunc NewRootCmd() *cobra.Command {\n\tviperCfg = viper.NewWithOptions(viper.KeyDelimiter(\"::\"))\n\tcmd := &cobra.Command{\n\t\tUse:   \"mockery\",\n\t\tShort: \"Generate mock objects for your Golang interfaces\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"context\"\n\t\"errors\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"context\"\n\t\"errors\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery.go"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 30,
                  "endLine": 389,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n\tif r.Config.Name != \"\" && !generated {\n\t\tlog.Error().Msgf(\"Unable to find '%s' in any go files under this path\", r.Config.Name)\n\t\treturn fmt.Errorf(\"unable to find interface\")\n\t}\n\n\treturn nil\n",
                    "rendered": {
                      "text": "\n\tif r.Config.Name != \"\" && !generated {\n\t\tlog.Error().Msgf(\"Unable to find '%s' in any go files under this path\", r.Config.Name)\n\t\treturn fmt.Errorf(\"unable to find interface\")\n\t}\n\n\treturn nil\n",
                      "markdown": "`\n\tif r.Config.Name != \"\" && !generated {\n\t\tlog.Error().Msgf(\"Unable to find '%s' in any go files under this path\", r.Config.Name)\n\t\treturn fmt.Errorf(\"unable to find interface\")\n\t}\n\n\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery.go"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 29,
                  "endLine": 388,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tgenerated := walker.Walk(ctx, visitor)\n\n\tif r.Config.Name != \"\" && !generated {\n\t\tlog.Error().Msgf(\"Unable to find '%s' in any go files under this path\", r.Config.Name)\n\t\treturn fmt.Errorf(\"unable to find interface\")\n\t}\n\n",
                    "rendered": {
                      "text": "\tgenerated := walker.Walk(ctx, visitor)\n\n\tif r.Config.Name != \"\" && !generated {\n\t\tlog.Error().Msgf(\"Unable to find '%s' in any go files under this path\", r.Config.Name)\n\t\treturn fmt.Errorf(\"unable to find interface\")\n\t}\n\n",
                      "markdown": "`\tgenerated := walker.Walk(ctx, visitor)\n\n\tif r.Config.Name != \"\" && !generated {\n\t\tlog.Error().Msgf(\"Unable to find '%s' in any go files under this path\", r.Config.Name)\n\t\treturn fmt.Errorf(\"unable to find interface\")\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 40,
                  "endLine": 144,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\t\t\t// Find home directory.\n\t\t\thome, err := homedir.Dir()\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal().Err(err).Msgf(\"Failed to find homedir\")\n\t\t\t}\n\n\t\t\tcurrentDir := baseSearchPath\n",
                    "rendered": {
                      "text": "\t\t\t// Find home directory.\n\t\t\thome, err := homedir.Dir()\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal().Err(err).Msgf(\"Failed to find homedir\")\n\t\t\t}\n\n\t\t\tcurrentDir := baseSearchPath\n",
                      "markdown": "`\t\t\t// Find home directory.\n\t\t\thome, err := homedir.Dir()\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal().Err(err).Msgf(\"Failed to find homedir\")\n\t\t\t}\n\n\t\t\tcurrentDir := baseSearchPath\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/showconfig_test.go"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "endColumn": 5,
                  "snippet": {
                    "text": ")\n\nfunc TestNewShowConfigCmd(t *testing.T) {\n\tcmd := NewShowConfigCmd()\n\tassert.Equal(t, \"showconfig\", cmd.Name())\n}\n\n",
                    "rendered": {
                      "text": ")\n\nfunc TestNewShowConfigCmd(t *testing.T) {\n\tcmd := NewShowConfigCmd()\n\tassert.Equal(t, \"showconfig\", cmd.Name())\n}\n\n",
                      "markdown": "`)\n\nfunc TestNewShowConfigCmd(t *testing.T) {\n\tcmd := NewShowConfigCmd()\n\tassert.Equal(t, \"showconfig\", cmd.Name())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/showconfig_test.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/showconfig.go"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "endColumn": 5,
                  "snippet": {
                    "text": "}\n\nfunc showConfig(\n\tcmd *cobra.Command,\n\targs []string,\n\tv *viper.Viper,\n\toutputter io.Writer,\n",
                    "rendered": {
                      "text": "}\n\nfunc showConfig(\n\tcmd *cobra.Command,\n\targs []string,\n\tv *viper.Viper,\n\toutputter io.Writer,\n",
                      "markdown": "`}\n\nfunc showConfig(\n\tcmd *cobra.Command,\n\targs []string,\n\tv *viper.Viper,\n\toutputter io.Writer,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/showconfig.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"context\"\n\t\"fmt\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"context\"\n\t\"fmt\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"context\"\n\t\"fmt\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t\tconfigPath: \"1/2/3/4/.mockery.yaml\",\n\t\t},\n\t\t{\n\t\t\tname:       \"test config at upper directory\",\n\t\t\tbase_path:  \"1/2/3/4\",\n\t\t\tconfigPath: \"1/.mockery.yaml\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\tconfigPath: \"1/2/3/4/.mockery.yaml\",\n\t\t},\n\t\t{\n\t\t\tname:       \"test config at upper directory\",\n\t\t\tbase_path:  \"1/2/3/4\",\n\t\t\tconfigPath: \"1/.mockery.yaml\",\n\t\t},\n",
                      "markdown": "`\t\t\tconfigPath: \"1/2/3/4/.mockery.yaml\",\n\t\t},\n\t\t{\n\t\t\tname:       \"test config at upper directory\",\n\t\t\tbase_path:  \"1/2/3/4\",\n\t\t\tconfigPath: \"1/.mockery.yaml\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 27,
                  "endLine": 27,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\tconfigPath string\n\t}{\n\t\t{\n\t\t\tname:       \"test config at base directory\",\n\t\t\tbase_path:  \"1/2/3/4\",\n\t\t\tconfigPath: \"1/2/3/4/.mockery.yaml\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\tconfigPath string\n\t}{\n\t\t{\n\t\t\tname:       \"test config at base directory\",\n\t\t\tbase_path:  \"1/2/3/4\",\n\t\t\tconfigPath: \"1/2/3/4/.mockery.yaml\",\n\t\t},\n",
                      "markdown": "`\t\tconfigPath string\n\t}{\n\t\t{\n\t\t\tname:       \"test config at base directory\",\n\t\t\tbase_path:  \"1/2/3/4\",\n\t\t\tconfigPath: \"1/2/3/4/.mockery.yaml\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery_test.go"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "endColumn": 5,
                  "snippet": {
                    "text": ")\n\nfunc TestNewRootCmd(t *testing.T) {\n\tcmd := NewRootCmd()\n\tassert.Equal(t, \"mockery\", cmd.Name())\n}\n\n",
                    "rendered": {
                      "text": ")\n\nfunc TestNewRootCmd(t *testing.T) {\n\tcmd := NewRootCmd()\n\tassert.Equal(t, \"mockery\", cmd.Name())\n}\n\n",
                      "markdown": "`)\n\nfunc TestNewRootCmd(t *testing.T) {\n\tcmd := NewRootCmd()\n\tassert.Equal(t, \"mockery\", cmd.Name())\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/cmd/mockery_test.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArgSameAsImport.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArgSameAsImport.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArgSameAsImport.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 *json.RawMessage\n\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 *json.RawMessage\n\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 *json.RawMessage\n\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/parse.go"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 25,
                  "endLine": 380,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\tcase *ast.InterfaceType, *ast.IndexExpr:\n\t\t\tnv.add(nv.ctx, n)\n\t\tdefault:\n\t\t\tlog.Debug().Msg(\"Found node with unacceptable type for mocking. Rejecting.\")\n\t\t}\n\t}\n\treturn nv\n",
                    "rendered": {
                      "text": "\t\tcase *ast.InterfaceType, *ast.IndexExpr:\n\t\t\tnv.add(nv.ctx, n)\n\t\tdefault:\n\t\t\tlog.Debug().Msg(\"Found node with unacceptable type for mocking. Rejecting.\")\n\t\t}\n\t}\n\treturn nv\n",
                      "markdown": "`\t\tcase *ast.InterfaceType, *ast.IndexExpr:\n\t\t\tnv.add(nv.ctx, n)\n\t\tdefault:\n\t\t\tlog.Debug().Msg(\"Found node with unacceptable type for mocking. Rejecting.\")\n\t\t}\n\t}\n\treturn nv\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/parse.go"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 12,
                  "endLine": 357,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tlog := zerolog.Ctx(ctx)\n\tlog.Debug().\n\t\tStr(\"node-type\", fmt.Sprintf(\"%T\", n.Type)).\n\t\tMsg(\"found node with acceptable type for mocking\")\n\tnv.declaredInterfaces = append(nv.declaredInterfaces, n.Name.Name)\n}\n\n",
                    "rendered": {
                      "text": "\tlog := zerolog.Ctx(ctx)\n\tlog.Debug().\n\t\tStr(\"node-type\", fmt.Sprintf(\"%T\", n.Type)).\n\t\tMsg(\"found node with acceptable type for mocking\")\n\tnv.declaredInterfaces = append(nv.declaredInterfaces, n.Name.Name)\n}\n\n",
                      "markdown": "`\tlog := zerolog.Ctx(ctx)\n\tlog.Debug().\n\t\tStr(\"node-type\", fmt.Sprintf(\"%T\", n.Type)).\n\t\tMsg(\"found node with acceptable type for mocking\")\n\tnv.declaredInterfaces = append(nv.declaredInterfaces, n.Name.Name)\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/walker.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 57,
                  "endLine": 36,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\tctx = log.WithContext(ctx)\n\n\tlog.Info().Msgf(\"Walking\")\n\tlog.Debug().Str(\"baseDir\", w.BaseDir).Msg(\"starting walk at base dir\")\n\n\tparser := NewParser(w.BuildTags)\n\tw.doWalk(ctx, parser, w.BaseDir)\n",
                    "rendered": {
                      "text": "\tctx = log.WithContext(ctx)\n\n\tlog.Info().Msgf(\"Walking\")\n\tlog.Debug().Str(\"baseDir\", w.BaseDir).Msg(\"starting walk at base dir\")\n\n\tparser := NewParser(w.BuildTags)\n\tw.doWalk(ctx, parser, w.BaseDir)\n",
                      "markdown": "`\tctx = log.WithContext(ctx)\n\n\tlog.Info().Msgf(\"Walking\")\n\tlog.Debug().Str(\"baseDir\", w.BaseDir).Msg(\"starting walk at base dir\")\n\n\tparser := NewParser(w.BuildTags)\n\tw.doWalk(ctx, parser, w.BaseDir)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/features.md"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 22,
                  "endLine": 313,
                  "endColumn": 27,
                  "snippet": {
                    "text": "You can use the expecter interface as such:\n```go\nrequesterMock := mocks.NewRequester(t)\nrequesterMock.EXPECT().Get(\"some path\").Return(\"result\", nil)\n```\n\nA `RunAndReturn` method is also available on the expecter struct that allows you to dynamically set a return value based on the input to the mock's call.\n",
                    "rendered": {
                      "text": "You can use the expecter interface as such:\n```go\nrequesterMock := mocks.NewRequester(t)\nrequesterMock.EXPECT().Get(\"some path\").Return(\"result\", nil)\n```\n\nA `RunAndReturn` method is also available on the expecter struct that allows you to dynamically set a return value based on the input to the mock's call.\n",
                      "markdown": "`You can use the expecter interface as such:\n```go\nrequesterMock := mocks.NewRequester(t)\nrequesterMock.EXPECT().Get(\"some path\").Return(\"result\", nil)\n```\n\nA `RunAndReturn` method is also available on the expecter struct that allows you to dynamically set a return value based on the input to the mock's call.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/features.md"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 60,
                  "endLine": 292,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nThe constructor sets up common functionalities automatically\n\n- The `AssertExpectations` method is registered to be called at the end of the tests via `t.Cleanup()` method.\n- The testing.TB interface is registered on the `mock.Mock` so that tests don't panic when a call on the mock is unexpected.\n\n\n",
                    "rendered": {
                      "text": "\nThe constructor sets up common functionalities automatically\n\n- The `AssertExpectations` method is registered to be called at the end of the tests via `t.Cleanup()` method.\n- The testing.TB interface is registered on the `mock.Mock` so that tests don't panic when a call on the mock is unexpected.\n\n\n",
                      "markdown": "`\nThe constructor sets up common functionalities automatically\n\n- The `AssertExpectations` method is registered to be called at the end of the tests via `t.Cleanup()` method.\n- The testing.TB interface is registered on the `mock.Mock` so that tests don't panic when a call on the mock is unexpected.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/features.md"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 93,
                  "endLine": 192,
                  "endColumn": 97,
                  "snippet": {
                    "text": "          unroll-variadic: False\n          - mockname: MockRequesterVariadic\n  io:\n    config:\n      all: True # (3)!\n    interfaces:\n      Writer:\n        config:\n          with-expecter: False # (4)!\n```\n\n1.  For this package, we provide no package-level config (which means we inherit the defaults at the top-level). Since our default of `all:` is `False`, mockery will only generate the interfaces we specify. We tell it which interface to generate by using the `interfaces` section and specifying an empty map, one for each interface.\n2. There might be cases where you want multiple mocks generated ",
                    "rendered": {
                      "text": "          unroll-variadic: False\n          - mockname: MockRequesterVariadic\n  io:\n    config:\n      all: True # (3)!\n    interfaces:\n      Writer:\n        config:\n          with-expecter: False # (4)!\n```\n\n1.  For this package, we provide no package-level config (which means we inherit the defaults at the top-level). Since our default of `all:` is `False`, mockery will only generate the interfaces we specify. We tell it which interface to generate by using the `interfaces` section and specifying an empty map, one for each interface.\n2. There might be cases where you want multiple mocks generated ",
                      "markdown": "`          unroll-variadic: False\n          - mockname: MockRequesterVariadic\n  io:\n    config:\n      all: True # (3)!\n    interfaces:\n      Writer:\n        config:\n          with-expecter: False # (4)!\n```\n\n1.  For this package, we provide no package-level config (which means we inherit the defaults at the top-level). Since our default of `all:` is `False`, mockery will only generate the interfaces we specify. We tell it which interface to generate by using the `interfaces` section and specifying an empty map, one for each interface.\n2. There might be cases where you want multiple mocks generated `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/features.md"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 11,
                  "endLine": 162,
                  "endColumn": 20,
                  "snippet": {
                    "text": "Usage of the `packages` config section is desirable for multiple reasons:\n\n1. Up to 5x increase in mock generation speed over the legacy method\n2. Granular control over interface generation, location, and file names\n3. Singular location for all config, instead of spread around by `//go:generate` statements\n4. Clean, easy to understand.\n\n",
                    "rendered": {
                      "text": "Usage of the `packages` config section is desirable for multiple reasons:\n\n1. Up to 5x increase in mock generation speed over the legacy method\n2. Granular control over interface generation, location, and file names\n3. Singular location for all config, instead of spread around by `//go:generate` statements\n4. Clean, easy to understand.\n\n",
                      "markdown": "`Usage of the `packages` config section is desirable for multiple reasons:\n\n1. Up to 5x increase in mock generation speed over the legacy method\n2. Granular control over interface generation, location, and file names\n3. Singular location for all config, instead of spread around by `//go:generate` statements\n4. Clean, easy to understand.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/examples.md"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 17,
                  "endLine": 96,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(data)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(data)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(data)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/examples.md"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 10,
                  "endLine": 92,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tvar r1 error\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tvar r1 error\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tvar r1 error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/examples.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 17,
                  "endLine": 89,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tret := _m.Called(data)\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\tret := _m.Called(data)\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\tret := _m.Called(data)\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/changelog.md"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 22,
                  "endLine": 106,
                  "endColumn": 27,
                  "snippet": {
                    "text": "You can use the type-safe expecter interface as such:\n```go\nrequesterMock := mocks.NewRequester(t)\nrequesterMock.EXPECT().Get(\"some path\").Return(\"result\", nil)\nrequesterMock.EXPECT().\n\tGet(mock.Anything).\n\tRun(func(path string) { fmt.Println(path, \"was called\") }).\n",
                    "rendered": {
                      "text": "You can use the type-safe expecter interface as such:\n```go\nrequesterMock := mocks.NewRequester(t)\nrequesterMock.EXPECT().Get(\"some path\").Return(\"result\", nil)\nrequesterMock.EXPECT().\n\tGet(mock.Anything).\n\tRun(func(path string) { fmt.Println(path, \"was called\") }).\n",
                      "markdown": "`You can use the type-safe expecter interface as such:\n```go\nrequesterMock := mocks.NewRequester(t)\nrequesterMock.EXPECT().Get(\"some path\").Return(\"result\", nil)\nrequesterMock.EXPECT().\n\tGet(mock.Anything).\n\tRun(func(path string) { fmt.Println(path, \"was called\") }).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/changelog.md"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 23,
                  "endLine": 116,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n### :octicons-tag-24: [`v2.0.0`](https://github.com/vektra/mockery/releases/tag/v2.0.0): Major Update\n\nThis is the first major update of mockery. Version 2 brings a handful of improvements to mockery:\n\n- Structured and pretty console logging\n- CLI now switches over to sp13/cobra\n",
                    "rendered": {
                      "text": "\n### :octicons-tag-24: [`v2.0.0`](https://github.com/vektra/mockery/releases/tag/v2.0.0): Major Update\n\nThis is the first major update of mockery. Version 2 brings a handful of improvements to mockery:\n\n- Structured and pretty console logging\n- CLI now switches over to sp13/cobra\n",
                      "markdown": "`\n### :octicons-tag-24: [`v2.0.0`](https://github.com/vektra/mockery/releases/tag/v2.0.0): Major Update\n\nThis is the first major update of mockery. Version 2 brings a handful of improvements to mockery:\n\n- Structured and pretty console logging\n- CLI now switches over to sp13/cobra\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/changelog.md"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 94,
                  "endLine": 115,
                  "snippet": {
                    "text": "\tCall.Return(func(path string) string { return \"result for \" + path }, nil)\n```\n\n### :octicons-tag-24: [`v2.0.0`](https://github.com/vektra/mockery/releases/tag/v2.0.0): Major Update\n\nThis is the first major update of mockery. Version 2 brings a handful of improvements to mockery:\n\n- Structured and pretty console logging\n",
                    "rendered": {
                      "text": "\tCall.Return(func(path string) string { return \"result for \" + path }, nil)\n```\n\n### :octicons-tag-24: [`v2.0.0`](https://github.com/vektra/mockery/releases/tag/v2.0.0): Major Update\n\nThis is the first major update of mockery. Version 2 brings a handful of improvements to mockery:\n\n- Structured and pretty console logging\n",
                      "markdown": "`\tCall.Return(func(path string) string { return \"result for \" + path }, nil)\n```\n\n### :octicons-tag-24: [`v2.0.0`](https://github.com/vektra/mockery/releases/tag/v2.0.0): Major Update\n\nThis is the first major update of mockery. Version 2 brings a handful of improvements to mockery:\n\n- Structured and pretty console logging\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/changelog.md"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 60,
                  "endLine": 89,
                  "endColumn": 64,
                  "snippet": {
                    "text": "```\n\nThe constructor sets up common functionalities automatically\n- The `AssertExpectations` method is registered to be called at the end of the tests via `t.Cleanup()` method.\n- The testing.TB interface is registered on the `mock.Mock` so that tests don't panic when a call on the mock is unexpected.\n\n### :octicons-tag-24: [`v2.10.0`](https://github.com/vektra/mockery/pull/396): Expecter Structs\n",
                    "rendered": {
                      "text": "```\n\nThe constructor sets up common functionalities automatically\n- The `AssertExpectations` method is registered to be called at the end of the tests via `t.Cleanup()` method.\n- The testing.TB interface is registered on the `mock.Mock` so that tests don't panic when a call on the mock is unexpected.\n\n### :octicons-tag-24: [`v2.10.0`](https://github.com/vektra/mockery/pull/396): Expecter Structs\n",
                      "markdown": "````\n\nThe constructor sets up common functionalities automatically\n- The `AssertExpectations` method is registered to be called at the end of the tests via `t.Cleanup()` method.\n- The testing.TB interface is registered on the `mock.Mock` so that tests don't panic when a call on the mock is unexpected.\n\n### :octicons-tag-24: [`v2.10.0`](https://github.com/vektra/mockery/pull/396): Expecter Structs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/changelog.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 178,
                  "endLine": 25,
                  "endColumn": 187,
                  "snippet": {
                    "text": "# :octicons-tag-24: [`v2.21.0`](https://github.com/vektra/mockery/releases/tag/v2.21.0): `#!yaml packages` configuration\n\nIn this version we release the `#!yaml packages` configuration section. This new parameter allows defining specific packages to generate mocks for, while also giving fine-grained control over which interfaces are mocked, where they are located, and how they are configured. Details are provided [here](features.md#packages-configuration).\n\nCommunity input is desired before we consider deprecations of dynamic walking (via `#!yaml all: True`): https://github.com/vektra/mockery/discussio",
                    "rendered": {
                      "text": "# :octicons-tag-24: [`v2.21.0`](https://github.com/vektra/mockery/releases/tag/v2.21.0): `#!yaml packages` configuration\n\nIn this version we release the `#!yaml packages` configuration section. This new parameter allows defining specific packages to generate mocks for, while also giving fine-grained control over which interfaces are mocked, where they are located, and how they are configured. Details are provided [here](features.md#packages-configuration).\n\nCommunity input is desired before we consider deprecations of dynamic walking (via `#!yaml all: True`): https://github.com/vektra/mockery/discussio",
                      "markdown": "`# :octicons-tag-24: [`v2.21.0`](https://github.com/vektra/mockery/releases/tag/v2.21.0): `#!yaml packages` configuration\n\nIn this version we release the `#!yaml packages` configuration section. This new parameter allows defining specific packages to generate mocks for, while also giving fine-grained control over which interfaces are mocked, where they are located, and how they are configured. Details are provided [here](features.md#packages-configuration).\n\nCommunity input is desired before we consider deprecations of dynamic walking (via `#!yaml all: True`): https://github.com/vektra/mockery/discussio`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/migrating_to_packages.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 69,
                  "endLine": 32,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\n#### Separate `mocks/` directory\n\nTake for example a configuration where you are specifying `all: true` at the top of your repo, and you're placing your mocks in a separate `mocks/` directory, mirroring the directory structure of your original repo.\n\n```yaml\ntestonly: False\n",
                    "rendered": {
                      "text": "\n#### Separate `mocks/` directory\n\nTake for example a configuration where you are specifying `all: true` at the top of your repo, and you're placing your mocks in a separate `mocks/` directory, mirroring the directory structure of your original repo.\n\n```yaml\ntestonly: False\n",
                      "markdown": "`\n#### Separate `mocks/` directory\n\nTake for example a configuration where you are specifying `all: true` at the top of your repo, and you're placing your mocks in a separate `mocks/` directory, mirroring the directory structure of your original repo.\n\n```yaml\ntestonly: False\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/migrating_to_packages.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 60,
                  "endLine": 26,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nThe [configuration docs](configuration.md#parameter-descriptions) show the parameters that are available for use in the `packages` scheme. You should only use the parameters shown in this section. Mockery will not prevent you from using the legacy parameter set, but doing so will result in undefined behavior.\n\nAll of the parameters in the config section can be specified at the top level of the config file, which serves as the default values. The `packages` config section defines package-specific config. See some examples [here](features.md#examples).\n\n### Examples\n\n",
                    "rendered": {
                      "text": "\nThe [configuration docs](configuration.md#parameter-descriptions) show the parameters that are available for use in the `packages` scheme. You should only use the parameters shown in this section. Mockery will not prevent you from using the legacy parameter set, but doing so will result in undefined behavior.\n\nAll of the parameters in the config section can be specified at the top level of the config file, which serves as the default values. The `packages` config section defines package-specific config. See some examples [here](features.md#examples).\n\n### Examples\n\n",
                      "markdown": "`\nThe [configuration docs](configuration.md#parameter-descriptions) show the parameters that are available for use in the `packages` scheme. You should only use the parameters shown in this section. Mockery will not prevent you from using the legacy parameter set, but doing so will result in undefined behavior.\n\nAll of the parameters in the config section can be specified at the top level of the config file, which serves as the default values. The `packages` config section defines package-specific config. See some examples [here](features.md#examples).\n\n### Examples\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/migrating_to_packages.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 76,
                  "endLine": 32,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n#### Separate `mocks/` directory\n\nTake for example a configuration where you are specifying `all: true` at the top of your repo, and you're placing your mocks in a separate `mocks/` directory, mirroring the directory structure of your original repo.\n\n```yaml\ntestonly: False\n",
                    "rendered": {
                      "text": "\n#### Separate `mocks/` directory\n\nTake for example a configuration where you are specifying `all: true` at the top of your repo, and you're placing your mocks in a separate `mocks/` directory, mirroring the directory structure of your original repo.\n\n```yaml\ntestonly: False\n",
                      "markdown": "`\n#### Separate `mocks/` directory\n\nTake for example a configuration where you are specifying `all: true` at the top of your repo, and you're placing your mocks in a separate `mocks/` directory, mirroring the directory structure of your original repo.\n\n```yaml\ntestonly: False\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/migrating_to_packages.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 67,
                  "endLine": 26,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\nThe [configuration docs](configuration.md#parameter-descriptions) show the parameters that are available for use in the `packages` scheme. You should only use the parameters shown in this section. Mockery will not prevent you from using the legacy parameter set, but doing so will result in undefined behavior.\n\nAll of the parameters in the config section can be specified at the top level of the config file, which serves as the default values. The `packages` config section defines package-specific config. See some examples [here](features.md#examples).\n\n### Examples\n\n",
                    "rendered": {
                      "text": "\nThe [configuration docs](configuration.md#parameter-descriptions) show the parameters that are available for use in the `packages` scheme. You should only use the parameters shown in this section. Mockery will not prevent you from using the legacy parameter set, but doing so will result in undefined behavior.\n\nAll of the parameters in the config section can be specified at the top level of the config file, which serves as the default values. The `packages` config section defines package-specific config. See some examples [here](features.md#examples).\n\n### Examples\n\n",
                      "markdown": "`\nThe [configuration docs](configuration.md#parameter-descriptions) show the parameters that are available for use in the `packages` scheme. You should only use the parameters shown in this section. Mockery will not prevent you from using the legacy parameter set, but doing so will result in undefined behavior.\n\nAll of the parameters in the config section can be specified at the top level of the config file, which serves as the default values. The `packages` config section defines package-specific config. See some examples [here](features.md#examples).\n\n### Examples\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ConsulLock.go"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 17,
                  "endLine": 87,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ConsulLock.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(<-chan struct{}) error); ok {\n\t\tr1 = rf(_a0)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(<-chan struct{}) error); ok {\n\t\tr1 = rf(_a0)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(<-chan struct{}) error); ok {\n\t\tr1 = rf(_a0)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ConsulLock.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan struct{})\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan struct{})\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan struct{})\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ConsulLock.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan struct{})\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan struct{})\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan struct{})\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ConsulLock.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {\n\t\treturn rf(_a0)\n\t}\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {\n\t\treturn rf(_a0)\n\t}\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {\n\t\treturn rf(_a0)\n\t}\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ConsulLock.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 <-chan struct{}\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {\n\t\treturn rf(_a0)\n\t}\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 <-chan struct{}\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {\n\t\treturn rf(_a0)\n\t}\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n",
                      "markdown": "`\n\tvar r0 <-chan struct{}\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) (<-chan struct{}, error)); ok {\n\t\treturn rf(_a0)\n\t}\n\tif rf, ok := ret.Get(0).(func(<-chan struct{}) <-chan struct{}); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Fooer.go"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(func(string) string) error); ok {\n\t\tr0 = rf(f)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(func(string) string) error); ok {\n\t\tr0 = rf(f)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(func(string) string) error); ok {\n\t\tr0 = rf(f)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Fooer.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 11,
                  "endLine": 66,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string) string)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string) string)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string) string)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Fooer.go"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 8,
                  "endLine": 65,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string) string)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string) string)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string) string)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Fooer.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "endLine": 62,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 func(string) string\n\tif rf, ok := ret.Get(0).(func(string) func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 func(string) string\n\tif rf, ok := ret.Get(0).(func(string) func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 func(string) string\n\tif rf, ok := ret.Get(0).(func(string) func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/GetInt.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/GetInt.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGenericSelf.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() *ReplaceGenericSelf); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(*ReplaceGenericSelf)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() *ReplaceGenericSelf); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(*ReplaceGenericSelf)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() *ReplaceGenericSelf); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(*ReplaceGenericSelf)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGenericSelf.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 *ReplaceGenericSelf\n\tif rf, ok := ret.Get(0).(func() *ReplaceGenericSelf); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(*ReplaceGenericSelf)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 *ReplaceGenericSelf\n\tif rf, ok := ret.Get(0).(func() *ReplaceGenericSelf); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(*ReplaceGenericSelf)\n",
                      "markdown": "`\t}\n\n\tvar r0 *ReplaceGenericSelf\n\tif rf, ok := ret.Get(0).(func() *ReplaceGenericSelf); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(*ReplaceGenericSelf)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/MapFunc.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(map[string]func(string) string) error); ok {\n\t\tr0 = rf(m)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(map[string]func(string) string) error); ok {\n\t\tr0 = rf(m)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(map[string]func(string) string) error); ok {\n\t\tr0 = rf(m)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/StructWithTag.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 11,
                  "endLine": 48,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(v)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*struct {\n\t\t\t\tFieldC int `json:\"field_c\"`\n\t\t\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n\t\t\t})\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(v)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*struct {\n\t\t\t\tFieldC int `json:\"field_c\"`\n\t\t\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n\t\t\t})\n",
                      "markdown": "`\t\tr0 = rf(v)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*struct {\n\t\t\t\tFieldC int `json:\"field_c\"`\n\t\t\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n\t\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/StructWithTag.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 8,
                  "endLine": 47,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t}); ok {\n\t\tr0 = rf(v)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*struct {\n\t\t\t\tFieldC int `json:\"field_c\"`\n\t\t\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n",
                    "rendered": {
                      "text": "\t}); ok {\n\t\tr0 = rf(v)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*struct {\n\t\t\t\tFieldC int `json:\"field_c\"`\n\t\t\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n",
                      "markdown": "`\t}); ok {\n\t\tr0 = rf(v)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*struct {\n\t\t\t\tFieldC int `json:\"field_c\"`\n\t\t\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/StructWithTag.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "endLine": 38,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tFieldC int `json:\"field_c\"`\n\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n\t}\n\tif rf, ok := ret.Get(0).(func(*struct {\n\t\tFieldA int `json:\"field_a\"`\n\t\tFieldB int `json:\"field_b\" xml:\"field_b\"`\n\t}) *struct {\n",
                    "rendered": {
                      "text": "\t\tFieldC int `json:\"field_c\"`\n\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n\t}\n\tif rf, ok := ret.Get(0).(func(*struct {\n\t\tFieldA int `json:\"field_a\"`\n\t\tFieldB int `json:\"field_b\" xml:\"field_b\"`\n\t}) *struct {\n",
                      "markdown": "`\t\tFieldC int `json:\"field_c\"`\n\t\tFieldD int `json:\"field_d\" xml:\"field_d\"`\n\t}\n\tif rf, ok := ret.Get(0).(func(*struct {\n\t\tFieldA int `json:\"field_a\"`\n\t\tFieldB int `json:\"field_b\" xml:\"field_b\"`\n\t}) *struct {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/Foo_mock.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/Foo_mock.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/buildtag/comment/IfaceWithCustomBuildTagInComment.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 10,
                  "endLine": 69,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/buildtag/comment/IfaceWithCustomBuildTagInComment.go"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/SendFunc.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, data)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, data)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, data)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/SendFunc.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n\t\tr0 = rf(ctx, data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n\t\tr0 = rf(ctx, data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n\t\tr0 = rf(ctx, data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/SendFunc.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "endLine": 37,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {\n\t\treturn rf(ctx, data)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n\t\tr0 = rf(ctx, data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {\n\t\treturn rf(ctx, data)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n\t\tr0 = rf(ctx, data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {\n\t\treturn rf(ctx, data)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n\t\tr0 = rf(ctx, data)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/SendFunc.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {\n\t\treturn rf(ctx, data)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {\n\t\treturn rf(ctx, data)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n",
                      "markdown": "`\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {\n\t\treturn rf(ctx, data)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterPtr.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterPtr.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*string)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*string)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*string)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterPtr.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*string)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*string)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*string)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterPtr.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) (*string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) (*string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) (*string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterPtr.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 *string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (*string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 *string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (*string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n",
                      "markdown": "`\n\tvar r0 *string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (*string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) *string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/HasConflictingNestedImports.go"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 10,
                  "endLine": 94,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/HasConflictingNestedImports.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 17,
                  "endLine": 91,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 fixtureshttp.MyStruct\n\tif rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 fixtureshttp.MyStruct\n\tif rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n",
                      "markdown": "`\t}\n\n\tvar r0 fixtureshttp.MyStruct\n\tif rf, ok := ret.Get(0).(func() fixtureshttp.MyStruct); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/HasConflictingNestedImports.go"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "endLine": 45,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/HasConflictingNestedImports.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/HasConflictingNestedImports.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "endLine": 39,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/HasConflictingNestedImports.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 http.Response\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 http.Response\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n",
                      "markdown": "`\n\tvar r0 http.Response\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArray.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArray.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([2]string)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([2]string)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([2]string)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArray.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([2]string)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([2]string)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([2]string)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArray.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) ([2]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) ([2]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) ([2]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArray.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 [2]string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) ([2]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 [2]string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) ([2]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n",
                      "markdown": "`\n\tvar r0 [2]string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) ([2]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) [2]string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Issue766.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(func(...int) ([]int, error)) error); ok {\n\t\tr1 = rf(fetchFunc)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(func(...int) ([]int, error)) error); ok {\n\t\tr1 = rf(fetchFunc)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(func(...int) ([]int, error)) error); ok {\n\t\tr1 = rf(fetchFunc)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Issue766.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]int)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]int)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]int)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Issue766.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]int)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]int)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]int)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Issue766.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) ([]int, error)); ok {\n\t\treturn rf(fetchFunc)\n\t}\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) ([]int, error)); ok {\n\t\treturn rf(fetchFunc)\n\t}\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) ([]int, error)); ok {\n\t\treturn rf(fetchFunc)\n\t}\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n\t\tr0 = rf(fetchFunc)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Issue766.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 []int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) ([]int, error)); ok {\n\t\treturn rf(fetchFunc)\n\t}\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 []int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) ([]int, error)); ok {\n\t\treturn rf(fetchFunc)\n\t}\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n",
                      "markdown": "`\n\tvar r0 []int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) ([]int, error)); ok {\n\t\treturn rf(fetchFunc)\n\t}\n\tif rf, ok := ret.Get(0).(func(func(...int) ([]int, error)) []int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/UsesAny.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(any)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(any)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(any)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/UsesAny.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() any); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(any)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() any); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(any)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() any); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(any)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/UsesAny.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 any\n\tif rf, ok := ret.Get(0).(func() any); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 any\n\tif rf, ok := ret.Get(0).(func() any); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 any\n\tif rf, ok := ret.Get(0).(func() any); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/TypesPackage.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 10,
                  "endLine": 77,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/TypesPackage.go"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/TypesPackage.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/TypesPackage.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/index.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 16,
                  "endLine": 66,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\nfunc Test_getFromDB(t *testing.T) {\n\tmockDB := NewMockDB(t)\n\tmockDB.EXPECT().Get(\"ice cream\").Return(\"chocolate\").Once()\n\tflavor := getFromDB(mockDB)\n\tassert.Equal(t, \"chocolate\", flavor)\n}\n",
                    "rendered": {
                      "text": "\nfunc Test_getFromDB(t *testing.T) {\n\tmockDB := NewMockDB(t)\n\tmockDB.EXPECT().Get(\"ice cream\").Return(\"chocolate\").Once()\n\tflavor := getFromDB(mockDB)\n\tassert.Equal(t, \"chocolate\", flavor)\n}\n",
                      "markdown": "`\nfunc Test_getFromDB(t *testing.T) {\n\tmockDB := NewMockDB(t)\n\tmockDB.EXPECT().Get(\"ice cream\").Return(\"chocolate\").Once()\n\tflavor := getFromDB(mockDB)\n\tassert.Equal(t, \"chocolate\", flavor)\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/index.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 10,
                  "endLine": 24,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n```golang title=\"db_getter.go\"\nfunc getFromDB(db DB) string {\n\treturn db.Get(\"ice cream\")\n}\n```\n\n",
                    "rendered": {
                      "text": "\n```golang title=\"db_getter.go\"\nfunc getFromDB(db DB) string {\n\treturn db.Get(\"ice cream\")\n}\n```\n\n",
                      "markdown": "`\n```golang title=\"db_getter.go\"\nfunc getFromDB(db DB) string {\n\treturn db.Get(\"ice cream\")\n}\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/index.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 65,
                  "endLine": 77,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n1. mockery provides a much more user-friendly API and is less confusing to use\n2. mockery utilizes `testify` which is a robust and highly feature-rich testing framework\n3. mockery has rich configuration options that allow fine-grained control over how your mocks are generated\n4. mockery's CLI is more robust, user-friendly, and provides many more options\n5. mockery supports generics (this may no longer be an advantage if/when gomock supports generics)\n\n",
                    "rendered": {
                      "text": "\n1. mockery provides a much more user-friendly API and is less confusing to use\n2. mockery utilizes `testify` which is a robust and highly feature-rich testing framework\n3. mockery has rich configuration options that allow fine-grained control over how your mocks are generated\n4. mockery's CLI is more robust, user-friendly, and provides many more options\n5. mockery supports generics (this may no longer be an advantage if/when gomock supports generics)\n\n",
                      "markdown": "`\n1. mockery provides a much more user-friendly API and is less confusing to use\n2. mockery utilizes `testify` which is a robust and highly feature-rich testing framework\n3. mockery has rich configuration options that allow fine-grained control over how your mocks are generated\n4. mockery's CLI is more robust, user-friendly, and provides many more options\n5. mockery supports generics (this may no longer be an advantage if/when gomock supports generics)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Requester.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "endLine": 39,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(string)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(string)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(string)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Requester.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 10,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Requester.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) (string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) (string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) (string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Requester.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) string); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) string); ok {\n",
                      "markdown": "`\n\tvar r0 string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 11,
                  "endLine": 127,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan bool)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan bool)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan bool)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "endLine": 126,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan bool)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan bool)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan bool)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 17,
                  "endLine": 123,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 chan bool\n\tif rf, ok := ret.Get(0).(func() chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 chan bool\n\tif rf, ok := ret.Get(0).(func() chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 chan bool\n\tif rf, ok := ret.Get(0).(func() chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 11,
                  "endLine": 80,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan bool)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan bool)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan bool)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 8,
                  "endLine": 79,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() <-chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan bool)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() <-chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan bool)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() <-chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(<-chan bool)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 17,
                  "endLine": 76,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 <-chan bool\n\tif rf, ok := ret.Get(0).(func() <-chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 <-chan bool\n\tif rf, ok := ret.Get(0).(func() <-chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 <-chan bool\n\tif rf, ok := ret.Get(0).(func() <-chan bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan<- bool)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan<- bool)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan<- bool)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() chan<- bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan<- bool)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() chan<- bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan<- bool)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() chan<- bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(chan<- bool)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/AsyncProducer.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 chan<- bool\n\tif rf, ok := ret.Get(0).(func() chan<- bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 chan<- bool\n\tif rf, ok := ret.Get(0).(func() chan<- bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 chan<- bool\n\tif rf, ok := ret.Get(0).(func() chan<- bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 10,
                  "endLine": 167,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(test.GenericType[TSigned, TIntf])\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(test.GenericType[TSigned, TIntf])\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(test.GenericType[TSigned, TIntf])\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "endLine": 164,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 test.GenericType[TSigned, TIntf]\n\tif rf, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(test.GenericType[TSigned, TIntf])\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 test.GenericType[TSigned, TIntf]\n\tif rf, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(test.GenericType[TSigned, TIntf])\n",
                      "markdown": "`\t}\n\n\tvar r0 test.GenericType[TSigned, TIntf]\n\tif rf, ok := ret.Get(0).(func(test.GenericType[TAny, TIntf]) test.GenericType[TSigned, TIntf]); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(test.GenericType[TSigned, TIntf])\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 10,
                  "endLine": 117,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Get(1).(TIntf)\n\t}\n\n\treturn r0, r1\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Get(1).(TIntf)\n\t}\n\n\treturn r0, r1\n",
                      "markdown": "`\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Get(1).(TIntf)\n\t}\n\n\treturn r0, r1\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(TSigned)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Get(1).(TIntf)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(TSigned)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Get(1).(TIntf)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(TSigned)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Get(1).(TIntf)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 10,
                  "endLine": 111,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(TSigned)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(TSigned)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(TSigned)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(TAny, TComparable) TIntf); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 17,
                  "endLine": 108,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(TSigned)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(TSigned)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tr0 = ret.Get(0).(TSigned)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 17,
                  "endLine": 105,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 TSigned\n\tvar r1 TIntf\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 TSigned\n\tvar r1 TIntf\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n",
                      "markdown": "`\n\tvar r0 TSigned\n\tvar r1 TIntf\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) (TSigned, TIntf)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(TAny, TComparable) TSigned); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\t}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(struct {\n\t\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t\t})\n\t}\n",
                    "rendered": {
                      "text": "\t}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(struct {\n\t\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t\t})\n\t}\n",
                      "markdown": "`\t}); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(struct {\n\t\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t\t})\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterGenerics.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tvar r0 struct {\n\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t}\n\tif rf, ok := ret.Get(0).(func(struct{ Type1 TExternalIntf }) struct {\n\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t}); ok {\n\t\tr0 = rf(_a0)\n",
                    "rendered": {
                      "text": "\tvar r0 struct {\n\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t}\n\tif rf, ok := ret.Get(0).(func(struct{ Type1 TExternalIntf }) struct {\n\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t}); ok {\n\t\tr0 = rf(_a0)\n",
                      "markdown": "`\tvar r0 struct {\n\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t}\n\tif rf, ok := ret.Get(0).(func(struct{ Type1 TExternalIntf }) struct {\n\t\tType2 test.GenericType[string, test.EmbeddedGet[int]]\n\t}); ok {\n\t\tr0 = rf(_a0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 17,
                  "endLine": 109,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 10,
                  "endLine": 106,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) (int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) (int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) (int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n",
                      "markdown": "`\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr2 = ret.Get(2).(int)\n\t}\n\n\tif rf, ok := ret.Get(3).(func(string) error); ok {\n\t\tr3 = rf(path)\n\t} else {\n\t\tr3 = ret.Error(3)\n",
                    "rendered": {
                      "text": "\t\tr2 = ret.Get(2).(int)\n\t}\n\n\tif rf, ok := ret.Get(3).(func(string) error); ok {\n\t\tr3 = rf(path)\n\t} else {\n\t\tr3 = ret.Error(3)\n",
                      "markdown": "`\t\tr2 = ret.Get(2).(int)\n\t}\n\n\tif rf, ok := ret.Get(3).(func(string) error); ok {\n\t\tr3 = rf(path)\n\t} else {\n\t\tr3 = ret.Error(3)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(2).(func(string) int); ok {\n\t\tr2 = rf(path)\n\t} else {\n\t\tr2 = ret.Get(2).(int)\n\t}\n\n\tif rf, ok := ret.Get(3).(func(string) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(2).(func(string) int); ok {\n\t\tr2 = rf(path)\n\t} else {\n\t\tr2 = ret.Get(2).(int)\n\t}\n\n\tif rf, ok := ret.Get(3).(func(string) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(2).(func(string) int); ok {\n\t\tr2 = rf(path)\n\t} else {\n\t\tr2 = ret.Get(2).(int)\n\t}\n\n\tif rf, ok := ret.Get(3).(func(string) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr1 = ret.Get(1).(int)\n\t}\n\n\tif rf, ok := ret.Get(2).(func(string) int); ok {\n\t\tr2 = rf(path)\n\t} else {\n\t\tr2 = ret.Get(2).(int)\n",
                    "rendered": {
                      "text": "\t\tr1 = ret.Get(1).(int)\n\t}\n\n\tif rf, ok := ret.Get(2).(func(string) int); ok {\n\t\tr2 = rf(path)\n\t} else {\n\t\tr2 = ret.Get(2).(int)\n",
                      "markdown": "`\t\tr1 = ret.Get(1).(int)\n\t}\n\n\tif rf, ok := ret.Get(2).(func(string) int); ok {\n\t\tr2 = rf(path)\n\t} else {\n\t\tr2 = ret.Get(2).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(1).(func(string) int); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Get(1).(int)\n\t}\n\n\tif rf, ok := ret.Get(2).(func(string) int); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(1).(func(string) int); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Get(1).(int)\n\t}\n\n\tif rf, ok := ret.Get(2).(func(string) int); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(1).(func(string) int); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Get(1).(int)\n\t}\n\n\tif rf, ok := ret.Get(2).(func(string) int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) int); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Get(1).(int)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) int); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Get(1).(int)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) int); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Get(1).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) int); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) int); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterReturnElided.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tvar r1 int\n\tvar r2 int\n\tvar r3 error\n\tif rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n",
                    "rendered": {
                      "text": "\tvar r1 int\n\tvar r2 int\n\tvar r3 error\n\tif rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n",
                      "markdown": "`\tvar r1 int\n\tvar r2 int\n\tvar r3 error\n\tif rf, ok := ret.Get(0).(func(string) (int, int, int, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 71,
                  "endLine": 9,
                  "endColumn": 4,
                  "snippet": {
                    "text": "COPY mockery /usr/local/bin\n\n# Explicitly set a writable cache path when running --user=$(id -u):$(id -g)\n# see: https://github.com/golang/go/issues/26280#issuecomment-445294378\nENV GOCACHE /tmp/.cache\n\nENTRYPOINT [\"/usr/local/bin/mockery\"]\n",
                    "rendered": {
                      "text": "COPY mockery /usr/local/bin\n\n# Explicitly set a writable cache path when running --user=$(id -u):$(id -g)\n# see: https://github.com/golang/go/issues/26280#issuecomment-445294378\nENV GOCACHE /tmp/.cache\n\nENTRYPOINT [\"/usr/local/bin/mockery\"]\n",
                      "markdown": "`COPY mockery /usr/local/bin\n\n# Explicitly set a writable cache path when running --user=$(id -u):$(id -g)\n# see: https://github.com/golang/go/issues/26280#issuecomment-445294378\nENV GOCACHE /tmp/.cache\n\nENTRYPOINT [\"/usr/local/bin/mockery\"]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Dockerfile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 44,
                  "endLine": 3,
                  "endColumn": 49,
                  "snippet": {
                    "text": "FROM golang:1.23-alpine as builder\n\nRUN apk --update add --no-cache gcc musl-dev git openssh\n\nCOPY mockery /usr/local/bin\n\n",
                    "rendered": {
                      "text": "FROM golang:1.23-alpine as builder\n\nRUN apk --update add --no-cache gcc musl-dev git openssh\n\nCOPY mockery /usr/local/bin\n\n",
                      "markdown": "`FROM golang:1.23-alpine as builder\n\nRUN apk --update add --no-cache gcc musl-dev git openssh\n\nCOPY mockery /usr/local/bin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceB_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceB_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func() int); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/installation.md"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nGenerate all the mocks for your project:\n\n\tdocker run -v \"$PWD\":/src -w /src vektra/mockery --all\n\n### Homebrew\n\n",
                    "rendered": {
                      "text": "\nGenerate all the mocks for your project:\n\n\tdocker run -v \"$PWD\":/src -w /src vektra/mockery --all\n\n### Homebrew\n\n",
                      "markdown": "`\nGenerate all the mocks for your project:\n\n\tdocker run -v \"$PWD\":/src -w /src vektra/mockery --all\n\n### Homebrew\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/installation.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 25,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nUse the [Docker image](https://hub.docker.com/r/vektra/mockery)\n\n    docker pull vektra/mockery\n\nGenerate all the mocks for your project:\n\n",
                    "rendered": {
                      "text": "\nUse the [Docker image](https://hub.docker.com/r/vektra/mockery)\n\n    docker pull vektra/mockery\n\nGenerate all the mocks for your project:\n\n",
                      "markdown": "`\nUse the [Docker image](https://hub.docker.com/r/vektra/mockery)\n\n    docker pull vektra/mockery\n\nGenerate all the mocks for your project:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/installation.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 22,
                  "snippet": {
                    "text": "\n    Do _not_ use `@latest` as this will pull from the latest, potentially untagged, commit on master.\n\n### Docker\n\nUse the [Docker image](https://hub.docker.com/r/vektra/mockery)\n\n    docker pull vektra/mockery\n",
                    "rendered": {
                      "text": "\n    Do _not_ use `@latest` as this will pull from the latest, potentially untagged, commit on master.\n\n### Docker\n\nUse the [Docker image](https://hub.docker.com/r/vektra/mockery)\n\n    docker pull vektra/mockery\n",
                      "markdown": "`\n    Do _not_ use `@latest` as this will pull from the latest, potentially untagged, commit on master.\n\n### Docker\n\nUse the [Docker image](https://hub.docker.com/r/vektra/mockery)\n\n    docker pull vektra/mockery\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 19,
                  "endLine": 53,
                  "endColumn": 24,
                  "snippet": {
                    "text": "```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\nNote that with proper Go support in your IDE, all the available methods are self-documented in autocompletion help contexts.\n",
                    "rendered": {
                      "text": "```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\nNote that with proper Go support in your IDE, all the available methods are self-documented in autocompletion help contexts.\n",
                      "markdown": "````go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\nNote that with proper Go support in your IDE, all the available methods are self-documented in autocompletion help contexts.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 19,
                  "endLine": 52,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\n",
                    "rendered": {
                      "text": "\n```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\n",
                      "markdown": "`\n```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Times(4)\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Times(2)\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 19,
                  "endLine": 45,
                  "endColumn": 24,
                  "snippet": {
                    "text": "```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\nOr you can identify an arbitrary number of times each value should be returned:\n",
                    "rendered": {
                      "text": "```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\nOr you can identify an arbitrary number of times each value should be returned:\n",
                      "markdown": "````go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\nOr you can identify an arbitrary number of times each value should be returned:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 19,
                  "endLine": 44,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\n",
                    "rendered": {
                      "text": "\n```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\n",
                      "markdown": "`\n```go\nmockGetter := NewMockGetter(t)\nmockGetter.EXPECT().Get(mock.anything).Return(\"foo\").Once()\nmockGetter.EXPECT().Get(mock.anything).Return(\"bar\").Once()\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 23,
                  "endLine": 37,
                  "endColumn": 28,
                  "snippet": {
                    "text": "assert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n```\n\nThis can be done by using the `.Once()` method on the mock call expectation:\n",
                    "rendered": {
                      "text": "assert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n```\n\nThis can be done by using the `.Once()` method on the mock call expectation:\n",
                      "markdown": "`assert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n```\n\nThis can be done by using the `.Once()` method on the mock call expectation:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 23,
                  "endLine": 34,
                  "endColumn": 28,
                  "snippet": {
                    "text": "```go\n// Return \"foo\" on the first call\ngetter := NewGetter()\nassert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n",
                    "rendered": {
                      "text": "```go\n// Return \"foo\" on the first call\ngetter := NewGetter()\nassert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n",
                      "markdown": "````go\n// Return \"foo\" on the first call\ngetter := NewGetter()\nassert(t, \"foo\", getter.Get(\"key\"))\n\n// Return \"bar\" on the second call\nassert(t, \"bar\", getter.Get(\"key\"))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 2,
                  "endLine": 20,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nThis issue indicates that you have attempted to use package in your dependency tree (whether direct or indirect) that uses Go language semantics that your currently-running Go version does not support. The solution:\n\n1. Update to the latest go version\n2. Delete all cached packages with `go clean -modcache`\n3. Reinstall mockery\n\n",
                    "rendered": {
                      "text": "\nThis issue indicates that you have attempted to use package in your dependency tree (whether direct or indirect) that uses Go language semantics that your currently-running Go version does not support. The solution:\n\n1. Update to the latest go version\n2. Delete all cached packages with `go clean -modcache`\n3. Reinstall mockery\n\n",
                      "markdown": "`\nThis issue indicates that you have attempted to use package in your dependency tree (whether direct or indirect) that uses Go language semantics that your currently-running Go version does not support. The solution:\n\n1. Update to the latest go version\n2. Delete all cached packages with `go clean -modcache`\n3. Reinstall mockery\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/notes.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 97,
                  "endLine": 9,
                  "endColumn": 101,
                  "snippet": {
                    "text": " the recursive package search. This appears to be a limitation of the [golang.org/x/tools/go/packages](https://pkg.go.dev/golang.org/x/tools/go/packages) package that is used to parse package metadata.\n\nThe solution is to create a `.go` file in the package's path and add a `package [name]` directive at the top. It doesn't matter what the file is called. This allows mockery to properly read package metadata.\n\n[Discussion](https://github.com/vektra/mockery/discussions/636)\n\ninternal error: package without types was imported\n---------------------------------------------------\n\n[https://github.com/vek",
                    "rendered": {
                      "text": " the recursive package search. This appears to be a limitation of the [golang.org/x/tools/go/packages](https://pkg.go.dev/golang.org/x/tools/go/packages) package that is used to parse package metadata.\n\nThe solution is to create a `.go` file in the package's path and add a `package [name]` directive at the top. It doesn't matter what the file is called. This allows mockery to properly read package metadata.\n\n[Discussion](https://github.com/vektra/mockery/discussions/636)\n\ninternal error: package without types was imported\n---------------------------------------------------\n\n[https://github.com/vek",
                      "markdown": "` the recursive package search. This appears to be a limitation of the [golang.org/x/tools/go/packages](https://pkg.go.dev/golang.org/x/tools/go/packages) package that is used to parse package metadata.\n\nThe solution is to create a `.go` file in the package's path and add a `package [name]` directive at the top. It doesn't matter what the file is called. This allows mockery to properly read package metadata.\n\n[Discussion](https://github.com/vektra/mockery/discussions/636)\n\ninternal error: package without types was imported\n---------------------------------------------------\n\n[https://github.com/vek`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 7,
                  "endLine": 253,
                  "endColumn": 45,
                  "snippet": {
                    "text": "* [`clean` string](https://pkg.go.dev/path/filepath#Clean)\n* [`dir` string](https://pkg.go.dev/path/filepath#Dir)\n* [`expandEnv` string](https://pkg.go.dev/os#ExpandEnv)\n* [`getenv` string](https://pkg.go.dev/os#Getenv)\n\nLegacy config options\n---------------------\n",
                    "rendered": {
                      "text": "* [`clean` string](https://pkg.go.dev/path/filepath#Clean)\n* [`dir` string](https://pkg.go.dev/path/filepath#Dir)\n* [`expandEnv` string](https://pkg.go.dev/os#ExpandEnv)\n* [`getenv` string](https://pkg.go.dev/os#Getenv)\n\nLegacy config options\n---------------------\n",
                      "markdown": "`* [`clean` string](https://pkg.go.dev/path/filepath#Clean)\n* [`dir` string](https://pkg.go.dev/path/filepath#Dir)\n* [`expandEnv` string](https://pkg.go.dev/os#ExpandEnv)\n* [`getenv` string](https://pkg.go.dev/os#Getenv)\n\nLegacy config options\n---------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 113,
                  "endLine": 273,
                  "endColumn": 122,
                  "snippet": {
                    "text": " keep a similar structure, use the option `keeptree`. |\n    | `name`  | The `name` option takes either the name or matching regular expression of the interface to generate mock(s) for. |\n    | `output` | mockery always generates files with the package `mocks` to keep things clean and simple. You can control which mocks directory is used by using `output`, which defaults to `./mocks`. |\n    |`outpkg`| Use `outpkg` to specify the package name of the generated mocks.|\n    | `print` | Use `print: True` to have the resulting code printed out instead of written to disk. |\n    | `recursive`  |  Use the `recur",
                    "rendered": {
                      "text": " keep a similar structure, use the option `keeptree`. |\n    | `name`  | The `name` option takes either the name or matching regular expression of the interface to generate mock(s) for. |\n    | `output` | mockery always generates files with the package `mocks` to keep things clean and simple. You can control which mocks directory is used by using `output`, which defaults to `./mocks`. |\n    |`outpkg`| Use `outpkg` to specify the package name of the generated mocks.|\n    | `print` | Use `print: True` to have the resulting code printed out instead of written to disk. |\n    | `recursive`  |  Use the `recur",
                      "markdown": "` keep a similar structure, use the option `keeptree`. |\n    | `name`  | The `name` option takes either the name or matching regular expression of the interface to generate mock(s) for. |\n    | `output` | mockery always generates files with the package `mocks` to keep things clean and simple. You can control which mocks directory is used by using `output`, which defaults to `./mocks`. |\n    |`outpkg`| Use `outpkg` to specify the package name of the generated mocks.|\n    | `print` | Use `print: True` to have the resulting code printed out instead of written to disk. |\n    | `recursive`  |  Use the `recur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 182,
                  "endLine": 265,
                  "endColumn": 186,
                  "snippet": {
                    "text": "by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using underscore casing. |\n    | `exclude` | This parameter is a list of strings representin",
                    "rendered": {
                      "text": "by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using underscore casing. |\n    | `exclude` | This parameter is a list of strings representin",
                      "markdown": "`by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using underscore casing. |\n    | `exclude` | This parameter is a list of strings representin`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 93,
                  "endLine": 265,
                  "endColumn": 97,
                  "snippet": {
                    "text": "rovides `all`. This option will tell mockery to scan all files under the directory named by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name usi",
                    "rendered": {
                      "text": "rovides `all`. This option will tell mockery to scan all files under the directory named by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name usi",
                      "markdown": "`rovides `all`. This option will tell mockery to scan all files under the directory named by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name usi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 282,
                  "endLine": 63,
                  "endColumn": 286,
                  "snippet": {
                    "text": "                |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set the location of the mockery config file.                                         ",
                    "rendered": {
                      "text": "                |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set the location of the mockery config file.                                         ",
                      "markdown": "`                |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set the location of the mockery config file.                                         `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 193,
                  "endLine": 63,
                  "endColumn": 197,
                  "snippet": {
                    "text": "                                                                                                         |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                         ",
                    "rendered": {
                      "text": "                                                                                                         |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                         ",
                      "markdown": "`                                                                                                         |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                         `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 73,
                  "endLine": 31,
                  "endColumn": 77,
                  "snippet": {
                    "text": "Recommended Basic Config\n-------------------------\n\nCopy the recommended basic configuration to a file called `.mockery.yaml` at the top-level of your repo:\n\n```yaml title=\".mockery.yaml\"\nwith-expecter: true\n",
                    "rendered": {
                      "text": "Recommended Basic Config\n-------------------------\n\nCopy the recommended basic configuration to a file called `.mockery.yaml` at the top-level of your repo:\n\n```yaml title=\".mockery.yaml\"\nwith-expecter: true\n",
                      "markdown": "`Recommended Basic Config\n-------------------------\n\nCopy the recommended basic configuration to a file called `.mockery.yaml` at the top-level of your repo:\n\n```yaml title=\".mockery.yaml\"\nwith-expecter: true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 189,
                  "endLine": 265,
                  "endColumn": 194,
                  "snippet": {
                    "text": "ir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using underscore casing. |\n    | `exclude` | This parameter is a list of strings representing path p",
                    "rendered": {
                      "text": "ir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using underscore casing. |\n    | `exclude` | This parameter is a list of strings representing path p",
                      "markdown": "`ir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using underscore casing. |\n    | `exclude` | This parameter is a list of strings representing path p`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 100,
                  "endLine": 265,
                  "endColumn": 105,
                  "snippet": {
                    "text": " `all`. This option will tell mockery to scan all files under the directory named by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using under",
                    "rendered": {
                      "text": " `all`. This option will tell mockery to scan all files under the directory named by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using under",
                      "markdown": "` `all`. This option will tell mockery to scan all files under the directory named by `--dir` (\".\" by default) and generates mocks for any interfaces it finds. This option implies `recursive: True`. |\n    | `boilerplate-file` | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code. |\n    | `case` | mockery generates files using the casing of the original interface name.  This can be modified by specifying `case: underscore` to format the generated file name using under`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 289,
                  "endLine": 63,
                  "endColumn": 294,
                  "snippet": {
                    "text": "         |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set the location of the mockery config file.                                                 ",
                    "rendered": {
                      "text": "         |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set the location of the mockery config file.                                                 ",
                      "markdown": "`         |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set the location of the mockery config file.                                                 `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/configuration.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 200,
                  "endLine": 63,
                  "endColumn": 205,
                  "snippet": {
                    "text": "                                                                                                  |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set ",
                    "rendered": {
                      "text": "                                                                                                  |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set ",
                      "markdown": "`                                                                                                  |\n| `boilerplate-file`                                     | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Specify a path to a file that contains comments you want displayed at the top of all generated mock files. This is commonly used to display license headers at the top of your source code.                                                          |\n| `config`                                               | :fontawesome-solid-x:     | `#!yaml \"\"`                           | Set `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/docs/running.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 79,
                  "endLine": 21,
                  "endColumn": 85,
                  "snippet": {
                    "text": "# Lots more config...\n```\n\nFrom anywhere within your repo, you can simply call `mockery` once, and it will find your config either by respecting the `#!yaml config` path you gave it, or by searching upwards from the current working directory.\n\n```bash\nmockery\n",
                    "rendered": {
                      "text": "# Lots more config...\n```\n\nFrom anywhere within your repo, you can simply call `mockery` once, and it will find your config either by respecting the `#!yaml config` path you gave it, or by searching upwards from the current working directory.\n\n```bash\nmockery\n",
                      "markdown": "`# Lots more config...\n```\n\nFrom anywhere within your repo, you can simply call `mockery` once, and it will find your config either by respecting the `#!yaml config` path you gave it, or by searching upwards from the current working directory.\n\n```bash\nmockery\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {\n\t\tr0 = rf(i, a, intfs...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {\n\t\tr0 = rf(i, a, intfs...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {\n\t\tr0 = rf(i, a, intfs...)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "endLine": 172,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(...int) error); ok {\n\t\tr0 = rf(ints...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(...int) error); ok {\n\t\tr0 = rf(ints...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(...int) error); ok {\n\t\tr0 = rf(ints...)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "endLine": 91,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 17,
                  "endLine": 88,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, int) error); ok {\n\t\tr1 = rf(str, i)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, int) error); ok {\n\t\tr1 = rf(str, i)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, int) error); ok {\n\t\tr1 = rf(str, i)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ExpecterAndRolledVariadic.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n",
                      "markdown": "`\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterElided.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string, string) error); ok {\n\t\tr0 = rf(path, url)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string, string) error); ok {\n\t\tr0 = rf(path, url)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string, string) error); ok {\n\t\tr0 = rf(path, url)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 17,
                  "endLine": 228,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {\n\t\tr0 = rf(i, a, intfs...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {\n\t\tr0 = rf(i, a, intfs...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {\n\t\tr0 = rf(i, a, intfs...)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "endLine": 172,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(...int) error); ok {\n\t\tr0 = rf(ints...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(...int) error); ok {\n\t\tr0 = rf(ints...)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(...int) error); ok {\n\t\tr0 = rf(ints...)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "endLine": 91,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 17,
                  "endLine": 88,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, int) error); ok {\n\t\tr1 = rf(str, i)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, int) error); ok {\n\t\tr1 = rf(str, i)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, int) error); ok {\n\t\tr1 = rf(str, i)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n\t\tr0 = rf(str, i)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Expecter.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n",
                      "markdown": "`\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {\n\t\treturn rf(str, i)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, int) []string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Requester2.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string) error); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string) error); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string) error); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Example.go"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 10,
                  "endLine": 85,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) fixtureshttp.MyStruct); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) fixtureshttp.MyStruct); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) fixtureshttp.MyStruct); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Example.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 fixtureshttp.MyStruct\n\tif rf, ok := ret.Get(0).(func(string) fixtureshttp.MyStruct); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 fixtureshttp.MyStruct\n\tif rf, ok := ret.Get(0).(func(string) fixtureshttp.MyStruct); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n",
                      "markdown": "`\t}\n\n\tvar r0 fixtureshttp.MyStruct\n\tif rf, ok := ret.Get(0).(func(string) fixtureshttp.MyStruct); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tr0 = ret.Get(0).(fixtureshttp.MyStruct)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Example.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 11,
                  "endLine": 39,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(http.Flusher)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(http.Flusher)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(http.Flusher)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Example.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 8,
                  "endLine": 38,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() http.Flusher); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(http.Flusher)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() http.Flusher); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(http.Flusher)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() http.Flusher); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(http.Flusher)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Example.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 http.Flusher\n\tif rf, ok := ret.Get(0).(func() http.Flusher); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 http.Flusher\n\tif rf, ok := ret.Get(0).(func() http.Flusher); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 http.Flusher\n\tif rf, ok := ret.Get(0).(func() http.Flusher); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/VariadicReturnFunc.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string, []int, ...interface{}))\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string, []int, ...interface{}))\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string, []int, ...interface{}))\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/VariadicReturnFunc.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) func(string, []int, ...interface{})); ok {\n\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string, []int, ...interface{}))\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) func(string, []int, ...interface{})); ok {\n\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string, []int, ...interface{}))\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) func(string, []int, ...interface{})); ok {\n\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(func(string, []int, ...interface{}))\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/VariadicReturnFunc.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 func(string, []int, ...interface{})\n\tif rf, ok := ret.Get(0).(func(string) func(string, []int, ...interface{})); ok {\n\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 func(string, []int, ...interface{})\n\tif rf, ok := ret.Get(0).(func(string) func(string, []int, ...interface{})); ok {\n\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 func(string, []int, ...interface{})\n\tif rf, ok := ret.Get(0).(func(string) func(string, []int, ...interface{})); ok {\n\t\tr0 = rf(str)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/InstantiatedGenericInterface.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(*float32) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(*float32) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(*float32) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/InstantiatedGenericInterface.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(*float32) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(*float32) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(*float32) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/ISSUE_TEMPLATE.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 9,
                  "endLine": 43,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n### Expected Behavior\n\n[what you expect to happen]\n\n### Actual Behavior\n\n",
                    "rendered": {
                      "text": "\n### Expected Behavior\n\n[what you expect to happen]\n\n### Actual Behavior\n\n",
                      "markdown": "`\n### Expected Behavior\n\n[what you expect to happen]\n\n### Actual Behavior\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/ISSUE_TEMPLATE.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 30,
                  "snippet": {
                    "text": "-------------------\n\n- [ ] Binary Distribution\n- [ ] Docker\n- [ ] brew\n- [ ] go install\n- [ ] Other: [specify]\n\n",
                    "rendered": {
                      "text": "-------------------\n\n- [ ] Binary Distribution\n- [ ] Docker\n- [ ] brew\n- [ ] go install\n- [ ] Other: [specify]\n\n",
                      "markdown": "`-------------------\n\n- [ ] Binary Distribution\n- [ ] Docker\n- [ ] brew\n- [ ] go install\n- [ ] Other: [specify]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/README.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 22,
                  "endLine": 11,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Documentation\n--------------\n\nDocumentation is found at our [GitHub Pages site](https://vektra.github.io/mockery/).\n\nDevelopment\n------------\n",
                    "rendered": {
                      "text": "Documentation\n--------------\n\nDocumentation is found at our [GitHub Pages site](https://vektra.github.io/mockery/).\n\nDevelopment\n------------\n",
                      "markdown": "`Documentation\n--------------\n\nDocumentation is found at our [GitHub Pages site](https://vektra.github.io/mockery/).\n\nDevelopment\n------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/config/config_test.go"
                },
                "region": {
                  "startLine": 946,
                  "startColumn": 31,
                  "endLine": 946,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"packages filename set at top level\",\n\t\t\tyaml: `\ndir: barfoo\nfilename: foobar.go\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"packages filename set at top level\",\n\t\t\tyaml: `\ndir: barfoo\nfilename: foobar.go\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"packages filename set at top level\",\n\t\t\tyaml: `\ndir: barfoo\nfilename: foobar.go\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/config/config_test.go"
                },
                "region": {
                  "startLine": 946,
                  "startColumn": 34,
                  "endLine": 946,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"packages filename set at top level\",\n\t\t\tyaml: `\ndir: barfoo\nfilename: foobar.go\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"packages filename set at top level\",\n\t\t\tyaml: `\ndir: barfoo\nfilename: foobar.go\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"packages filename set at top level\",\n\t\t\tyaml: `\ndir: barfoo\nfilename: foobar.go\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/config/config.go"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 24,
                  "endLine": 899,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\tif !ok {\n\t\tpanic(fmt.Sprintf(\"unknown config field: %s\", name))\n\t}\n\treturn string(field.Tag.Get(\"mapstructure\"))\n}\n\n// LogUnsupportedPackagesConfig is a method that will help aid migrations to the\n",
                    "rendered": {
                      "text": "\tif !ok {\n\t\tpanic(fmt.Sprintf(\"unknown config field: %s\", name))\n\t}\n\treturn string(field.Tag.Get(\"mapstructure\"))\n}\n\n// LogUnsupportedPackagesConfig is a method that will help aid migrations to the\n",
                      "markdown": "`\tif !ok {\n\t\tpanic(fmt.Sprintf(\"unknown config field: %s\", name))\n\t}\n\treturn string(field.Tag.Get(\"mapstructure\"))\n}\n\n// LogUnsupportedPackagesConfig is a method that will help aid migrations to the\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/config/config.go"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 38,
                  "endLine": 595,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t// we know it's already in the configuration.\n\tvisitedDirs[searchRoot.String()] = nil\n\n\t// Walk the filesystem path, starting at the root of the package we've\n\t// been given. Note that this will always work because Go downloads\n\t// the package when we call `packages.Load`\n\twalkErr := walker.Walk(func(path *pathlib.Path, info os.FileInfo, err error) error {\n",
                    "rendered": {
                      "text": "\t// we know it's already in the configuration.\n\tvisitedDirs[searchRoot.String()] = nil\n\n\t// Walk the filesystem path, starting at the root of the package we've\n\t// been given. Note that this will always work because Go downloads\n\t// the package when we call `packages.Load`\n\twalkErr := walker.Walk(func(path *pathlib.Path, info os.FileInfo, err error) error {\n",
                      "markdown": "`\t// we know it's already in the configuration.\n\tvisitedDirs[searchRoot.String()] = nil\n\n\t// Walk the filesystem path, starting at the root of the package we've\n\t// been given. Note that this will always work because Go downloads\n\t// the package when we call `packages.Load`\n\twalkErr := walker.Walk(func(path *pathlib.Path, info os.FileInfo, err error) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/config/config.go"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 16,
                  "endLine": 394,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\tif !ok {\n\t\t// check if it's an empty map... sometimes we just want to \"enable\"\n\t\t// the interface but not provide any additional config beyond what\n\t\t// is provided at the package level\n\t\tif reflect.ValueOf(&interfaceSection).Elem().IsZero() {\n\t\t\treturn []*Config{pkgConfigCopy}, nil\n\t\t}\n",
                    "rendered": {
                      "text": "\tif !ok {\n\t\t// check if it's an empty map... sometimes we just want to \"enable\"\n\t\t// the interface but not provide any additional config beyond what\n\t\t// is provided at the package level\n\t\tif reflect.ValueOf(&interfaceSection).Elem().IsZero() {\n\t\t\treturn []*Config{pkgConfigCopy}, nil\n\t\t}\n",
                      "markdown": "`\tif !ok {\n\t\t// check if it's an empty map... sometimes we just want to \"enable\"\n\t\t// the interface but not provide any additional config beyond what\n\t\t// is provided at the package level\n\t\tif reflect.ValueOf(&interfaceSection).Elem().IsZero() {\n\t\t\treturn []*Config{pkgConfigCopy}, nil\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/config/config.go"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 42,
                  "endLine": 673,
                  "endColumn": 48,
                  "snippet": {
                    "text": "}\n\n// discoverRecursivePackages parses the provided config for packages marked as\n// recursive and recurses the file tree to find all sub-packages.\nfunc (c *Config) discoverRecursivePackages(ctx context.Context) error {\n\tlog := zerolog.Ctx(ctx)\n\tlog.Trace().Msg(\"discovering recursive packages\")\n",
                    "rendered": {
                      "text": "}\n\n// discoverRecursivePackages parses the provided config for packages marked as\n// recursive and recurses the file tree to find all sub-packages.\nfunc (c *Config) discoverRecursivePackages(ctx context.Context) error {\n\tlog := zerolog.Ctx(ctx)\n\tlog.Trace().Msg(\"discovering recursive packages\")\n",
                      "markdown": "`}\n\n// discoverRecursivePackages parses the provided config for packages marked as\n// recursive and recurses the file tree to find all sub-packages.\nfunc (c *Config) discoverRecursivePackages(ctx context.Context) error {\n\tlog := zerolog.Ctx(ctx)\n\tlog.Trace().Msg(\"discovering recursive packages\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/subpkg_with_only_autogenerated_files/Foo_mock.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/subpkg_with_only_autogenerated_files/Foo_mock.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/subpkg2/Foo_mock.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/subpkg2/Foo_mock.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/subpkg1/Foo_mock.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/recursive_generation/subpkg1/Foo_mock.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterIface.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(io.Reader)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(io.Reader)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(io.Reader)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterIface.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() io.Reader); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(io.Reader)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() io.Reader); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(io.Reader)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() io.Reader); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(io.Reader)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterIface.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 io.Reader\n\tif rf, ok := ret.Get(0).(func() io.Reader); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 io.Reader\n\tif rf, ok := ret.Get(0).(func() io.Reader); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 io.Reader\n\tif rf, ok := ret.Get(0).(func() io.Reader); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 11,
                  "endLine": 48,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n\t\t\tr1 = ret.Get(1).(*test.Err)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n\t\t\tr1 = ret.Get(1).(*test.Err)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n\t\t\tr1 = ret.Get(1).(*test.Err)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 8,
                  "endLine": 47,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n\t\t\tr1 = ret.Get(1).(*test.Err)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n\t\t\tr1 = ret.Get(1).(*test.Err)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n\t\t\tr1 = ret.Get(1).(*test.Err)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string, uint16) *test.Err); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(1) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 11,
                  "endLine": 40,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]byte)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]byte)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]byte)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 8,
                  "endLine": 39,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]byte)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]byte)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]byte)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/KeyManager.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 []byte\n\tvar r1 *test.Err\n\tif rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 []byte\n\tvar r1 *test.Err\n\tif rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n",
                      "markdown": "`\n\tvar r0 []byte\n\tvar r1 *test.Err\n\tif rf, ok := ret.Get(0).(func(string, uint16) ([]byte, *test.Err)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(string, uint16) []byte); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Requester3.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/GenericInterface.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(*M) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(*M) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(*M) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/GenericInterface.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(*M) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(*M) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\t}\n\n\tvar r0 int\n\tif rf, ok := ret.Get(0).(func(*M) int); ok {\n\t\tr0 = rf(arg)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ImportsSameAsPackage.go"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 11,
                  "endLine": 83,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(fixtures.KeyManager)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(fixtures.KeyManager)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(fixtures.KeyManager)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ImportsSameAsPackage.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 8,
                  "endLine": 82,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() fixtures.KeyManager); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(fixtures.KeyManager)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() fixtures.KeyManager); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(fixtures.KeyManager)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() fixtures.KeyManager); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(fixtures.KeyManager)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ImportsSameAsPackage.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 17,
                  "endLine": 79,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 fixtures.KeyManager\n\tif rf, ok := ret.Get(0).(func() fixtures.KeyManager); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 fixtures.KeyManager\n\tif rf, ok := ret.Get(0).(func() fixtures.KeyManager); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 fixtures.KeyManager\n\tif rf, ok := ret.Get(0).(func() fixtures.KeyManager); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ImportsSameAsPackage.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 10,
                  "endLine": 37,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ImportsSameAsPackage.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 test.B\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 test.B\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n",
                      "markdown": "`\t}\n\n\tvar r0 test.B\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/EmbeddedGet.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 10,
                  "endLine": 35,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/EmbeddedGet.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 T\n\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 T\n\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n",
                      "markdown": "`\t}\n\n\tvar r0 T\n\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterSlice.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterSlice.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterSlice.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]string)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterSlice.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterSlice.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n",
                      "markdown": "`\n\tvar r0 []string\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) []string); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/MyReader.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "endLine": 39,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func([]byte) error); ok {\n\t\tr1 = rf(p)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func([]byte) error); ok {\n\t\tr1 = rf(p)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func([]byte) error); ok {\n\t\tr1 = rf(p)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/MyReader.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 10,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n\t\tr0 = rf(p)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func([]byte) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n\t\tr0 = rf(p)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func([]byte) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n\t\tr0 = rf(p)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n\t}\n\n\tif rf, ok := ret.Get(1).(func([]byte) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/MyReader.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {\n\t\treturn rf(p)\n\t}\n\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n\t\tr0 = rf(p)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {\n\t\treturn rf(p)\n\t}\n\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n\t\tr0 = rf(p)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {\n\t\treturn rf(p)\n\t}\n\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n\t\tr0 = rf(p)\n\t} else {\n\t\tr0 = ret.Get(0).(int)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/MyReader.go"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {\n\t\treturn rf(p)\n\t}\n\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {\n\t\treturn rf(p)\n\t}\n\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n",
                      "markdown": "`\n\tvar r0 int\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {\n\t\treturn rf(p)\n\t}\n\tif rf, ok := ret.Get(0).(func([]byte) int); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/documentation.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 81,
                  "endLine": 30,
                  "endColumn": 86,
                  "snippet": {
                    "text": "          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n        env:\n          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}\n",
                    "rendered": {
                      "text": "          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n        env:\n          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}\n",
                      "markdown": "`          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n        env:\n          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/documentation.yml"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n        env:\n",
                    "rendered": {
                      "text": "        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n        env:\n",
                      "markdown": "`        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n        env:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/documentation.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "endLine": 27,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - name: Setup doc deploy\n        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n",
                    "rendered": {
                      "text": "      - name: Setup doc deploy\n        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n",
                      "markdown": "`      - name: Setup doc deploy\n        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n        run: \"mike deploy --push --update-aliases $(echo ${{ github.ref_name }} | cut -d'.' -f1-2 ) latest\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/documentation.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 9,
                  "endLine": 26,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      - name: Setup doc deploy\n        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n",
                    "rendered": {
                      "text": "          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      - name: Setup doc deploy\n        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n",
                      "markdown": "`          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      - name: Setup doc deploy\n        run: |\n          git config --global user.name vektra-bot\n          git config --global user.email vektra-bot@vektra.github.io\n          git fetch origin gh-pages --depth=1\n      - name: Deploy docs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/documentation.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 21,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          key: ${{ github.ref }}\n          path: .cache\n      - run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n      - run: pip install -r docs/requirements.txt\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      - name: Setup doc deploy\n",
                    "rendered": {
                      "text": "          key: ${{ github.ref }}\n          path: .cache\n      - run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n      - run: pip install -r docs/requirements.txt\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      - name: Setup doc deploy\n",
                      "markdown": "`          key: ${{ github.ref }}\n          path: .cache\n      - run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n      - run: pip install -r docs/requirements.txt\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      - name: Setup doc deploy\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/documentation.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 17,
                  "endLine": 20,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n      - run: pip install -r docs/requirements.txt\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n",
                    "rendered": {
                      "text": "        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n      - run: pip install -r docs/requirements.txt\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n",
                      "markdown": "`        with:\n          key: ${{ github.ref }}\n          path: .cache\n      - run: sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n      - run: pip install -r docs/requirements.txt\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 68,
                  "endLine": 128,
                  "snippet": {
                    "text": "[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n",
                    "rendered": {
                      "text": "[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n",
                      "markdown": "`[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 71,
                  "endLine": 127,
                  "snippet": {
                    "text": "\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n",
                    "rendered": {
                      "text": "\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n",
                      "markdown": "`\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 22,
                  "endLine": 119,
                  "snippet": {
                    "text": "## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n",
                    "rendered": {
                      "text": "## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n",
                      "markdown": "`## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 61,
                  "endLine": 63,
                  "snippet": {
                    "text": "## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nlandonclipp@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\n",
                    "rendered": {
                      "text": "## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nlandonclipp@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\n",
                      "markdown": "`## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nlandonclipp@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 14,
                  "endLine": 57,
                  "endColumn": 18,
                  "snippet": {
                    "text": "an individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\n",
                    "rendered": {
                      "text": "an individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\n",
                      "markdown": "`an individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 41,
                  "endLine": 112,
                  "endColumn": 47,
                  "snippet": {
                    "text": "standards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n",
                    "rendered": {
                      "text": "standards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n",
                      "markdown": "`standards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CODE_OF_CONDUCT.md"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 41,
                  "endLine": 100,
                  "endColumn": 47,
                  "snippet": {
                    "text": "**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\n",
                    "rendered": {
                      "text": "**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\n",
                      "markdown": "`**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/example_project/mock_Stringer_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 10,
                  "endLine": 28,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/example_project/mock_Stringer_test.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "endLine": 25,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tret := _m.Called()\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\tret := _m.Called()\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\tret := _m.Called()\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 11,
                  "endLine": 129,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 8,
                  "endLine": 128,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "endLine": 125,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB00)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 11,
                  "endLine": 81,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 8,
                  "endLine": 80,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB0)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 17,
                  "endLine": 77,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 interfaceB0\n\tif rf, ok := ret.Get(0).(func(interfaceB0) interfaceB0); ok {\n\t\tr0 = rf(interfaceB)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {\n\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {\n\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {\n\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interfaceB)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/fixtures/method_args/same_name_arg_and_type/mock_interfaceA_test.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 interfaceB\n\tif rf, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {\n\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 interfaceB\n\tif rf, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {\n\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 interfaceB\n\tif rf, ok := ret.Get(0).(func(interfaceB) interfaceB); ok {\n\t\tr0 = rf(interfaceB0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/GetGeneric.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 10,
                  "endLine": 35,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/GetGeneric.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 T\n\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 T\n\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n",
                      "markdown": "`\t}\n\n\tvar r0 T\n\tif rf, ok := ret.Get(0).(func() T); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(T)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Variadic.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string, func(string, ...interface{}) interface{}) error); ok {\n\t\tr0 = rf(str, vFunc)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string, func(string, ...interface{}) interface{}) error); ok {\n\t\tr0 = rf(str, vFunc)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(string, func(string, ...interface{}) interface{}) error); ok {\n\t\tr0 = rf(str, vFunc)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterNS.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n\t\tr1 = rf(path)\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterNS.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n\t}\n\n\tif rf, ok := ret.Get(1).(func(string) error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterNS.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "endLine": 37,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n\t\tr0 = rf(path)\n\t} else {\n\t\tr0 = ret.Get(0).(http.Response)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterNS.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 http.Response\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 http.Response\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n",
                      "markdown": "`\n\tvar r0 http.Response\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(string) (http.Response, error)); ok {\n\t\treturn rf(path)\n\t}\n\tif rf, ok := ret.Get(0).(func(string) http.Response); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArgSameAsNamedImport.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 11,
                  "endLine": 37,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n\n",
                    "rendered": {
                      "text": "\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n\n",
                      "markdown": "`\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArgSameAsNamedImport.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*json.RawMessage)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterArgSameAsNamedImport.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 *json.RawMessage\n\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 *json.RawMessage\n\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n",
                      "markdown": "`\t}\n\n\tvar r0 *json.RawMessage\n\tif rf, ok := ret.Get(0).(func(string) *json.RawMessage); ok {\n\t\tr0 = rf(_a0)\n\t} else {\n\t\tif ret.Get(0) != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/FuncArgsCollision.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 19,
                  "endLine": 29,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret_1.Get(0).(func(interface{}) error); ok {\n\t\tr0 = rf(ret)\n\t} else {\n\t\tr0 = ret_1.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret_1.Get(0).(func(interface{}) error); ok {\n\t\tr0 = rf(ret)\n\t} else {\n\t\tr0 = ret_1.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret_1.Get(0).(func(interface{}) error); ok {\n\t\tr0 = rf(ret)\n\t} else {\n\t\tr0 = ret_1.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/A.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\tif rf, ok := ret.Get(1).(func() error); ok {\n\t\tr1 = rf()\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                    "rendered": {
                      "text": "\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\tif rf, ok := ret.Get(1).(func() error); ok {\n\t\tr1 = rf()\n\t} else {\n\t\tr1 = ret.Error(1)\n",
                      "markdown": "`\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\tif rf, ok := ret.Get(1).(func() error); ok {\n\t\tr1 = rf()\n\t} else {\n\t\tr1 = ret.Error(1)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/A.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\tif rf, ok := ret.Get(1).(func() error); ok {\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\tif rf, ok := ret.Get(1).(func() error); ok {\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\tif rf, ok := ret.Get(1).(func() error); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/A.go"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() (test.B, error)); ok {\n\t\treturn rf()\n\t}\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() (test.B, error)); ok {\n\t\treturn rf()\n\t}\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() (test.B, error)); ok {\n\t\treturn rf()\n\t}\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/A.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\tvar r0 test.B\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func() (test.B, error)); ok {\n\t\treturn rf()\n\t}\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n",
                    "rendered": {
                      "text": "\n\tvar r0 test.B\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func() (test.B, error)); ok {\n\t\treturn rf()\n\t}\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n",
                      "markdown": "`\n\tvar r0 test.B\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func() (test.B, error)); ok {\n\t\treturn rf()\n\t}\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/Blank.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(interface{}) error); ok {\n\t\tr0 = rf(x)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(interface{}) error); ok {\n\t\tr0 = rf(x)\n\t} else {\n\t\tr0 = ret.Error(0)\n",
                      "markdown": "`\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(interface{}) error); ok {\n\t\tr0 = rf(x)\n\t} else {\n\t\tr0 = ret.Error(0)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 10,
                  "endLine": 82,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 17,
                  "endLine": 79,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 10,
                  "endLine": 64,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                      "markdown": "`\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 10,
                  "endLine": 28,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadicOneArgument.go"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "endLine": 25,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                      "markdown": "`\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 10,
                  "endLine": 100,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 17,
                  "endLine": 97,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {\n\t\tr0 = rf(format, a...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 10,
                  "endLine": 79,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 17,
                  "endLine": 76,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                      "markdown": "`\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...interface{}) bool); ok {\n\t\tr0 = rf(a...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 10,
                  "endLine": 59,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "endLine": 56,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {\n\t\tr0 = rf(filename, w...)\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/RequesterVariadic.go"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "endLine": 31,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n",
                      "markdown": "`\t}\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(...string) bool); ok {\n\t\tr0 = rf(values...)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/PanicOnNoReturnValue.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 10,
                  "endLine": 32,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/PanicOnNoReturnValue.go"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n",
                      "markdown": "`\t}\n\n\tvar r0 string\n\tif rf, ok := ret.Get(0).(func() string); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(string)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 39,
                  "endLine": 34,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v2.7.0\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v2.7.0\n",
                      "markdown": "`        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v2.7.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v2.7.0\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v2.7.0\n",
                      "markdown": "`        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v2.7.0\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 20,
                  "endLine": 27,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to DockerHub\n",
                    "rendered": {
                      "text": "      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to DockerHub\n",
                      "markdown": "`      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to DockerHub\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/.github/PULL_REQUEST_TEMPLATE.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 14,
                  "snippet": {
                    "text": "- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\nVersion of Go used when building/testing:\n---------------------------------------------\n\n",
                    "rendered": {
                      "text": "- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\nVersion of Go used when building/testing:\n---------------------------------------------\n\n",
                      "markdown": "`- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\nVersion of Go used when building/testing:\n---------------------------------------------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Taskfile.yml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 7,
                  "endLine": 42,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    sources:\n      - \"docs/requirements.txt\"\n    cmds:\n      - pip install -r docs/requirements.txt\n\n  mkdocs.serve:\n    desc: serve mkdocs locally\n",
                    "rendered": {
                      "text": "    sources:\n      - \"docs/requirements.txt\"\n    cmds:\n      - pip install -r docs/requirements.txt\n\n  mkdocs.serve:\n    desc: serve mkdocs locally\n",
                      "markdown": "`    sources:\n      - \"docs/requirements.txt\"\n    cmds:\n      - pip install -r docs/requirements.txt\n\n  mkdocs.serve:\n    desc: serve mkdocs locally\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Taskfile.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  docker:\n    desc: build the mockery docker image\n    cmds:\n      - docker build -t vektra/mockery .\n\n  mkdocs.install:\n    desc: install mkdocs and plugins\n",
                    "rendered": {
                      "text": "  docker:\n    desc: build the mockery docker image\n    cmds:\n      - docker build -t vektra/mockery .\n\n  mkdocs.install:\n    desc: install mkdocs and plugins\n",
                      "markdown": "`  docker:\n    desc: build the mockery docker image\n    cmds:\n      - docker build -t vektra/mockery .\n\n  mkdocs.install:\n    desc: install mkdocs and plugins\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Taskfile.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 27,
                  "endLine": 33,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      - go run .\n\n  docker:\n    desc: build the mockery docker image\n    cmds:\n      - docker build -t vektra/mockery .\n\n",
                    "rendered": {
                      "text": "      - go run .\n\n  docker:\n    desc: build the mockery docker image\n    cmds:\n      - docker build -t vektra/mockery .\n\n",
                      "markdown": "`      - go run .\n\n  docker:\n    desc: build the mockery docker image\n    cmds:\n      - docker build -t vektra/mockery .\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Taskfile.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 34,
                  "endLine": 24,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  mocks.remove:\n    desc: remove all mock files\n    cmds:\n      - find . -name '*_mock.go' | xargs -r rm\n      - rm -rf mocks/\n\n  mocks.generate:\n",
                    "rendered": {
                      "text": "  mocks.remove:\n    desc: remove all mock files\n    cmds:\n      - find . -name '*_mock.go' | xargs -r rm\n      - rm -rf mocks/\n\n  mocks.generate:\n",
                      "markdown": "`  mocks.remove:\n    desc: remove all mock files\n    cmds:\n      - find . -name '*_mock.go' | xargs -r rm\n      - rm -rf mocks/\n\n  mocks.generate:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Taskfile.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  mocks.remove:\n    desc: remove all mock files\n    cmds:\n      - find . -name '*_mock.go' | xargs -r rm\n      - rm -rf mocks/\n\n  mocks.generate:\n",
                    "rendered": {
                      "text": "  mocks.remove:\n    desc: remove all mock files\n    cmds:\n      - find . -name '*_mock.go' | xargs -r rm\n      - rm -rf mocks/\n\n  mocks.generate:\n",
                      "markdown": "`  mocks.remove:\n    desc: remove all mock files\n    cmds:\n      - find . -name '*_mock.go' | xargs -r rm\n      - rm -rf mocks/\n\n  mocks.generate:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/Taskfile.yml"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    sources:\n      - \"**/*.go\"\n    cmds:\n      - go fmt ./...\n\n  mocks:\n    desc: generate new mocks from scratch\n",
                    "rendered": {
                      "text": "    sources:\n      - \"**/*.go\"\n    cmds:\n      - go fmt ./...\n\n  mocks:\n    desc: generate new mocks from scratch\n",
                      "markdown": "`    sources:\n      - \"**/*.go\"\n    cmds:\n      - go fmt ./...\n\n  mocks:\n    desc: generate new mocks from scratch\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator.go"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 3,
                  "endLine": 404,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tlog.Debug().Msgf(\"generating imports\")\n\n\tpkgPath := g.nameToPackagePath[g.iface.Pkg.Name()]\n\t// Sort by import name so that we get a deterministic order\n\tfor _, name := range g.sortedImportNames() {\n\t\tlogImport := log.With().Str(logging.LogKeyImport, g.nameToPackagePath[name]).Logger()\n\t\tlogImport.Debug().Msgf(\"found import\")\n",
                    "rendered": {
                      "text": "\tlog.Debug().Msgf(\"generating imports\")\n\n\tpkgPath := g.nameToPackagePath[g.iface.Pkg.Name()]\n\t// Sort by import name so that we get a deterministic order\n\tfor _, name := range g.sortedImportNames() {\n\t\tlogImport := log.With().Str(logging.LogKeyImport, g.nameToPackagePath[name]).Logger()\n\t\tlogImport.Debug().Msgf(\"found import\")\n",
                      "markdown": "`\tlog.Debug().Msgf(\"generating imports\")\n\n\tpkgPath := g.nameToPackagePath[g.iface.Pkg.Name()]\n\t// Sort by import name so that we get a deterministic order\n\tfor _, name := range g.sortedImportNames() {\n\t\tlogImport := log.With().Str(logging.LogKeyImport, g.nameToPackagePath[name]).Logger()\n\t\tlogImport.Debug().Msgf(\"found import\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator.go"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 35,
                  "endLine": 863,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t{{- end -}}\n\t}\n\t{{- end}}\n",
                    "rendered": {
                      "text": "\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t{{- end -}}\n\t}\n\t{{- end}}\n",
                      "markdown": "`\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t{{- end -}}\n\t}\n\t{{- end}}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator.go"
                },
                "region": {
                  "startLine": 860,
                  "startColumn": 36,
                  "endLine": 860,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t\tr{{$idx}} = {{$.RetVariableName}}.Error({{$idx}})\n\t\t{{- else if (index $.Returns.Nilable $idx) -}}\n\t\tif {{$.RetVariableName}}.Get({{$idx}}) != nil {\n\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n",
                    "rendered": {
                      "text": "\t\tr{{$idx}} = {{$.RetVariableName}}.Error({{$idx}})\n\t\t{{- else if (index $.Returns.Nilable $idx) -}}\n\t\tif {{$.RetVariableName}}.Get({{$idx}}) != nil {\n\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n",
                      "markdown": "`\t\tr{{$idx}} = {{$.RetVariableName}}.Error({{$idx}})\n\t\t{{- else if (index $.Returns.Nilable $idx) -}}\n\t\tif {{$.RetVariableName}}.Get({{$idx}}) != nil {\n\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator.go"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 26,
                  "endLine": 859,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\t{{- if eq \"error\" $typ -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Error({{$idx}})\n\t\t{{- else if (index $.Returns.Nilable $idx) -}}\n\t\tif {{$.RetVariableName}}.Get({{$idx}}) != nil {\n\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n",
                    "rendered": {
                      "text": "\t\t{{- if eq \"error\" $typ -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Error({{$idx}})\n\t\t{{- else if (index $.Returns.Nilable $idx) -}}\n\t\tif {{$.RetVariableName}}.Get({{$idx}}) != nil {\n\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n",
                      "markdown": "`\t\t{{- if eq \"error\" $typ -}}\n\t\tr{{$idx}} = {{$.RetVariableName}}.Error({{$idx}})\n\t\t{{- else if (index $.Returns.Nilable $idx) -}}\n\t\tif {{$.RetVariableName}}.Get({{$idx}}) != nil {\n\t\t\tr{{$idx}} = {{$.RetVariableName}}.Get({{$idx}}).({{$typ}})\n\t\t}\n\t\t{{- else -}}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator.go"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 35,
                  "endLine": 853,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n\t{{end}}\n\t{{- $typ := index $.Returns.Types $idx -}}\n\tif rf, ok := {{$.RetVariableName}}.Get({{$idx}}).(func({{join $.Params.Types \", \"}}) {{$typ}}); ok {\n\t\tr{{$idx}} = rf({{$.Params.FormattedParamNames}})\n\t} else {\n\t\t{{- if eq \"error\" $typ -}}\n",
                    "rendered": {
                      "text": "\n\t{{end}}\n\t{{- $typ := index $.Returns.Types $idx -}}\n\tif rf, ok := {{$.RetVariableName}}.Get({{$idx}}).(func({{join $.Params.Types \", \"}}) {{$typ}}); ok {\n\t\tr{{$idx}} = rf({{$.Params.FormattedParamNames}})\n\t} else {\n\t\t{{- if eq \"error\" $typ -}}\n",
                      "markdown": "`\n\t{{end}}\n\t{{- $typ := index $.Returns.Types $idx -}}\n\tif rf, ok := {{$.RetVariableName}}.Get({{$idx}}).(func({{join $.Params.Types \", \"}}) {{$typ}}); ok {\n\t\tr{{$idx}} = rf({{$.Params.FormattedParamNames}})\n\t} else {\n\t\t{{- if eq \"error\" $typ -}}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/generator.go"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 34,
                  "endLine": 844,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tvar {{$name}} {{index $.Returns.Types $idx -}}\n\t{{end}}\n\t{{if gt (len .Returns.Types) 1 -}}\n\tif rf, ok := {{.RetVariableName}}.Get(0).(func({{join .Params.Types \", \"}}) ({{join .Returns.Types \", \"}})); ok {\n\t\treturn rf({{.Params.FormattedParamNames}})\n\t}\n\t{{end}}\n",
                    "rendered": {
                      "text": "\tvar {{$name}} {{index $.Returns.Types $idx -}}\n\t{{end}}\n\t{{if gt (len .Returns.Types) 1 -}}\n\tif rf, ok := {{.RetVariableName}}.Get(0).(func({{join .Params.Types \", \"}}) ({{join .Returns.Types \", \"}})); ok {\n\t\treturn rf({{.Params.FormattedParamNames}})\n\t}\n\t{{end}}\n",
                      "markdown": "`\tvar {{$name}} {{index $.Returns.Types $idx -}}\n\t{{end}}\n\t{{if gt (len .Returns.Types) 1 -}}\n\tif rf, ok := {{.RetVariableName}}.Get(0).(func({{join .Params.Types \", \"}}) ({{join .Returns.Types \", \"}})); ok {\n\t\treturn rf({{.Params.FormattedParamNames}})\n\t}\n\t{{end}}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/pkg/outputter.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 5,
                  "endLine": 69,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\t// Basic access to reading environment variables\n\t\"expandEnv\": os.ExpandEnv,\n\t\"getenv\":    os.Getenv,\n}\n\ntype Cleanup func() error\n",
                    "rendered": {
                      "text": "\n\t// Basic access to reading environment variables\n\t\"expandEnv\": os.ExpandEnv,\n\t\"getenv\":    os.Getenv,\n}\n\ntype Cleanup func() error\n",
                      "markdown": "`\n\t// Basic access to reading environment variables\n\t\"expandEnv\": os.ExpandEnv,\n\t\"getenv\":    os.Getenv,\n}\n\ntype Cleanup func() error\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGeneric.go"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 10,
                  "endLine": 128,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() TConstraint); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(TConstraint)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() TConstraint); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(TConstraint)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() TConstraint); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(TConstraint)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGeneric.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "endLine": 125,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 TConstraint\n\tif rf, ok := ret.Get(0).(func() TConstraint); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(TConstraint)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 TConstraint\n\tif rf, ok := ret.Get(0).(func() TConstraint); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(TConstraint)\n",
                      "markdown": "`\t}\n\n\tvar r0 TConstraint\n\tif rf, ok := ret.Get(0).(func() TConstraint); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(TConstraint)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGeneric.go"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 10,
                  "endLine": 83,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGeneric.go"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 17,
                  "endLine": 80,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 test.B\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 test.B\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n",
                      "markdown": "`\t}\n\n\tvar r0 test.B\n\tif rf, ok := ret.Get(0).(func() test.B); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(test.B)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGeneric.go"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 10,
                  "endLine": 37,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\tif rf, ok := ret.Get(0).(func(test.B) TKeep); ok {\n\t\tr0 = rf(t1)\n\t} else {\n\t\tr0 = ret.Get(0).(TKeep)\n\t}\n\n\treturn r0\n",
                    "rendered": {
                      "text": "\tif rf, ok := ret.Get(0).(func(test.B) TKeep); ok {\n\t\tr0 = rf(t1)\n\t} else {\n\t\tr0 = ret.Get(0).(TKeep)\n\t}\n\n\treturn r0\n",
                      "markdown": "`\tif rf, ok := ret.Get(0).(func(test.B) TKeep); ok {\n\t\tr0 = rf(t1)\n\t} else {\n\t\tr0 = ret.Get(0).(TKeep)\n\t}\n\n\treturn r0\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/mocks/github.com/vektra/mockery/v2/pkg/fixtures/ReplaceGeneric.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t}\n\n\tvar r0 TKeep\n\tif rf, ok := ret.Get(0).(func(test.B) TKeep); ok {\n\t\tr0 = rf(t1)\n\t} else {\n\t\tr0 = ret.Get(0).(TKeep)\n",
                    "rendered": {
                      "text": "\t}\n\n\tvar r0 TKeep\n\tif rf, ok := ret.Get(0).(func(test.B) TKeep); ok {\n\t\tr0 = rf(t1)\n\t} else {\n\t\tr0 = ret.Get(0).(TKeep)\n",
                      "markdown": "`\t}\n\n\tvar r0 TKeep\n\tif rf, ok := ret.Get(0).(func(test.B) TKeep); ok {\n\t\tr0 = rf(t1)\n\t} else {\n\t\tr0 = ret.Get(0).(TKeep)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/mockery.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 28,
                  "endLine": 3,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# Contributing\n\nThank you for investing your time in contributing to our project!\n\nRead our [Code of Conduct](https://github.com/vektra/mockery/blob/master/CODE_OF_CONDUCT.md) to keep our community approachable and respectable.\n\n",
                    "rendered": {
                      "text": "# Contributing\n\nThank you for investing your time in contributing to our project!\n\nRead our [Code of Conduct](https://github.com/vektra/mockery/blob/master/CODE_OF_CONDUCT.md) to keep our community approachable and respectable.\n\n",
                      "markdown": "`# Contributing\n\nThank you for investing your time in contributing to our project!\n\nRead our [Code of Conduct](https://github.com/vektra/mockery/blob/master/CODE_OF_CONDUCT.md) to keep our community approachable and respectable.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}