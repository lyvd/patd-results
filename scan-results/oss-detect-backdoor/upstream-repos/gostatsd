{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s_test.go"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 8,
                  "endLine": 185,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t\texpectedTagsContains: []tagTestValue{labelTestValues[0], annotationTestValues[0]},\n\t},\n\t{\n\t\tname: \"WithCustomLabelTagWhitelistMultipleRegex\",\n\t\tviperParams: map[string]interface{}{\n\t\t\tParamLabelTagRegex: \"^(app|label)\",\n\t\t},\n",
                    "rendered": {
                      "text": "\t\texpectedTagsContains: []tagTestValue{labelTestValues[0], annotationTestValues[0]},\n\t},\n\t{\n\t\tname: \"WithCustomLabelTagWhitelistMultipleRegex\",\n\t\tviperParams: map[string]interface{}{\n\t\t\tParamLabelTagRegex: \"^(app|label)\",\n\t\t},\n",
                      "markdown": "`\t\texpectedTagsContains: []tagTestValue{labelTestValues[0], annotationTestValues[0]},\n\t},\n\t{\n\t\tname: \"WithCustomLabelTagWhitelistMultipleRegex\",\n\t\tviperParams: map[string]interface{}{\n\t\t\tParamLabelTagRegex: \"^(app|label)\",\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s_test.go"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 8,
                  "endLine": 163,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\texpectedTagsContains: []tagTestValue{annotationTestValues[1]},\n\t},\n\t{\n\t\tname: \"WithCustomAnnotationTagWhitelistMultipleRegex\",\n\t\tviperParams: map[string]interface{}{\n\t\t\tParamAnnotationTagRegex: fmt.Sprintf(\n\t\t\t\t\"^(%s|%s)%s$\",\n",
                    "rendered": {
                      "text": "\t\texpectedTagsContains: []tagTestValue{annotationTestValues[1]},\n\t},\n\t{\n\t\tname: \"WithCustomAnnotationTagWhitelistMultipleRegex\",\n\t\tviperParams: map[string]interface{}{\n\t\t\tParamAnnotationTagRegex: fmt.Sprintf(\n\t\t\t\t\"^(%s|%s)%s$\",\n",
                      "markdown": "`\t\texpectedTagsContains: []tagTestValue{annotationTestValues[1]},\n\t},\n\t{\n\t\tname: \"WithCustomAnnotationTagWhitelistMultipleRegex\",\n\t\tviperParams: map[string]interface{}{\n\t\t\tParamAnnotationTagRegex: fmt.Sprintf(\n\t\t\t\t\"^(%s|%s)%s$\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s_test.go"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 67,
                  "endLine": 269,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\t\tregexp.MustCompile(DefaultAnnotationTagRegex),\n\t\tregexp.MustCompile(DefaultLabelTagRegex),\n\t)\n\trequire.Error(t, err, \"creating k8s provider to watch node with no node name should fail\")\n}\n\nfunc TestGetTagNameFromRegex(t *testing.T) {\n",
                    "rendered": {
                      "text": "\t\tregexp.MustCompile(DefaultAnnotationTagRegex),\n\t\tregexp.MustCompile(DefaultLabelTagRegex),\n\t)\n\trequire.Error(t, err, \"creating k8s provider to watch node with no node name should fail\")\n}\n\nfunc TestGetTagNameFromRegex(t *testing.T) {\n",
                      "markdown": "`\t\tregexp.MustCompile(DefaultAnnotationTagRegex),\n\t\tregexp.MustCompile(DefaultLabelTagRegex),\n\t)\n\trequire.Error(t, err, \"creating k8s provider to watch node with no node name should fail\")\n}\n\nfunc TestGetTagNameFromRegex(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s_test.go"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 48,
                  "endLine": 269,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\t\tregexp.MustCompile(DefaultAnnotationTagRegex),\n\t\tregexp.MustCompile(DefaultLabelTagRegex),\n\t)\n\trequire.Error(t, err, \"creating k8s provider to watch node with no node name should fail\")\n}\n\nfunc TestGetTagNameFromRegex(t *testing.T) {\n",
                    "rendered": {
                      "text": "\t\tregexp.MustCompile(DefaultAnnotationTagRegex),\n\t\tregexp.MustCompile(DefaultLabelTagRegex),\n\t)\n\trequire.Error(t, err, \"creating k8s provider to watch node with no node name should fail\")\n}\n\nfunc TestGetTagNameFromRegex(t *testing.T) {\n",
                      "markdown": "`\t\tregexp.MustCompile(DefaultAnnotationTagRegex),\n\t\tregexp.MustCompile(DefaultLabelTagRegex),\n\t)\n\trequire.Error(t, err, \"creating k8s provider to watch node with no node name should fail\")\n}\n\nfunc TestGetTagNameFromRegex(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s.go"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 58,
                  "endLine": 290,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\tcustomWatchOptions := func(*meta_v1.ListOptions) {}\n\tif !podInfOpts.WatchCluster {\n\t\tif podInfOpts.NodeName == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"watch-cluster set to false, and node name not supplied\")\n\t\t}\n\t\tfieldSelector := fields.OneTermEqualSelector(\"spec.nodeName\", podInfOpts.NodeName).String()\n\t\tlogger.WithField(\"fieldSelector\", fieldSelector).Debug(\"set fieldSelector for informers\")\n",
                    "rendered": {
                      "text": "\tcustomWatchOptions := func(*meta_v1.ListOptions) {}\n\tif !podInfOpts.WatchCluster {\n\t\tif podInfOpts.NodeName == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"watch-cluster set to false, and node name not supplied\")\n\t\t}\n\t\tfieldSelector := fields.OneTermEqualSelector(\"spec.nodeName\", podInfOpts.NodeName).String()\n\t\tlogger.WithField(\"fieldSelector\", fieldSelector).Debug(\"set fieldSelector for informers\")\n",
                      "markdown": "`\tcustomWatchOptions := func(*meta_v1.ListOptions) {}\n\tif !podInfOpts.WatchCluster {\n\t\tif podInfOpts.NodeName == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"watch-cluster set to false, and node name not supplied\")\n\t\t}\n\t\tfieldSelector := fields.OneTermEqualSelector(\"spec.nodeName\", podInfOpts.NodeName).String()\n\t\tlogger.WithField(\"fieldSelector\", fieldSelector).Debug(\"set fieldSelector for informers\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s.go"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 25,
                  "endLine": 196,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\t\treturn nil\n\t}\n\tif len(objs) < 1 {\n\t\tlogger.Debug(\"Could not find IP in cache\")\n\t\treturn nil\n\t}\n\tif len(objs) > 1 {\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\t}\n\tif len(objs) < 1 {\n\t\tlogger.Debug(\"Could not find IP in cache\")\n\t\treturn nil\n\t}\n\tif len(objs) > 1 {\n",
                      "markdown": "`\t\treturn nil\n\t}\n\tif len(objs) < 1 {\n\t\tlogger.Debug(\"Could not find IP in cache\")\n\t\treturn nil\n\t}\n\tif len(objs) > 1 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/k8s/k8s.go"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 6,
                  "endLine": 149,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase ip := <-p.ipSinkSource:\n\t\t\tinfoToSend = append(infoToSend, gostatsd.InstanceInfo{\n\t\t\t\tIP:       ip,\n\t\t\t\tInstance: p.instanceFromCache(ip),\n",
                    "rendered": {
                      "text": "\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase ip := <-p.ipSinkSource:\n\t\t\tinfoToSend = append(infoToSend, gostatsd.InstanceInfo{\n\t\t\t\tIP:       ip,\n\t\t\t\tInstance: p.instanceFromCache(ip),\n",
                      "markdown": "`\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase ip := <-p.ipSinkSource:\n\t\t\tinfoToSend = append(infoToSend, gostatsd.InstanceInfo{\n\t\t\t\tIP:       ip,\n\t\t\t\tInstance: p.instanceFromCache(ip),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/cloudprovider/cached_cloud_provider_test.go"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 7,
                  "endLine": 63,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\twg.Wait()\n\n\t// Cache might refresh multiple times, ensure it only refreshed with the expected IP\n\tfor _, ip := range fp.IPs() {\n\t\tassert.Equal(t, peekIp, ip)\n\t}\n\tassert.GreaterOrEqual(t, len(fp.IPs()), 2) // Ensure it does at least 1 lookup + 1 refresh\n",
                    "rendered": {
                      "text": "\twg.Wait()\n\n\t// Cache might refresh multiple times, ensure it only refreshed with the expected IP\n\tfor _, ip := range fp.IPs() {\n\t\tassert.Equal(t, peekIp, ip)\n\t}\n\tassert.GreaterOrEqual(t, len(fp.IPs()), 2) // Ensure it does at least 1 lookup + 1 refresh\n",
                      "markdown": "`\twg.Wait()\n\n\t// Cache might refresh multiple times, ensure it only refreshed with the expected IP\n\tfor _, ip := range fp.IPs() {\n\t\tassert.Equal(t, peekIp, ip)\n\t}\n\tassert.GreaterOrEqual(t, len(fp.IPs()), 2) // Ensure it does at least 1 lookup + 1 refresh\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/cloudprovider/cached_cloud_provider_lookup.go"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 7,
                  "endLine": 69,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t// Something bad happened, but process what we have still\n\t\tld.logger.Infof(\"Error retrieving instance details from cloud provider: %v\", err)\n\t}\n\tfor _, ip := range ips {\n\t\tres := gostatsd.InstanceInfo{\n\t\t\tIP:       ip,\n\t\t\tInstance: instances[ip],\n",
                    "rendered": {
                      "text": "\t\t// Something bad happened, but process what we have still\n\t\tld.logger.Infof(\"Error retrieving instance details from cloud provider: %v\", err)\n\t}\n\tfor _, ip := range ips {\n\t\tres := gostatsd.InstanceInfo{\n\t\t\tIP:       ip,\n\t\t\tInstance: instances[ip],\n",
                      "markdown": "`\t\t// Something bad happened, but process what we have still\n\t\tld.logger.Infof(\"Error retrieving instance details from cloud provider: %v\", err)\n\t}\n\tfor _, ip := range ips {\n\t\tres := gostatsd.InstanceInfo{\n\t\t\tIP:       ip,\n\t\t\tInstance: instances[ip],\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/cloudprovider/cached_cloud_provider_lookup.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 6,
                  "endLine": 33,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase ip := <-ld.ipSource:\n\t\t\tips = append(ips, ip)\n\t\t\tif len(ips) >= maxLookupIPs {\n\t\t\t\tbreak // enough ips, exit select\n",
                    "rendered": {
                      "text": "\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase ip := <-ld.ipSource:\n\t\t\tips = append(ips, ip)\n\t\t\tif len(ips) >= maxLookupIPs {\n\t\t\t\tbreak // enough ips, exit select\n",
                      "markdown": "`\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase ip := <-ld.ipSource:\n\t\t\tips = append(ips, ip)\n\t\t\tif len(ips) >= maxLookupIPs {\n\t\t\t\tbreak // enough ips, exit select\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/internal/data/number_datapoint_test.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor _, tc := range []struct {\n\t\tname   string\n\t\topts   []func(NumberDataPoint)\n\t\texpect NumberDataPoint\n\t}{\n\t\t{\n\t\t\tname: \"empty\",\n",
                    "rendered": {
                      "text": "\tfor _, tc := range []struct {\n\t\tname   string\n\t\topts   []func(NumberDataPoint)\n\t\texpect NumberDataPoint\n\t}{\n\t\t{\n\t\t\tname: \"empty\",\n",
                      "markdown": "`\tfor _, tc := range []struct {\n\t\tname   string\n\t\topts   []func(NumberDataPoint)\n\t\texpect NumberDataPoint\n\t}{\n\t\t{\n\t\t\tname: \"empty\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/internal/data/key_value_test.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tname    string\n\t\tvalue   string\n\t\tinserts []string\n\t\texpect  *v1common.KeyValue\n\t}{\n\t\t{\n\t\t\tname:  \"Single Value\",\n",
                    "rendered": {
                      "text": "\t\tname    string\n\t\tvalue   string\n\t\tinserts []string\n\t\texpect  *v1common.KeyValue\n\t}{\n\t\t{\n\t\t\tname:  \"Single Value\",\n",
                      "markdown": "`\t\tname    string\n\t\tvalue   string\n\t\tinserts []string\n\t\texpect  *v1common.KeyValue\n\t}{\n\t\t{\n\t\t\tname:  \"Single Value\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/influxdb_test.go"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 17,
                  "endLine": 426,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                    "rendered": {
                      "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                      "markdown": "`\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/influxdb_test.go"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 17,
                  "endLine": 324,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                    "rendered": {
                      "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                      "markdown": "`\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/influxdb_test.go"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "endLine": 192,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                    "rendered": {
                      "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                      "markdown": "`\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"gzip\" {\n\t\t\tdecompressor, err := gzip.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/web/http_receiver_v2.go"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 23,
                  "endLine": 83,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\t}\n\treq.Body.Close()\n\n\tencoding := req.Header.Get(\"Content-Encoding\")\n\tswitch encoding {\n\tcase ZlibContentEncoding:\n\t\tb, err = DecompressWithZlib(b)\n",
                    "rendered": {
                      "text": "\t}\n\treq.Body.Close()\n\n\tencoding := req.Header.Get(\"Content-Encoding\")\n\tswitch encoding {\n\tcase ZlibContentEncoding:\n\t\tb, err = DecompressWithZlib(b)\n",
                      "markdown": "`\t}\n\treq.Body.Close()\n\n\tencoding := req.Header.Get(\"Content-Encoding\")\n\tswitch encoding {\n\tcase ZlibContentEncoding:\n\t\tb, err = DecompressWithZlib(b)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/api/api_test.go"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ttestCases := []struct {\n\t\tdomain string\n\t\tpath   api.LambdaPath\n\t\texpect string\n\t}{\n\t\t{domain: \"localhost\", path: api.EventEndpoint, expect: \"http://localhost/2020-01-01/extension/event/next\"},\n\t\t{domain: \"localhost/\", path: api.ExitErrorEndpoint, expect: \"http://localhost/2020-01-01/extension/exit/error\"},\n",
                    "rendered": {
                      "text": "\ttestCases := []struct {\n\t\tdomain string\n\t\tpath   api.LambdaPath\n\t\texpect string\n\t}{\n\t\t{domain: \"localhost\", path: api.EventEndpoint, expect: \"http://localhost/2020-01-01/extension/event/next\"},\n\t\t{domain: \"localhost/\", path: api.ExitErrorEndpoint, expect: \"http://localhost/2020-01-01/extension/exit/error\"},\n",
                      "markdown": "`\ttestCases := []struct {\n\t\tdomain string\n\t\tpath   api.LambdaPath\n\t\texpect string\n\t}{\n\t\t{domain: \"localhost\", path: api.EventEndpoint, expect: \"http://localhost/2020-01-01/extension/event/next\"},\n\t\t{domain: \"localhost/\", path: api.ExitErrorEndpoint, expect: \"http://localhost/2020-01-01/extension/exit/error\"},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 5,
                  "endLine": 171,
                  "endColumn": 13,
                  "snippet": {
                    "text": "docker-login-ci:\n\techo \"$$ARTIFACTORY_API_KEY\" | docker login docker-public.packages.atlassian.com \\\n\t  --username ${ARTIFACTORY_USERNAME} \\\n\t  --password-stdin\n\nrelease-ci: docker-login-ci release-normal-ci release-race-ci\n\n",
                    "rendered": {
                      "text": "docker-login-ci:\n\techo \"$$ARTIFACTORY_API_KEY\" | docker login docker-public.packages.atlassian.com \\\n\t  --username ${ARTIFACTORY_USERNAME} \\\n\t  --password-stdin\n\nrelease-ci: docker-login-ci release-normal-ci release-race-ci\n\n",
                      "markdown": "`docker-login-ci:\n\techo \"$$ARTIFACTORY_API_KEY\" | docker login docker-public.packages.atlassian.com \\\n\t  --username ${ARTIFACTORY_USERNAME} \\\n\t  --password-stdin\n\nrelease-ci: docker-login-ci release-normal-ci release-race-ci\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 11,
                  "endLine": 187,
                  "snippet": {
                    "text": "run: build\n\t./build/bin/$(ARCH)/$(BINARY_NAME) --backends=stdout --verbose --flush-interval=2s\n\nrun-docker: docker\n\tdocker-compose rm -f build/gostatsd\n\tdocker-compose -f build/docker-compose.yml build\n\tdocker-compose -f build/docker-compose.yml up -d\n\n",
                    "rendered": {
                      "text": "run: build\n\t./build/bin/$(ARCH)/$(BINARY_NAME) --backends=stdout --verbose --flush-interval=2s\n\nrun-docker: docker\n\tdocker-compose rm -f build/gostatsd\n\tdocker-compose -f build/docker-compose.yml build\n\tdocker-compose -f build/docker-compose.yml up -d\n\n",
                      "markdown": "`run: build\n\t./build/bin/$(ARCH)/$(BINARY_NAME) --backends=stdout --verbose --flush-interval=2s\n\nrun-docker: docker\n\tdocker-compose rm -f build/gostatsd\n\tdocker-compose -f build/docker-compose.yml build\n\tdocker-compose -f build/docker-compose.yml up -d\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 3,
                  "endLine": 180,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n\tdone\n\nrun: build\n",
                    "rendered": {
                      "text": "\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n\tdone\n\nrun: build\n",
                      "markdown": "`\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n\tdone\n\nrun: build\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 1,
                  "endLine": 178,
                  "endColumn": 9,
                  "snippet": {
                    "text": "release-manifest-ci: docker-login-ci\n\tfor tag in latest $(REPO_VERSION) $(GIT_HASH)-race $(REPO_VERSION)-race ; do \\\n\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n\tdone\n",
                    "rendered": {
                      "text": "release-manifest-ci: docker-login-ci\n\tfor tag in latest $(REPO_VERSION) $(GIT_HASH)-race $(REPO_VERSION)-race ; do \\\n\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n\tdone\n",
                      "markdown": "`release-manifest-ci: docker-login-ci\n\tfor tag in latest $(REPO_VERSION) $(GIT_HASH)-race $(REPO_VERSION)-race ; do \\\n\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n\tdone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 1,
                  "endLine": 177,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nrelease-manifest-ci: docker-login-ci\n\tfor tag in latest $(REPO_VERSION) $(GIT_HASH)-race $(REPO_VERSION)-race ; do \\\n\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n",
                    "rendered": {
                      "text": "\nrelease-manifest-ci: docker-login-ci\n\tfor tag in latest $(REPO_VERSION) $(GIT_HASH)-race $(REPO_VERSION)-race ; do \\\n\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n",
                      "markdown": "`\nrelease-manifest-ci: docker-login-ci\n\tfor tag in latest $(REPO_VERSION) $(GIT_HASH)-race $(REPO_VERSION)-race ; do \\\n\t\tdocker pull $(IMAGE_NAME):$$tag ; \\\n\t\tdocker manifest create $(IMAGE_PREFIX):$$tag --amend \\\n\t\t\t$(IMAGE_NAME):$$tag ; \\\n\t  \tdocker manifest push $(IMAGE_PREFIX):$$tag ; \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 31,
                  "endLine": 169,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n# Only works in Github actions, which is the only place `make release-ci` should be run\ndocker-login-ci:\n\techo \"$$ARTIFACTORY_API_KEY\" | docker login docker-public.packages.atlassian.com \\\n\t  --username ${ARTIFACTORY_USERNAME} \\\n\t  --password-stdin\n\n",
                    "rendered": {
                      "text": "\n# Only works in Github actions, which is the only place `make release-ci` should be run\ndocker-login-ci:\n\techo \"$$ARTIFACTORY_API_KEY\" | docker login docker-public.packages.atlassian.com \\\n\t  --username ${ARTIFACTORY_USERNAME} \\\n\t  --password-stdin\n\n",
                      "markdown": "`\n# Only works in Github actions, which is the only place `make release-ci` should be run\ndocker-login-ci:\n\techo \"$$ARTIFACTORY_API_KEY\" | docker login docker-public.packages.atlassian.com \\\n\t  --username ${ARTIFACTORY_USERNAME} \\\n\t  --password-stdin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)-race\n\n# Only works in Github actions, which is the only place `make release-ci` should be run\ndocker-login-ci:\n",
                    "rendered": {
                      "text": "\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)-race\n\n# Only works in Github actions, which is the only place `make release-ci` should be run\ndocker-login-ci:\n",
                      "markdown": "`\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)-race\n\n# Only works in Github actions, which is the only place `make release-ci` should be run\ndocker-login-ci:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)-race\n\n# Only works in Github actions, which is the only place `make release-ci` should be run\n",
                    "rendered": {
                      "text": "\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)-race\n\n# Only works in Github actions, which is the only place `make release-ci` should be run\n",
                      "markdown": "`\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)-race\n\n# Only works in Github actions, which is the only place `make release-ci` should be run\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n",
                    "rendered": {
                      "text": "\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n",
                      "markdown": "`\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n\nrelease-race-ci: release-hash-race-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH)-race $(IMAGE_NAME):$(REPO_VERSION)-race\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n",
                    "rendered": {
                      "text": "\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n",
                      "markdown": "`\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)-race\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157,
                  "endColumn": 8,
                  "snippet": {
                    "text": "release-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n",
                    "rendered": {
                      "text": "release-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n",
                      "markdown": "`release-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrelease-hash-race-ci: build-hash-race\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\n",
                    "rendered": {
                      "text": "\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\n",
                      "markdown": "`\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 155,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n",
                    "rendered": {
                      "text": "\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n",
                      "markdown": "`\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker images\n\nrelease-hash-ci: build-hash\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n",
                    "rendered": {
                      "text": "\tdocker images\n\nrelease-hash-ci: build-hash\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n",
                      "markdown": "`\tdocker images\n\nrelease-hash-ci: build-hash\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\nrelease-normal-ci: release-hash-ci\n\tdocker tag $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 149,
                  "endLine": 149,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n\t\t--load .\n\tdocker images\n\nrelease-hash-ci: build-hash\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n",
                    "rendered": {
                      "text": "\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n\t\t--load .\n\tdocker images\n\nrelease-hash-ci: build-hash\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n",
                      "markdown": "`\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n\t\t--load .\n\tdocker images\n\nrelease-hash-ci: build-hash\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker images\n\nbuild-hash-race: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH)-race -f build/Dockerfile-multiarch-glibc \\\n\t\t--build-arg MAIN_PKG=$(MAIN_PKG) \\\n\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n",
                    "rendered": {
                      "text": "\tdocker images\n\nbuild-hash-race: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH)-race -f build/Dockerfile-multiarch-glibc \\\n\t\t--build-arg MAIN_PKG=$(MAIN_PKG) \\\n\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n",
                      "markdown": "`\tdocker images\n\nbuild-hash-race: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH)-race -f build/Dockerfile-multiarch-glibc \\\n\t\t--build-arg MAIN_PKG=$(MAIN_PKG) \\\n\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 141,
                  "endLine": 141,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n\t\t--load .\n\tdocker images\n\nbuild-hash-race: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH)-race -f build/Dockerfile-multiarch-glibc \\\n",
                    "rendered": {
                      "text": "\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n\t\t--load .\n\tdocker images\n\nbuild-hash-race: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH)-race -f build/Dockerfile-multiarch-glibc \\\n",
                      "markdown": "`\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n\t\t--load .\n\tdocker images\n\nbuild-hash-race: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH)-race -f build/Dockerfile-multiarch-glibc \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 136,
                  "endLine": 136,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tcp dev/push-hook.sh .git/hooks/pre-push\n\nbuild-hash: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH) -f build/Dockerfile-multiarch \\\n\t\t--build-arg MAIN_PKG=$(MAIN_PKG) \\\n\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n",
                    "rendered": {
                      "text": "\tcp dev/push-hook.sh .git/hooks/pre-push\n\nbuild-hash: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH) -f build/Dockerfile-multiarch \\\n\t\t--build-arg MAIN_PKG=$(MAIN_PKG) \\\n\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n",
                      "markdown": "`\tcp dev/push-hook.sh .git/hooks/pre-push\n\nbuild-hash: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH) -f build/Dockerfile-multiarch \\\n\t\t--build-arg MAIN_PKG=$(MAIN_PKG) \\\n\t\t--build-arg BINARY_NAME=$(BINARY_NAME) \\\n\t\t--platform=linux/$(CPU_ARCH) \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\t$(TOOLS_DIR)/go-fuzz -bin=./statsd-fuzz.zip -workdir=test_fixtures/lexer_fuzz\n\ngit-hook:\n\tcp dev/push-hook.sh .git/hooks/pre-push\n\nbuild-hash: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH) -f build/Dockerfile-multiarch \\\n",
                    "rendered": {
                      "text": "\t$(TOOLS_DIR)/go-fuzz -bin=./statsd-fuzz.zip -workdir=test_fixtures/lexer_fuzz\n\ngit-hook:\n\tcp dev/push-hook.sh .git/hooks/pre-push\n\nbuild-hash: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH) -f build/Dockerfile-multiarch \\\n",
                      "markdown": "`\t$(TOOLS_DIR)/go-fuzz -bin=./statsd-fuzz.zip -workdir=test_fixtures/lexer_fuzz\n\ngit-hook:\n\tcp dev/push-hook.sh .git/hooks/pre-push\n\nbuild-hash: pb/gostatsd.pb.go\n\tdocker buildx build -t $(IMAGE_NAME):$(GIT_HASH) -f build/Dockerfile-multiarch \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 144,
                  "endLine": 78,
                  "endColumn": 150,
                  "snippet": {
                    "text": "check-fmt: $(TOOLS_DIR)/goimports\n\t@# Since gofmt and goimports dont return 1 on chamges, this !() stuff will trigger a build failure if theres any problems.\n\t! (gofmt -l -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\t! ($(TOOLS_DIR)/goimports -l -local github.com/atlassian/gostatsd $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\nfix-fmt:\n\tgofmt -w -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\")\n",
                    "rendered": {
                      "text": "check-fmt: $(TOOLS_DIR)/goimports\n\t@# Since gofmt and goimports dont return 1 on chamges, this !() stuff will trigger a build failure if theres any problems.\n\t! (gofmt -l -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\t! ($(TOOLS_DIR)/goimports -l -local github.com/atlassian/gostatsd $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\nfix-fmt:\n\tgofmt -w -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\")\n",
                      "markdown": "`check-fmt: $(TOOLS_DIR)/goimports\n\t@# Since gofmt and goimports dont return 1 on chamges, this !() stuff will trigger a build failure if theres any problems.\n\t! (gofmt -l -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\t! ($(TOOLS_DIR)/goimports -l -local github.com/atlassian/gostatsd $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\nfix-fmt:\n\tgofmt -w -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 93,
                  "endLine": 77,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\ncheck-fmt: $(TOOLS_DIR)/goimports\n\t@# Since gofmt and goimports dont return 1 on chamges, this !() stuff will trigger a build failure if theres any problems.\n\t! (gofmt -l -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\t! ($(TOOLS_DIR)/goimports -l -local github.com/atlassian/gostatsd $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\nfix-fmt:\n",
                    "rendered": {
                      "text": "\ncheck-fmt: $(TOOLS_DIR)/goimports\n\t@# Since gofmt and goimports dont return 1 on chamges, this !() stuff will trigger a build failure if theres any problems.\n\t! (gofmt -l -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\t! ($(TOOLS_DIR)/goimports -l -local github.com/atlassian/gostatsd $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\nfix-fmt:\n",
                      "markdown": "`\ncheck-fmt: $(TOOLS_DIR)/goimports\n\t@# Since gofmt and goimports dont return 1 on chamges, this !() stuff will trigger a build failure if theres any problems.\n\t! (gofmt -l -s $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\t! ($(TOOLS_DIR)/goimports -l -local github.com/atlassian/gostatsd $$(find . -type f -name '*.go' -not -path \"./vendor/*\" -not -path \"./pb/*\") | grep .)\n\nfix-fmt:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 32,
                  "endLine": 39,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\trm protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\npb/gostatsd.pb.go: pb/gostatsd.proto .tools/bin/protoc\n\tGOPATH=\"$(TOOLS_DIR):$(shell go env GOPATH)/bin\" $(TOOLS_DIR)/protoc --go_out=.\\\n\t\t--go_opt=paths=source_relative $<\n\nbuild: pb/gostatsd.pb.go\n",
                    "rendered": {
                      "text": "\trm protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\npb/gostatsd.pb.go: pb/gostatsd.proto .tools/bin/protoc\n\tGOPATH=\"$(TOOLS_DIR):$(shell go env GOPATH)/bin\" $(TOOLS_DIR)/protoc --go_out=.\\\n\t\t--go_opt=paths=source_relative $<\n\nbuild: pb/gostatsd.pb.go\n",
                      "markdown": "`\trm protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\npb/gostatsd.pb.go: pb/gostatsd.proto .tools/bin/protoc\n\tGOPATH=\"$(TOOLS_DIR):$(shell go env GOPATH)/bin\" $(TOOLS_DIR)/protoc --go_out=.\\\n\t\t--go_opt=paths=source_relative $<\n\nbuild: pb/gostatsd.pb.go\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tmkdir -p $(TOOLS_DIR)\n\n.tools/bin/protoc:\n\tcurl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOBUF_VERSION)/protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\tunzip -o -d $(TOOLS_DIR) protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\trm protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\n",
                    "rendered": {
                      "text": "\tmkdir -p $(TOOLS_DIR)\n\n.tools/bin/protoc:\n\tcurl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOBUF_VERSION)/protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\tunzip -o -d $(TOOLS_DIR) protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\trm protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\n",
                      "markdown": "`\tmkdir -p $(TOOLS_DIR)\n\n.tools/bin/protoc:\n\tcurl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOBUF_VERSION)/protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\tunzip -o -d $(TOOLS_DIR) protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\trm protoc-$(PROTOBUF_VERSION)-linux-x86_64.zip\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 101,
                  "endLine": 21,
                  "endColumn": 106,
                  "snippet": {
                    "text": "PROJECT_ROOT_DIR    := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\nTOOLS_DIR           := $(PROJECT_ROOT_DIR)/.tools\nTOOLS_SRC_DIR       := $(PROJECT_ROOT_DIR)/internal/tools\nALL_TOOLS_PACKAGES  := $(shell grep -E '(^|\\s)_\\s+\\\".*\\\"$$' < $(TOOLS_SRC_DIR)/tools.go | tr -d '\"' | awk '{print $$2;}')\nALL_TOOLS_COMMAND   := $(sort $(addprefix $(TOOLS_DIR)/,$(notdir $(ALL_TOOLS_PACKAGES))))\n\n.PHONY: tools\n",
                    "rendered": {
                      "text": "PROJECT_ROOT_DIR    := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\nTOOLS_DIR           := $(PROJECT_ROOT_DIR)/.tools\nTOOLS_SRC_DIR       := $(PROJECT_ROOT_DIR)/internal/tools\nALL_TOOLS_PACKAGES  := $(shell grep -E '(^|\\s)_\\s+\\\".*\\\"$$' < $(TOOLS_SRC_DIR)/tools.go | tr -d '\"' | awk '{print $$2;}')\nALL_TOOLS_COMMAND   := $(sort $(addprefix $(TOOLS_DIR)/,$(notdir $(ALL_TOOLS_PACKAGES))))\n\n.PHONY: tools\n",
                      "markdown": "`PROJECT_ROOT_DIR    := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\nTOOLS_DIR           := $(PROJECT_ROOT_DIR)/.tools\nTOOLS_SRC_DIR       := $(PROJECT_ROOT_DIR)/internal/tools\nALL_TOOLS_PACKAGES  := $(shell grep -E '(^|\\s)_\\s+\\\".*\\\"$$' < $(TOOLS_SRC_DIR)/tools.go | tr -d '\"' | awk '{print $$2;}')\nALL_TOOLS_COMMAND   := $(sort $(addprefix $(TOOLS_DIR)/,$(notdir $(ALL_TOOLS_PACKAGES))))\n\n.PHONY: tools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 30,
                  "endLine": 21,
                  "endColumn": 36,
                  "snippet": {
                    "text": "PROJECT_ROOT_DIR    := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\nTOOLS_DIR           := $(PROJECT_ROOT_DIR)/.tools\nTOOLS_SRC_DIR       := $(PROJECT_ROOT_DIR)/internal/tools\nALL_TOOLS_PACKAGES  := $(shell grep -E '(^|\\s)_\\s+\\\".*\\\"$$' < $(TOOLS_SRC_DIR)/tools.go | tr -d '\"' | awk '{print $$2;}')\nALL_TOOLS_COMMAND   := $(sort $(addprefix $(TOOLS_DIR)/,$(notdir $(ALL_TOOLS_PACKAGES))))\n\n.PHONY: tools\n",
                    "rendered": {
                      "text": "PROJECT_ROOT_DIR    := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\nTOOLS_DIR           := $(PROJECT_ROOT_DIR)/.tools\nTOOLS_SRC_DIR       := $(PROJECT_ROOT_DIR)/internal/tools\nALL_TOOLS_PACKAGES  := $(shell grep -E '(^|\\s)_\\s+\\\".*\\\"$$' < $(TOOLS_SRC_DIR)/tools.go | tr -d '\"' | awk '{print $$2;}')\nALL_TOOLS_COMMAND   := $(sort $(addprefix $(TOOLS_DIR)/,$(notdir $(ALL_TOOLS_PACKAGES))))\n\n.PHONY: tools\n",
                      "markdown": "`PROJECT_ROOT_DIR    := $(realpath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))\nTOOLS_DIR           := $(PROJECT_ROOT_DIR)/.tools\nTOOLS_SRC_DIR       := $(PROJECT_ROOT_DIR)/internal/tools\nALL_TOOLS_PACKAGES  := $(shell grep -E '(^|\\s)_\\s+\\\".*\\\"$$' < $(TOOLS_SRC_DIR)/tools.go | tr -d '\"' | awk '{print $$2;}')\nALL_TOOLS_COMMAND   := $(sort $(addprefix $(TOOLS_DIR)/,$(notdir $(ALL_TOOLS_PACKAGES))))\n\n.PHONY: tools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 30,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "BUILD_DATE          := $(shell date +%Y-%m-%d-%H:%M)\nREPO_VERSION        ?= $(shell git describe --abbrev=0 --tags)\nGIT_HASH            ?= $(shell git rev-parse --short HEAD)\nBINARY_NAME         := gostatsd\nCPU_ARCH            ?= amd64\nCGO_ENABLED         ?= 0\n",
                    "rendered": {
                      "text": "BUILD_DATE          := $(shell date +%Y-%m-%d-%H:%M)\nREPO_VERSION        ?= $(shell git describe --abbrev=0 --tags)\nGIT_HASH            ?= $(shell git rev-parse --short HEAD)\nBINARY_NAME         := gostatsd\nCPU_ARCH            ?= amd64\nCGO_ENABLED         ?= 0\n",
                      "markdown": "`BUILD_DATE          := $(shell date +%Y-%m-%d-%H:%M)\nREPO_VERSION        ?= $(shell git describe --abbrev=0 --tags)\nGIT_HASH            ?= $(shell git rev-parse --short HEAD)\nBINARY_NAME         := gostatsd\nCPU_ARCH            ?= amd64\nCGO_ENABLED         ?= 0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/Makefile"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 30,
                  "endLine": 2,
                  "endColumn": 35,
                  "snippet": {
                    "text": "BUILD_DATE          := $(shell date +%Y-%m-%d-%H:%M)\nREPO_VERSION        ?= $(shell git describe --abbrev=0 --tags)\nGIT_HASH            ?= $(shell git rev-parse --short HEAD)\nBINARY_NAME         := gostatsd\nCPU_ARCH            ?= amd64\n",
                    "rendered": {
                      "text": "BUILD_DATE          := $(shell date +%Y-%m-%d-%H:%M)\nREPO_VERSION        ?= $(shell git describe --abbrev=0 --tags)\nGIT_HASH            ?= $(shell git rev-parse --short HEAD)\nBINARY_NAME         := gostatsd\nCPU_ARCH            ?= amd64\n",
                      "markdown": "`BUILD_DATE          := $(shell date +%Y-%m-%d-%H:%M)\nREPO_VERSION        ?= $(shell git describe --abbrev=0 --tags)\nGIT_HASH            ?= $(shell git rev-parse --short HEAD)\nBINARY_NAME         := gostatsd\nCPU_ARCH            ?= amd64\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/worker.go"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\t\t\treturn\n\t\t\t}\n\t\t\tw.aggr.ReceiveMap(mm)\n\t\tcase cmd := <-w.processChan:\n\t\t\tw.executeProcess(cmd)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t\treturn\n\t\t\t}\n\t\t\tw.aggr.ReceiveMap(mm)\n\t\tcase cmd := <-w.processChan:\n\t\t\tw.executeProcess(cmd)\n\t\t}\n\t}\n",
                      "markdown": "`\t\t\t\treturn\n\t\t\t}\n\t\t\tw.aggr.ReceiveMap(mm)\n\t\tcase cmd := <-w.processChan:\n\t\t\tw.executeProcess(cmd)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/latency_histogram_test.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 31,
                  "endLine": 82,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"timer without the tag at all\",\n\t\t\ttimer: gostatsd.Timer{\n\t\t\t\tValues:    []float64{1, 2, 3},\n\t\t\t\tTags:      []string{\"some_different_tag:yep\"},\n",
                    "rendered": {
                      "text": "\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"timer without the tag at all\",\n\t\t\ttimer: gostatsd.Timer{\n\t\t\t\tValues:    []float64{1, 2, 3},\n\t\t\t\tTags:      []string{\"some_different_tag:yep\"},\n",
                      "markdown": "`\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"timer without the tag at all\",\n\t\t\ttimer: gostatsd.Timer{\n\t\t\t\tValues:    []float64{1, 2, 3},\n\t\t\t\tTags:      []string{\"some_different_tag:yep\"},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/types.go"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n// Datagram is a received UDP datagram that has not been parsed into Metric/Event(s)\ntype Datagram struct {\n\tIP        gostatsd.Source\n\tMsg       []byte\n\tTimestamp gostatsd.Nanotime\n\tDoneFunc  func() // to be called once the datagram has been parsed and msg can be freed\n",
                    "rendered": {
                      "text": "\n// Datagram is a received UDP datagram that has not been parsed into Metric/Event(s)\ntype Datagram struct {\n\tIP        gostatsd.Source\n\tMsg       []byte\n\tTimestamp gostatsd.Nanotime\n\tDoneFunc  func() // to be called once the datagram has been parsed and msg can be freed\n",
                      "markdown": "`\n// Datagram is a received UDP datagram that has not been parsed into Metric/Event(s)\ntype Datagram struct {\n\tIP        gostatsd.Source\n\tMsg       []byte\n\tTimestamp gostatsd.Nanotime\n\tDoneFunc  func() // to be called once the datagram has been parsed and msg can be freed\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/testdata/all-options.toml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 42,
                  "endLine": 3,
                  "endColumn": 50,
                  "snippet": {
                    "text": "[otlp]\nmetrics_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/metric/endpoint'\nlogs_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/logs/endpoint'\nmax_requests = 7\nmetrics_per_batch = 1000\nresource_keys = ['service.name', 'service.version', 'deployment.environment']\n",
                    "rendered": {
                      "text": "[otlp]\nmetrics_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/metric/endpoint'\nlogs_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/logs/endpoint'\nmax_requests = 7\nmetrics_per_batch = 1000\nresource_keys = ['service.name', 'service.version', 'deployment.environment']\n",
                      "markdown": "`[otlp]\nmetrics_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/metric/endpoint'\nlogs_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/logs/endpoint'\nmax_requests = 7\nmetrics_per_batch = 1000\nresource_keys = ['service.name', 'service.version', 'deployment.environment']\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/testdata/all-options.toml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 45,
                  "endLine": 2,
                  "endColumn": 53,
                  "snippet": {
                    "text": "[otlp]\nmetrics_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/metric/endpoint'\nlogs_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/logs/endpoint'\nmax_requests = 7\nmetrics_per_batch = 1000\n",
                    "rendered": {
                      "text": "[otlp]\nmetrics_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/metric/endpoint'\nlogs_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/logs/endpoint'\nmax_requests = 7\nmetrics_per_batch = 1000\n",
                      "markdown": "`[otlp]\nmetrics_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/metric/endpoint'\nlogs_endpoint = 'an-example-of-an-awesome-hostname/with/path/to/otlp/logs/endpoint'\nmax_requests = 7\nmetrics_per_batch = 1000\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog_test.go"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 17,
                  "endLine": 239,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"deflate\" {\n\t\t\tdecompressor, err := zlib.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                    "rendered": {
                      "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"deflate\" {\n\t\t\tdecompressor, err := zlib.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                      "markdown": "`\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"deflate\" {\n\t\t\tdecompressor, err := zlib.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog_test.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"deflate\" {\n\t\t\tdecompressor, err := zlib.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                    "rendered": {
                      "text": "\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"deflate\" {\n\t\t\tdecompressor, err := zlib.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n",
                      "markdown": "`\t\tif !assert.NoError(t, err) {\n\t\t\treturn\n\t\t}\n\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\tif enc == \"deflate\" {\n\t\t\tdecompressor, err := zlib.NewReader(bytes.NewReader(data))\n\t\t\tif !assert.NoError(t, err) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 36,
                  "endLine": 1000,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n- Reset counters, gauges, timers, etc. after an expiration delay\n- Datadog: add interval to metric payload\n- Datadog: use source ip address as hostname\n\n0.8.5\n-----\n",
                    "rendered": {
                      "text": "\n- Reset counters, gauges, timers, etc. after an expiration delay\n- Datadog: add interval to metric payload\n- Datadog: use source ip address as hostname\n\n0.8.5\n-----\n",
                      "markdown": "`\n- Reset counters, gauges, timers, etc. after an expiration delay\n- Datadog: add interval to metric payload\n- Datadog: use source ip address as hostname\n\n0.8.5\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 816,
                  "startColumn": 63,
                  "endLine": 816,
                  "endColumn": 71,
                  "snippet": {
                    "text": "0.14.7\n------\n\n- Fix bug introduced in 0.14.6 in Datadog backend when invalid hostname was sent for metrics\n- Set tags for own metrics (#55)\n- Add [expvar](https://golang.org/pkg/expvar/) support\n- Minor internals refactoring and optimization\n",
                    "rendered": {
                      "text": "0.14.7\n------\n\n- Fix bug introduced in 0.14.6 in Datadog backend when invalid hostname was sent for metrics\n- Set tags for own metrics (#55)\n- Add [expvar](https://golang.org/pkg/expvar/) support\n- Minor internals refactoring and optimization\n",
                      "markdown": "`0.14.7\n------\n\n- Fix bug introduced in 0.14.6 in Datadog backend when invalid hostname was sent for metrics\n- Set tags for own metrics (#55)\n- Add [expvar](https://golang.org/pkg/expvar/) support\n- Minor internals refactoring and optimization\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 86,
                  "endLine": 489,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\n- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n",
                    "rendered": {
                      "text": "\n- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n",
                      "markdown": "`\n- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 9,
                  "endLine": 489,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n",
                    "rendered": {
                      "text": "\n- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n",
                      "markdown": "`\n- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 1,
                  "endLine": 885,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n- Log intermediate errors in Datadog backend\n- Consistently set timeouts for AWS SDK service clients\n- Update all dependencies\n- Fix Datadog backend retry error #18\n- Various internal improvements\n\n",
                    "rendered": {
                      "text": "\n- Log intermediate errors in Datadog backend\n- Consistently set timeouts for AWS SDK service clients\n- Update all dependencies\n- Fix Datadog backend retry error #18\n- Various internal improvements\n\n",
                      "markdown": "`\n- Log intermediate errors in Datadog backend\n- Consistently set timeouts for AWS SDK service clients\n- Update all dependencies\n- Fix Datadog backend retry error #18\n- Various internal improvements\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 859,
                  "startColumn": 1,
                  "endLine": 859,
                  "endColumn": 9,
                  "snippet": {
                    "text": "0.14.0\n------\n\n- Update to Alpine 3.4\n- Cap request size in Datadog backend (#27)\n- Set timeouts on Dials and tcp sends (#23)\n- Reuse HTTP connections in Datadog backend\n",
                    "rendered": {
                      "text": "0.14.0\n------\n\n- Update to Alpine 3.4\n- Cap request size in Datadog backend (#27)\n- Set timeouts on Dials and tcp sends (#23)\n- Reuse HTTP connections in Datadog backend\n",
                      "markdown": "`0.14.0\n------\n\n- Update to Alpine 3.4\n- Cap request size in Datadog backend (#27)\n- Set timeouts on Dials and tcp sends (#23)\n- Reuse HTTP connections in Datadog backend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 1,
                  "endLine": 788,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- Support TCP transport and write timeouts in statsd backend\n- Reuse UDP/TCP sockets to reduce number of DNS lookups in statsd and graphite backends\n- Reuse memory buffers in more cases\n- Update dependencies\n\n0.14.11\n-------\n",
                    "rendered": {
                      "text": "- Support TCP transport and write timeouts in statsd backend\n- Reuse UDP/TCP sockets to reduce number of DNS lookups in statsd and graphite backends\n- Reuse memory buffers in more cases\n- Update dependencies\n\n0.14.11\n-------\n",
                      "markdown": "`- Support TCP transport and write timeouts in statsd backend\n- Reuse UDP/TCP sockets to reduce number of DNS lookups in statsd and graphite backends\n- Reuse memory buffers in more cases\n- Update dependencies\n\n0.14.11\n-------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 1,
                  "endLine": 771,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- Fix a bunch of linting issues\n- Run tests concurrently\n- Configure various timeouts on HTTP clients\n- Update dependencies\n- Big internals refactoring and cleanup\n\n0.15.1\n",
                    "rendered": {
                      "text": "- Fix a bunch of linting issues\n- Run tests concurrently\n- Configure various timeouts on HTTP clients\n- Update dependencies\n- Big internals refactoring and cleanup\n\n0.15.1\n",
                      "markdown": "`- Fix a bunch of linting issues\n- Run tests concurrently\n- Configure various timeouts on HTTP clients\n- Update dependencies\n- Big internals refactoring and cleanup\n\n0.15.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 1,
                  "endLine": 726,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- Add support for compression in Datadog payload.\n- New Datadog option: `compress_payload` allows compression of Datadog payload.  Defaults `true`.\n- Add staged shutdown\n- Update logrus import path\n\n2.3.0\n-----\n",
                    "rendered": {
                      "text": "- Add support for compression in Datadog payload.\n- New Datadog option: `compress_payload` allows compression of Datadog payload.  Defaults `true`.\n- Add staged shutdown\n- Update logrus import path\n\n2.3.0\n-----\n",
                      "markdown": "`- Add support for compression in Datadog payload.\n- New Datadog option: `compress_payload` allows compression of Datadog payload.  Defaults `true`.\n- Add staged shutdown\n- Update logrus import path\n\n2.3.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 712,
                  "startColumn": 41,
                  "endLine": 712,
                  "endColumn": 50,
                  "snippet": {
                    "text": "2.4.2\n-----\n\n- New Datadog option: `dual_stack` allows control of RFC-6555 \"Happy Eyeballs\" for IPv6 control.  Defaults `false`.\n\n2.4.1\n-----\n",
                    "rendered": {
                      "text": "2.4.2\n-----\n\n- New Datadog option: `dual_stack` allows control of RFC-6555 \"Happy Eyeballs\" for IPv6 control.  Defaults `false`.\n\n2.4.1\n-----\n",
                      "markdown": "`2.4.2\n-----\n\n- New Datadog option: `dual_stack` allows control of RFC-6555 \"Happy Eyeballs\" for IPv6 control.  Defaults `false`.\n\n2.4.1\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 38,
                  "endLine": 706,
                  "endColumn": 47,
                  "snippet": {
                    "text": "- BREAKING: use space instead of comma to specify multiple values for the following parameters: `backends`,\n  `percent-threshold`, `default-tags` and `internal-tags`.\n- BREAKING: Removed Datadog `dual_stack` option in favor of explicit network selection.\n- New Datadog option: `network` allows control of the network protocol used, typical values are `tcp`,\n  `tcp4`, or `tcp6`.  Defaults `tcp`.  See [Dial](https://golang.org/pkg/net/#Dial) for further information.\n\n2.4.2\n",
                    "rendered": {
                      "text": "- BREAKING: use space instead of comma to specify multiple values for the following parameters: `backends`,\n  `percent-threshold`, `default-tags` and `internal-tags`.\n- BREAKING: Removed Datadog `dual_stack` option in favor of explicit network selection.\n- New Datadog option: `network` allows control of the network protocol used, typical values are `tcp`,\n  `tcp4`, or `tcp6`.  Defaults `tcp`.  See [Dial](https://golang.org/pkg/net/#Dial) for further information.\n\n2.4.2\n",
                      "markdown": "`- BREAKING: use space instead of comma to specify multiple values for the following parameters: `backends`,\n  `percent-threshold`, `default-tags` and `internal-tags`.\n- BREAKING: Removed Datadog `dual_stack` option in favor of explicit network selection.\n- New Datadog option: `network` allows control of the network protocol used, typical values are `tcp`,\n  `tcp4`, or `tcp6`.  Defaults `tcp`.  See [Dial](https://golang.org/pkg/net/#Dial) for further information.\n\n2.4.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 50,
                  "endLine": 572,
                  "endColumn": 59,
                  "snippet": {
                    "text": "6.2.0\n-----\n\n- Added `enable-http2` flag for Datadog backend to control HTTP/2 support, defaults to `false`\n\n6.1.2\n-----\n",
                    "rendered": {
                      "text": "6.2.0\n-----\n\n- Added `enable-http2` flag for Datadog backend to control HTTP/2 support, defaults to `false`\n\n6.1.2\n-----\n",
                      "markdown": "`6.2.0\n-----\n\n- Added `enable-http2` flag for Datadog backend to control HTTP/2 support, defaults to `false`\n\n6.1.2\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 50,
                  "endLine": 513,
                  "endColumn": 54,
                  "snippet": {
                    "text": "------\n\n- Add http forwarding and ingestion.  See `Configuring the server mode` and `Configuring HTTP servers` in [README.md](README.md)\n  for details.  Not recommended for production use at this time.  Healthcheck is ok to use\n- Introduces v1 ingestion\n\n10.0.1\n",
                    "rendered": {
                      "text": "------\n\n- Add http forwarding and ingestion.  See `Configuring the server mode` and `Configuring HTTP servers` in [README.md](README.md)\n  for details.  Not recommended for production use at this time.  Healthcheck is ok to use\n- Introduces v1 ingestion\n\n10.0.1\n",
                      "markdown": "`------\n\n- Add http forwarding and ingestion.  See `Configuring the server mode` and `Configuring HTTP servers` in [README.md](README.md)\n  for details.  Not recommended for production use at this time.  Healthcheck is ok to use\n- Introduces v1 ingestion\n\n10.0.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 1,
                  "endLine": 461,
                  "endColumn": 9,
                  "snippet": {
                    "text": "15.0.1\n------\n\n- Update to Alpine 3.9\n\n15.0.0\n------\n",
                    "rendered": {
                      "text": "15.0.1\n------\n\n- Update to Alpine 3.9\n\n15.0.0\n------\n",
                      "markdown": "`15.0.1\n------\n\n- Update to Alpine 3.9\n\n15.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 1,
                  "endLine": 325,
                  "endColumn": 9,
                  "snippet": {
                    "text": "24.0.0\n------\n\n- Update to aggregator channel metrics. see [METRICS.md](METRICS.md) for details.\n\n23.0.0\n------\n",
                    "rendered": {
                      "text": "24.0.0\n------\n\n- Update to aggregator channel metrics. see [METRICS.md](METRICS.md) for details.\n\n23.0.0\n------\n",
                      "markdown": "`24.0.0\n------\n\n- Update to aggregator channel metrics. see [METRICS.md](METRICS.md) for details.\n\n23.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 1,
                  "endLine": 256,
                  "endColumn": 9,
                  "snippet": {
                    "text": "29.0.1\n------\n\n- Update to Alpine 3.13\n\n29.0.0\n------\n",
                    "rendered": {
                      "text": "29.0.1\n------\n\n- Update to Alpine 3.13\n\n29.0.0\n------\n",
                      "markdown": "`29.0.1\n------\n\n- Update to Alpine 3.13\n\n29.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 1,
                  "endLine": 251,
                  "endColumn": 9,
                  "snippet": {
                    "text": "29.0.2\n------\n\n- Update to Alpine 3.14.1\n\n29.0.1\n------\n",
                    "rendered": {
                      "text": "29.0.2\n------\n\n- Update to Alpine 3.14.1\n\n29.0.1\n------\n",
                      "markdown": "`29.0.2\n------\n\n- Update to Alpine 3.14.1\n\n29.0.1\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 1,
                  "endLine": 171,
                  "endColumn": 9,
                  "snippet": {
                    "text": "35.0.1\n------\n\n- Update to Alpine 3.15.5\n\n35.0.0\n------\n",
                    "rendered": {
                      "text": "35.0.1\n------\n\n- Update to Alpine 3.15.5\n\n35.0.0\n------\n",
                      "markdown": "`35.0.1\n------\n\n- Update to Alpine 3.15.5\n\n35.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1067,
                  "startColumn": 27,
                  "endLine": 1067,
                  "endColumn": 35,
                  "snippet": {
                    "text": "-----\n\n- Remove logging the url on each flush in datadog backend\n- Use alpine base image for docker instead of scratch to avoid ca certs root error\n\n0.4.0\n-----\n",
                    "rendered": {
                      "text": "-----\n\n- Remove logging the url on each flush in datadog backend\n- Use alpine base image for docker instead of scratch to avoid ca certs root error\n\n0.4.0\n-----\n",
                      "markdown": "`-----\n\n- Remove logging the url on each flush in datadog backend\n- Use alpine base image for docker instead of scratch to avoid ca certs root error\n\n0.4.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 21,
                  "endLine": 1000,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n- Reset counters, gauges, timers, etc. after an expiration delay\n- Datadog: add interval to metric payload\n- Datadog: use source ip address as hostname\n\n0.8.5\n-----\n",
                    "rendered": {
                      "text": "\n- Reset counters, gauges, timers, etc. after an expiration delay\n- Datadog: add interval to metric payload\n- Datadog: use source ip address as hostname\n\n0.8.5\n-----\n",
                      "markdown": "`\n- Reset counters, gauges, timers, etc. after an expiration delay\n- Datadog: add interval to metric payload\n- Datadog: use source ip address as hostname\n\n0.8.5\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 941,
                  "startColumn": 48,
                  "endLine": 941,
                  "endColumn": 54,
                  "snippet": {
                    "text": "- Revert dropping message and block instead\n- Use different values for number of worker to read from socket, process messages and metrics\n- Minor fixes and performance improvements\n- Calculate per second counters since last flush time instead of interval\n\n0.11.2\n------\n",
                    "rendered": {
                      "text": "- Revert dropping message and block instead\n- Use different values for number of worker to read from socket, process messages and metrics\n- Minor fixes and performance improvements\n- Calculate per second counters since last flush time instead of interval\n\n0.11.2\n------\n",
                      "markdown": "`- Revert dropping message and block instead\n- Use different values for number of worker to read from socket, process messages and metrics\n- Minor fixes and performance improvements\n- Calculate per second counters since last flush time instead of interval\n\n0.11.2\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 921,
                  "startColumn": 16,
                  "endLine": 921,
                  "endColumn": 22,
                  "snippet": {
                    "text": "0.12.3\n------\n\n- Do not replace dash and underscore in metric names and tags\n\n0.12.2\n------\n",
                    "rendered": {
                      "text": "0.12.3\n------\n\n- Do not replace dash and underscore in metric names and tags\n\n0.12.2\n------\n",
                      "markdown": "`0.12.3\n------\n\n- Do not replace dash and underscore in metric names and tags\n\n0.12.2\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 37,
                  "endLine": 898,
                  "endColumn": 45,
                  "snippet": {
                    "text": "0.12.7\n------\n\n- Remove deprecated -f flag passed to Docker tag command\n- Rename num_stats back to numStats to be compatible with original statsd\n\n0.12.6\n",
                    "rendered": {
                      "text": "0.12.7\n------\n\n- Remove deprecated -f flag passed to Docker tag command\n- Rename num_stats back to numStats to be compatible with original statsd\n\n0.12.6\n",
                      "markdown": "`0.12.7\n------\n\n- Remove deprecated -f flag passed to Docker tag command\n- Rename num_stats back to numStats to be compatible with original statsd\n\n0.12.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 39,
                  "endLine": 884,
                  "endColumn": 48,
                  "snippet": {
                    "text": "------\n\n- Log intermediate errors in Datadog backend\n- Consistently set timeouts for AWS SDK service clients\n- Update all dependencies\n- Fix Datadog backend retry error #18\n- Various internal improvements\n",
                    "rendered": {
                      "text": "------\n\n- Log intermediate errors in Datadog backend\n- Consistently set timeouts for AWS SDK service clients\n- Update all dependencies\n- Fix Datadog backend retry error #18\n- Various internal improvements\n",
                      "markdown": "`------\n\n- Log intermediate errors in Datadog backend\n- Consistently set timeouts for AWS SDK service clients\n- Update all dependencies\n- Fix Datadog backend retry error #18\n- Various internal improvements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 837,
                  "startColumn": 37,
                  "endLine": 837,
                  "endColumn": 45,
                  "snippet": {
                    "text": "------\n\n- Send start and stop events (#21)\n- Linux binary is now built inside of Docker container rather than on the host\n\n0.14.3\n------\n",
                    "rendered": {
                      "text": "------\n\n- Send start and stop events (#21)\n- Linux binary is now built inside of Docker container rather than on the host\n\n0.14.3\n------\n",
                      "markdown": "`------\n\n- Send start and stop events (#21)\n- Linux binary is now built inside of Docker container rather than on the host\n\n0.14.3\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 55,
                  "endLine": 738,
                  "endColumn": 59,
                  "snippet": {
                    "text": "2.2.0\n-----\n\n- New flag `--ignore-host` prevents capturing of source IP address.  Hostname can be provided\n  by client via a `host:` tag.\n\n2.1.0\n",
                    "rendered": {
                      "text": "2.2.0\n-----\n\n- New flag `--ignore-host` prevents capturing of source IP address.  Hostname can be provided\n  by client via a `host:` tag.\n\n2.1.0\n",
                      "markdown": "`2.2.0\n-----\n\n- New flag `--ignore-host` prevents capturing of source IP address.  Hostname can be provided\n  by client via a `host:` tag.\n\n2.1.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 5,
                  "endLine": 689,
                  "endColumn": 13,
                  "snippet": {
                    "text": "3.1.0\n-----\n\n- New docker image suffix, `version`-syms, includes symbol table\n- New flag `--receive-batch-size` to set datagram batch size.  Defaults `50`.\n- Batch reading should improve performance by using `recvmmsg(2)`.  This has additional memory considerations\n  documented in README.md, and can tuned by tracking the `avg_packets_in_batch` metric and adjusting as necessary.\n",
                    "rendered": {
                      "text": "3.1.0\n-----\n\n- New docker image suffix, `version`-syms, includes symbol table\n- New flag `--receive-batch-size` to set datagram batch size.  Defaults `50`.\n- Batch reading should improve performance by using `recvmmsg(2)`.  This has additional memory considerations\n  documented in README.md, and can tuned by tracking the `avg_packets_in_batch` metric and adjusting as necessary.\n",
                      "markdown": "`3.1.0\n-----\n\n- New docker image suffix, `version`-syms, includes symbol table\n- New flag `--receive-batch-size` to set datagram batch size.  Defaults `50`.\n- Batch reading should improve performance by using `recvmmsg(2)`.  This has additional memory considerations\n  documented in README.md, and can tuned by tracking the `avg_packets_in_batch` metric and adjusting as necessary.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 56,
                  "endLine": 641,
                  "snippet": {
                    "text": "5.1.1\n-----\n\n- Fix index out of range error and tag corruption in AWS CP\n\n5.1.0\n-----\n\n",
                    "rendered": {
                      "text": "5.1.1\n-----\n\n- Fix index out of range error and tag corruption in AWS CP\n\n5.1.0\n-----\n\n",
                      "markdown": "`5.1.1\n-----\n\n- Fix index out of range error and tag corruption in AWS CP\n\n5.1.0\n-----\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 24,
                  "endLine": 582,
                  "endColumn": 33,
                  "snippet": {
                    "text": "6.1.1\n-----\n\n- Fixed a bug making the service not work on Windows.\n\n6.1.0\n-----\n",
                    "rendered": {
                      "text": "6.1.1\n-----\n\n- Fixed a bug making the service not work on Windows.\n\n6.1.0\n-----\n",
                      "markdown": "`6.1.1\n-----\n\n- Fixed a bug making the service not work on Windows.\n\n6.1.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 35,
                  "endLine": 490,
                  "endColumn": 43,
                  "snippet": {
                    "text": "- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n------\n",
                    "rendered": {
                      "text": "- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n------\n",
                      "markdown": "`- Removed v1 ingestion\n- Refactor internal pipeline\n- Added `hostname` flag to support override for internal metrics.  Defaults to system hostname.\n  Use this flag when running within docker to make host identification easier.\n\n12.0.2\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 39,
                  "endLine": 424,
                  "endColumn": 48,
                  "snippet": {
                    "text": "------\n\n- Remove support for disabling retries in the forwarder\n- Document how to disable retries using timeout values\n\n17.1.1\n------\n",
                    "rendered": {
                      "text": "------\n\n- Remove support for disabling retries in the forwarder\n- Document how to disable retries using timeout values\n\n17.1.1\n------\n",
                      "markdown": "`------\n\n- Remove support for disabling retries in the forwarder\n- Document how to disable retries using timeout values\n\n17.1.1\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 6,
                  "endLine": 408,
                  "endColumn": 14,
                  "snippet": {
                    "text": "------\n\n- Build with Go 1.13.0\n- Base docker images on alpine 3.10 and ubuntu 18.04\n\n18.0.0\n------\n",
                    "rendered": {
                      "text": "------\n\n- Build with Go 1.13.0\n- Base docker images on alpine 3.10 and ubuntu 18.04\n\n18.0.0\n------\n",
                      "markdown": "`------\n\n- Build with Go 1.13.0\n- Base docker images on alpine 3.10 and ubuntu 18.04\n\n18.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 86,
                  "endLine": 298,
                  "endColumn": 92,
                  "snippet": {
                    "text": "- Simplify internal tracking of the source address of a metric.  The current rules are:\n\nIf ignore-host is set, it will be set to the `host` tag if present, otherwise blank.  If ignore-host is not set, it will be set to the sending IP\nIf the cloud provider is enabled, it will attempt to perform a lookup of this value to find a new value (instance ID, pod ID, etc)\nIf the tag handler matches a `drop-host` filter, it will be removed\nBackends use it inconsistently\n\n",
                    "rendered": {
                      "text": "- Simplify internal tracking of the source address of a metric.  The current rules are:\n\nIf ignore-host is set, it will be set to the `host` tag if present, otherwise blank.  If ignore-host is not set, it will be set to the sending IP\nIf the cloud provider is enabled, it will attempt to perform a lookup of this value to find a new value (instance ID, pod ID, etc)\nIf the tag handler matches a `drop-host` filter, it will be removed\nBackends use it inconsistently\n\n",
                      "markdown": "`- Simplify internal tracking of the source address of a metric.  The current rules are:\n\nIf ignore-host is set, it will be set to the `host` tag if present, otherwise blank.  If ignore-host is not set, it will be set to the sending IP\nIf the cloud provider is enabled, it will attempt to perform a lookup of this value to find a new value (instance ID, pod ID, etc)\nIf the tag handler matches a `drop-host` filter, it will be removed\nBackends use it inconsistently\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 142,
                  "endLine": 298,
                  "snippet": {
                    "text": "\n- Simplify internal tracking of the source address of a metric.  The current rules are:\n\nIf ignore-host is set, it will be set to the `host` tag if present, otherwise blank.  If ignore-host is not set, it will be set to the sending IP\nIf the cloud provider is enabled, it will attempt to perform a lookup of this value to find a new value (instance ID, pod ID, etc)\nIf the tag handler matches a `drop-host` filter, it will be removed\nBackends use it inconsistently\n\n",
                    "rendered": {
                      "text": "\n- Simplify internal tracking of the source address of a metric.  The current rules are:\n\nIf ignore-host is set, it will be set to the `host` tag if present, otherwise blank.  If ignore-host is not set, it will be set to the sending IP\nIf the cloud provider is enabled, it will attempt to perform a lookup of this value to find a new value (instance ID, pod ID, etc)\nIf the tag handler matches a `drop-host` filter, it will be removed\nBackends use it inconsistently\n\n",
                      "markdown": "`\n- Simplify internal tracking of the source address of a metric.  The current rules are:\n\nIf ignore-host is set, it will be set to the `host` tag if present, otherwise blank.  If ignore-host is not set, it will be set to the sending IP\nIf the cloud provider is enabled, it will attempt to perform a lookup of this value to find a new value (instance ID, pod ID, etc)\nIf the tag handler matches a `drop-host` filter, it will be removed\nBackends use it inconsistently\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 19,
                  "endLine": 261,
                  "endColumn": 27,
                  "snippet": {
                    "text": "29.0.0\n------\n\n- Support for ARM64 docker image\n- Test changes and fixes to improve coverage\n- Internal code refactoring to reduce surface area\n- Refactor lexer to improve memory usage\n",
                    "rendered": {
                      "text": "29.0.0\n------\n\n- Support for ARM64 docker image\n- Test changes and fixes to improve coverage\n- Internal code refactoring to reduce surface area\n- Refactor lexer to improve memory usage\n",
                      "markdown": "`29.0.0\n------\n\n- Support for ARM64 docker image\n- Test changes and fixes to improve coverage\n- Internal code refactoring to reduce surface area\n- Refactor lexer to improve memory usage\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 29,
                  "endLine": 230,
                  "endColumn": 37,
                  "snippet": {
                    "text": "32.0.1\n------\n\n- Removed support for `*-sym` docker image\n\n32.0.0\n------\n",
                    "rendered": {
                      "text": "32.0.1\n------\n\n- Removed support for `*-sym` docker image\n\n32.0.0\n------\n",
                      "markdown": "`32.0.1\n------\n\n- Removed support for `*-sym` docker image\n\n32.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 40,
                  "endLine": 201,
                  "endColumn": 48,
                  "snippet": {
                    "text": "34.0.1\n------\n\n- Forcing a new tag release to allow for docker release\n- Missed release for 34.0.0\n\n34.0.0\n",
                    "rendered": {
                      "text": "34.0.1\n------\n\n- Forcing a new tag release to allow for docker release\n- Missed release for 34.0.0\n\n34.0.0\n",
                      "markdown": "`34.0.1\n------\n\n- Forcing a new tag release to allow for docker release\n- Missed release for 34.0.0\n\n34.0.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 99,
                  "endLine": 193,
                  "endColumn": 105,
                  "snippet": {
                    "text": "34.1.0\n------\n\n- NewRelic backend honors Retry-After header, added by malderete.  As a result of this, the maximum time a request can\n  take approaches 2*max-request-elapsed-time, however it's still a bounded duration (unless max-request-elapsed-time=0).\n  Note: this is not entirely new behavior, as max-request-elapsed-time only determines when to stop retrying, and not\n  http timeouts (see [TRANSPORT.md](TRANSPORT.md) for details).\n",
                    "rendered": {
                      "text": "34.1.0\n------\n\n- NewRelic backend honors Retry-After header, added by malderete.  As a result of this, the maximum time a request can\n  take approaches 2*max-request-elapsed-time, however it's still a bounded duration (unless max-request-elapsed-time=0).\n  Note: this is not entirely new behavior, as max-request-elapsed-time only determines when to stop retrying, and not\n  http timeouts (see [TRANSPORT.md](TRANSPORT.md) for details).\n",
                      "markdown": "`34.1.0\n------\n\n- NewRelic backend honors Retry-After header, added by malderete.  As a result of this, the maximum time a request can\n  take approaches 2*max-request-elapsed-time, however it's still a bounded duration (unless max-request-elapsed-time=0).\n  Note: this is not entirely new behavior, as max-request-elapsed-time only determines when to stop retrying, and not\n  http timeouts (see [TRANSPORT.md](TRANSPORT.md) for details).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CHANGELOG.md"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 35,
                  "endLine": 78,
                  "endColumn": 43,
                  "snippet": {
                    "text": "38.0.1\n------\n\n- Fix manual release due to failing docker builds\n\n38.0.0\n------\n",
                    "rendered": {
                      "text": "38.0.1\n------\n\n- Fix manual release due to failing docker builds\n\n38.0.0\n------\n",
                      "markdown": "`38.0.1\n------\n\n- Fix manual release due to failing docker builds\n\n38.0.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/sender.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 21,
                  "endLine": 101,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\t\tdefer conn.Close()\n\t\t\t\tbuf := new(bytes.Buffer)\n\t\t\t\tfor t := range flushTicker.C {\n\t\t\t\t\tlog.Debugf(\"Tick at %v\", t)\n\t\t\t\t\ts.writeLines(conn, buf)\n\t\t\t\t\tif buf.Len() > 0 {\n\t\t\t\t\t\ts.write(conn, buf)\n",
                    "rendered": {
                      "text": "\t\t\t\tdefer conn.Close()\n\t\t\t\tbuf := new(bytes.Buffer)\n\t\t\t\tfor t := range flushTicker.C {\n\t\t\t\t\tlog.Debugf(\"Tick at %v\", t)\n\t\t\t\t\ts.writeLines(conn, buf)\n\t\t\t\t\tif buf.Len() > 0 {\n\t\t\t\t\t\ts.write(conn, buf)\n",
                      "markdown": "`\t\t\t\tdefer conn.Close()\n\t\t\t\tbuf := new(bytes.Buffer)\n\t\t\t\tfor t := range flushTicker.C {\n\t\t\t\t\tlog.Debugf(\"Tick at %v\", t)\n\t\t\t\t\ts.writeLines(conn, buf)\n\t\t\t\t\tif buf.Len() > 0 {\n\t\t\t\t\t\ts.write(conn, buf)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/dev/push-hook.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nmake check test\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nmake check test\n",
                      "markdown": "`#!/usr/bin/env bash\nmake check test\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/dev/push-hook.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nmake check test\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nmake check test\n",
                      "markdown": "`#!/usr/bin/env bash\nmake check test\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 32,
                  "endLine": 208,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\ta.SetDefault(\"max_instances_batch\", defaultMaxInstancesBatch)\n\thttpTimeout := a.GetDuration(\"client_timeout\")\n\tif httpTimeout <= 0 {\n\t\treturn nil, errors.New(\"client timeout must be positive\")\n\t}\n\tmaxInstances := a.GetInt(\"max_instances_batch\")\n\tif maxInstances <= 0 {\n",
                    "rendered": {
                      "text": "\ta.SetDefault(\"max_instances_batch\", defaultMaxInstancesBatch)\n\thttpTimeout := a.GetDuration(\"client_timeout\")\n\tif httpTimeout <= 0 {\n\t\treturn nil, errors.New(\"client timeout must be positive\")\n\t}\n\tmaxInstances := a.GetInt(\"max_instances_batch\")\n\tif maxInstances <= 0 {\n",
                      "markdown": "`\ta.SetDefault(\"max_instances_batch\", defaultMaxInstancesBatch)\n\thttpTimeout := a.GetDuration(\"client_timeout\")\n\tif httpTimeout <= 0 {\n\t\treturn nil, errors.New(\"client timeout must be positive\")\n\t}\n\tmaxInstances := a.GetInt(\"max_instances_batch\")\n\tif maxInstances <= 0 {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 10,
                  "endLine": 174,
                  "snippet": {
                    "text": "\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(IPv6.Ipv6Address))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t}\n\treturn gostatsd.UnknownSource\n",
                    "rendered": {
                      "text": "\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(IPv6.Ipv6Address))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t}\n\treturn gostatsd.UnknownSource\n",
                      "markdown": "`\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(IPv6.Ipv6Address))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t}\n\treturn gostatsd.UnknownSource\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 2,
                  "endLine": 171,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t}\n\t\t// Check private IPv6 addresses on interface\n\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(IPv6.Ipv6Address))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t}\n\t\t// Check private IPv6 addresses on interface\n\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(IPv6.Ipv6Address))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n",
                      "markdown": "`\t\t}\n\t\t// Check private IPv6 addresses on interface\n\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(IPv6.Ipv6Address))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 10,
                  "endLine": 167,
                  "snippet": {
                    "text": "\t\tfor _, privateIP := range iface.PrivateIpAddresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(privateIP.PrivateIpAddress))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t\t// Check private IPv6 addresses on interface\n\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n",
                    "rendered": {
                      "text": "\t\tfor _, privateIP := range iface.PrivateIpAddresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(privateIP.PrivateIpAddress))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t\t// Check private IPv6 addresses on interface\n\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n",
                      "markdown": "`\t\tfor _, privateIP := range iface.PrivateIpAddresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(privateIP.PrivateIpAddress))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t\t// Check private IPv6 addresses on interface\n\t\tfor _, IPv6 := range iface.Ipv6Addresses {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 2,
                  "endLine": 164,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tfor _, iface := range instance.NetworkInterfaces {\n\t\t// Check private IPv4 addresses on interface\n\t\tfor _, privateIP := range iface.PrivateIpAddresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(privateIP.PrivateIpAddress))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n",
                    "rendered": {
                      "text": "\tfor _, iface := range instance.NetworkInterfaces {\n\t\t// Check private IPv4 addresses on interface\n\t\tfor _, privateIP := range iface.PrivateIpAddresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(privateIP.PrivateIpAddress))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n",
                      "markdown": "`\tfor _, iface := range instance.NetworkInterfaces {\n\t\t// Check private IPv4 addresses on interface\n\t\tfor _, privateIP := range iface.PrivateIpAddresses {\n\t\t\tip = gostatsd.Source(aws.StringValue(privateIP.PrivateIpAddress))\n\t\t\tif _, ok := instances[ip]; ok {\n\t\t\t\treturn ip\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 8,
                  "endLine": 159,
                  "snippet": {
                    "text": "\t// Check primary private IPv4 address\n\tip := gostatsd.Source(aws.StringValue(instance.PrivateIpAddress))\n\tif _, ok := instances[ip]; ok {\n\t\treturn ip\n\t}\n\t// Check interfaces\n\tfor _, iface := range instance.NetworkInterfaces {\n\t\t// Check private IPv4 addresses on interface\n",
                    "rendered": {
                      "text": "\t// Check primary private IPv4 address\n\tip := gostatsd.Source(aws.StringValue(instance.PrivateIpAddress))\n\tif _, ok := instances[ip]; ok {\n\t\treturn ip\n\t}\n\t// Check interfaces\n\tfor _, iface := range instance.NetworkInterfaces {\n\t\t// Check private IPv4 addresses on interface\n",
                      "markdown": "`\t// Check primary private IPv4 address\n\tip := gostatsd.Source(aws.StringValue(instance.PrivateIpAddress))\n\tif _, ok := instances[ip]; ok {\n\t\treturn ip\n\t}\n\t// Check interfaces\n\tfor _, iface := range instance.NetworkInterfaces {\n\t\t// Check private IPv4 addresses on interface\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc getInterestingInstanceIP(instance *ec2.Instance, instances map[gostatsd.Source]*gostatsd.Instance) gostatsd.Source {\n\t// Check primary private IPv4 address\n\tip := gostatsd.Source(aws.StringValue(instance.PrivateIpAddress))\n\tif _, ok := instances[ip]; ok {\n\t\treturn ip\n\t}\n",
                    "rendered": {
                      "text": "\nfunc getInterestingInstanceIP(instance *ec2.Instance, instances map[gostatsd.Source]*gostatsd.Instance) gostatsd.Source {\n\t// Check primary private IPv4 address\n\tip := gostatsd.Source(aws.StringValue(instance.PrivateIpAddress))\n\tif _, ok := instances[ip]; ok {\n\t\treturn ip\n\t}\n",
                      "markdown": "`\nfunc getInterestingInstanceIP(instance *ec2.Instance, instances map[gostatsd.Source]*gostatsd.Instance) gostatsd.Source {\n\t// Check primary private IPv4 address\n\tip := gostatsd.Source(aws.StringValue(instance.PrivateIpAddress))\n\tif _, ok := instances[ip]; ok {\n\t\treturn ip\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 6,
                  "endLine": 102,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tfor _, reservation := range page.Reservations {\n\t\t\tfor _, instance := range reservation.Instances {\n\t\t\t\tip := getInterestingInstanceIP(instance, instances)\n\t\t\t\tif ip == gostatsd.UnknownSource {\n\t\t\t\t\tp.logger.Warnf(\"AWS returned unexpected EC2 instance: %#v\", instance)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tfor _, reservation := range page.Reservations {\n\t\t\tfor _, instance := range reservation.Instances {\n\t\t\t\tip := getInterestingInstanceIP(instance, instances)\n\t\t\t\tif ip == gostatsd.UnknownSource {\n\t\t\t\t\tp.logger.Warnf(\"AWS returned unexpected EC2 instance: %#v\", instance)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n",
                      "markdown": "`\t\tfor _, reservation := range page.Reservations {\n\t\t\tfor _, instance := range reservation.Instances {\n\t\t\t\tip := getInterestingInstanceIP(instance, instances)\n\t\t\t\tif ip == gostatsd.UnknownSource {\n\t\t\t\t\tp.logger.Warnf(\"AWS returned unexpected EC2 instance: %#v\", instance)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 3,
                  "endLine": 101,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tpages++\n\t\tfor _, reservation := range page.Reservations {\n\t\t\tfor _, instance := range reservation.Instances {\n\t\t\t\tip := getInterestingInstanceIP(instance, instances)\n\t\t\t\tif ip == gostatsd.UnknownSource {\n\t\t\t\t\tp.logger.Warnf(\"AWS returned unexpected EC2 instance: %#v\", instance)\n\t\t\t\t\tcontinue\n",
                    "rendered": {
                      "text": "\t\tpages++\n\t\tfor _, reservation := range page.Reservations {\n\t\t\tfor _, instance := range reservation.Instances {\n\t\t\t\tip := getInterestingInstanceIP(instance, instances)\n\t\t\t\tif ip == gostatsd.UnknownSource {\n\t\t\t\t\tp.logger.Warnf(\"AWS returned unexpected EC2 instance: %#v\", instance)\n\t\t\t\t\tcontinue\n",
                      "markdown": "`\t\tpages++\n\t\tfor _, reservation := range page.Reservations {\n\t\t\tfor _, instance := range reservation.Instances {\n\t\t\t\tip := getInterestingInstanceIP(instance, instances)\n\t\t\t\tif ip == gostatsd.UnknownSource {\n\t\t\t\t\tp.logger.Warnf(\"AWS returned unexpected EC2 instance: %#v\", instance)\n\t\t\t\t\tcontinue\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 19,
                  "endLine": 78,
                  "endColumn": 23,
                  "snippet": {
                    "text": "func (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n\t\tinstances[ip] = nil // initialize map. Used for lookups to see if info for IP was requested\n\t\tvalues[i] = aws.String(string(ip))\n\t}\n",
                    "rendered": {
                      "text": "func (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n\t\tinstances[ip] = nil // initialize map. Used for lookups to see if info for IP was requested\n\t\tvalues[i] = aws.String(string(ip))\n\t}\n",
                      "markdown": "`func (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n\t\tinstances[ip] = nil // initialize map. Used for lookups to see if info for IP was requested\n\t\tvalues[i] = aws.String(string(ip))\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 7,
                  "endLine": 78,
                  "endColumn": 11,
                  "snippet": {
                    "text": "func (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n\t\tinstances[ip] = nil // initialize map. Used for lookups to see if info for IP was requested\n\t\tvalues[i] = aws.String(string(ip))\n\t}\n",
                    "rendered": {
                      "text": "func (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n\t\tinstances[ip] = nil // initialize map. Used for lookups to see if info for IP was requested\n\t\tvalues[i] = aws.String(string(ip))\n\t}\n",
                      "markdown": "`func (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n\t\tinstances[ip] = nil // initialize map. Used for lookups to see if info for IP was requested\n\t\tvalues[i] = aws.String(string(ip))\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/aws/aws.go"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 48,
                  "endLine": 75,
                  "endColumn": 52,
                  "snippet": {
                    "text": "// Instance returns instances details from AWS.\n// ip -> nil pointer if instance was not found.\n// map is returned even in case of errors because it may contain partial data.\nfunc (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n",
                    "rendered": {
                      "text": "// Instance returns instances details from AWS.\n// ip -> nil pointer if instance was not found.\n// map is returned even in case of errors because it may contain partial data.\nfunc (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n",
                      "markdown": "`// Instance returns instances details from AWS.\n// ip -> nil pointer if instance was not found.\n// map is returned even in case of errors because it may contain partial data.\nfunc (p *Provider) Instance(ctx context.Context, IP ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(IP))\n\tvalues := make([]*string, len(IP))\n\tfor i, ip := range IP {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/config_test.go"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 31,
                  "endLine": 55,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\tcfg.Build(q)\n\trequire.Len(t, q, 2)\n\trequire.Equal(t, \"test-bucket\", q.Get(queryBucket))\n\trequire.Equal(t, \"test-org\", q.Get(queryOrg))\n}\n\nfunc TestViperV2MissingKeys(t *testing.T) {\n",
                    "rendered": {
                      "text": "\tcfg.Build(q)\n\trequire.Len(t, q, 2)\n\trequire.Equal(t, \"test-bucket\", q.Get(queryBucket))\n\trequire.Equal(t, \"test-org\", q.Get(queryOrg))\n}\n\nfunc TestViperV2MissingKeys(t *testing.T) {\n",
                      "markdown": "`\tcfg.Build(q)\n\trequire.Len(t, q, 2)\n\trequire.Equal(t, \"test-bucket\", q.Get(queryBucket))\n\trequire.Equal(t, \"test-org\", q.Get(queryOrg))\n}\n\nfunc TestViperV2MissingKeys(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/config_test.go"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 34,
                  "endLine": 54,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tq := url.Values{}\n\tcfg.Build(q)\n\trequire.Len(t, q, 2)\n\trequire.Equal(t, \"test-bucket\", q.Get(queryBucket))\n\trequire.Equal(t, \"test-org\", q.Get(queryOrg))\n}\n\n",
                    "rendered": {
                      "text": "\tq := url.Values{}\n\tcfg.Build(q)\n\trequire.Len(t, q, 2)\n\trequire.Equal(t, \"test-bucket\", q.Get(queryBucket))\n\trequire.Equal(t, \"test-org\", q.Get(queryOrg))\n}\n\n",
                      "markdown": "`\tq := url.Values{}\n\tcfg.Build(q)\n\trequire.Len(t, q, 2)\n\trequire.Equal(t, \"test-bucket\", q.Get(queryBucket))\n\trequire.Equal(t, \"test-org\", q.Get(queryOrg))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/config_test.go"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 30,
                  "endLine": 28,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n\nfunc TestViperV1MissingKeys(t *testing.T) {\n",
                    "rendered": {
                      "text": "\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n\nfunc TestViperV1MissingKeys(t *testing.T) {\n",
                      "markdown": "`\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n\nfunc TestViperV1MissingKeys(t *testing.T) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/config_test.go"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 30,
                  "endLine": 27,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tcfg.Build(q)\n\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n\n",
                    "rendered": {
                      "text": "\tcfg.Build(q)\n\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n\n",
                      "markdown": "`\tcfg.Build(q)\n\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/config_test.go"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 26,
                  "endLine": 26,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tq := url.Values{}\n\tcfg.Build(q)\n\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n",
                    "rendered": {
                      "text": "\tq := url.Values{}\n\tcfg.Build(q)\n\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n",
                      "markdown": "`\tq := url.Values{}\n\tcfg.Build(q)\n\trequire.Len(t, q, 3)\n\trequire.Equal(t, \"one\", q.Get(queryConsistency))\n\trequire.Equal(t, \"test-db\", q.Get(queryDatabase))\n\trequire.Equal(t, \"test-rp\", q.Get(queryRetentionPolicy))\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/spec/extensions-api.yaml"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 67,
                  "endLine": 290,
                  "endColumn": 73,
                  "snippet": {
                    "text": "          enum: [spindown, timeout, failure]\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n      example:\n        {\n          eventType: 'SHUTDOWN',\n",
                    "rendered": {
                      "text": "          enum: [spindown, timeout, failure]\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n      example:\n        {\n          eventType: 'SHUTDOWN',\n",
                      "markdown": "`          enum: [spindown, timeout, failure]\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n      example:\n        {\n          eventType: 'SHUTDOWN',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/spec/extensions-api.yaml"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 67,
                  "endLine": 260,
                  "endColumn": 73,
                  "snippet": {
                    "text": "          type: string\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n        requestId:\n          type: string\n        invokedFunctionArn:\n",
                    "rendered": {
                      "text": "          type: string\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n        requestId:\n          type: string\n        invokedFunctionArn:\n",
                      "markdown": "`          type: string\n        deadlineMs:\n          type: integer\n          description: The date that the function times out in Unix time milliseconds.\n        requestId:\n          type: string\n        invokedFunctionArn:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/manager.go"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 29,
                  "endLine": 240,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t// Once we have successfully registered to the lambda,\n\t// the id assigned to the process needs to be preserved and sent\n\t// with future requests\n\tm.registeredID = resp.Header.Get(api.LambdaExtensionIdentifierHeaderKey)\n\tif m.registeredID == \"\" {\n\t\treturn multierr.Combine(\n\t\t\terrors.New(\"missing required identifier header in response\"),\n",
                    "rendered": {
                      "text": "\t// Once we have successfully registered to the lambda,\n\t// the id assigned to the process needs to be preserved and sent\n\t// with future requests\n\tm.registeredID = resp.Header.Get(api.LambdaExtensionIdentifierHeaderKey)\n\tif m.registeredID == \"\" {\n\t\treturn multierr.Combine(\n\t\t\terrors.New(\"missing required identifier header in response\"),\n",
                      "markdown": "`\t// Once we have successfully registered to the lambda,\n\t// the id assigned to the process needs to be preserved and sent\n\t// with future requests\n\tm.registeredID = resp.Header.Get(api.LambdaExtensionIdentifierHeaderKey)\n\tif m.registeredID == \"\" {\n\t\treturn multierr.Combine(\n\t\t\terrors.New(\"missing required identifier header in response\"),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/manager.go"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 7,
                  "endLine": 166,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\treturn err\n\t\t}\n\t\t// Since context can be closed here, a seperate context is used\n\t\t// to control sending exit data to the lambda\n\t\tctx, cancel := clock.TimeoutContext(context.Background(), time.Second)\n\t\tdefer cancel()\n\n",
                    "rendered": {
                      "text": "\t\t\treturn err\n\t\t}\n\t\t// Since context can be closed here, a seperate context is used\n\t\t// to control sending exit data to the lambda\n\t\tctx, cancel := clock.TimeoutContext(context.Background(), time.Second)\n\t\tdefer cancel()\n\n",
                      "markdown": "`\t\t\treturn err\n\t\t}\n\t\t// Since context can be closed here, a seperate context is used\n\t\t// to control sending exit data to the lambda\n\t\tctx, cancel := clock.TimeoutContext(context.Background(), time.Second)\n\t\tdefer cancel()\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/manager.go"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 38,
                  "endLine": 146,
                  "snippet": {
                    "text": "\t\treturn multierr.Combine(err, m.initError(parent, err))\n\tcase <-clock.After(ctx, 100*time.Millisecond):\n\t\t// In the event that statsd server returns an\n\t\t// error during the allowed start up time\n\t\t// the we can fail the registration\n\t}\n\n\twg.StartWithContext(ctx, func(c context.Context) {\n",
                    "rendered": {
                      "text": "\t\treturn multierr.Combine(err, m.initError(parent, err))\n\tcase <-clock.After(ctx, 100*time.Millisecond):\n\t\t// In the event that statsd server returns an\n\t\t// error during the allowed start up time\n\t\t// the we can fail the registration\n\t}\n\n\twg.StartWithContext(ctx, func(c context.Context) {\n",
                      "markdown": "`\t\treturn multierr.Combine(err, m.initError(parent, err))\n\tcase <-clock.After(ctx, 100*time.Millisecond):\n\t\t// In the event that statsd server returns an\n\t\t// error during the allowed start up time\n\t\t// the we can fail the registration\n\t}\n\n\twg.StartWithContext(ctx, func(c context.Context) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/manager_test.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 39,
                  "endLine": 187,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\trequire.Equal(tb, http.MethodPut, r.Method)\n\t\trequire.Contains(tb, r.Header, api.LambdaExtensionIdentifierHeaderKey)\n\t\trequire.Equal(tb, tb.Name(), r.Header.Get(api.LambdaExtensionIdentifierHeaderKey))\n\t\tw.WriteHeader(statusCode)\n\t})\n}\n",
                    "rendered": {
                      "text": "\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\trequire.Equal(tb, http.MethodPut, r.Method)\n\t\trequire.Contains(tb, r.Header, api.LambdaExtensionIdentifierHeaderKey)\n\t\trequire.Equal(tb, tb.Name(), r.Header.Get(api.LambdaExtensionIdentifierHeaderKey))\n\t\tw.WriteHeader(statusCode)\n\t})\n}\n",
                      "markdown": "`\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\trequire.Equal(tb, http.MethodPut, r.Method)\n\t\trequire.Contains(tb, r.Header, api.LambdaExtensionIdentifierHeaderKey)\n\t\trequire.Equal(tb, tb.Name(), r.Header.Get(api.LambdaExtensionIdentifierHeaderKey))\n\t\tw.WriteHeader(statusCode)\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/manager_test.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 1,
                  "endLine": 204,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\ttestCases := []struct {\n\t\tScenario   string\n\t\tStatusCode int\n\t\tExpect     error\n\t}{\n\t\t{\n\t\t\tScenario:   \"Registered to Lambda\",\n",
                    "rendered": {
                      "text": "\ttestCases := []struct {\n\t\tScenario   string\n\t\tStatusCode int\n\t\tExpect     error\n\t}{\n\t\t{\n\t\t\tScenario:   \"Registered to Lambda\",\n",
                      "markdown": "`\ttestCases := []struct {\n\t\tScenario   string\n\t\tStatusCode int\n\t\tExpect     error\n\t}{\n\t\t{\n\t\t\tScenario:   \"Registered to Lambda\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/fixtures/clock.go"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "endLine": 52,
                  "snippet": {
                    "text": "// the assertional failed and should ensure the test fails gracefully.\nfunc EnsureAttachedTimers(tb testing.TB, clck *clock.Mock, expect int, until time.Duration) bool {\n\treturn assert.Eventually(tb, func() bool {\n\t\treturn clck.Len() == expect\n\t}, until, time.Millisecond)\n}\n",
                    "rendered": {
                      "text": "// the assertional failed and should ensure the test fails gracefully.\nfunc EnsureAttachedTimers(tb testing.TB, clck *clock.Mock, expect int, until time.Duration) bool {\n\treturn assert.Eventually(tb, func() bool {\n\t\treturn clck.Len() == expect\n\t}, until, time.Millisecond)\n}\n",
                      "markdown": "`// the assertional failed and should ensure the test fails gracefully.\nfunc EnsureAttachedTimers(tb testing.TB, clck *clock.Mock, expect int, until time.Duration) bool {\n\treturn assert.Eventually(tb, func() bool {\n\t\treturn clck.Len() == expect\n\t}, until, time.Millisecond)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/fixtures/clock.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 58,
                  "endLine": 49,
                  "endColumn": 66,
                  "snippet": {
                    "text": "// or the until duration has been reached causing this method to fail the test.\n// A true result is returned when the assertion passes allow for control flow of control, otherwise\n// the assertional failed and should ensure the test fails gracefully.\nfunc EnsureAttachedTimers(tb testing.TB, clck *clock.Mock, expect int, until time.Duration) bool {\n\treturn assert.Eventually(tb, func() bool {\n\t\treturn clck.Len() == expect\n\t}, until, time.Millisecond)\n",
                    "rendered": {
                      "text": "// or the until duration has been reached causing this method to fail the test.\n// A true result is returned when the assertion passes allow for control flow of control, otherwise\n// the assertional failed and should ensure the test fails gracefully.\nfunc EnsureAttachedTimers(tb testing.TB, clck *clock.Mock, expect int, until time.Duration) bool {\n\treturn assert.Eventually(tb, func() bool {\n\t\treturn clck.Len() == expect\n\t}, until, time.Millisecond)\n",
                      "markdown": "`// or the until duration has been reached causing this method to fail the test.\n// A true result is returned when the assertion passes allow for control flow of control, otherwise\n// the assertional failed and should ensure the test fails gracefully.\nfunc EnsureAttachedTimers(tb testing.TB, clck *clock.Mock, expect int, until time.Duration) bool {\n\treturn assert.Eventually(tb, func() bool {\n\t\treturn clck.Len() == expect\n\t}, until, time.Millisecond)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.gitignore"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 45,
                  "endLine": 15,
                  "endColumn": 50,
                  "snippet": {
                    "text": "/.tools\n*.toml\n\n# Ensure all testdata changes are included in git adds\n!/**/testdata/*",
                    "rendered": {
                      "text": "/.tools\n*.toml\n\n# Ensure all testdata changes are included in git adds\n!/**/testdata/*",
                      "markdown": "`/.tools\n*.toml\n\n# Ensure all testdata changes are included in git adds\n!/**/testdata/*`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrun: build\n\t./$(BINARY_NAME) --metrics-addr=:8125\n",
                    "rendered": {
                      "text": "\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrun: build\n\t./$(BINARY_NAME) --metrics-addr=:8125\n",
                      "markdown": "`\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrun: build\n\t./$(BINARY_NAME) --metrics-addr=:8125\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrun: build\n",
                    "rendered": {
                      "text": "\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrun: build\n",
                      "markdown": "`\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\nrun: build\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "endColumn": 8,
                  "snippet": {
                    "text": "release: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\n",
                    "rendered": {
                      "text": "release: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\n",
                      "markdown": "`release: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n",
                    "rendered": {
                      "text": "\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n",
                      "markdown": "`\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n\tdocker push $(IMAGE_NAME):$(REPO_VERSION)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n",
                    "rendered": {
                      "text": "\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n",
                      "markdown": "`\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 55,
                  "snippet": {
                    "text": "docker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n",
                    "rendered": {
                      "text": "docker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n",
                      "markdown": "`docker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):latest\n\tdocker push $(IMAGE_NAME):latest\n\tdocker tag -f $(IMAGE_NAME):$(GIT_HASH) $(IMAGE_NAME):$(REPO_VERSION)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n\ndocker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n",
                    "rendered": {
                      "text": "\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n\ndocker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n",
                      "markdown": "`\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n\ndocker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n\nrelease: test docker\n\tdocker push $(IMAGE_NAME):$(GIT_HASH)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "endLine": 49,
                  "snippet": {
                    "text": "commit-hook:\n\tcp dev/commit-hook.sh .git/hooks/pre-commit\n\ncross: fmt\n\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n\ndocker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n",
                    "rendered": {
                      "text": "commit-hook:\n\tcp dev/commit-hook.sh .git/hooks/pre-commit\n\ncross: fmt\n\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n\ndocker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n",
                      "markdown": "`commit-hook:\n\tcp dev/commit-hook.sh .git/hooks/pre-commit\n\ncross: fmt\n\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n\ndocker: cross\n\tdocker build -t $(IMAGE_NAME):$(GIT_HASH) .\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\tCompileDaemon -color=true -build \"make test check\"\n\ncommit-hook:\n\tcp dev/commit-hook.sh .git/hooks/pre-commit\n\ncross: fmt\n\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n",
                    "rendered": {
                      "text": "\tCompileDaemon -color=true -build \"make test check\"\n\ncommit-hook:\n\tcp dev/commit-hook.sh .git/hooks/pre-commit\n\ncross: fmt\n\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n",
                      "markdown": "`\tCompileDaemon -color=true -build \"make test check\"\n\ncommit-hook:\n\tcp dev/commit-hook.sh .git/hooks/pre-commit\n\ncross: fmt\n\tCGO_ENABLED=0 GOOS=linux go build -o $(BINARY_NAME)-linux $(GOBUILD_VERSION_ARGS) -a -installsuffix cgo $(MAIN_PKG)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 6,
                  "endLine": 39,
                  "snippet": {
                    "text": "\tgo get github.com/jstemmer/go-junit-report\n\tgo test -v ./... | go-junit-report > test-report.xml\n\ncheck: fmt\n\tgo install\n\tgometalinter --deadline=10s ./... --vendor --linter=\"errcheck::-ignore 'net:Close'\"\n\nwatch:\n",
                    "rendered": {
                      "text": "\tgo get github.com/jstemmer/go-junit-report\n\tgo test -v ./... | go-junit-report > test-report.xml\n\ncheck: fmt\n\tgo install\n\tgometalinter --deadline=10s ./... --vendor --linter=\"errcheck::-ignore 'net:Close'\"\n\nwatch:\n",
                      "markdown": "`\tgo get github.com/jstemmer/go-junit-report\n\tgo test -v ./... | go-junit-report > test-report.xml\n\ncheck: fmt\n\tgo install\n\tgometalinter --deadline=10s ./... --vendor --linter=\"errcheck::-ignore 'net:Close'\"\n\nwatch:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 76,
                  "endLine": 30,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\tgo test $(shell go list ./... | grep -v /vendor/)\n\ncover:\n\tgo test -covermode=count -coverprofile=coverage.out $(shell go list ./... | grep -v /vendor/)\n\tgo tool cover -func=coverage.out\n\tgo tool cover -html=coverage.out\n\n",
                    "rendered": {
                      "text": "\tgo test $(shell go list ./... | grep -v /vendor/)\n\ncover:\n\tgo test -covermode=count -coverprofile=coverage.out $(shell go list ./... | grep -v /vendor/)\n\tgo tool cover -func=coverage.out\n\tgo tool cover -html=coverage.out\n\n",
                      "markdown": "`\tgo test $(shell go list ./... | grep -v /vendor/)\n\ncover:\n\tgo test -covermode=count -coverprofile=coverage.out $(shell go list ./... | grep -v /vendor/)\n\tgo tool cover -func=coverage.out\n\tgo tool cover -html=coverage.out\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 32,
                  "endLine": 27,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n\tgo test $(shell go list ./... | grep -v /vendor/)\n\ncover:\n\tgo test -covermode=count -coverprofile=coverage.out $(shell go list ./... | grep -v /vendor/)\n",
                    "rendered": {
                      "text": "\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n\tgo test $(shell go list ./... | grep -v /vendor/)\n\ncover:\n\tgo test -covermode=count -coverprofile=coverage.out $(shell go list ./... | grep -v /vendor/)\n",
                      "markdown": "`\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n\tgo test $(shell go list ./... | grep -v /vendor/)\n\ncover:\n\tgo test -covermode=count -coverprofile=coverage.out $(shell go list ./... | grep -v /vendor/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 29,
                  "endLine": 24,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n\tgo test $(shell go list ./... | grep -v /vendor/)\n",
                    "rendered": {
                      "text": "\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n\tgo test $(shell go list ./... | grep -v /vendor/)\n",
                      "markdown": "`\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n\tgo test $(shell go list ./... | grep -v /vendor/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 25,
                  "endLine": 23,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tgo build -o $(BINARY_NAME) $(GOBUILD_VERSION_ARGS) $(MAIN_PKG)\n\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n",
                    "rendered": {
                      "text": "\tgo build -o $(BINARY_NAME) $(GOBUILD_VERSION_ARGS) $(MAIN_PKG)\n\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n",
                      "markdown": "`\tgo build -o $(BINARY_NAME) $(GOBUILD_VERSION_ARGS) $(MAIN_PKG)\n\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\tgoimports -w=true -d $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n\ntest:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "endLine": 20,
                  "snippet": {
                    "text": "\tgo get github.com/alecthomas/gometalinter\n\tgometalinter --install --update\n\nbuild: fmt\n\tgo build -o $(BINARY_NAME) $(GOBUILD_VERSION_ARGS) $(MAIN_PKG)\n\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n",
                    "rendered": {
                      "text": "\tgo get github.com/alecthomas/gometalinter\n\tgometalinter --install --update\n\nbuild: fmt\n\tgo build -o $(BINARY_NAME) $(GOBUILD_VERSION_ARGS) $(MAIN_PKG)\n\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n",
                      "markdown": "`\tgo get github.com/alecthomas/gometalinter\n\tgometalinter --install --update\n\nbuild: fmt\n\tgo build -o $(BINARY_NAME) $(GOBUILD_VERSION_ARGS) $(MAIN_PKG)\n\nfmt:\n\tgofmt -w=true -s $(shell find . -type f -name '*.go' -not -path \"./vendor/*\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 19,
                  "endLine": 7,
                  "endColumn": 24,
                  "snippet": {
                    "text": "BUILD_DATE_VAR := main.BuildDate\nREPO_VERSION := $(shell git describe --abbrev=0 --tags)\nBUILD_DATE := $(shell date +%Y-%m-%d-%H:%M)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nGOBUILD_VERSION_ARGS := -ldflags \"-s -X $(VERSION_VAR)=$(REPO_VERSION) -X $(GIT_VAR)=$(GIT_HASH) -X $(BUILD_DATE_VAR)=$(BUILD_DATE)\"\nBINARY_NAME := statsd-tester\nIMAGE_NAME := atlassianlabs/$(BINARY_NAME)\n",
                    "rendered": {
                      "text": "BUILD_DATE_VAR := main.BuildDate\nREPO_VERSION := $(shell git describe --abbrev=0 --tags)\nBUILD_DATE := $(shell date +%Y-%m-%d-%H:%M)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nGOBUILD_VERSION_ARGS := -ldflags \"-s -X $(VERSION_VAR)=$(REPO_VERSION) -X $(GIT_VAR)=$(GIT_HASH) -X $(BUILD_DATE_VAR)=$(BUILD_DATE)\"\nBINARY_NAME := statsd-tester\nIMAGE_NAME := atlassianlabs/$(BINARY_NAME)\n",
                      "markdown": "`BUILD_DATE_VAR := main.BuildDate\nREPO_VERSION := $(shell git describe --abbrev=0 --tags)\nBUILD_DATE := $(shell date +%Y-%m-%d-%H:%M)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nGOBUILD_VERSION_ARGS := -ldflags \"-s -X $(VERSION_VAR)=$(REPO_VERSION) -X $(GIT_VAR)=$(GIT_HASH) -X $(BUILD_DATE_VAR)=$(BUILD_DATE)\"\nBINARY_NAME := statsd-tester\nIMAGE_NAME := atlassianlabs/$(BINARY_NAME)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/tester/Makefile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 5,
                  "endColumn": 28,
                  "snippet": {
                    "text": "VERSION_VAR := main.Version\nGIT_VAR := main.GitCommit\nBUILD_DATE_VAR := main.BuildDate\nREPO_VERSION := $(shell git describe --abbrev=0 --tags)\nBUILD_DATE := $(shell date +%Y-%m-%d-%H:%M)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nGOBUILD_VERSION_ARGS := -ldflags \"-s -X $(VERSION_VAR)=$(REPO_VERSION) -X $(GIT_VAR)=$(GIT_HASH) -X $(BUILD_DATE_VAR)=$(BUILD_DATE)\"\n",
                    "rendered": {
                      "text": "VERSION_VAR := main.Version\nGIT_VAR := main.GitCommit\nBUILD_DATE_VAR := main.BuildDate\nREPO_VERSION := $(shell git describe --abbrev=0 --tags)\nBUILD_DATE := $(shell date +%Y-%m-%d-%H:%M)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nGOBUILD_VERSION_ARGS := -ldflags \"-s -X $(VERSION_VAR)=$(REPO_VERSION) -X $(GIT_VAR)=$(GIT_HASH) -X $(BUILD_DATE_VAR)=$(BUILD_DATE)\"\n",
                      "markdown": "`VERSION_VAR := main.Version\nGIT_VAR := main.GitCommit\nBUILD_DATE_VAR := main.BuildDate\nREPO_VERSION := $(shell git describe --abbrev=0 --tags)\nBUILD_DATE := $(shell date +%Y-%m-%d-%H:%M)\nGIT_HASH := $(shell git rev-parse --short HEAD)\nGOBUILD_VERSION_ARGS := -ldflags \"-s -X $(VERSION_VAR)=$(REPO_VERSION) -X $(GIT_VAR)=$(GIT_HASH) -X $(BUILD_DATE_VAR)=$(BUILD_DATE)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-multiarch"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 53,
                  "endLine": 5,
                  "endColumn": 61,
                  "snippet": {
                    "text": "FROM golang:1.22.3 AS build\nWORKDIR /build\n\n# Install dependencies first to take advantage of the docker build cache.\nADD go.mod /build/go.mod\nADD go.sum /build/go.sum\n\n",
                    "rendered": {
                      "text": "FROM golang:1.22.3 AS build\nWORKDIR /build\n\n# Install dependencies first to take advantage of the docker build cache.\nADD go.mod /build/go.mod\nADD go.sum /build/go.sum\n\n",
                      "markdown": "`FROM golang:1.22.3 AS build\nWORKDIR /build\n\n# Install dependencies first to take advantage of the docker build cache.\nADD go.mod /build/go.mod\nADD go.sum /build/go.sum\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-multiarch-glibc"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-multiarch-glibc"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 25,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG TARGETARCH\n",
                    "rendered": {
                      "text": "\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG TARGETARCH\n",
                      "markdown": "`\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG TARGETARCH\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-multiarch-glibc"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 24,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-multiarch-glibc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 53,
                  "endLine": 5,
                  "endColumn": 61,
                  "snippet": {
                    "text": "FROM golang:1.22.3 AS build\nWORKDIR /build\n\n# Install dependencies first to take advantage of the docker build cache.\nADD go.mod /build/go.mod\nADD go.sum /build/go.sum\n\n",
                    "rendered": {
                      "text": "FROM golang:1.22.3 AS build\nWORKDIR /build\n\n# Install dependencies first to take advantage of the docker build cache.\nADD go.mod /build/go.mod\nADD go.sum /build/go.sum\n\n",
                      "markdown": "`FROM golang:1.22.3 AS build\nWORKDIR /build\n\n# Install dependencies first to take advantage of the docker build cache.\nADD go.mod /build/go.mod\nADD go.sum /build/go.sum\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/docker-compose.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 24,
                  "endLine": 33,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  links:\n    - graphite\n  environment:\n    - GF_SECURITY_ADMIN_PASSWORD=admin",
                    "rendered": {
                      "text": "  links:\n    - graphite\n  environment:\n    - GF_SECURITY_ADMIN_PASSWORD=admin",
                      "markdown": "`  links:\n    - graphite\n  environment:\n    - GF_SECURITY_ADMIN_PASSWORD=admin`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-glibc"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 11,
                  "endLine": 4,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-glibc"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD bin/linux/gostatsd /bin/gostatsd\n",
                    "rendered": {
                      "text": "\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD bin/linux/gostatsd /bin/gostatsd\n",
                      "markdown": "`\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nADD bin/linux/gostatsd /bin/gostatsd\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/build/Dockerfile-glibc"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                    "rendered": {
                      "text": "FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n",
                      "markdown": "`FROM ubuntu:22.04\n\nRUN export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get update && \\\n    apt-get install ca-certificates -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 11,
                  "endLine": 103,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n\tc, err = p.Get(\"unknown\")\n\trequire.Error(t, err)\n\trequire.Nil(t, c)\n}\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n\tc, err = p.Get(\"unknown\")\n\trequire.Error(t, err)\n\trequire.Nil(t, c)\n}\n",
                      "markdown": "`\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n\tc, err = p.Get(\"unknown\")\n\trequire.Error(t, err)\n\trequire.Nil(t, c)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 12,
                  "endLine": 99,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tv.Set(\"transport.unknown.type\", \"unknown\")\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc, err := p.Get(\"http\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n",
                    "rendered": {
                      "text": "\tv.Set(\"transport.unknown.type\", \"unknown\")\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc, err := p.Get(\"http\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n",
                      "markdown": "`\tv.Set(\"transport.unknown.type\", \"unknown\")\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc, err := p.Get(\"http\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 11,
                  "endLine": 86,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n\tc, err = p.Get(\"pos\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n\tc, err = p.Get(\"pos\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n",
                      "markdown": "`\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n\tc, err = p.Get(\"pos\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 11,
                  "endLine": 82,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\trequire.Error(t, err)\n\trequire.Nil(t, c)\n\n\tc, err = p.Get(\"zero\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n",
                    "rendered": {
                      "text": "\trequire.Error(t, err)\n\trequire.Nil(t, c)\n\n\tc, err = p.Get(\"zero\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n",
                      "markdown": "`\trequire.Error(t, err)\n\trequire.Nil(t, c)\n\n\tc, err = p.Get(\"zero\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 12,
                  "endLine": 78,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tv.Set(\"transport.pos.client-timeout\", 1*time.Second)\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc, err := p.Get(\"neg\")\n\trequire.Error(t, err)\n\trequire.Nil(t, c)\n\n",
                    "rendered": {
                      "text": "\tv.Set(\"transport.pos.client-timeout\", 1*time.Second)\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc, err := p.Get(\"neg\")\n\trequire.Error(t, err)\n\trequire.Nil(t, c)\n\n",
                      "markdown": "`\tv.Set(\"transport.pos.client-timeout\", 1*time.Second)\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc, err := p.Get(\"neg\")\n\trequire.Error(t, err)\n\trequire.Nil(t, c)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 13,
                  "endLine": 62,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\n\tc2, err := p.Get(\"x\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c2)\n\n",
                    "rendered": {
                      "text": "\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\n\tc2, err := p.Get(\"x\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c2)\n\n",
                      "markdown": "`\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\n\tc2, err := p.Get(\"x\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c2)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 13,
                  "endLine": 58,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tv.Set(\"transport.x\", map[string]interface{}{})\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\n",
                    "rendered": {
                      "text": "\tv.Set(\"transport.x\", map[string]interface{}{})\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\n",
                      "markdown": "`\tv.Set(\"transport.x\", map[string]interface{}{})\n\tp := NewTransportPool(logrus.New(), v)\n\n\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 13,
                  "endLine": 44,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\tc2, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c2)\n\n",
                    "rendered": {
                      "text": "\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\tc2, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c2)\n\n",
                      "markdown": "`\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\tc2, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c2)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 13,
                  "endLine": 41,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\tc2, err := p.Get(\"default\")\n",
                    "rendered": {
                      "text": "\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\tc2, err := p.Get(\"default\")\n",
                      "markdown": "`\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc1, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c1)\n\tc2, err := p.Get(\"default\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "endLine": 32,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc, err := p.Get(\"x\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n",
                    "rendered": {
                      "text": "\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc, err := p.Get(\"x\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n",
                      "markdown": "`\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc, err := p.Get(\"x\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool_test.go"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 12,
                  "endLine": 23,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n",
                    "rendered": {
                      "text": "\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n",
                      "markdown": "`\tt.Parallel()\n\n\tp := NewTransportPool(logrus.New(), viper.New())\n\tc, err := p.Get(\"default\")\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c)\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/pool.go"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 21,
                  "endLine": 64,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tsub.SetDefault(paramTransportType, defaultTransportType)\n\n\tclientTimeout := sub.GetDuration(paramTransportClientTimeout)\n\ttransportType := sub.Get(paramTransportType)\n\n\tif clientTimeout < 0 {\n\t\treturn nil, errors.New(paramTransportClientTimeout + \" must not be negative\") // 0 = no timeout\n",
                    "rendered": {
                      "text": "\tsub.SetDefault(paramTransportType, defaultTransportType)\n\n\tclientTimeout := sub.GetDuration(paramTransportClientTimeout)\n\ttransportType := sub.Get(paramTransportType)\n\n\tif clientTimeout < 0 {\n\t\treturn nil, errors.New(paramTransportClientTimeout + \" must not be negative\") // 0 = no timeout\n",
                      "markdown": "`\tsub.SetDefault(paramTransportType, defaultTransportType)\n\n\tclientTimeout := sub.GetDuration(paramTransportClientTimeout)\n\ttransportType := sub.Get(paramTransportType)\n\n\tif clientTimeout < 0 {\n\t\treturn nil, errors.New(paramTransportClientTimeout + \" must not be negative\") // 0 = no timeout\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/fakeprovider/fake.go"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 8,
                  "endLine": 139,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t}\n\t\treturn r, nil\n\tcase 2:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = nil\n\t\t}\n\t\treturn r, errors.New(\"failure mode 2\")\n",
                    "rendered": {
                      "text": "\t\t}\n\t\treturn r, nil\n\tcase 2:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = nil\n\t\t}\n\t\treturn r, errors.New(\"failure mode 2\")\n",
                      "markdown": "`\t\t}\n\t\treturn r, nil\n\tcase 2:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = nil\n\t\t}\n\t\treturn r, errors.New(\"failure mode 2\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/fakeprovider/fake.go"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 8,
                  "endLine": 134,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t}\n\t\treturn r, nil\n\tcase 1:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = nil\n\t\t}\n\t\treturn r, nil\n",
                    "rendered": {
                      "text": "\t\t}\n\t\treturn r, nil\n\tcase 1:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = nil\n\t\t}\n\t\treturn r, nil\n",
                      "markdown": "`\t\t}\n\t\treturn r, nil\n\tcase 1:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = nil\n\t\t}\n\t\treturn r, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/fakeprovider/fake.go"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "endLine": 126,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t}\n\tswitch fpt.FailureMode[c] {\n\tcase 0:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = &gostatsd.Instance{\n\t\t\t\tID:   ip,\n\t\t\t\tTags: gostatsd.Tags{\"tag:value\"},\n",
                    "rendered": {
                      "text": "\t}\n\tswitch fpt.FailureMode[c] {\n\tcase 0:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = &gostatsd.Instance{\n\t\t\t\tID:   ip,\n\t\t\t\tTags: gostatsd.Tags{\"tag:value\"},\n",
                      "markdown": "`\t}\n\tswitch fpt.FailureMode[c] {\n\tcase 0:\n\t\tfor _, ip := range ips {\n\t\t\tr[ip] = &gostatsd.Instance{\n\t\t\t\tID:   ip,\n\t\t\t\tTags: gostatsd.Tags{\"tag:value\"},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/fakeprovider/fake.go"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 7,
                  "endLine": 60,
                  "endColumn": 11,
                  "snippet": {
                    "text": "func (fp *IP) Instance(ctx context.Context, ips ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tfp.count(ips...)\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(ips))\n\tfor _, ip := range ips {\n\t\tinstances[ip] = &gostatsd.Instance{\n\t\t\tID:   \"i-\" + ip,\n\t\t\tTags: fp.Tags,\n",
                    "rendered": {
                      "text": "func (fp *IP) Instance(ctx context.Context, ips ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tfp.count(ips...)\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(ips))\n\tfor _, ip := range ips {\n\t\tinstances[ip] = &gostatsd.Instance{\n\t\t\tID:   \"i-\" + ip,\n\t\t\tTags: fp.Tags,\n",
                      "markdown": "`func (fp *IP) Instance(ctx context.Context, ips ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tfp.count(ips...)\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(ips))\n\tfor _, ip := range ips {\n\t\tinstances[ip] = &gostatsd.Instance{\n\t\t\tID:   \"i-\" + ip,\n\t\t\tTags: fp.Tags,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cloudproviders/fakeprovider/fake.go"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 4,
                  "endLine": 47,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tfp.invocations++\n}\n\ntype IP struct {\n\tCounting\n\tRegion string\n\tTags   gostatsd.Tags\n",
                    "rendered": {
                      "text": "\tfp.invocations++\n}\n\ntype IP struct {\n\tCounting\n\tRegion string\n\tTags   gostatsd.Tags\n",
                      "markdown": "`\tfp.invocations++\n}\n\ntype IP struct {\n\tCounting\n\tRegion string\n\tTags   gostatsd.Tags\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/lexer/lexer.go"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 20,
                  "endLine": 133,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\treturn nil\n\tdefault:\n\t\tl.pos--\n\t\tl.m = l.MetricPool.Get()\n\t\t// Pull the tags from the metric, because it may have an empty buffer we can reuse.\n\t\tl.tags = l.m.Tags\n\t\treturn lexKeySep\n",
                    "rendered": {
                      "text": "\t\treturn nil\n\tdefault:\n\t\tl.pos--\n\t\tl.m = l.MetricPool.Get()\n\t\t// Pull the tags from the metric, because it may have an empty buffer we can reuse.\n\t\tl.tags = l.m.Tags\n\t\treturn lexKeySep\n",
                      "markdown": "`\t\treturn nil\n\tdefault:\n\t\tl.pos--\n\t\tl.m = l.MetricPool.Get()\n\t\t// Pull the tags from the metric, because it may have an empty buffer we can reuse.\n\t\tl.tags = l.m.Tags\n\t\treturn lexKeySep\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cover.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -euo pipefail\ngo test -short -covermode=count -coverprofile=coverage.out ./...\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -euo pipefail\ngo test -short -covermode=count -coverprofile=coverage.out ./...\n",
                      "markdown": "`#!/usr/bin/env bash\nset -euo pipefail\ngo test -short -covermode=count -coverprofile=coverage.out ./...\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cover.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -euo pipefail\ngo test -short -covermode=count -coverprofile=coverage.out ./...\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -euo pipefail\ngo test -short -covermode=count -coverprofile=coverage.out ./...\n",
                      "markdown": "`#!/usr/bin/env bash\nset -euo pipefail\ngo test -short -covermode=count -coverprofile=coverage.out ./...\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/receiver.go"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 29,
                  "endLine": 155,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\t\tTimestamp: now,\n\t\t\t\tDoneFunc:  doneFn,\n\t\t\t}\n\t\t\tretBuffers[i] = dr.bufPool.Get()\n\t\t\tmessages[i].Buffers = *retBuffers[i]\n\t\t}\n\t\tselect {\n",
                    "rendered": {
                      "text": "\t\t\t\tTimestamp: now,\n\t\t\t\tDoneFunc:  doneFn,\n\t\t\t}\n\t\t\tretBuffers[i] = dr.bufPool.Get()\n\t\t\tmessages[i].Buffers = *retBuffers[i]\n\t\t}\n\t\tselect {\n",
                      "markdown": "`\t\t\t\tTimestamp: now,\n\t\t\t\tDoneFunc:  doneFn,\n\t\t\t}\n\t\t\tretBuffers[i] = dr.bufPool.Get()\n\t\t\tmessages[i].Buffers = *retBuffers[i]\n\t\t}\n\t\tselect {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/receiver.go"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 28,
                  "endLine": 110,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\tretBuffers := make([]*[][]byte, dr.receiveBatchSize)\n\n\tfor i := 0; i < dr.receiveBatchSize; i++ {\n\t\tretBuffers[i] = dr.bufPool.Get()\n\t\tmessages[i].Buffers = *retBuffers[i]\n\t}\n\tfor {\n",
                    "rendered": {
                      "text": "\tretBuffers := make([]*[][]byte, dr.receiveBatchSize)\n\n\tfor i := 0; i < dr.receiveBatchSize; i++ {\n\t\tretBuffers[i] = dr.bufPool.Get()\n\t\tmessages[i].Buffers = *retBuffers[i]\n\t}\n\tfor {\n",
                      "markdown": "`\tretBuffers := make([]*[][]byte, dr.receiveBatchSize)\n\n\tfor i := 0; i < dr.receiveBatchSize; i++ {\n\t\tretBuffers[i] = dr.bufPool.Get()\n\t\tmessages[i].Buffers = *retBuffers[i]\n\t}\n\tfor {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/receiver.go"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 3,
                  "endLine": 146,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n\t\t\t}\n\n\t\t\tdgs[i] = &Datagram{\n",
                    "rendered": {
                      "text": "\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n\t\t\t}\n\n\t\t\tdgs[i] = &Datagram{\n",
                      "markdown": "`\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n\t\t\t}\n\n\t\t\tdgs[i] = &Datagram{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/receiver.go"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 21,
                  "endLine": 144,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\t}\n\n\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\n\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n\t\t\t}\n",
                      "markdown": "`\t\t\t}\n\n\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/receiver.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 2,
                  "endLine": 143,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\t\t\tdr.bufPool.Put(retBuf)\n\t\t\t}\n\n\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n",
                    "rendered": {
                      "text": "\t\t\t\tdr.bufPool.Put(retBuf)\n\t\t\t}\n\n\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n",
                      "markdown": "`\t\t\t\tdr.bufPool.Put(retBuf)\n\t\t\t}\n\n\t\t\tip := gostatsd.UnknownSource\n\t\t\t// Do not retrieve IP address when connection is made using Unix Domain Sockets\n\t\t\tif _, isUnixAddr := c.LocalAddr().(*net.UnixAddr); !isUnixAddr {\n\t\t\t\tip = getIP(addr)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/receiver.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 2,
                  "endLine": 19,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\"github.com/atlassian/gostatsd/pkg/stats\"\n)\n\n// ip packet size is stored in two bytes and that is how big in theory the packet can be.\n// In practice it is highly unlikely but still possible to get packets bigger than usual MTU of 1500.\nconst packetSizeUDP = 0xffff\n\n",
                    "rendered": {
                      "text": "\t\"github.com/atlassian/gostatsd/pkg/stats\"\n)\n\n// ip packet size is stored in two bytes and that is how big in theory the packet can be.\n// In practice it is highly unlikely but still possible to get packets bigger than usual MTU of 1500.\nconst packetSizeUDP = 0xffff\n\n",
                      "markdown": "`\t\"github.com/atlassian/gostatsd/pkg/stats\"\n)\n\n// ip packet size is stored in two bytes and that is how big in theory the packet can be.\n// In practice it is highly unlikely but still possible to get packets bigger than usual MTU of 1500.\nconst packetSizeUDP = 0xffff\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/parser.go"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 17,
                  "endLine": 191,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t\tmetrics = append(metrics, metric)\n\t\t} else if event != nil {\n\t\t\tnumEvents++\n\t\t\tevent.Source = ip // Always keep the source ip for events\n\t\t\tif event.DateHappened == 0 {\n\t\t\t\tevent.DateHappened = time.Now().Unix()\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tmetrics = append(metrics, metric)\n\t\t} else if event != nil {\n\t\t\tnumEvents++\n\t\t\tevent.Source = ip // Always keep the source ip for events\n\t\t\tif event.DateHappened == 0 {\n\t\t\t\tevent.DateHappened = time.Now().Unix()\n\t\t\t}\n",
                      "markdown": "`\t\t\tmetrics = append(metrics, metric)\n\t\t} else if event != nil {\n\t\t\tnumEvents++\n\t\t\tevent.Source = ip // Always keep the source ip for events\n\t\t\tif event.DateHappened == 0 {\n\t\t\t\tevent.DateHappened = time.Now().Unix()\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/parser.go"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 19,
                  "endLine": 186,
                  "snippet": {
                    "text": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmetric.Source = ip\n\t\t\t}\n\t\t\tmetric.Timestamp = now\n\t\t\tmetrics = append(metrics, metric)\n\t\t} else if event != nil {\n",
                    "rendered": {
                      "text": "\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmetric.Source = ip\n\t\t\t}\n\t\t\tmetric.Timestamp = now\n\t\t\tmetrics = append(metrics, metric)\n\t\t} else if event != nil {\n",
                      "markdown": "`\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmetric.Source = ip\n\t\t\t}\n\t\t\tmetric.Timestamp = now\n\t\t\tmetrics = append(metrics, metric)\n\t\t} else if event != nil {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/parser.go"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 100,
                  "endLine": 147,
                  "endColumn": 104,
                  "snippet": {
                    "text": "\n// handleDatagram handles the contents of a datagram and parsers it in to Metrics (which are returned), or\n// Events (which are sent to the pipeline via DispatchEvent).\nfunc (dp *DatagramParser) handleDatagram(ctx context.Context, l *lexer.Lexer, now gostatsd.Nanotime, ip gostatsd.Source, msg []byte) (metrics []*gostatsd.Metric, eventCount uint64, badLineCount uint64) {\n\tvar numEvents, numBad uint64\n\tfor {\n\t\tidx := bytes.IndexByte(msg, '\\n')\n",
                    "rendered": {
                      "text": "\n// handleDatagram handles the contents of a datagram and parsers it in to Metrics (which are returned), or\n// Events (which are sent to the pipeline via DispatchEvent).\nfunc (dp *DatagramParser) handleDatagram(ctx context.Context, l *lexer.Lexer, now gostatsd.Nanotime, ip gostatsd.Source, msg []byte) (metrics []*gostatsd.Metric, eventCount uint64, badLineCount uint64) {\n\tvar numEvents, numBad uint64\n\tfor {\n\t\tidx := bytes.IndexByte(msg, '\\n')\n",
                      "markdown": "`\n// handleDatagram handles the contents of a datagram and parsers it in to Metrics (which are returned), or\n// Events (which are sent to the pipeline via DispatchEvent).\nfunc (dp *DatagramParser) handleDatagram(ctx context.Context, l *lexer.Lexer, now gostatsd.Nanotime, ip gostatsd.Source, msg []byte) (metrics []*gostatsd.Metric, eventCount uint64, badLineCount uint64) {\n\tvar numEvents, numBad uint64\n\tfor {\n\t\tidx := bytes.IndexByte(msg, '\\n')\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/parser.go"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 60,
                  "endLine": 135,
                  "endColumn": 64,
                  "snippet": {
                    "text": "}\n\n// logBadLineRateLimited will log a line which failed to decode, if the current rate limit has not been exceeded.\nfunc (dp *DatagramParser) logBadLineRateLimited(line []byte, ip gostatsd.Source, err error) {\n\tif dp.badLineLimiter.Allow() {\n\t\tlogrus.WithFields(logrus.Fields{\n\t\t\t\"line\":  string(line),\n",
                    "rendered": {
                      "text": "}\n\n// logBadLineRateLimited will log a line which failed to decode, if the current rate limit has not been exceeded.\nfunc (dp *DatagramParser) logBadLineRateLimited(line []byte, ip gostatsd.Source, err error) {\n\tif dp.badLineLimiter.Allow() {\n\t\tlogrus.WithFields(logrus.Fields{\n\t\t\t\"line\":  string(line),\n",
                      "markdown": "`}\n\n// logBadLineRateLimited will log a line which failed to decode, if the current rate limit has not been exceeded.\nfunc (dp *DatagramParser) logBadLineRateLimited(line []byte, ip gostatsd.Source, err error) {\n\tif dp.badLineLimiter.Allow() {\n\t\tlogrus.WithFields(logrus.Fields{\n\t\t\t\"line\":  string(line),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/cloudwatch/cloudwatch.go"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 24,
                  "endLine": 56,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n// NewClient constructs a AWS Cloudwatch backend.\nfunc NewClient(namespace, transport string, disabled gostatsd.TimerSubtypes, logger logrus.FieldLogger, pool *transport.TransportPool) (*Client, error) {\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "\n// NewClient constructs a AWS Cloudwatch backend.\nfunc NewClient(namespace, transport string, disabled gostatsd.TimerSubtypes, logger logrus.FieldLogger, pool *transport.TransportPool) (*Client, error) {\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`\n// NewClient constructs a AWS Cloudwatch backend.\nfunc NewClient(namespace, transport string, disabled gostatsd.TimerSubtypes, logger logrus.FieldLogger, pool *transport.TransportPool) (*Client, error) {\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/backend_test.go"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 52,
                  "endLine": 493,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\tnumErrs:         1,\n\t\t},\n\t\t{\n\t\t\tname:            \"should not retry if it succeeds at the first time\",\n\t\t\tnumUntilSuccess: 1,\n\t\t\tmaxRetries:      3,\n\t\t\twantAttempts:    1,\n",
                    "rendered": {
                      "text": "\t\t\tnumErrs:         1,\n\t\t},\n\t\t{\n\t\t\tname:            \"should not retry if it succeeds at the first time\",\n\t\t\tnumUntilSuccess: 1,\n\t\t\tmaxRetries:      3,\n\t\t\twantAttempts:    1,\n",
                      "markdown": "`\t\t\tnumErrs:         1,\n\t\t},\n\t\t{\n\t\t\tname:            \"should not retry if it succeeds at the first time\",\n\t\t\tnumUntilSuccess: 1,\n\t\t\tmaxRetries:      3,\n\t\t\twantAttempts:    1,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/backend_test.go"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 69,
                  "endLine": 158,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tassert.EqualError(t, errs[0], \"dataloss: dropped 100 metrics\")\n\t\t\t\t\tassert.EqualError(t, errs[1], \"failed to send metrics: Failed to find auth token\")\n\t\t\t\t}\n\t\t\t},\n\t\t},\n",
                    "rendered": {
                      "text": "\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tassert.EqualError(t, errs[0], \"dataloss: dropped 100 metrics\")\n\t\t\t\t\tassert.EqualError(t, errs[1], \"failed to send metrics: Failed to find auth token\")\n\t\t\t\t}\n\t\t\t},\n\t\t},\n",
                      "markdown": "`\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tassert.EqualError(t, errs[0], \"dataloss: dropped 100 metrics\")\n\t\t\t\t\tassert.EqualError(t, errs[1], \"failed to send metrics: Failed to find auth token\")\n\t\t\t\t}\n\t\t\t},\n\t\t},\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/backend_test.go"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 36,
                  "endLine": 143,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\t\t\thandler: func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tresp := v1export.ExportMetricsServiceResponse{\n\t\t\t\t\tPartialSuccess: &v1export.ExportMetricsPartialSuccess{\n\t\t\t\t\t\tErrorMessage:       \"Failed to find auth token\",\n\t\t\t\t\t\tRejectedDataPoints: 100,\n\t\t\t\t\t},\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\thandler: func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tresp := v1export.ExportMetricsServiceResponse{\n\t\t\t\t\tPartialSuccess: &v1export.ExportMetricsPartialSuccess{\n\t\t\t\t\t\tErrorMessage:       \"Failed to find auth token\",\n\t\t\t\t\t\tRejectedDataPoints: 100,\n\t\t\t\t\t},\n\t\t\t\t}\n",
                      "markdown": "`\t\t\thandler: func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tresp := v1export.ExportMetricsServiceResponse{\n\t\t\t\t\tPartialSuccess: &v1export.ExportMetricsPartialSuccess{\n\t\t\t\t\t\tErrorMessage:       \"Failed to find auth token\",\n\t\t\t\t\t\tRejectedDataPoints: 100,\n\t\t\t\t\t},\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/backend.go"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 16,
                  "endLine": 68,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\ttc, err := pool.Get(cfg.Transport)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\ttc, err := pool.Get(cfg.Transport)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\ttc, err := pool.Get(cfg.Transport)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/web/httpservers.go"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 22,
                  "endLine": 195,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t} else {\n\t\t\tlogFields[\"route\"] = route.GetName()\n\t\t}\n\t\tsource := req.Header.Get(\"X-Forwarded-For\")\n\t\tif source != \"\" {\n\t\t\tlogFields[\"forwarded_for\"] = source\n\t\t}\n",
                    "rendered": {
                      "text": "\t\t} else {\n\t\t\tlogFields[\"route\"] = route.GetName()\n\t\t}\n\t\tsource := req.Header.Get(\"X-Forwarded-For\")\n\t\tif source != \"\" {\n\t\t\tlogFields[\"forwarded_for\"] = source\n\t\t}\n",
                      "markdown": "`\t\t} else {\n\t\t\tlogFields[\"route\"] = route.GetName()\n\t\t}\n\t\tsource := req.Header.Get(\"X-Forwarded-For\")\n\t\tif source != \"\" {\n\t\t\tlogFields[\"forwarded_for\"] = source\n\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/web/httpservers.go"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 37,
                  "endLine": 140,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\t}\n\n\tif len(routes) == 0 {\n\t\treturn nil, fmt.Errorf(\"must enable at least one of prof, expvar, ingestion, or healthcheck\")\n\t}\n\n\trouter, err := createRoutes(routes)\n",
                    "rendered": {
                      "text": "\t}\n\n\tif len(routes) == 0 {\n\t\treturn nil, fmt.Errorf(\"must enable at least one of prof, expvar, ingestion, or healthcheck\")\n\t}\n\n\trouter, err := createRoutes(routes)\n",
                      "markdown": "`\t}\n\n\tif len(routes) == 0 {\n\t\treturn nil, fmt.Errorf(\"must enable at least one of prof, expvar, ingestion, or healthcheck\")\n\t}\n\n\trouter, err := createRoutes(routes)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/pool/metric_pool.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 10,
                  "endLine": 33,
                  "endColumn": 15,
                  "snippet": {
                    "text": "// when the metric is no longer required, it must not be called earlier.  The Tags field may be\n// reused, so any usage of tags must be be Tags.Copy()'d before calling Metric.Done()\nfunc (mp *MetricPool) Get() *gostatsd.Metric {\n\tm := mp.p.Get().(*gostatsd.Metric)\n\tif m.DoneFunc != nil { // it was re-used, and the data needs resetting.\n\t\t// Reset is done on dirty-Get() rather than Put(), because a Pool is (implementation\n\t\t// detail) flushed every GC, and it would be wasted work.  This should be re-assessed\n",
                    "rendered": {
                      "text": "// when the metric is no longer required, it must not be called earlier.  The Tags field may be\n// reused, so any usage of tags must be be Tags.Copy()'d before calling Metric.Done()\nfunc (mp *MetricPool) Get() *gostatsd.Metric {\n\tm := mp.p.Get().(*gostatsd.Metric)\n\tif m.DoneFunc != nil { // it was re-used, and the data needs resetting.\n\t\t// Reset is done on dirty-Get() rather than Put(), because a Pool is (implementation\n\t\t// detail) flushed every GC, and it would be wasted work.  This should be re-assessed\n",
                      "markdown": "`// when the metric is no longer required, it must not be called earlier.  The Tags field may be\n// reused, so any usage of tags must be be Tags.Copy()'d before calling Metric.Done()\nfunc (mp *MetricPool) Get() *gostatsd.Metric {\n\tm := mp.p.Get().(*gostatsd.Metric)\n\tif m.DoneFunc != nil { // it was re-used, and the data needs resetting.\n\t\t// Reset is done on dirty-Get() rather than Put(), because a Pool is (implementation\n\t\t// detail) flushed every GC, and it would be wasted work.  This should be re-assessed\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/pool/datagram_buffer_pool.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 11,
                  "endLine": 24,
                  "endColumn": 16,
                  "snippet": {
                    "text": "}\n\nfunc (p *DatagramBufferPool) Get() *[][]byte {\n\treturn p.p.Get().(*[][]byte)\n}\n\nfunc (p *DatagramBufferPool) Put(b *[][]byte) {\n",
                    "rendered": {
                      "text": "}\n\nfunc (p *DatagramBufferPool) Get() *[][]byte {\n\treturn p.p.Get().(*[][]byte)\n}\n\nfunc (p *DatagramBufferPool) Put(b *[][]byte) {\n",
                      "markdown": "`}\n\nfunc (p *DatagramBufferPool) Get() *[][]byte {\n\treturn p.p.Get().(*[][]byte)\n}\n\nfunc (p *DatagramBufferPool) Put(b *[][]byte) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 118,
                  "endLine": 217,
                  "endColumn": 126,
                  "snippet": {
                    "text": "These new events can then be used to leverage the power of [NRQL](https://docs.newrelic.com/docs/query-data/nrql-new-relic-query-language/getting-started/introduction-nrql)\nfor [querying the metric data](https://docs.newrelic.com/docs/data-ingest-apis/get-data-new-relic/metric-api/introduction-metric-api#view-and-query).\n\nTo use this method, create an Insert API Key from here: https://insights.newrelic.com/accounts/YOUR_ACCOUNT_ID/manage/api_keys\n\n```\n#Example Metric API configuration\n",
                    "rendered": {
                      "text": "These new events can then be used to leverage the power of [NRQL](https://docs.newrelic.com/docs/query-data/nrql-new-relic-query-language/getting-started/introduction-nrql)\nfor [querying the metric data](https://docs.newrelic.com/docs/data-ingest-apis/get-data-new-relic/metric-api/introduction-metric-api#view-and-query).\n\nTo use this method, create an Insert API Key from here: https://insights.newrelic.com/accounts/YOUR_ACCOUNT_ID/manage/api_keys\n\n```\n#Example Metric API configuration\n",
                      "markdown": "`These new events can then be used to leverage the power of [NRQL](https://docs.newrelic.com/docs/query-data/nrql-new-relic-query-language/getting-started/introduction-nrql)\nfor [querying the metric data](https://docs.newrelic.com/docs/data-ingest-apis/get-data-new-relic/metric-api/introduction-metric-api#view-and-query).\n\nTo use this method, create an Insert API Key from here: https://insights.newrelic.com/accounts/YOUR_ACCOUNT_ID/manage/api_keys\n\n```\n#Example Metric API configuration\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 118,
                  "endLine": 194,
                  "endColumn": 126,
                  "snippet": {
                    "text": "Therefore you can run this from nearly anywhere for maximum flexibility. This also becomes a shorter data path with less\nresource requirements becoming a simpler setup.\n\nTo use this method, create an Insert API Key from here: https://insights.newrelic.com/accounts/YOUR_ACCOUNT_ID/manage/api_keys.\nMore information on registering an Insert API Key can be found [here](https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/introduction-event-api#register).\n\n```\n",
                    "rendered": {
                      "text": "Therefore you can run this from nearly anywhere for maximum flexibility. This also becomes a shorter data path with less\nresource requirements becoming a simpler setup.\n\nTo use this method, create an Insert API Key from here: https://insights.newrelic.com/accounts/YOUR_ACCOUNT_ID/manage/api_keys.\nMore information on registering an Insert API Key can be found [here](https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/introduction-event-api#register).\n\n```\n",
                      "markdown": "`Therefore you can run this from nearly anywhere for maximum flexibility. This also becomes a shorter data path with less\nresource requirements becoming a simpler setup.\n\nTo use this method, create an Insert API Key from here: https://insights.newrelic.com/accounts/YOUR_ACCOUNT_ID/manage/api_keys.\nMore information on registering an Insert API Key can be found [here](https://docs.newrelic.com/docs/insights/insights-data-sources/custom-data/introduction-event-api#register).\n\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 63,
                  "endLine": 67,
                  "endColumn": 72,
                  "snippet": {
                    "text": "InfluxDB Backend\n----------------\nThe `influxdb` backend supports API versions pre-1.8 (v1) and post-1.8 (v2).  The version to use is selected with the\n`api-version` key.  Each version requires different settings to control where data is sent.  The precision is always\nseconds.\n\n### Settings\n",
                    "rendered": {
                      "text": "InfluxDB Backend\n----------------\nThe `influxdb` backend supports API versions pre-1.8 (v1) and post-1.8 (v2).  The version to use is selected with the\n`api-version` key.  Each version requires different settings to control where data is sent.  The precision is always\nseconds.\n\n### Settings\n",
                      "markdown": "`InfluxDB Backend\n----------------\nThe `influxdb` backend supports API versions pre-1.8 (v1) and post-1.8 (v2).  The version to use is selected with the\n`api-version` key.  Each version requires different settings to control where data is sent.  The precision is always\nseconds.\n\n### Settings\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 36,
                  "endLine": 300,
                  "endColumn": 43,
                  "snippet": {
                    "text": "explosion in [cardinality](https://docs.newrelic.com/docs/data-apis/ingest-apis/metric-api/NRQL-high-cardinality-metrics/).\nTo avoid hitting cardinality limits, the `--ignore-host` option is the default\nwhen using the New Relic backend. To enable this functionality, supply\n`--ignore-host false` and be sure to watch your cardinality closely with a query\nlike `SELECT cardinality() FROM Metric WHERE integration.name='GoStatsD'` or\n`SELECT cardinality() FROM Metric WHERE integration.name='GoStatsD' FACET metricName`.\n",
                    "rendered": {
                      "text": "explosion in [cardinality](https://docs.newrelic.com/docs/data-apis/ingest-apis/metric-api/NRQL-high-cardinality-metrics/).\nTo avoid hitting cardinality limits, the `--ignore-host` option is the default\nwhen using the New Relic backend. To enable this functionality, supply\n`--ignore-host false` and be sure to watch your cardinality closely with a query\nlike `SELECT cardinality() FROM Metric WHERE integration.name='GoStatsD'` or\n`SELECT cardinality() FROM Metric WHERE integration.name='GoStatsD' FACET metricName`.\n",
                      "markdown": "`explosion in [cardinality](https://docs.newrelic.com/docs/data-apis/ingest-apis/metric-api/NRQL-high-cardinality-metrics/).\nTo avoid hitting cardinality limits, the `--ignore-host` option is the default\nwhen using the New Relic backend. To enable this functionality, supply\n`--ignore-host false` and be sure to watch your cardinality closely with a query\nlike `SELECT cardinality() FROM Metric WHERE integration.name='GoStatsD'` or\n`SELECT cardinality() FROM Metric WHERE integration.name='GoStatsD' FACET metricName`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 34,
                  "endLine": 149,
                  "endColumn": 38,
                  "snippet": {
                    "text": "### Events\nEvents are sent as a measurement named `events`.  The tags on the datapoint will be:\n- all the tags on the event, excluding the special tag `eventtags` which is ignored\n- `host` will be either the source IP address of the event or, if present, the `host` tag\n- `priority` will be set to one of `info`, `warning`, `error`, or `success` depending on the priority of the event\n- `alerttype` will be set to `normal` or `low` depending on the alert type of the event\n- `sourcetypename` will be the source type of the event if present, otherwise there is no `sourcetype` tag\n",
                    "rendered": {
                      "text": "### Events\nEvents are sent as a measurement named `events`.  The tags on the datapoint will be:\n- all the tags on the event, excluding the special tag `eventtags` which is ignored\n- `host` will be either the source IP address of the event or, if present, the `host` tag\n- `priority` will be set to one of `info`, `warning`, `error`, or `success` depending on the priority of the event\n- `alerttype` will be set to `normal` or `low` depending on the alert type of the event\n- `sourcetypename` will be the source type of the event if present, otherwise there is no `sourcetype` tag\n",
                      "markdown": "`### Events\nEvents are sent as a measurement named `events`.  The tags on the datapoint will be:\n- all the tags on the event, excluding the special tag `eventtags` which is ignored\n- `host` will be either the source IP address of the event or, if present, the `host` tag\n- `priority` will be set to one of `info`, `warning`, `error`, or `success` depending on the priority of the event\n- `alerttype` will be set to `normal` or `low` depending on the alert type of the event\n- `sourcetypename` will be the source type of the event if present, otherwise there is no `sourcetype` tag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 51,
                  "endLine": 80,
                  "endColumn": 57,
                  "snippet": {
                    "text": "a an `Authorization: Token <value>` header.  It is\n  not http basic authentication (it is `Token`, not `Basic`), nor does it support JWT with a shared secret.  Please\n  raise an issue if this is desired.  Not required, default is no authentication.\n- `max-request-elapsed-time`: the maximum amount of time to retry before giving up and dropping data, defaults to `15s`\n- `max-requests`: the maximum number of parallel requests.  This is primarily network I/O, with very little CPU, it\n  should be capped if it is overwhelming the influxdb server.  Defaults to 10 times the number of logical cores.\n- `metri",
                    "rendered": {
                      "text": "a an `Authorization: Token <value>` header.  It is\n  not http basic authentication (it is `Token`, not `Basic`), nor does it support JWT with a shared secret.  Please\n  raise an issue if this is desired.  Not required, default is no authentication.\n- `max-request-elapsed-time`: the maximum amount of time to retry before giving up and dropping data, defaults to `15s`\n- `max-requests`: the maximum number of parallel requests.  This is primarily network I/O, with very little CPU, it\n  should be capped if it is overwhelming the influxdb server.  Defaults to 10 times the number of logical cores.\n- `metri",
                      "markdown": "`a an `Authorization: Token <value>` header.  It is\n  not http basic authentication (it is `Token`, not `Basic`), nor does it support JWT with a shared secret.  Please\n  raise an issue if this is desired.  Not required, default is no authentication.\n- `max-request-elapsed-time`: the maximum amount of time to retry before giving up and dropping data, defaults to `15s`\n- `max-requests`: the maximum number of parallel requests.  This is primarily network I/O, with very little CPU, it\n  should be capped if it is overwhelming the influxdb server.  Defaults to 10 times the number of logical cores.\n- `metri`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 40,
                  "endLine": 35,
                  "endColumn": 46,
                  "snippet": {
                    "text": "The configuration settings are as follows:\n- `address`: the graphite server to send aggregated data to\n- `dial_timeout`: the timeout for connecting to the graphite server\n- `write_timeout`: the maximum amount of time to try and write before giving up\n- `mode`: one of `legacy`, `basic`, or `tags` style naming should be used.  Note that `legacy` and `basic` will\n  silently drop all tags.  If there is a need to support tags as Graphite nodes, please raise an issue.\n\n",
                    "rendered": {
                      "text": "The configuration settings are as follows:\n- `address`: the graphite server to send aggregated data to\n- `dial_timeout`: the timeout for connecting to the graphite server\n- `write_timeout`: the maximum amount of time to try and write before giving up\n- `mode`: one of `legacy`, `basic`, or `tags` style naming should be used.  Note that `legacy` and `basic` will\n  silently drop all tags.  If there is a need to support tags as Graphite nodes, please raise an issue.\n\n",
                      "markdown": "`The configuration settings are as follows:\n- `address`: the graphite server to send aggregated data to\n- `dial_timeout`: the timeout for connecting to the graphite server\n- `write_timeout`: the maximum amount of time to try and write before giving up\n- `mode`: one of `legacy`, `basic`, or `tags` style naming should be used.  Note that `legacy` and `basic` will\n  silently drop all tags.  If there is a need to support tags as Graphite nodes, please raise an issue.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/BACKENDS.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nThe configuration settings are as follows:\n- `address`: the graphite server to send aggregated data to\n- `dial_timeout`: the timeout for connecting to the graphite server\n- `write_timeout`: the maximum amount of time to try and write before giving up\n- `mode`: one of `legacy`, `basic`, or `tags` style naming should be used.  Note that `legacy` and `basic` will\n  silently drop all tags.  If there is a need to support tags as Graphite nodes, please raise an issue.\n",
                    "rendered": {
                      "text": "\nThe configuration settings are as follows:\n- `address`: the graphite server to send aggregated data to\n- `dial_timeout`: the timeout for connecting to the graphite server\n- `write_timeout`: the maximum amount of time to try and write before giving up\n- `mode`: one of `legacy`, `basic`, or `tags` style naming should be used.  Note that `legacy` and `basic` will\n  silently drop all tags.  If there is a need to support tags as Graphite nodes, please raise an issue.\n",
                      "markdown": "`\nThe configuration settings are as follows:\n- `address`: the graphite server to send aggregated data to\n- `dial_timeout`: the timeout for connecting to the graphite server\n- `write_timeout`: the maximum amount of time to try and write before giving up\n- `mode`: one of `legacy`, `basic`, or `tags` style naming should be used.  Note that `legacy` and `basic` will\n  silently drop all tags.  If there is a need to support tags as Graphite nodes, please raise an issue.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 28,
                  "endLine": 23,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nHTTP transport configuration\n----------------------------\nAll TLS connections requires at least TLS 1.2, and the proxy is taken from the [environment](https://golang.org/pkg/net/http/#ProxyFromEnvironment).\n\nAll settings and defaults:\n```\n",
                    "rendered": {
                      "text": "\nHTTP transport configuration\n----------------------------\nAll TLS connections requires at least TLS 1.2, and the proxy is taken from the [environment](https://golang.org/pkg/net/http/#ProxyFromEnvironment).\n\nAll settings and defaults:\n```\n",
                      "markdown": "`\nHTTP transport configuration\n----------------------------\nAll TLS connections requires at least TLS 1.2, and the proxy is taken from the [environment](https://golang.org/pkg/net/http/#ProxyFromEnvironment).\n\nAll settings and defaults:\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 86,
                  "endLine": 60,
                  "endColumn": 92,
                  "snippet": {
                    "text": "  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n",
                    "rendered": {
                      "text": "  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n",
                      "markdown": "`  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 60,
                  "endLine": 60,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n",
                    "rendered": {
                      "text": "  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n",
                      "markdown": "`  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 65,
                  "endLine": 59,
                  "endColumn": 71,
                  "snippet": {
                    "text": "- `tls-handshake-timeout`: The maximum amount of time waiting for a TLS handshake.  Set to `0` to disable timeout, must\n  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n",
                    "rendered": {
                      "text": "- `tls-handshake-timeout`: The maximum amount of time waiting for a TLS handshake.  Set to `0` to disable timeout, must\n  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n",
                      "markdown": "`- `tls-handshake-timeout`: The maximum amount of time waiting for a TLS handshake.  Set to `0` to disable timeout, must\n  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n  fully writing the request (including its body, if any). It time does not include the time to read the response body.\n  Defaults to zero.\n  Corresponds to `http.Transport#ResponseHeaderTimeout`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 48,
                  "endLine": 56,
                  "endColumn": 54,
                  "snippet": {
                    "text": "- `network`: Set the protocol to use.  May be anything accepted by a `net.Dialer`, common values are `tcp`, `tcp4`, and\n  `tcp6`.\n  Corresponds to the `net.Dialer#Dial` `network` parameter.\n- `tls-handshake-timeout`: The maximum amount of time waiting for a TLS handshake.  Set to `0` to disable timeout, must\n  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n",
                    "rendered": {
                      "text": "- `network`: Set the protocol to use.  May be anything accepted by a `net.Dialer`, common values are `tcp`, `tcp4`, and\n  `tcp6`.\n  Corresponds to the `net.Dialer#Dial` `network` parameter.\n- `tls-handshake-timeout`: The maximum amount of time waiting for a TLS handshake.  Set to `0` to disable timeout, must\n  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n",
                      "markdown": "`- `network`: Set the protocol to use.  May be anything accepted by a `net.Dialer`, common values are `tcp`, `tcp4`, and\n  `tcp6`.\n  Corresponds to the `net.Dialer#Dial` `network` parameter.\n- `tls-handshake-timeout`: The maximum amount of time waiting for a TLS handshake.  Set to `0` to disable timeout, must\n  not be negative.\n  Corresponds to `http.Transport#TLSHandshakeTimeout`.\n- `response-header-timeout`: If non-zero, specifies the amount of time to wait for a server's response headers after\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 82,
                  "endLine": 43,
                  "endColumn": 86,
                  "snippet": {
                    "text": "to disable, `0` to enable, and above `0` to specify an interval.\n  Corresponds to `net.Dialer#KeepAlive`.\n- `dialer-timeout`: The total time to resolve and connect to the remote server.  Set to `0` to disable timeout,\n  however the OS may impose its own limit.  This duration may be split across each IP in the DNS.\n  Corresponds to `net.Dialer#Timeout`.\n- `enable-http2`: Enables or disables HTTP2 support.  There seems to be some incompatibility with the golang http2\n  implementation and AWS ELB/ALBs.  If you experience strange timeouts and hangs, this should be the first thing\n  to disable.\n- `idle",
                    "rendered": {
                      "text": "to disable, `0` to enable, and above `0` to specify an interval.\n  Corresponds to `net.Dialer#KeepAlive`.\n- `dialer-timeout`: The total time to resolve and connect to the remote server.  Set to `0` to disable timeout,\n  however the OS may impose its own limit.  This duration may be split across each IP in the DNS.\n  Corresponds to `net.Dialer#Timeout`.\n- `enable-http2`: Enables or disables HTTP2 support.  There seems to be some incompatibility with the golang http2\n  implementation and AWS ELB/ALBs.  If you experience strange timeouts and hangs, this should be the first thing\n  to disable.\n- `idle",
                      "markdown": "`to disable, `0` to enable, and above `0` to specify an interval.\n  Corresponds to `net.Dialer#KeepAlive`.\n- `dialer-timeout`: The total time to resolve and connect to the remote server.  Set to `0` to disable timeout,\n  however the OS may impose its own limit.  This duration may be split across each IP in the DNS.\n  Corresponds to `net.Dialer#Timeout`.\n- `enable-http2`: Enables or disables HTTP2 support.  There seems to be some incompatibility with the golang http2\n  implementation and AWS ELB/ALBs.  If you experience strange timeouts and hangs, this should be the first thing\n  to disable.\n- `idle`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 29,
                  "endLine": 42,
                  "endColumn": 35,
                  "snippet": {
                    "text": "- `dialer-keep-alive`: The network level keep-alive, if supported.  This is typically TCP level, and is not HTTP\n  level.  Set to `-1` to disable, `0` to enable, and above `0` to specify an interval.\n  Corresponds to `net.Dialer#KeepAlive`.\n- `dialer-timeout`: The total time to resolve and connect to the remote server.  Set to `0` to disable timeout,\n  however the OS may impose its own limit.  This duration may be split across each IP in the DNS.\n  Corresponds to `net.Dialer#Timeout`.\n- `enable-http2`: Enables or disables HTTP2 support.  There seems to be some incompatibility with the golang http2\n",
                    "rendered": {
                      "text": "- `dialer-keep-alive`: The network level keep-alive, if supported.  This is typically TCP level, and is not HTTP\n  level.  Set to `-1` to disable, `0` to enable, and above `0` to specify an interval.\n  Corresponds to `net.Dialer#KeepAlive`.\n- `dialer-timeout`: The total time to resolve and connect to the remote server.  Set to `0` to disable timeout,\n  however the OS may impose its own limit.  This duration may be split across each IP in the DNS.\n  Corresponds to `net.Dialer#Timeout`.\n- `enable-http2`: Enables or disables HTTP2 support.  There seems to be some incompatibility with the golang http2\n",
                      "markdown": "`- `dialer-keep-alive`: The network level keep-alive, if supported.  This is typically TCP level, and is not HTTP\n  level.  Set to `-1` to disable, `0` to enable, and above `0` to specify an interval.\n  Corresponds to `net.Dialer#KeepAlive`.\n- `dialer-timeout`: The total time to resolve and connect to the remote server.  Set to `0` to disable timeout,\n  however the OS may impose its own limit.  This duration may be split across each IP in the DNS.\n  Corresponds to `net.Dialer#Timeout`.\n- `enable-http2`: Enables or disables HTTP2 support.  There seems to be some incompatibility with the golang http2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 31,
                  "endLine": 13,
                  "endColumn": 37,
                  "snippet": {
                    "text": "type = 'http'\n```\n\n- `client-timeout`: The maximum time for the roundtrip to execute. Set to `0` to disable timeout.\n  Corresponds to `http.Client.Timeout`.\n- `type`: There is currently only a type of `http`, however others are planned (Kinesis, Kafka, etc).  Each type\n  has additional configuration which is included in the `transport.<name>` stanza.\n",
                    "rendered": {
                      "text": "type = 'http'\n```\n\n- `client-timeout`: The maximum time for the roundtrip to execute. Set to `0` to disable timeout.\n  Corresponds to `http.Client.Timeout`.\n- `type`: There is currently only a type of `http`, however others are planned (Kinesis, Kafka, etc).  Each type\n  has additional configuration which is included in the `transport.<name>` stanza.\n",
                      "markdown": "`type = 'http'\n```\n\n- `client-timeout`: The maximum time for the roundtrip to execute. Set to `0` to disable timeout.\n  Corresponds to `http.Client.Timeout`.\n- `type`: There is currently only a type of `http`, however others are planned (Kinesis, Kafka, etc).  Each type\n  has additional configuration which is included in the `transport.<name>` stanza.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/TRANSPORT.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 90,
                  "endLine": 3,
                  "endColumn": 99,
                  "snippet": {
                    "text": "Configurable transports\n-----------------------\nAlmost all the http clients (AWS Cloud Provider is currently excluded) used throughout the service are configurable\nin a uniform manner.  Various components will take a `transport` setting to select which named client to use.  Each\nclient is configured in the following manner:\n\n",
                    "rendered": {
                      "text": "Configurable transports\n-----------------------\nAlmost all the http clients (AWS Cloud Provider is currently excluded) used throughout the service are configurable\nin a uniform manner.  Various components will take a `transport` setting to select which named client to use.  Each\nclient is configured in the following manner:\n\n",
                      "markdown": "`Configurable transports\n-----------------------\nAlmost all the http clients (AWS Cloud Provider is currently excluded) used throughout the service are configurable\nin a uniform manner.  Various components will take a `transport` setting to select which named client to use.  Each\nclient is configured in the following manner:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 13,
                  "endLine": 118,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tName:   name,\n\t\tValue:  ms,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.TIMER,\n\t}\n",
                    "rendered": {
                      "text": "\t\tName:   name,\n\t\tValue:  ms,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.TIMER,\n\t}\n",
                      "markdown": "`\t\tName:   name,\n\t\tValue:  ms,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.TIMER,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 13,
                  "endLine": 90,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tName:   name,\n\t\tValue:  amount,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.COUNTER,\n\t}\n",
                    "rendered": {
                      "text": "\t\tName:   name,\n\t\tValue:  amount,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.COUNTER,\n\t}\n",
                      "markdown": "`\t\tName:   name,\n\t\tValue:  amount,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.COUNTER,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 13,
                  "endLine": 77,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\tName:   name,\n\t\tValue:  value,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.GAUGE,\n\t}\n",
                    "rendered": {
                      "text": "\t\tName:   name,\n\t\tValue:  value,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.GAUGE,\n\t}\n",
                      "markdown": "`\t\tName:   name,\n\t\tValue:  value,\n\t\tTags:   tags,\n\t\tSource: is.hostname,\n\t\tRate:   1,\n\t\tType:   gostatsd.GAUGE,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\treturn &InternalStatser{\n\t\ttags:          tags,\n\t\tnamespace:     namespace,\n\t\thostname:      hostname,\n\t\thandler:       handler,\n\t\tdisableEvents: disableEvents,\n\t\tforwarderMode: forwarderMode,\n",
                    "rendered": {
                      "text": "\treturn &InternalStatser{\n\t\ttags:          tags,\n\t\tnamespace:     namespace,\n\t\thostname:      hostname,\n\t\thandler:       handler,\n\t\tdisableEvents: disableEvents,\n\t\tforwarderMode: forwarderMode,\n",
                      "markdown": "`\treturn &InternalStatser{\n\t\ttags:          tags,\n\t\tnamespace:     namespace,\n\t\thostname:      hostname,\n\t\thandler:       handler,\n\t\tdisableEvents: disableEvents,\n\t\tforwarderMode: forwarderMode,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 2,
                  "endLine": 49,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\treturn &InternalStatser{\n\t\ttags:          tags,\n\t\tnamespace:     namespace,\n\t\thostname:      hostname,\n\t\thandler:       handler,\n\t\tdisableEvents: disableEvents,\n\t\tforwarderMode: forwarderMode,\n",
                    "rendered": {
                      "text": "\treturn &InternalStatser{\n\t\ttags:          tags,\n\t\tnamespace:     namespace,\n\t\thostname:      hostname,\n\t\thandler:       handler,\n\t\tdisableEvents: disableEvents,\n\t\tforwarderMode: forwarderMode,\n",
                      "markdown": "`\treturn &InternalStatser{\n\t\ttags:          tags,\n\t\tnamespace:     namespace,\n\t\thostname:      hostname,\n\t\thandler:       handler,\n\t\tdisableEvents: disableEvents,\n\t\tforwarderMode: forwarderMode,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 52,
                  "endLine": 44,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\tforwarderMode bool,\n) *InternalStatser {\n\tif hostname != gostatsd.UnknownSource {\n\t\ttags = tags.Concat(gostatsd.Tags{\"host:\" + string(hostname)})\n\t}\n\treturn &InternalStatser{\n\t\ttags:          tags,\n",
                    "rendered": {
                      "text": "\tforwarderMode bool,\n) *InternalStatser {\n\tif hostname != gostatsd.UnknownSource {\n\t\ttags = tags.Concat(gostatsd.Tags{\"host:\" + string(hostname)})\n\t}\n\treturn &InternalStatser{\n\t\ttags:          tags,\n",
                      "markdown": "`\tforwarderMode bool,\n) *InternalStatser {\n\tif hostname != gostatsd.UnknownSource {\n\t\ttags = tags.Concat(gostatsd.Tags{\"host:\" + string(hostname)})\n\t}\n\treturn &InternalStatser{\n\t\ttags:          tags,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 4,
                  "endLine": 43,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tdisableEvents bool,\n\tforwarderMode bool,\n) *InternalStatser {\n\tif hostname != gostatsd.UnknownSource {\n\t\ttags = tags.Concat(gostatsd.Tags{\"host:\" + string(hostname)})\n\t}\n\treturn &InternalStatser{\n",
                    "rendered": {
                      "text": "\tdisableEvents bool,\n\tforwarderMode bool,\n) *InternalStatser {\n\tif hostname != gostatsd.UnknownSource {\n\t\ttags = tags.Concat(gostatsd.Tags{\"host:\" + string(hostname)})\n\t}\n\treturn &InternalStatser{\n",
                      "markdown": "`\tdisableEvents bool,\n\tforwarderMode bool,\n) *InternalStatser {\n\tif hostname != gostatsd.UnknownSource {\n\t\ttags = tags.Concat(gostatsd.Tags{\"host:\" + string(hostname)})\n\t}\n\treturn &InternalStatser{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 9,
                  "snippet": {
                    "text": "func NewInternalStatser(\n\ttags gostatsd.Tags,\n\tnamespace string,\n\thostname gostatsd.Source,\n\thandler gostatsd.PipelineHandler,\n\tdisableEvents bool,\n\tforwarderMode bool,\n",
                    "rendered": {
                      "text": "func NewInternalStatser(\n\ttags gostatsd.Tags,\n\tnamespace string,\n\thostname gostatsd.Source,\n\thandler gostatsd.PipelineHandler,\n\tdisableEvents bool,\n\tforwarderMode bool,\n",
                      "markdown": "`func NewInternalStatser(\n\ttags gostatsd.Tags,\n\tnamespace string,\n\thostname gostatsd.Source,\n\thandler gostatsd.PipelineHandler,\n\tdisableEvents bool,\n\tforwarderMode bool,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/stats/statser_internal.go"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n\ttags      gostatsd.Tags\n\tnamespace string\n\thostname  gostatsd.Source\n\thandler   gostatsd.PipelineHandler\n\n\tdisableEvents bool\n",
                    "rendered": {
                      "text": "\n\ttags      gostatsd.Tags\n\tnamespace string\n\thostname  gostatsd.Source\n\thandler   gostatsd.PipelineHandler\n\n\tdisableEvents bool\n",
                      "markdown": "`\n\ttags      gostatsd.Tags\n\tnamespace string\n\thostname  gostatsd.Source\n\thandler   gostatsd.PipelineHandler\n\n\tdisableEvents bool\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/config_test.go"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor _, tc := range []struct {\n\t\tname   string\n\t\tv      *viper.Viper\n\t\texpect *Config\n\t\terrVal string\n\t}{\n\t\t{\n",
                    "rendered": {
                      "text": "\tfor _, tc := range []struct {\n\t\tname   string\n\t\tv      *viper.Viper\n\t\texpect *Config\n\t\terrVal string\n\t}{\n\t\t{\n",
                      "markdown": "`\tfor _, tc := range []struct {\n\t\tname   string\n\t\tv      *viper.Viper\n\t\texpect *Config\n\t\terrVal string\n\t}{\n\t\t{\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 23,
                  "endLine": 20,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n",
                    "rendered": {
                      "text": "    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n",
                      "markdown": "`    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.github/workflows/manual-release.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 65,
                  "endLine": 20,
                  "endColumn": 69,
                  "snippet": {
                    "text": "          # We want to fetch everything, tags and branch names\n          # so that we can compare them\n          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n",
                    "rendered": {
                      "text": "          # We want to fetch everything, tags and branch names\n          # so that we can compare them\n          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n",
                      "markdown": "`          # We want to fetch everything, tags and branch names\n          # so that we can compare them\n          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.github/workflows/manual-release.yml"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 18,
                  "endLine": 56,
                  "endColumn": 26,
                  "snippet": {
                    "text": "          echo \"Executing release on tag build $GITHUB_REF_NAME\"\n          ARCH=linux CPU_ARCH=amd64 make release-ci\n          ARCH=linux CPU_ARCH=arm64 make release-ci\n      - name: Push Docker Manifest\n        run: |\n          echo \"Executing release-manifest on tag build $GITHUB_REF_NAME\"\n          ARCH=linux CPU_ARCH=amd64 make release-manifest-ci\n",
                    "rendered": {
                      "text": "          echo \"Executing release on tag build $GITHUB_REF_NAME\"\n          ARCH=linux CPU_ARCH=amd64 make release-ci\n          ARCH=linux CPU_ARCH=arm64 make release-ci\n      - name: Push Docker Manifest\n        run: |\n          echo \"Executing release-manifest on tag build $GITHUB_REF_NAME\"\n          ARCH=linux CPU_ARCH=amd64 make release-manifest-ci\n",
                      "markdown": "`          echo \"Executing release on tag build $GITHUB_REF_NAME\"\n          ARCH=linux CPU_ARCH=amd64 make release-ci\n          ARCH=linux CPU_ARCH=arm64 make release-ci\n      - name: Push Docker Manifest\n        run: |\n          echo \"Executing release-manifest on tag build $GITHUB_REF_NAME\"\n          ARCH=linux CPU_ARCH=amd64 make release-manifest-ci\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.github/workflows/manual-release.yml"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 20,
                  "endLine": 48,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        uses: docker/setup-qemu-action@master\n        with:\n          platforms: 'amd64,arm64'\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@master\n      - name: Release\n",
                    "rendered": {
                      "text": "        uses: docker/setup-qemu-action@master\n        with:\n          platforms: 'amd64,arm64'\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@master\n      - name: Release\n",
                      "markdown": "`        uses: docker/setup-qemu-action@master\n        with:\n          platforms: 'amd64,arm64'\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@master\n      - name: Release\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.github/workflows/manual-release.yml"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 18,
                  "endLine": 22,
                  "endColumn": 23,
                  "snippet": {
                    "text": "          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n        run: |\n          # we want to see the output of the commands\n",
                    "rendered": {
                      "text": "          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n        run: |\n          # we want to see the output of the commands\n",
                      "markdown": "`          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n        run: |\n          # we want to see the output of the commands\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/.github/workflows/manual-release.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 44,
                  "endLine": 20,
                  "endColumn": 49,
                  "snippet": {
                    "text": "          # We want to fetch everything, tags and branch names\n          # so that we can compare them\n          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n",
                    "rendered": {
                      "text": "          # We want to fetch everything, tags and branch names\n          # so that we can compare them\n          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n",
                      "markdown": "`          # We want to fetch everything, tags and branch names\n          # so that we can compare them\n          fetch-depth: 0\n      # Make sure that master and the latest git tag are pointing at the same commit\n      # This will go some way to ensuring that we are building the latest version\n      # and that a git tag was applied to master.\n      - name: Ensure master and latest tag are the same commit\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis_test.go"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 10,
                  "endLine": 111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\t\t}\n\t\t\t},\n\t\t\tFnRemove: func(node string) {\n\t\t\t\tswitch node {\n\t\t\t\tcase \"me\":\n\t\t\t\t\tremoveMeCalled = true\n\t\t\t\tcase \"derp\":\n",
                    "rendered": {
                      "text": "\t\t\t\t}\n\t\t\t},\n\t\t\tFnRemove: func(node string) {\n\t\t\t\tswitch node {\n\t\t\t\tcase \"me\":\n\t\t\t\t\tremoveMeCalled = true\n\t\t\t\tcase \"derp\":\n",
                      "markdown": "`\t\t\t\t}\n\t\t\t},\n\t\t\tFnRemove: func(node string) {\n\t\t\t\tswitch node {\n\t\t\t\tcase \"me\":\n\t\t\t\t\tremoveMeCalled = true\n\t\t\t\tcase \"derp\":\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis_test.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 10,
                  "endLine": 101,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\tlogrus.New(),\n\t\t&fixtures.MockNodePicker{TB: t,\n\t\t\tFnAdd: func(node string) {\n\t\t\t\tswitch node {\n\t\t\t\tcase \"me\":\n\t\t\t\t\taddMeCalled.Store(true)\n\t\t\t\tcase \"derp\":\n",
                    "rendered": {
                      "text": "\t\tlogrus.New(),\n\t\t&fixtures.MockNodePicker{TB: t,\n\t\t\tFnAdd: func(node string) {\n\t\t\t\tswitch node {\n\t\t\t\tcase \"me\":\n\t\t\t\t\taddMeCalled.Store(true)\n\t\t\t\tcase \"derp\":\n",
                      "markdown": "`\t\tlogrus.New(),\n\t\t&fixtures.MockNodePicker{TB: t,\n\t\t\tFnAdd: func(node string) {\n\t\t\t\tswitch node {\n\t\t\t\tcase \"me\":\n\t\t\t\t\taddMeCalled.Store(true)\n\t\t\t\tcase \"derp\":\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/picker_consistent.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 24,
                  "endLine": 33,
                  "endColumn": 29,
                  "snippet": {
                    "text": "}\n\nfunc (cnp *consistentNodePicker) Select(key string) (string, bool, error) {\n\thost, err := cnp.hasher.Get(key)\n\tif err != nil {\n\t\treturn \"\", false, err\n\t}\n",
                    "rendered": {
                      "text": "}\n\nfunc (cnp *consistentNodePicker) Select(key string) (string, bool, error) {\n\thost, err := cnp.hasher.Get(key)\n\tif err != nil {\n\t\treturn \"\", false, err\n\t}\n",
                      "markdown": "`}\n\nfunc (cnp *consistentNodePicker) Select(key string) (string, bool, error) {\n\thost, err := cnp.hasher.Get(key)\n\tif err != nil {\n\t\treturn \"\", false, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 1,
                  "endLine": 187,
                  "endColumn": 6,
                  "snippet": {
                    "text": "func (rnt *redisNodeTracker) sendHeartbeat(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n\t\tcmd := rnt.client.Publish(ctx, rnt.namespace, \"+\"+rnt.nodeId)\n\t\treturn cmd.Err()\n\t} else {\n\t\treturn nil\n",
                    "rendered": {
                      "text": "func (rnt *redisNodeTracker) sendHeartbeat(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n\t\tcmd := rnt.client.Publish(ctx, rnt.namespace, \"+\"+rnt.nodeId)\n\t\treturn cmd.Err()\n\t} else {\n\t\treturn nil\n",
                      "markdown": "`func (rnt *redisNodeTracker) sendHeartbeat(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n\t\tcmd := rnt.client.Publish(ctx, rnt.namespace, \"+\"+rnt.nodeId)\n\t\treturn cmd.Err()\n\t} else {\n\t\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 176,
                  "endColumn": 6,
                  "snippet": {
                    "text": "func (rnt *redisNodeTracker) sendIntroductionRequest(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n\t\tcmd := rnt.client.Publish(ctx, rnt.namespace, \"?\"+rnt.nodeId)\n\t\treturn cmd.Err()\n\t} else {\n\t\treturn nil\n",
                    "rendered": {
                      "text": "func (rnt *redisNodeTracker) sendIntroductionRequest(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n\t\tcmd := rnt.client.Publish(ctx, rnt.namespace, \"?\"+rnt.nodeId)\n\t\treturn cmd.Err()\n\t} else {\n\t\treturn nil\n",
                      "markdown": "`func (rnt *redisNodeTracker) sendIntroductionRequest(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n\t\tcmd := rnt.client.Publish(ctx, rnt.namespace, \"?\"+rnt.nodeId)\n\t\treturn cmd.Err()\n\t} else {\n\t\treturn nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 51,
                  "endLine": 183,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\t}\n}\n\n// sendHeartbeat will announce the presence of this node to the PubSub endpoint, if the nodeId is configured.\nfunc (rnt *redisNodeTracker) sendHeartbeat(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n",
                    "rendered": {
                      "text": "\t}\n}\n\n// sendHeartbeat will announce the presence of this node to the PubSub endpoint, if the nodeId is configured.\nfunc (rnt *redisNodeTracker) sendHeartbeat(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n",
                      "markdown": "`\t}\n}\n\n// sendHeartbeat will announce the presence of this node to the PubSub endpoint, if the nodeId is configured.\nfunc (rnt *redisNodeTracker) sendHeartbeat(ctx context.Context) error {\n\t// Talks to redis\n\tif rnt.nodeId != \"\" {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 61,
                  "endLine": 170,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\t}\n}\n\n// sendIntroductionRequest will announce the presence of this node to the PubSub endpoint, if the nodeId is configured.\n//\n// It is different to sendHeartbeat in that it is an explicit request for everyone else to respond with a heartbeat.\nfunc (rnt *redisNodeTracker) sendIntroductionRequest(ctx context.Context) error {\n",
                    "rendered": {
                      "text": "\t}\n}\n\n// sendIntroductionRequest will announce the presence of this node to the PubSub endpoint, if the nodeId is configured.\n//\n// It is different to sendHeartbeat in that it is an explicit request for everyone else to respond with a heartbeat.\nfunc (rnt *redisNodeTracker) sendIntroductionRequest(ctx context.Context) error {\n",
                      "markdown": "`\t}\n}\n\n// sendIntroductionRequest will announce the presence of this node to the PubSub endpoint, if the nodeId is configured.\n//\n// It is different to sendHeartbeat in that it is an explicit request for everyone else to respond with a heartbeat.\nfunc (rnt *redisNodeTracker) sendIntroductionRequest(ctx context.Context) error {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 25,
                  "endLine": 146,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\treturn !existingNode\n}\n\n// dropNode will drop the node from the tracked nodes.\nfunc (rnt *redisNodeTracker) dropNode(nodeId string) {\n\t// Does not talk to Redis\n\n",
                    "rendered": {
                      "text": "\treturn !existingNode\n}\n\n// dropNode will drop the node from the tracked nodes.\nfunc (rnt *redisNodeTracker) dropNode(nodeId string) {\n\t// Does not talk to Redis\n\n",
                      "markdown": "`\treturn !existingNode\n}\n\n// dropNode will drop the node from the tracked nodes.\nfunc (rnt *redisNodeTracker) dropNode(nodeId string) {\n\t// Does not talk to Redis\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 4,
                  "endLine": 118,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\trnt.dropNode(node)\n\tcase '?':\n\t\trnt.refreshNode(node, now)\n\t\tif node != rnt.nodeId {\n\t\t\t// It's not us, and it wants to know about us, send a broadcast out to let it know we exist.\n\t\t\tif err := rnt.sendHeartbeat(ctx); err != nil {\n\t\t\t\trnt.logger.WithError(err).WithField(\"newNode\", node).Warning(\"Failed to send introduction reply\")\n",
                    "rendered": {
                      "text": "\t\trnt.dropNode(node)\n\tcase '?':\n\t\trnt.refreshNode(node, now)\n\t\tif node != rnt.nodeId {\n\t\t\t// It's not us, and it wants to know about us, send a broadcast out to let it know we exist.\n\t\t\tif err := rnt.sendHeartbeat(ctx); err != nil {\n\t\t\t\trnt.logger.WithError(err).WithField(\"newNode\", node).Warning(\"Failed to send introduction reply\")\n",
                      "markdown": "`\t\trnt.dropNode(node)\n\tcase '?':\n\t\trnt.refreshNode(node, now)\n\t\tif node != rnt.nodeId {\n\t\t\t// It's not us, and it wants to know about us, send a broadcast out to let it know we exist.\n\t\t\tif err := rnt.sendHeartbeat(ctx); err != nil {\n\t\t\t\trnt.logger.WithError(err).WithField(\"newNode\", node).Warning(\"Failed to send introduction reply\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/tracker_redis.go"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tif message == \"\" {\n\t\treturn\n\t}\n\tnode := message[1:]\n\tswitch message[0] {\n\tcase '-':\n\t\trnt.dropNode(node)\n",
                    "rendered": {
                      "text": "\tif message == \"\" {\n\t\treturn\n\t}\n\tnode := message[1:]\n\tswitch message[0] {\n\tcase '-':\n\t\trnt.dropNode(node)\n",
                      "markdown": "`\tif message == \"\" {\n\t\treturn\n\t}\n\tnode := message[1:]\n\tswitch message[0] {\n\tcase '-':\n\t\trnt.dropNode(node)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cloudprovider.go"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "endColumn": 4,
                  "snippet": {
                    "text": "}\n\ntype InstanceInfo struct {\n\tIP Source\n\t// Instance may be nil if the lookup resulted in an error or instance was not found.\n\tInstance *Instance\n}\n",
                    "rendered": {
                      "text": "}\n\ntype InstanceInfo struct {\n\tIP Source\n\t// Instance may be nil if the lookup resulted in an error or instance was not found.\n\tInstance *Instance\n}\n",
                      "markdown": "`}\n\ntype InstanceInfo struct {\n\tIP Source\n\t// Instance may be nil if the lookup resulted in an error or instance was not found.\n\tInstance *Instance\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/handler_backend.go"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 144,
                  "endColumn": 5,
                  "snippet": {
                    "text": "// less than numWorkers times if the context signals \"done\".\nfunc (bh *BackendHandler) Process(ctx context.Context, f DispatcherProcessFunc) gostatsd.Wait {\n\tvar wg sync.WaitGroup\n\tcmd := &processCommand{\n\t\tf:    f,\n\t\tdone: wg.Done,\n\t}\n",
                    "rendered": {
                      "text": "// less than numWorkers times if the context signals \"done\".\nfunc (bh *BackendHandler) Process(ctx context.Context, f DispatcherProcessFunc) gostatsd.Wait {\n\tvar wg sync.WaitGroup\n\tcmd := &processCommand{\n\t\tf:    f,\n\t\tdone: wg.Done,\n\t}\n",
                      "markdown": "`// less than numWorkers times if the context signals \"done\".\nfunc (bh *BackendHandler) Process(ctx context.Context, f DispatcherProcessFunc) gostatsd.Wait {\n\tvar wg sync.WaitGroup\n\tcmd := &processCommand{\n\t\tf:    f,\n\t\tdone: wg.Done,\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/handler_http_forwarder_v2_test.go"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 17,
                  "endLine": 281,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tValue:       123.456,\n\t\t\tStringValue: \"123.456\",\n\t\t\tTags:        gostatsd.Tags{\"tag1\", \"tag2\"},\n\t\t\tSource:      \"hostname\",\n\t\t\tTimestamp:   10,\n\t\t\tType:        1 + gostatsd.MetricType(i%4), // Use all types\n\t\t})\n",
                    "rendered": {
                      "text": "\t\t\tValue:       123.456,\n\t\t\tStringValue: \"123.456\",\n\t\t\tTags:        gostatsd.Tags{\"tag1\", \"tag2\"},\n\t\t\tSource:      \"hostname\",\n\t\t\tTimestamp:   10,\n\t\t\tType:        1 + gostatsd.MetricType(i%4), // Use all types\n\t\t})\n",
                      "markdown": "`\t\t\tValue:       123.456,\n\t\t\tStringValue: \"123.456\",\n\t\t\tTags:        gostatsd.Tags{\"tag1\", \"tag2\"},\n\t\t\tSource:      \"hostname\",\n\t\t\tTimestamp:   10,\n\t\t\tType:        1 + gostatsd.MetricType(i%4), // Use all types\n\t\t})\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd_test.go"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 7,
                  "endLine": 229,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nfunc (fp *fakeProvider) Instance(ctx context.Context, ips ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(ips))\n\tfor _, ip := range ips {\n\t\tinstances[ip] = fp.instance\n\t}\n\treturn instances, nil\n",
                    "rendered": {
                      "text": "\nfunc (fp *fakeProvider) Instance(ctx context.Context, ips ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(ips))\n\tfor _, ip := range ips {\n\t\tinstances[ip] = fp.instance\n\t}\n\treturn instances, nil\n",
                      "markdown": "`\nfunc (fp *fakeProvider) Instance(ctx context.Context, ips ...gostatsd.Source) (map[gostatsd.Source]*gostatsd.Instance, error) {\n\tinstances := make(map[gostatsd.Source]*gostatsd.Instance, len(ips))\n\tfor _, ip := range ips {\n\t\tinstances[ip] = fp.instance\n\t}\n\treturn instances, nil\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/aggregator_test.go"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 26,
                  "endLine": 220,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\tnow := time.Now()\n\tnowNano := gostatsd.Nanotime(now.UnixNano())\n\tnowFn := func() time.Time { return now }\n\thost := gostatsd.Source(\"hostname\")\n\n\t// non expired\n\tactual := newFakeAggregator()\n",
                    "rendered": {
                      "text": "\tnow := time.Now()\n\tnowNano := gostatsd.Nanotime(now.UnixNano())\n\tnowFn := func() time.Time { return now }\n\thost := gostatsd.Source(\"hostname\")\n\n\t// non expired\n\tactual := newFakeAggregator()\n",
                      "markdown": "`\tnow := time.Now()\n\tnowNano := gostatsd.Nanotime(now.UnixNano())\n\tnowFn := func() time.Time { return now }\n\thost := gostatsd.Source(\"hostname\")\n\n\t// non expired\n\tactual := newFakeAggregator()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/internal/data/histograms_test.go"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "endLine": 33,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t\tname string\n\n\t\topts   []func(HistogramDataPoint)\n\t\texpect HistogramDataPoint\n\t}{\n\t\t{\n\t\t\tname: \"Empty\",\n",
                    "rendered": {
                      "text": "\t\tname string\n\n\t\topts   []func(HistogramDataPoint)\n\t\texpect HistogramDataPoint\n\t}{\n\t\t{\n\t\t\tname: \"Empty\",\n",
                      "markdown": "`\t\tname string\n\n\t\topts   []func(HistogramDataPoint)\n\t\texpect HistogramDataPoint\n\t}{\n\t\t{\n\t\t\tname: \"Empty\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/internal/data/map_test.go"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tfor _, tc := range []struct {\n\t\tname   string\n\t\tm      Map\n\t\texpect uint64\n\t}{\n\t\t{\n\t\t\tname:   \"Empty Map\",\n",
                    "rendered": {
                      "text": "\tfor _, tc := range []struct {\n\t\tname   string\n\t\tm      Map\n\t\texpect uint64\n\t}{\n\t\t{\n\t\t\tname:   \"Empty Map\",\n",
                      "markdown": "`\tfor _, tc := range []struct {\n\t\tname   string\n\t\tm      Map\n\t\texpect uint64\n\t}{\n\t\t{\n\t\t\tname:   \"Empty Map\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog.go"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 24,
                  "endLine": 437,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\treturn nil, fmt.Errorf(\"[%s] maxRequestElapsedTime must be positive\", BackendName)\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\treturn nil, fmt.Errorf(\"[%s] maxRequestElapsedTime must be positive\", BackendName)\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                      "markdown": "`\t\treturn nil, fmt.Errorf(\"[%s] maxRequestElapsedTime must be positive\", BackendName)\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog.go"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 10,
                  "endLine": 253,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\t\t\tbuffer.Reset()\n\t\t\td.eventsBufferSem <- buffer\n\t\t}()\n\t\treturn d.post(ctx, buffer, \"/api/v1/events\", \"events\", &event{\n\t\t\tTitle:          e.Title,\n\t\t\tText:           e.Text,\n\t\t\tDateHappened:   e.DateHappened,\n",
                    "rendered": {
                      "text": "\t\t\tbuffer.Reset()\n\t\t\td.eventsBufferSem <- buffer\n\t\t}()\n\t\treturn d.post(ctx, buffer, \"/api/v1/events\", \"events\", &event{\n\t\t\tTitle:          e.Title,\n\t\t\tText:           e.Text,\n\t\t\tDateHappened:   e.DateHappened,\n",
                      "markdown": "`\t\t\tbuffer.Reset()\n\t\t\td.eventsBufferSem <- buffer\n\t\t}()\n\t\treturn d.post(ctx, buffer, \"/api/v1/events\", \"events\", &event{\n\t\t\tTitle:          e.Title,\n\t\t\tText:           e.Text,\n\t\t\tDateHappened:   e.DateHappened,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog.go"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 12,
                  "endLine": 236,
                  "endColumn": 18,
                  "snippet": {
                    "text": "}\n\nfunc (d *Client) postMetrics(ctx context.Context, buffer *bytes.Buffer, ts *timeSeries) error {\n\tif err := d.post(ctx, buffer, \"/api/v1/series\", \"metrics\", ts); err != nil {\n\t\treturn err\n\t}\n\tatomic.AddUint64(&d.seriesSent, uint64(len(ts.Series)))\n",
                    "rendered": {
                      "text": "}\n\nfunc (d *Client) postMetrics(ctx context.Context, buffer *bytes.Buffer, ts *timeSeries) error {\n\tif err := d.post(ctx, buffer, \"/api/v1/series\", \"metrics\", ts); err != nil {\n\t\treturn err\n\t}\n\tatomic.AddUint64(&d.seriesSent, uint64(len(ts.Series)))\n",
                      "markdown": "`}\n\nfunc (d *Client) postMetrics(ctx context.Context, buffer *bytes.Buffer, ts *timeSeries) error {\n\tif err := d.post(ctx, buffer, \"/api/v1/series\", \"metrics\", ts); err != nil {\n\t\treturn err\n\t}\n\tatomic.AddUint64(&d.seriesSent, uint64(len(ts.Series)))\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog.go"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n// NewClientFromViper returns a new Datadog API client.\nfunc NewClientFromViper(v *viper.Viper, logger logrus.FieldLogger, pool *transport.TransportPool) (gostatsd.Backend, error) {\n\tdd := util.GetSubViper(v, \"datadog\")\n\tdd.SetDefault(\"api_endpoint\", apiURL)\n\tdd.SetDefault(\"metrics_per_batch\", defaultMetricsPerBatch)\n\tdd.SetDefault(\"compress_payload\", true)\n",
                    "rendered": {
                      "text": "\n// NewClientFromViper returns a new Datadog API client.\nfunc NewClientFromViper(v *viper.Viper, logger logrus.FieldLogger, pool *transport.TransportPool) (gostatsd.Backend, error) {\n\tdd := util.GetSubViper(v, \"datadog\")\n\tdd.SetDefault(\"api_endpoint\", apiURL)\n\tdd.SetDefault(\"metrics_per_batch\", defaultMetricsPerBatch)\n\tdd.SetDefault(\"compress_payload\", true)\n",
                      "markdown": "`\n// NewClientFromViper returns a new Datadog API client.\nfunc NewClientFromViper(v *viper.Viper, logger logrus.FieldLogger, pool *transport.TransportPool) (gostatsd.Backend, error) {\n\tdd := util.GetSubViper(v, \"datadog\")\n\tdd.SetDefault(\"api_endpoint\", apiURL)\n\tdd.SetDefault(\"metrics_per_batch\", defaultMetricsPerBatch)\n\tdd.SetDefault(\"compress_payload\", true)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/datadog/datadog.go"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 23,
                  "endLine": 50,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t// CPU (JSON encoding, TLS) and network bound operations, balancing may require some experimentation.\n\tdefaultMaxRequests = uint(2 * runtime.NumCPU())\n\n\t// It already does not sort map keys by default, but it does HTML escaping which we don't need.\n\tjsonConfig = jsoniter.Config{\n\t\tEscapeHTML:  false,\n\t\tSortMapKeys: false,\n",
                    "rendered": {
                      "text": "\t// CPU (JSON encoding, TLS) and network bound operations, balancing may require some experimentation.\n\tdefaultMaxRequests = uint(2 * runtime.NumCPU())\n\n\t// It already does not sort map keys by default, but it does HTML escaping which we don't need.\n\tjsonConfig = jsoniter.Config{\n\t\tEscapeHTML:  false,\n\t\tSortMapKeys: false,\n",
                      "markdown": "`\t// CPU (JSON encoding, TLS) and network bound operations, balancing may require some experimentation.\n\tdefaultMaxRequests = uint(2 * runtime.NumCPU())\n\n\t// It already does not sort map keys by default, but it does HTML escaping which we don't need.\n\tjsonConfig = jsoniter.Config{\n\t\tEscapeHTML:  false,\n\t\tSortMapKeys: false,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/sender/sender.go"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "endLine": 125,
                  "endColumn": 22,
                  "snippet": {
                    "text": "}\n\nfunc (s *Sender) GetBuffer() *bytes.Buffer {\n\treturn s.BufPool.Get().(*bytes.Buffer)\n}\n\nfunc (s *Sender) PutBuffer(buf *bytes.Buffer) {\n",
                    "rendered": {
                      "text": "}\n\nfunc (s *Sender) GetBuffer() *bytes.Buffer {\n\treturn s.BufPool.Get().(*bytes.Buffer)\n}\n\nfunc (s *Sender) PutBuffer(buf *bytes.Buffer) {\n",
                      "markdown": "`}\n\nfunc (s *Sender) GetBuffer() *bytes.Buffer {\n\treturn s.BufPool.Get().(*bytes.Buffer)\n}\n\nfunc (s *Sender) PutBuffer(buf *bytes.Buffer) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/FILTERING.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 23,
                  "endLine": 43,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n## Filter examples\n\nDrops the host tag and hostname of any metric named as global.*\n```\nfilters='make-global noisy-tag drop-subset'\n\n",
                    "rendered": {
                      "text": "\n## Filter examples\n\nDrops the host tag and hostname of any metric named as global.*\n```\nfilters='make-global noisy-tag drop-subset'\n\n",
                      "markdown": "`\n## Filter examples\n\nDrops the host tag and hostname of any metric named as global.*\n```\nfilters='make-global noisy-tag drop-subset'\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/FILTERING.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 24,
                  "endLine": 22,
                  "endColumn": 32,
                  "snippet": {
                    "text": "| match-tags      | A list of matches to apply to the metrics tags.  If any tag in the metric matches any tag in the list, the metric will be filtered.\n| drop-tags       | A list of tags which will be stripped off the metric if the filter matches.\n| drop-metric     | The entire metric will be dropped if the filter matches.\n| drop-host       | The hostname will be stripped off the metric if the filter matches.\n\n## Matching\nA match is defined as a case sensitive string with an optional ! prefix to invert the meaning, and an optional * suffix\n",
                    "rendered": {
                      "text": "| match-tags      | A list of matches to apply to the metrics tags.  If any tag in the metric matches any tag in the list, the metric will be filtered.\n| drop-tags       | A list of tags which will be stripped off the metric if the filter matches.\n| drop-metric     | The entire metric will be dropped if the filter matches.\n| drop-host       | The hostname will be stripped off the metric if the filter matches.\n\n## Matching\nA match is defined as a case sensitive string with an optional ! prefix to invert the meaning, and an optional * suffix\n",
                      "markdown": "`| match-tags      | A list of matches to apply to the metrics tags.  If any tag in the metric matches any tag in the list, the metric will be filtered.\n| drop-tags       | A list of tags which will be stripped off the metric if the filter matches.\n| drop-metric     | The entire metric will be dropped if the filter matches.\n| drop-host       | The hostname will be stripped off the metric if the filter matches.\n\n## Matching\nA match is defined as a case sensitive string with an optional ! prefix to invert the meaning, and an optional * suffix\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/FILTERING.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 39,
                  "endLine": 8,
                  "endColumn": 43,
                  "snippet": {
                    "text": "should be used as a temporary band-aid only.\n\n## Configuration\nFiltering requires a configuration file at present, and can't be specified on the command line.  It starts with the\n`filters` key, which is a list of filter names, either TOML style or space separated.  Each filter is then defined in\nits own block, named `filter.<filter name>`.\n\n",
                    "rendered": {
                      "text": "should be used as a temporary band-aid only.\n\n## Configuration\nFiltering requires a configuration file at present, and can't be specified on the command line.  It starts with the\n`filters` key, which is a list of filter names, either TOML style or space separated.  Each filter is then defined in\nits own block, named `filter.<filter name>`.\n\n",
                      "markdown": "`should be used as a temporary band-aid only.\n\n## Configuration\nFiltering requires a configuration file at present, and can't be specified on the command line.  It starts with the\n`filters` key, which is a list of filter names, either TOML style or space separated.  Each filter is then defined in\nits own block, named `filter.<filter name>`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** ",
                    "rendered": {
                      "text": "\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** ",
                      "markdown": "`\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 112,
                  "endLine": 27,
                  "snippet": {
                    "text": "node name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** ",
                    "rendered": {
                      "text": "node name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** ",
                      "markdown": "`node name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 63,
                  "endLine": 26,
                  "endColumn": 69,
                  "snippet": {
                    "text": "node name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** ",
                    "rendered": {
                      "text": "node name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** ",
                      "markdown": "`node name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n**This is the preferred configuration for large kubernetes clusters as it will distribute CPU load across the cluster, and reduce network load.** `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 79,
                  "endLine": 25,
                  "endColumn": 85,
                  "snippet": {
                    "text": "This gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n",
                    "rendered": {
                      "text": "This gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n",
                      "markdown": "`This gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 19,
                  "endLine": 25,
                  "endColumn": 25,
                  "snippet": {
                    "text": "This gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n",
                    "rendered": {
                      "text": "This gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n",
                      "markdown": "`This gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\nthe IP address of the node.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 118,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\n",
                    "rendered": {
                      "text": "#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\n",
                      "markdown": "`#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\ncontains an example application which sends metrics to it's own node every 10 seconds, using the downward API to find\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 84,
                  "endLine": 22,
                  "endColumn": 90,
                  "snippet": {
                    "text": "#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\n",
                    "rendered": {
                      "text": "#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\n",
                      "markdown": "`#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\nPods running on the node are responsible for knowing how to send metrics to the node itself. The `daemonset.yaml` also\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 94,
                  "endLine": 21,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\n",
                    "rendered": {
                      "text": "\n#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\n",
                      "markdown": "`\n#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/K8S.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 21,
                  "endLine": 20,
                  "snippet": {
                    "text": "an entire cluster. Pods can send metrics to `gostatsd.default.svc.cluster.local:8125` and they will be enriched and\nprocessed.\n\n#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n",
                    "rendered": {
                      "text": "an entire cluster. Pods can send metrics to `gostatsd.default.svc.cluster.local:8125` and they will be enriched and\nprocessed.\n\n#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n",
                      "markdown": "`an entire cluster. Pods can send metrics to `gostatsd.default.svc.cluster.local:8125` and they will be enriched and\nprocessed.\n\n#### One gostatsd per node\n\n[daemonset.yaml](daemonset.yaml) shows an example configuration for running a gostatsd on each node in the cluster.\nThis gostatsd is only able to enrich metrics that come from pods running on the same node as the gostatsd. We pass the\nnode name into gostatsd via the downwards API and the `GSD_K8S_NODE_NAME` variable.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 15,
                  "endLine": 30,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    node-name = ''\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\napiVersion: v1\n",
                    "rendered": {
                      "text": "    node-name = ''\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\napiVersion: v1\n",
                      "markdown": "`    node-name = ''\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\napiVersion: v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 15,
                  "endLine": 29,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\n",
                    "rendered": {
                      "text": "    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\n",
                      "markdown": "`    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 16,
                  "endLine": 17,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    flush-interval='1s'\n    bad-lines-per-minute=1000\n    metrics-addr=':8125'\n    filters='no-hostname'\n\n    [k8s]\n    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name\n",
                    "rendered": {
                      "text": "    flush-interval='1s'\n    bad-lines-per-minute=1000\n    metrics-addr=':8125'\n    filters='no-hostname'\n\n    [k8s]\n    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name\n",
                      "markdown": "`    flush-interval='1s'\n    bad-lines-per-minute=1000\n    metrics-addr=':8125'\n    filters='no-hostname'\n\n    [k8s]\n    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 105,
                  "endLine": 111,
                  "endColumn": 109,
                  "snippet": {
                    "text": "          image: alpine:latest\n          # Send a metric called `metric.namespace` which is a counter with a value of 1, tagged with some dummy tags,\n          # to the local gostatsd DaemonSet. Do this once every 10 seconds.\n          command: ['/bin/sh', '-c', 'while 1; do echo \"metric.namespace:1|c|#tag1:value1,tag2:value2\" |  nc -w 1 -u $MY_NODE_IP 8125; sleep 10; done']\n          env:\n          - name: MY_NODE_IP\n            valueFrom:\n",
                    "rendered": {
                      "text": "          image: alpine:latest\n          # Send a metric called `metric.namespace` which is a counter with a value of 1, tagged with some dummy tags,\n          # to the local gostatsd DaemonSet. Do this once every 10 seconds.\n          command: ['/bin/sh', '-c', 'while 1; do echo \"metric.namespace:1|c|#tag1:value1,tag2:value2\" |  nc -w 1 -u $MY_NODE_IP 8125; sleep 10; done']\n          env:\n          - name: MY_NODE_IP\n            valueFrom:\n",
                      "markdown": "`          image: alpine:latest\n          # Send a metric called `metric.namespace` which is a counter with a value of 1, tagged with some dummy tags,\n          # to the local gostatsd DaemonSet. Do this once every 10 seconds.\n          command: ['/bin/sh', '-c', 'while 1; do echo \"metric.namespace:1|c|#tag1:value1,tag2:value2\" |  nc -w 1 -u $MY_NODE_IP 8125; sleep 10; done']\n          env:\n          - name: MY_NODE_IP\n            valueFrom:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 97,
                  "endLine": 72,
                  "endColumn": 103,
                  "snippet": {
                    "text": "        - containerPort: 8125\n        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']\n        env:\n        # Set the `node-name` option under the k8s provider config sub options to the name of the node we're running on\n        - name: GSD_K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n",
                    "rendered": {
                      "text": "        - containerPort: 8125\n        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']\n        env:\n        # Set the `node-name` option under the k8s provider config sub options to the name of the node we're running on\n        - name: GSD_K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n",
                      "markdown": "`        - containerPort: 8125\n        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']\n        env:\n        # Set the `node-name` option under the k8s provider config sub options to the name of the node we're running on\n        - name: GSD_K8S_NODE_NAME\n          valueFrom:\n            fieldRef:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 39,
                  "endLine": 67,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      - name: gostatsd\n        imagePullPolicy: IfNotPresent\n        image: atlassianlabs/gostatsd:latest\n        # Make sure nothing else on the node is listening on this port\n        ports:\n        - containerPort: 8125\n        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']\n",
                    "rendered": {
                      "text": "      - name: gostatsd\n        imagePullPolicy: IfNotPresent\n        image: atlassianlabs/gostatsd:latest\n        # Make sure nothing else on the node is listening on this port\n        ports:\n        - containerPort: 8125\n        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']\n",
                      "markdown": "`      - name: gostatsd\n        imagePullPolicy: IfNotPresent\n        image: atlassianlabs/gostatsd:latest\n        # Make sure nothing else on the node is listening on this port\n        ports:\n        - containerPort: 8125\n        command: ['/bin/gostatsd', '--cloud-provider', 'k8s', '--config-path', '/etc/gostatsd-cfg/config.toml']\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 31,
                  "endLine": 61,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    spec:\n      serviceAccountName: gostatsd\n      # We need the host network so we have an explicitly addressable pod from every pod running on the node.\n      # This will be the node's IP address\n      hostNetwork: true\n      containers:\n      - name: gostatsd\n",
                    "rendered": {
                      "text": "    spec:\n      serviceAccountName: gostatsd\n      # We need the host network so we have an explicitly addressable pod from every pod running on the node.\n      # This will be the node's IP address\n      hostNetwork: true\n      containers:\n      - name: gostatsd\n",
                      "markdown": "`    spec:\n      serviceAccountName: gostatsd\n      # We need the host network so we have an explicitly addressable pod from every pod running on the node.\n      # This will be the node's IP address\n      hostNetwork: true\n      containers:\n      - name: gostatsd\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 37,
                  "endLine": 24,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    annotation-tag-regex = '^myapp\\.company\\.com/(?P<tag>.*)$'\n    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n    # Only watch pods that are on the node that this gostatsd is running on.\n    watch-cluster = false\n    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n",
                    "rendered": {
                      "text": "    annotation-tag-regex = '^myapp\\.company\\.com/(?P<tag>.*)$'\n    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n    # Only watch pods that are on the node that this gostatsd is running on.\n    watch-cluster = false\n    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n",
                      "markdown": "`    annotation-tag-regex = '^myapp\\.company\\.com/(?P<tag>.*)$'\n    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n    # Only watch pods that are on the node that this gostatsd is running on.\n    watch-cluster = false\n    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/daemonset.yaml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 10,
                  "endLine": 24,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    annotation-tag-regex = '^myapp\\.company\\.com/(?P<tag>.*)$'\n    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n    # Only watch pods that are on the node that this gostatsd is running on.\n    watch-cluster = false\n    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n",
                    "rendered": {
                      "text": "    annotation-tag-regex = '^myapp\\.company\\.com/(?P<tag>.*)$'\n    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n    # Only watch pods that are on the node that this gostatsd is running on.\n    watch-cluster = false\n    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n",
                      "markdown": "`    annotation-tag-regex = '^myapp\\.company\\.com/(?P<tag>.*)$'\n    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n    # Only watch pods that are on the node that this gostatsd is running on.\n    watch-cluster = false\n    # This MUST be overridden via environment variable GSD_K8S_NODE_NAME. See pod spec for example.\n    node-name = ''\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/deployment.yaml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 15,
                  "endLine": 26,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    label-tag-regex = '^app$'\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\napiVersion: v1\n",
                    "rendered": {
                      "text": "    label-tag-regex = '^app$'\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\napiVersion: v1\n",
                      "markdown": "`    label-tag-regex = '^app$'\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\napiVersion: v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/deployment.yaml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 15,
                  "endLine": 25,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\n",
                    "rendered": {
                      "text": "    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\n",
                      "markdown": "`    # Include the 'app' label as a tag\n    label-tag-regex = '^app$'\n\n    [filter.no-hostname]\n    # Drop the hostname from metrics because it can be very noisy with pod churn on Kubernetes\n    drop-host=true\n---\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/deployment.yaml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 16,
                  "endLine": 17,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    flush-interval='1s'\n    bad-lines-per-minute=1000\n    metrics-addr=':8125'\n    filters='no-hostname'\n\n    [k8s]\n    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name\n",
                    "rendered": {
                      "text": "    flush-interval='1s'\n    bad-lines-per-minute=1000\n    metrics-addr=':8125'\n    filters='no-hostname'\n\n    [k8s]\n    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name\n",
                      "markdown": "`    flush-interval='1s'\n    bad-lines-per-minute=1000\n    metrics-addr=':8125'\n    filters='no-hostname'\n\n    [k8s]\n    # Include any annotation beginning with myapp.company.com as a tag, using the part after the / as the tag name\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/deployment.yaml"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 5,
                  "endLine": 72,
                  "snippet": {
                    "text": "          name: gostatsd-cfg\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: gostatsd\n  name: gostatsd\n",
                    "rendered": {
                      "text": "          name: gostatsd-cfg\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: gostatsd\n  name: gostatsd\n",
                      "markdown": "`          name: gostatsd-cfg\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: gostatsd\n  name: gostatsd\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/examples/cloudproviders/k8s/rbac.yaml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 7,
                  "endLine": 13,
                  "snippet": {
                    "text": "      - pods\n    verbs:\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n",
                    "rendered": {
                      "text": "      - pods\n    verbs:\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n",
                      "markdown": "`      - pods\n    verbs:\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/cachedinstances/cloudprovider/cached_cloud_provider.go"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 8,
                  "endLine": 204,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\tif len(toDelete) > 0 {\n\t\tccp.rw.Lock()\n\t\tdefer ccp.rw.Unlock()\n\t\tfor _, ip := range toDelete {\n\t\t\tdelete(ccp.cache, ip)\n\t\t}\n\t}\n",
                    "rendered": {
                      "text": "\tif len(toDelete) > 0 {\n\t\tccp.rw.Lock()\n\t\tdefer ccp.rw.Unlock()\n\t\tfor _, ip := range toDelete {\n\t\t\tdelete(ccp.cache, ip)\n\t\t}\n\t}\n",
                      "markdown": "`\tif len(toDelete) > 0 {\n\t\tccp.rw.Lock()\n\t\tdefer ccp.rw.Unlock()\n\t\tfor _, ip := range toDelete {\n\t\t\tdelete(ccp.cache, ip)\n\t\t}\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/transport/transport_http_test.go"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 13,
                  "endLine": 40,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\tv := viper.New()\n\t\tv.Set(\"transport.test.\"+config.param, config.value)\n\t\tp := NewTransportPool(logrus.New(), v)\n\t\tc, err := p.Get(\"test\")\n\t\tif config.valid {\n\t\t\trequire.NoError(t, err, \"param: %s, value: %#v\", config.param, config.value)\n\t\t\trequire.NotNil(t, c, \"param: %s, value: %#v\", config.param, config.value)\n",
                    "rendered": {
                      "text": "\t\tv := viper.New()\n\t\tv.Set(\"transport.test.\"+config.param, config.value)\n\t\tp := NewTransportPool(logrus.New(), v)\n\t\tc, err := p.Get(\"test\")\n\t\tif config.valid {\n\t\t\trequire.NoError(t, err, \"param: %s, value: %#v\", config.param, config.value)\n\t\t\trequire.NotNil(t, c, \"param: %s, value: %#v\", config.param, config.value)\n",
                      "markdown": "`\t\tv := viper.New()\n\t\tv.Set(\"transport.test.\"+config.param, config.value)\n\t\tp := NewTransportPool(logrus.New(), v)\n\t\tc, err := p.Get(\"test\")\n\t\tif config.valid {\n\t\t\trequire.NoError(t, err, \"param: %s, value: %#v\", config.param, config.value)\n\t\t\trequire.NotNil(t, c, \"param: %s, value: %#v\", config.param, config.value)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/newrelic/newrelic.go"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 24,
                  "endLine": 564,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\tlogger.Infof(\"flushInterval default (%s)\", flushInterval)\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\tlogger.Infof(\"flushInterval default (%s)\", flushInterval)\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                      "markdown": "`\t\tlogger.Infof(\"flushInterval default (%s)\", flushInterval)\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/newrelic/newrelic.go"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 51,
                  "endLine": 442,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\t\t\tb, _ := ioutil.ReadAll(body)\n\n\t\t\tif resp.StatusCode == http.StatusTooManyRequests {\n\t\t\t\tretryAfterSecs, err := strconv.Atoi(resp.Header.Get(\"Retry-After\"))\n\t\t\t\tif err == nil && retryAfterSecs > 0 {\n\t\t\t\t\treturn &RetryAfterError{Duration: time.Duration(retryAfterSecs) * time.Second}\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\tb, _ := ioutil.ReadAll(body)\n\n\t\t\tif resp.StatusCode == http.StatusTooManyRequests {\n\t\t\t\tretryAfterSecs, err := strconv.Atoi(resp.Header.Get(\"Retry-After\"))\n\t\t\t\tif err == nil && retryAfterSecs > 0 {\n\t\t\t\t\treturn &RetryAfterError{Duration: time.Duration(retryAfterSecs) * time.Second}\n\t\t\t\t}\n",
                      "markdown": "`\t\t\tb, _ := ioutil.ReadAll(body)\n\n\t\t\tif resp.StatusCode == http.StatusTooManyRequests {\n\t\t\t\tretryAfterSecs, err := strconv.Atoi(resp.Header.Get(\"Retry-After\"))\n\t\t\t\tif err == nil && retryAfterSecs > 0 {\n\t\t\t\t\treturn &RetryAfterError{Duration: time.Duration(retryAfterSecs) * time.Second}\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/newrelic/newrelic.go"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 12,
                  "endLine": 150,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\t\t\t\t\tbuffer.Reset()\n\t\t\t\t\tn.metricsBufferSem <- buffer\n\t\t\t\t}()\n\t\t\t\terr := n.post(ctx, buffer, ts)\n\t\t\t\tif err != nil {\n\t\t\t\t\tatomic.AddUint64(&n.seriesSent, uint64(len(ts.Metrics)))\n\t\t\t\t}\n",
                    "rendered": {
                      "text": "\t\t\t\t\tbuffer.Reset()\n\t\t\t\t\tn.metricsBufferSem <- buffer\n\t\t\t\t}()\n\t\t\t\terr := n.post(ctx, buffer, ts)\n\t\t\t\tif err != nil {\n\t\t\t\t\tatomic.AddUint64(&n.seriesSent, uint64(len(ts.Metrics)))\n\t\t\t\t}\n",
                      "markdown": "`\t\t\t\t\tbuffer.Reset()\n\t\t\t\t\tn.metricsBufferSem <- buffer\n\t\t\t\t}()\n\t\t\t\terr := n.post(ctx, buffer, ts)\n\t\t\t\tif err != nil {\n\t\t\t\t\tatomic.AddUint64(&n.seriesSent, uint64(len(ts.Metrics)))\n\t\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/manager_integration_test.go"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 17,
                  "endLine": 155,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\tres, err := http.Post(fmt.Sprintf(\"http://%s/telemetry\", addr), \"application/json\", bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\tres, err := http.Post(fmt.Sprintf(\"http://%s/telemetry\", addr), \"application/json\", bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\tres, err := http.Post(fmt.Sprintf(\"http://%s/telemetry\", addr), \"application/json\", bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/cluster/nodes/picker_single.go"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n// singleNodePicker is a NodePicker which holds and returns a single node.  Ignores any attempts to update it.\ntype singleNodePicker struct {\n\tnode string\n\tself bool\n}\n\n",
                    "rendered": {
                      "text": "\n// singleNodePicker is a NodePicker which holds and returns a single node.  Ignores any attempts to update it.\ntype singleNodePicker struct {\n\tnode string\n\tself bool\n}\n\n",
                      "markdown": "`\n// singleNodePicker is a NodePicker which holds and returns a single node.  Ignores any attempts to update it.\ntype singleNodePicker struct {\n\tnode string\n\tself bool\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 49,
                  "endLine": 39,
                  "endColumn": 57,
                  "snippet": {
                    "text": "In kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics. The\n[examples](examples/cloudproviders/k8s/K8S.md) contain the configuration for a filter that will do this.\n\n#### Example with defaults\n",
                    "rendered": {
                      "text": "In kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics. The\n[examples](examples/cloudproviders/k8s/K8S.md) contain the configuration for a filter that will do this.\n\n#### Example with defaults\n",
                      "markdown": "`In kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics. The\n[examples](examples/cloudproviders/k8s/K8S.md) contain the configuration for a filter that will do this.\n\n#### Example with defaults\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics. The\n[examples](examples/cloudproviders/k8s/K8S.md) contain the configuration for a filter that will do this.\n\n",
                    "rendered": {
                      "text": "\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics. The\n[examples](examples/cloudproviders/k8s/K8S.md) contain the configuration for a filter that will do this.\n\n",
                      "markdown": "`\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics. The\n[examples](examples/cloudproviders/k8s/K8S.md) contain the configuration for a filter that will do this.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 7,
                  "endLine": 37,
                  "endColumn": 15,
                  "snippet": {
                    "text": "false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics",
                    "rendered": {
                      "text": "false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics",
                      "markdown": "`false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\nvalues for the hostname tag. This is not ideal, and will waste resources unless you really care about those hostnames.\nTo fix this it is highly recommended to drop the hostname from incoming metrics`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 71,
                  "endLine": 33,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n#### Important details\n\n`ignore-host` must be set to `false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\n",
                    "rendered": {
                      "text": "\n#### Important details\n\n`ignore-host` must be set to `false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\n",
                      "markdown": "`\n#### Important details\n\n`ignore-host` must be set to `false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 28,
                  "endLine": 23,
                  "endColumn": 32,
                  "snippet": {
                    "text": "---\n#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\n",
                    "rendered": {
                      "text": "---\n#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\n",
                      "markdown": "`---\n#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 23,
                  "endLine": 85,
                  "endColumn": 29,
                  "snippet": {
                    "text": "- `user-agent`: the base user agent used when communicating with the kubernetes API server. The version of the binary\nis automatically appended to this string\n- `watch-cluster`: if `true` then can enrich metrics from all pods in the cluster. If `false` will only enrich metrics\nthat are running on the node named `node-name`\n\n#### Tag names and values\n\n",
                    "rendered": {
                      "text": "- `user-agent`: the base user agent used when communicating with the kubernetes API server. The version of the binary\nis automatically appended to this string\n- `watch-cluster`: if `true` then can enrich metrics from all pods in the cluster. If `false` will only enrich metrics\nthat are running on the node named `node-name`\n\n#### Tag names and values\n\n",
                      "markdown": "`- `user-agent`: the base user agent used when communicating with the kubernetes API server. The version of the binary\nis automatically appended to this string\n- `watch-cluster`: if `true` then can enrich metrics from all pods in the cluster. If `false` will only enrich metrics\nthat are running on the node named `node-name`\n\n#### Tag names and values\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 73,
                  "endLine": 81,
                  "endColumn": 80,
                  "snippet": {
                    "text": "ubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example for details.\n- `resync-period`: how often to completely refresh every entry in the pod watch cache\n- `user-agent`: the base user agent used when communicating with the kubernetes API server. The version of the binary\nis automatically appended to this string\n- `watch-cluster`: if `true` then can enrich metrics from all pods in the cluster. If `false` will only enrich metrics\nthat are running",
                    "rendered": {
                      "text": "ubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example for details.\n- `resync-period`: how often to completely refresh every entry in the pod watch cache\n- `user-agent`: the base user agent used when communicating with the kubernetes API server. The version of the binary\nis automatically appended to this string\n- `watch-cluster`: if `true` then can enrich metrics from all pods in the cluster. If `false` will only enrich metrics\nthat are running",
                      "markdown": "`ubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example for details.\n- `resync-period`: how often to completely refresh every entry in the pod watch cache\n- `user-agent`: the base user agent used when communicating with the kubernetes API server. The version of the binary\nis automatically appended to this string\n- `watch-cluster`: if `true` then can enrich metrics from all pods in the cluster. If `false` will only enrich metrics\nthat are running`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 79,
                  "endLine": 77,
                  "endColumn": 86,
                  "snippet": {
                    "text": "application-cluster/configure-access-multiple-clusters/)\nfile to use as auth for the cluster. If this is not provided then gostatsd will assume it is running inside a kubernetes\ncluster and use in-cluster authentication.\n- `node-name`: only used if `watch-cluster` is `false`. The name of the node to watch for pods on. The recommended way\nto provide this value is actually via the\n[kubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example for detai",
                    "rendered": {
                      "text": "application-cluster/configure-access-multiple-clusters/)\nfile to use as auth for the cluster. If this is not provided then gostatsd will assume it is running inside a kubernetes\ncluster and use in-cluster authentication.\n- `node-name`: only used if `watch-cluster` is `false`. The name of the node to watch for pods on. The recommended way\nto provide this value is actually via the\n[kubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example for detai",
                      "markdown": "`application-cluster/configure-access-multiple-clusters/)\nfile to use as auth for the cluster. If this is not provided then gostatsd will assume it is running inside a kubernetes\ncluster and use in-cluster authentication.\n- `node-name`: only used if `watch-cluster` is `false`. The name of the node to watch for pods on. The recommended way\nto provide this value is actually via the\n[kubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example for detai`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 71,
                  "endLine": 77,
                  "endColumn": 77,
                  "snippet": {
                    "text": "/access-application-cluster/configure-access-multiple-clusters/)\nfile to use as auth for the cluster. If this is not provided then gostatsd will assume it is running inside a kubernetes\ncluster and use in-cluster authentication.\n- `node-name`: only used if `watch-cluster` is `false`. The name of the node to watch for pods on. The recommended way\nto provide this value is actually via the\n[kubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example ",
                    "rendered": {
                      "text": "/access-application-cluster/configure-access-multiple-clusters/)\nfile to use as auth for the cluster. If this is not provided then gostatsd will assume it is running inside a kubernetes\ncluster and use in-cluster authentication.\n- `node-name`: only used if `watch-cluster` is `false`. The name of the node to watch for pods on. The recommended way\nto provide this value is actually via the\n[kubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example ",
                      "markdown": "`/access-application-cluster/configure-access-multiple-clusters/)\nfile to use as auth for the cluster. If this is not provided then gostatsd will assume it is running inside a kubernetes\ncluster and use in-cluster authentication.\n- `node-name`: only used if `watch-cluster` is `false`. The name of the node to watch for pods on. The recommended way\nto provide this value is actually via the\n[kubernetes downwards API](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/)\nas an environment variable `GSD_K8S_NODE_NAME`. See the kubernetes deployment example `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#### Important details\n\n`ignore-host` must be set to `false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\n",
                    "rendered": {
                      "text": "#### Important details\n\n`ignore-host` must be set to `false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\n",
                      "markdown": "`#### Important details\n\n`ignore-host` must be set to `false` for the k8s cloud provider to work at all! This is because it works based off the\nsource IP address of incoming metrics, and these are dropped if `ignore-host=true`.\n\nIn kubernetes when a new pod is created it gets a new unique identifier. The k8s cloud provider uses these identifiers\nas the hostname for the pods. This means if the k8s cluster has a high pod churn, then there will be a lot of unique\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 36,
                  "endLine": 27,
                  "endColumn": 43,
                  "snippet": {
                    "text": "running in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\nThe list of pods is maintained via a watch API operation on the pod resource. This opens a websocket on which any pod\nhandled by the API server is sent to. This means we get updates as they happen and don't do any active requests to\nthe API server. This cache is fully resynced every `resync-period` but this is just to ensure total correctness.\n\n",
                    "rendered": {
                      "text": "running in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\nThe list of pods is maintained via a watch API operation on the pod resource. This opens a websocket on which any pod\nhandled by the API server is sent to. This means we get updates as they happen and don't do any active requests to\nthe API server. This cache is fully resynced every `resync-period` but this is just to ensure total correctness.\n\n",
                      "markdown": "`running in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\nThe list of pods is maintained via a watch API operation on the pod resource. This opens a websocket on which any pod\nhandled by the API server is sent to. This means we get updates as they happen and don't do any active requests to\nthe API server. This cache is fully resynced every `resync-period` but this is just to ensure total correctness.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 85,
                  "endLine": 24,
                  "endColumn": 89,
                  "snippet": {
                    "text": "#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\nThe list of pods is maintained via a watch API operation on the pod resource. This opens a websocket on which any pod\n",
                    "rendered": {
                      "text": "#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\nThe list of pods is maintained via a watch API operation on the pod resource. This opens a websocket on which any pod\n",
                      "markdown": "`#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\nThe list of pods is maintained via a watch API operation on the pod resource. This opens a websocket on which any pod\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/CLOUDPROVIDERS.md"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 35,
                  "endLine": 23,
                  "endColumn": 39,
                  "snippet": {
                    "text": "---\n#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\n",
                    "rendered": {
                      "text": "---\n#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\n",
                      "markdown": "`---\n#### Overview\n\nThe k8s cloud provider looks at the IP addresses of incoming metric datagrams and compares that with a list of pods\nrunning in the cluster to determine who sent the metric. If no pod is found with that IP then the metric is sent without\nenrichment.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 110,
                  "endLine": 173,
                  "endColumn": 118,
                  "snippet": {
                    "text": "by default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\nTo support flushes based on the runtime function, a lambda telemetry server is started at the reserved lambda hostname\n`sandbox` on port 8083. This can be configured by setting the `lambda-extension-telemetry-address` configuration parameter.\nThis will need to be done if port 8083 is not available within the lambda runtime.\n\n",
                    "rendered": {
                      "text": "by default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\nTo support flushes based on the runtime function, a lambda telemetry server is started at the reserved lambda hostname\n`sandbox` on port 8083. This can be configured by setting the `lambda-extension-telemetry-address` configuration parameter.\nThis will need to be done if port 8083 is not available within the lambda runtime.\n\n",
                      "markdown": "`by default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\nTo support flushes based on the runtime function, a lambda telemetry server is started at the reserved lambda hostname\n`sandbox` on port 8083. This can be configured by setting the `lambda-extension-telemetry-address` configuration parameter.\nThis will need to be done if port 8083 is not available within the lambda runtime.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 3,
                  "endLine": 164,
                  "endColumn": 11,
                  "snippet": {
                    "text": "- `receive-batch-size`\n- `conn-per-reader`\n- `bad-lines-per-minute`\n- `hostname`\n- `log-raw-metric`\n\nRunning as a Lambda Extension (experimental feature)\n",
                    "rendered": {
                      "text": "- `receive-batch-size`\n- `conn-per-reader`\n- `bad-lines-per-minute`\n- `hostname`\n- `log-raw-metric`\n\nRunning as a Lambda Extension (experimental feature)\n",
                      "markdown": "`- `receive-batch-size`\n- `conn-per-reader`\n- `bad-lines-per-minute`\n- `hostname`\n- `log-raw-metric`\n\nRunning as a Lambda Extension (experimental feature)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 23,
                  "endLine": 107,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  Defaults to `false`.\n- `bad-lines-per-minute`: the number of metrics which fail to parse to log per minute.  This is used to prevent a bad\n  client spamming malformed statsd data, while still logging some information to enable troubleshooting.  Defaults to `0`.\n- `hostname`: sets the hostname on internal metrics\n- `timer-histogram-limit`: specifies the maximum number of buckets on histograms.  See [Timer histograms] below.\n\n\n",
                    "rendered": {
                      "text": "  Defaults to `false`.\n- `bad-lines-per-minute`: the number of metrics which fail to parse to log per minute.  This is used to prevent a bad\n  client spamming malformed statsd data, while still logging some information to enable troubleshooting.  Defaults to `0`.\n- `hostname`: sets the hostname on internal metrics\n- `timer-histogram-limit`: specifies the maximum number of buckets on histograms.  See [Timer histograms] below.\n\n\n",
                      "markdown": "`  Defaults to `false`.\n- `bad-lines-per-minute`: the number of metrics which fail to parse to log per minute.  This is used to prevent a bad\n  client spamming malformed statsd data, while still logging some information to enable troubleshooting.  Defaults to `0`.\n- `hostname`: sets the hostname on internal metrics\n- `timer-histogram-limit`: specifies the maximum number of buckets on histograms.  See [Timer histograms] below.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 3,
                  "endLine": 107,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  Defaults to `false`.\n- `bad-lines-per-minute`: the number of metrics which fail to parse to log per minute.  This is used to prevent a bad\n  client spamming malformed statsd data, while still logging some information to enable troubleshooting.  Defaults to `0`.\n- `hostname`: sets the hostname on internal metrics\n- `timer-histogram-limit`: specifies the maximum number of buckets on histograms.  See [Timer histograms] below.\n\n\n",
                    "rendered": {
                      "text": "  Defaults to `false`.\n- `bad-lines-per-minute`: the number of metrics which fail to parse to log per minute.  This is used to prevent a bad\n  client spamming malformed statsd data, while still logging some information to enable troubleshooting.  Defaults to `0`.\n- `hostname`: sets the hostname on internal metrics\n- `timer-histogram-limit`: specifies the maximum number of buckets on histograms.  See [Timer histograms] below.\n\n\n",
                      "markdown": "`  Defaults to `false`.\n- `bad-lines-per-minute`: the number of metrics which fail to parse to log per minute.  This is used to prevent a bad\n  client spamming malformed statsd data, while still logging some information to enable troubleshooting.  Defaults to `0`.\n- `hostname`: sets the hostname on internal metrics\n- `timer-histogram-limit`: specifies the maximum number of buckets on histograms.  See [Timer histograms] below.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 83,
                  "endLine": 417,
                  "snippet": {
                    "text": "\nNote that this project uses Go modules for dependency management.\n\nDocumentation can be found via `go doc github.com/atlassian/gostatsd/pkg/statsd` or at\nhttps://godoc.org/github.com/atlassian/gostatsd/pkg/statsd\n\nVersioning\n----------\n",
                    "rendered": {
                      "text": "\nNote that this project uses Go modules for dependency management.\n\nDocumentation can be found via `go doc github.com/atlassian/gostatsd/pkg/statsd` or at\nhttps://godoc.org/github.com/atlassian/gostatsd/pkg/statsd\n\nVersioning\n----------\n",
                      "markdown": "`\nNote that this project uses Go modules for dependency management.\n\nDocumentation can be found via `go doc github.com/atlassian/gostatsd/pkg/statsd` or at\nhttps://godoc.org/github.com/atlassian/gostatsd/pkg/statsd\n\nVersioning\n----------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 45,
                  "endLine": 239,
                  "endColumn": 49,
                  "snippet": {
                    "text": "enable-prof=true\n```\n\nThere is no capability to run an https server at this point in time, and no auth (which is why you might want different\naddresses).  You could also put a reverse proxy in front of the service.  Documentation for the endpoints can be found\nunder HTTP.md\n\n",
                    "rendered": {
                      "text": "enable-prof=true\n```\n\nThere is no capability to run an https server at this point in time, and no auth (which is why you might want different\naddresses).  You could also put a reverse proxy in front of the service.  Documentation for the endpoints can be found\nunder HTTP.md\n\n",
                      "markdown": "`enable-prof=true\n```\n\nThere is no capability to run an https server at this point in time, and no auth (which is why you might want different\naddresses).  You could also put a reverse proxy in front of the service.  Documentation for the endpoints can be found\nunder HTTP.md\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 51,
                  "endLine": 203,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\nSetting an expiry interval of 0 will persist metrics forever.  If metrics are not carefully controlled in such an\nenvironment, the server may run out of memory or overload the backend receiving the metrics.  Setting a negative expiry\ninterval will result in metrics not being persisted at all.\n\nEach metric type has its own interval, which is configured using the following precedence (from highest to lowest):\n`expiry-interval-<type>` > `expiry-interval` > default (5 minutes).\n",
                    "rendered": {
                      "text": "\nSetting an expiry interval of 0 will persist metrics forever.  If metrics are not carefully controlled in such an\nenvironment, the server may run out of memory or overload the backend receiving the metrics.  Setting a negative expiry\ninterval will result in metrics not being persisted at all.\n\nEach metric type has its own interval, which is configured using the following precedence (from highest to lowest):\n`expiry-interval-<type>` > `expiry-interval` > default (5 minutes).\n",
                      "markdown": "`\nSetting an expiry interval of 0 will persist metrics forever.  If metrics are not carefully controlled in such an\nenvironment, the server may run out of memory or overload the backend receiving the metrics.  Setting a negative expiry\ninterval will result in metrics not being persisted at all.\n\nEach metric type has its own interval, which is configured using the following precedence (from highest to lowest):\n`expiry-interval-<type>` > `expiry-interval` > default (5 minutes).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 76,
                  "endLine": 199,
                  "endColumn": 80,
                  "snippet": {
                    "text": "- `counter`: sends 0 for both rate and count\n- `gauge`: sends the last received value.\n- `set`: sends 0\n- `timer`: sends non-percentile values of 0.  Percentile values are not sent at all (see issue #135)\n\nSetting an expiry interval of 0 will persist metrics forever.  If metrics are not carefully controlled in such an\nenvironment, the server may run out of memory or overload the backend receiving the metrics.  Setting a negative expiry\n",
                    "rendered": {
                      "text": "- `counter`: sends 0 for both rate and count\n- `gauge`: sends the last received value.\n- `set`: sends 0\n- `timer`: sends non-percentile values of 0.  Percentile values are not sent at all (see issue #135)\n\nSetting an expiry interval of 0 will persist metrics forever.  If metrics are not carefully controlled in such an\nenvironment, the server may run out of memory or overload the backend receiving the metrics.  Setting a negative expiry\n",
                      "markdown": "`- `counter`: sends 0 for both rate and count\n- `gauge`: sends the last received value.\n- `set`: sends 0\n- `timer`: sends non-percentile values of 0.  Percentile values are not sent at all (see issue #135)\n\nSetting an expiry interval of 0 will persist metrics forever.  If metrics are not carefully controlled in such an\nenvironment, the server may run out of memory or overload the backend receiving the metrics.  Setting a negative expiry\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 86,
                  "endLine": 173,
                  "endColumn": 90,
                  "snippet": {
                    "text": "by default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\nTo support flushes based on the runtime function, a lambda telemetry server is started at the reserved lambda hostname\n`sandbox` on port 8083. This can be configured by setting the `lambda-extension-telemetry-address` configuration parameter.\nThis will need to be done if port 8083 is not available within the lambda runtime.\n\n",
                    "rendered": {
                      "text": "by default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\nTo support flushes based on the runtime function, a lambda telemetry server is started at the reserved lambda hostname\n`sandbox` on port 8083. This can be configured by setting the `lambda-extension-telemetry-address` configuration parameter.\nThis will need to be done if port 8083 is not available within the lambda runtime.\n\n",
                      "markdown": "`by default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\nTo support flushes based on the runtime function, a lambda telemetry server is started at the reserved lambda hostname\n`sandbox` on port 8083. This can be configured by setting the `lambda-extension-telemetry-address` configuration parameter.\nThis will need to be done if port 8083 is not available within the lambda runtime.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 84,
                  "endLine": 169,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\nRunning as a Lambda Extension (experimental feature)\n-----------------------------\nGostatsd can be run as a lambda extension in forwarder mode. The metrics are flushed at the end of each lambda invocation\nby default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\n",
                    "rendered": {
                      "text": "\nRunning as a Lambda Extension (experimental feature)\n-----------------------------\nGostatsd can be run as a lambda extension in forwarder mode. The metrics are flushed at the end of each lambda invocation\nby default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\n",
                      "markdown": "`\nRunning as a Lambda Extension (experimental feature)\n-----------------------------\nGostatsd can be run as a lambda extension in forwarder mode. The metrics are flushed at the end of each lambda invocation\nby default. The flush interval is ignored for your custom metrics, internal metrics are still flushed on a best effort\nbasis using the configured flush interval.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 43,
                  "endLine": 119,
                  "endColumn": 47,
                  "snippet": {
                    "text": "clustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\ndue to all for forwarder nodes transmitting at once, and the expectation that many forwarding flushes will occur per\ncentral flush anyway.\n\nConfiguring `forwarder` mode requires a configuration file, with a section named `http-transport`.  The raw version\n",
                    "rendered": {
                      "text": "clustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\ndue to all for forwarder nodes transmitting at once, and the expectation that many forwarding flushes will occur per\ncentral flush anyway.\n\nConfiguring `forwarder` mode requires a configuration file, with a section named `http-transport`.  The raw version\n",
                      "markdown": "`clustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\ndue to all for forwarder nodes transmitting at once, and the expectation that many forwarding flushes will occur per\ncentral flush anyway.\n\nConfiguring `forwarder` mode requires a configuration file, with a section named `http-transport`.  The raw version\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 9,
                  "endLine": 115,
                  "endColumn": 13,
                  "snippet": {
                    "text": "to another gostatsd server after passing through the processing pipeline (cloud provider, static tags, filtering, etc).\n\nA `forwarder` server is intended to run on-host and collect metrics, forwarding them on to a central aggregation\nservice.  At present the central aggregation service can only scale vertically, but horizontal scaling through\nclustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\n",
                    "rendered": {
                      "text": "to another gostatsd server after passing through the processing pipeline (cloud provider, static tags, filtering, etc).\n\nA `forwarder` server is intended to run on-host and collect metrics, forwarding them on to a central aggregation\nservice.  At present the central aggregation service can only scale vertically, but horizontal scaling through\nclustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\n",
                      "markdown": "`to another gostatsd server after passing through the processing pipeline (cloud provider, static tags, filtering, etc).\n\nA `forwarder` server is intended to run on-host and collect metrics, forwarding them on to a central aggregation\nservice.  At present the central aggregation service can only scale vertically, but horizontal scaling through\nclustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 32,
                  "endLine": 77,
                  "endColumn": 36,
                  "snippet": {
                    "text": ": duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval. Defaults to `1s`.\n- `flush-offset`: offset for flush interval when flush alignment is enabled.  For example, with an offset of 7s and an\n  interval of 10s, it will flush at 12:47:10+7 = 12:47:17, etc.\n- `ignore-host`: indicates whether or not an explicit `host` field will be added to all incoming metrics and events.\n  Defaults to `false`\n- `max-readers`: the number of UDP receivers to run.  Defaults to 8 or the number of logical cores, whichever is less.\n- `max-parsers",
                    "rendered": {
                      "text": ": duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval. Defaults to `1s`.\n- `flush-offset`: offset for flush interval when flush alignment is enabled.  For example, with an offset of 7s and an\n  interval of 10s, it will flush at 12:47:10+7 = 12:47:17, etc.\n- `ignore-host`: indicates whether or not an explicit `host` field will be added to all incoming metrics and events.\n  Defaults to `false`\n- `max-readers`: the number of UDP receivers to run.  Defaults to 8 or the number of logical cores, whichever is less.\n- `max-parsers",
                      "markdown": "`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval. Defaults to `1s`.\n- `flush-offset`: offset for flush interval when flush alignment is enabled.  For example, with an offset of 7s and an\n  interval of 10s, it will flush at 12:47:10+7 = 12:47:17, etc.\n- `ignore-host`: indicates whether or not an explicit `host` field will be added to all incoming metrics and events.\n  Defaults to `false`\n- `max-readers`: the number of UDP receivers to run.  Defaults to 8 or the number of logical cores, whichever is less.\n- `max-parsers`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 104,
                  "endLine": 71,
                  "endColumn": 108,
                  "snippet": {
                    "text": "val before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval",
                    "rendered": {
                      "text": "val before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval",
                      "markdown": "`val before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 66,
                  "endLine": 71,
                  "endColumn": 70,
                  "snippet": {
                    "text": "val`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude l",
                    "rendered": {
                      "text": "val`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude l",
                      "markdown": "`val`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude l`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 87,
                  "endLine": 70,
                  "endColumn": 91,
                  "snippet": {
                    "text": "`.\n- `expiry-interval-set`: interval before sets are expired, defaults to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-",
                    "rendered": {
                      "text": "`.\n- `expiry-interval-set`: interval before sets are expired, defaults to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-",
                      "markdown": "``.\n- `expiry-interval-set`: interval before sets are expired, defaults to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 27,
                  "endLine": 391,
                  "endColumn": 31,
                  "snippet": {
                    "text": "A simple way to test your installation or send metrics from a script is to use\n`echo` and the [netcat][netcat] utility `nc`:\n\n    echo 'abc.def.g:10|c' | nc -w1 -u localhost 8125\n\nMonitoring\n----------\n",
                    "rendered": {
                      "text": "A simple way to test your installation or send metrics from a script is to use\n`echo` and the [netcat][netcat] utility `nc`:\n\n    echo 'abc.def.g:10|c' | nc -w1 -u localhost 8125\n\nMonitoring\n----------\n",
                      "markdown": "`A simple way to test your installation or send metrics from a script is to use\n`echo` and the [netcat][netcat] utility `nc`:\n\n    echo 'abc.def.g:10|c' | nc -w1 -u localhost 8125\n\nMonitoring\n----------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 61,
                  "endLine": 388,
                  "endColumn": 69,
                  "snippet": {
                    "text": "Tags format is: `simple` or `key:value`.\n\n\nA simple way to test your installation or send metrics from a script is to use\n`echo` and the [netcat][netcat] utility `nc`:\n\n    echo 'abc.def.g:10|c' | nc -w1 -u localhost 8125\n",
                    "rendered": {
                      "text": "Tags format is: `simple` or `key:value`.\n\n\nA simple way to test your installation or send metrics from a script is to use\n`echo` and the [netcat][netcat] utility `nc`:\n\n    echo 'abc.def.g:10|c' | nc -w1 -u localhost 8125\n",
                      "markdown": "`Tags format is: `simple` or `key:value`.\n\n\nA simple way to test your installation or send metrics from a script is to use\n`echo` and the [netcat][netcat] utility `nc`:\n\n    echo 'abc.def.g:10|c' | nc -w1 -u localhost 8125\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 58,
                  "endLine": 331,
                  "endColumn": 64,
                  "snippet": {
                    "text": "g. counter `<base>.histogram` with the tag `le:5` will contain the number of all observations that had a value not bigger than `5`.\nCounter `<base>.histogram` with tag `le:+Inf` is equivalent to `<base>.count` and contains the total number.\n\nAll original timer tags are preserved and added to all the time series.\n\nTo limit cardinality, `timer-histogram-limit` option can be specified to limit the number of buckets that will be created (default is `math.MaxUint32`).\nValue of `0` won't disable the feature, `0` buckets will be emitted which effectively drops metrics with `gsd_hostogram` tags.\n\nIncorrect ",
                    "rendered": {
                      "text": "g. counter `<base>.histogram` with the tag `le:5` will contain the number of all observations that had a value not bigger than `5`.\nCounter `<base>.histogram` with tag `le:+Inf` is equivalent to `<base>.count` and contains the total number.\n\nAll original timer tags are preserved and added to all the time series.\n\nTo limit cardinality, `timer-histogram-limit` option can be specified to limit the number of buckets that will be created (default is `math.MaxUint32`).\nValue of `0` won't disable the feature, `0` buckets will be emitted which effectively drops metrics with `gsd_hostogram` tags.\n\nIncorrect ",
                      "markdown": "`g. counter `<base>.histogram` with the tag `le:5` will contain the number of all observations that had a value not bigger than `5`.\nCounter `<base>.histogram` with tag `le:+Inf` is equivalent to `<base>.count` and contains the total number.\n\nAll original timer tags are preserved and added to all the time series.\n\nTo limit cardinality, `timer-histogram-limit` option can be specified to limit the number of buckets that will be created (default is `math.MaxUint32`).\nValue of `0` won't disable the feature, `0` buckets will be emitted which effectively drops metrics with `gsd_hostogram` tags.\n\nIncorrect `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 4,
                  "endLine": 328,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* `<base>.histogram` with tag `le:50`\n* `<base>.histogram` with tag `le:+Inf`\n\nEach time series will contain a total number of timer data points that had a value less or equal `le` value, e.g. counter `<base>.histogram` with the tag `le:5` will contain the number of all observations that had a value not bigger than `5`.\nCounter `<base>.histogram` with tag `le:+Inf` is equivalent to `<base>.count` and contains the total number.\n\nAll original timer tags are preserved and added to all the time series.\n",
                    "rendered": {
                      "text": "* `<base>.histogram` with tag `le:50`\n* `<base>.histogram` with tag `le:+Inf`\n\nEach time series will contain a total number of timer data points that had a value less or equal `le` value, e.g. counter `<base>.histogram` with the tag `le:5` will contain the number of all observations that had a value not bigger than `5`.\nCounter `<base>.histogram` with tag `le:+Inf` is equivalent to `<base>.count` and contains the total number.\n\nAll original timer tags are preserved and added to all the time series.\n",
                      "markdown": "`* `<base>.histogram` with tag `le:50`\n* `<base>.histogram` with tag `le:+Inf`\n\nEach time series will contain a total number of timer data points that had a value less or equal `le` value, e.g. counter `<base>.histogram` with the tag `le:5` will contain the number of all observations that had a value not bigger than `5`.\nCounter `<base>.histogram` with tag `le:+Inf` is equivalent to `<base>.count` and contains the total number.\n\nAll original timer tags are preserved and added to all the time series.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 71,
                  "endLine": 318,
                  "endColumn": 77,
                  "snippet": {
                    "text": "* output additional counter time series with name `<base>.histogram` and `le` tags specifying histogram buckets.\n* disable default sub-aggregations for timers e.g. `<base>.Count`, `<base>.Mean`, `<base>.Upper`, `<base>.Upper_XX`, etc.\n\nFor timer with `gsd_histogram:-10_0_2.5_5_10_25_50` meta tag, following time series will be generated\n* `<base>.histogram` with tag `le:-10`\n* `<base>.histogram` with tag `le:0`\n* `<base>.histogram` with tag `le:2.5`\n",
                    "rendered": {
                      "text": "* output additional counter time series with name `<base>.histogram` and `le` tags specifying histogram buckets.\n* disable default sub-aggregations for timers e.g. `<base>.Count`, `<base>.Mean`, `<base>.Upper`, `<base>.Upper_XX`, etc.\n\nFor timer with `gsd_histogram:-10_0_2.5_5_10_25_50` meta tag, following time series will be generated\n* `<base>.histogram` with tag `le:-10`\n* `<base>.histogram` with tag `le:0`\n* `<base>.histogram` with tag `le:2.5`\n",
                      "markdown": "`* output additional counter time series with name `<base>.histogram` and `le` tags specifying histogram buckets.\n* disable default sub-aggregations for timers e.g. `<base>.Count`, `<base>.Mean`, `<base>.Upper`, `<base>.Upper_XX`, etc.\n\nFor timer with `gsd_histogram:-10_0_2.5_5_10_25_50` meta tag, following time series will be generated\n* `<base>.histogram` with tag `le:-10`\n* `<base>.histogram` with tag `le:0`\n* `<base>.histogram` with tag `le:2.5`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 27,
                  "endLine": 315,
                  "endColumn": 33,
                  "snippet": {
                    "text": "e.g. `gsd_histogram:-10_0_2.5_5_10_25_50`.\n\nIt will:\n* output additional counter time series with name `<base>.histogram` and `le` tags specifying histogram buckets.\n* disable default sub-aggregations for timers e.g. `<base>.Count`, `<base>.Mean`, `<base>.Upper`, `<base>.Upper_XX`, etc.\n\nFor timer with `gsd_histogram:-10_0_2.5_5_10_25_50` meta tag, following time series will be generated\n",
                    "rendered": {
                      "text": "e.g. `gsd_histogram:-10_0_2.5_5_10_25_50`.\n\nIt will:\n* output additional counter time series with name `<base>.histogram` and `le` tags specifying histogram buckets.\n* disable default sub-aggregations for timers e.g. `<base>.Count`, `<base>.Mean`, `<base>.Upper`, `<base>.Upper_XX`, etc.\n\nFor timer with `gsd_histogram:-10_0_2.5_5_10_25_50` meta tag, following time series will be generated\n",
                      "markdown": "`e.g. `gsd_histogram:-10_0_2.5_5_10_25_50`.\n\nIt will:\n* output additional counter time series with name `<base>.histogram` and `le` tags specifying histogram buckets.\n* disable default sub-aggregations for timers e.g. `<base>.Count`, `<base>.Mean`, `<base>.Upper`, `<base>.Upper_XX`, etc.\n\nFor timer with `gsd_histogram:-10_0_2.5_5_10_25_50` meta tag, following time series will be generated\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 16,
                  "endLine": 311,
                  "endColumn": 22,
                  "snippet": {
                    "text": "----------------\n\nTimer histograms inspired by [Prometheus implementation](https://prometheus.io/docs/concepts/metric_types/#histogram) can be\nenabled on a per time series basis using `gsd_histogram` meta tag with value containing histogram bucketing definition (joined with `_`)\ne.g. `gsd_histogram:-10_0_2.5_5_10_25_50`.\n\nIt will:\n",
                    "rendered": {
                      "text": "----------------\n\nTimer histograms inspired by [Prometheus implementation](https://prometheus.io/docs/concepts/metric_types/#histogram) can be\nenabled on a per time series basis using `gsd_histogram` meta tag with value containing histogram bucketing definition (joined with `_`)\ne.g. `gsd_histogram:-10_0_2.5_5_10_25_50`.\n\nIt will:\n",
                      "markdown": "`----------------\n\nTimer histograms inspired by [Prometheus implementation](https://prometheus.io/docs/concepts/metric_types/#histogram) can be\nenabled on a per time series basis using `gsd_histogram` meta tag with value containing histogram bucketing definition (joined with `_`)\ne.g. `gsd_histogram:-10_0_2.5_5_10_25_50`.\n\nIt will:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 16,
                  "endLine": 212,
                  "endColumn": 21,
                  "snippet": {
                    "text": "Configuring HTTP servers\n------------------------\nThe service supports multiple HTTP servers, with different configurations for different requirements.  All http servers\nare named in the top level `http-servers` setting.  It should be a space separated list of names.  Each server is then\nconfigured by creating a section in the configuration file named `http.<servername>`.  An http server section has the\nfollowing configuration options:\n\n",
                    "rendered": {
                      "text": "Configuring HTTP servers\n------------------------\nThe service supports multiple HTTP servers, with different configurations for different requirements.  All http servers\nare named in the top level `http-servers` setting.  It should be a space separated list of names.  Each server is then\nconfigured by creating a section in the configuration file named `http.<servername>`.  An http server section has the\nfollowing configuration options:\n\n",
                      "markdown": "`Configuring HTTP servers\n------------------------\nThe service supports multiple HTTP servers, with different configurations for different requirements.  All http servers\nare named in the top level `http-servers` setting.  It should be a space separated list of names.  Each server is then\nconfigured by creating a section in the configuration file named `http.<servername>`.  An http server section has the\nfollowing configuration options:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 3,
                  "endLine": 211,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nConfiguring HTTP servers\n------------------------\nThe service supports multiple HTTP servers, with different configurations for different requirements.  All http servers\nare named in the top level `http-servers` setting.  It should be a space separated list of names.  Each server is then\nconfigured by creating a section in the configuration file named `http.<servername>`.  An http server section has the\nfollowing configuration options:\n",
                    "rendered": {
                      "text": "\nConfiguring HTTP servers\n------------------------\nThe service supports multiple HTTP servers, with different configurations for different requirements.  All http servers\nare named in the top level `http-servers` setting.  It should be a space separated list of names.  Each server is then\nconfigured by creating a section in the configuration file named `http.<servername>`.  An http server section has the\nfollowing configuration options:\n",
                      "markdown": "`\nConfiguring HTTP servers\n------------------------\nThe service supports multiple HTTP servers, with different configurations for different requirements.  All http servers\nare named in the top level `http-servers` setting.  It should be a space separated list of names.  Each server is then\nconfigured by creating a section in the configuration file named `http.<servername>`.  An http server section has the\nfollowing configuration options:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 64,
                  "endLine": 134,
                  "endColumn": 70,
                  "snippet": {
                    "text": "aximum number of requests in flight.  Defaults to `1000` (which is probably too high)\n- `concurrent-merge`: maximum number of concurrent goroutines allowed to merge metrics before forwarding.  Defaults to `1` for backward-compatibility\n- `max-request-elapsed-time`: duration for the maximum amount of time to try submitting data before giving up.  This\n  includes retries.  Defaults to `30s` (which is probably too high). Setting this value to `-1` will disable retries.\n- `consolidator-slots`: number of slots in the metric consolidator.  Memory usage is a function of this.  Lower values\n  may cause bloc",
                    "rendered": {
                      "text": "aximum number of requests in flight.  Defaults to `1000` (which is probably too high)\n- `concurrent-merge`: maximum number of concurrent goroutines allowed to merge metrics before forwarding.  Defaults to `1` for backward-compatibility\n- `max-request-elapsed-time`: duration for the maximum amount of time to try submitting data before giving up.  This\n  includes retries.  Defaults to `30s` (which is probably too high). Setting this value to `-1` will disable retries.\n- `consolidator-slots`: number of slots in the metric consolidator.  Memory usage is a function of this.  Lower values\n  may cause bloc",
                      "markdown": "`aximum number of requests in flight.  Defaults to `1000` (which is probably too high)\n- `concurrent-merge`: maximum number of concurrent goroutines allowed to merge metrics before forwarding.  Defaults to `1` for backward-compatibility\n- `max-request-elapsed-time`: duration for the maximum amount of time to try submitting data before giving up.  This\n  includes retries.  Defaults to `30s` (which is probably too high). Setting this value to `-1` will disable retries.\n- `consolidator-slots`: number of slots in the metric consolidator.  Memory usage is a function of this.  Lower values\n  may cause bloc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 44,
                  "endLine": 115,
                  "endColumn": 53,
                  "snippet": {
                    "text": "to another gostatsd server after passing through the processing pipeline (cloud provider, static tags, filtering, etc).\n\nA `forwarder` server is intended to run on-host and collect metrics, forwarding them on to a central aggregation\nservice.  At present the central aggregation service can only scale vertically, but horizontal scaling through\nclustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\n",
                    "rendered": {
                      "text": "to another gostatsd server after passing through the processing pipeline (cloud provider, static tags, filtering, etc).\n\nA `forwarder` server is intended to run on-host and collect metrics, forwarding them on to a central aggregation\nservice.  At present the central aggregation service can only scale vertically, but horizontal scaling through\nclustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\n",
                      "markdown": "`to another gostatsd server after passing through the processing pipeline (cloud provider, static tags, filtering, etc).\n\nA `forwarder` server is intended to run on-host and collect metrics, forwarding them on to a central aggregation\nservice.  At present the central aggregation service can only scale vertically, but horizontal scaling through\nclustering is planned.\n\nAligned flushing is deliberately not supported in `forwarder` mode, as it would impact the central aggregation server\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 73,
                  "endLine": 72,
                  "endColumn": 79,
                  "snippet": {
                    "text": "gned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval. Defaults to `1s`.\n- `flush-offset`: offset for flush interval when flush alignment is e",
                    "rendered": {
                      "text": "gned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval. Defaults to `1s`.\n- `flush-offset`: offset for flush interval when flush alignment is e",
                      "markdown": "`gned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should be an order of magnitude less than\n  the upstream flush interval. Defaults to `1s`.\n- `flush-offset`: offset for flush interval when flush alignment is e`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 36,
                  "endLine": 71,
                  "endColumn": 45,
                  "snippet": {
                    "text": " to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should b",
                    "rendered": {
                      "text": " to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should b",
                      "markdown": "` to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: duration for how long to batch metrics before flushing. Should b`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 99,
                  "endLine": 70,
                  "endColumn": 105,
                  "snippet": {
                    "text": "-interval-set`: interval before sets are expired, defaults to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: dur",
                    "rendered": {
                      "text": "-interval-set`: interval before sets are expired, defaults to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: dur",
                      "markdown": "`-interval-set`: interval before sets are expired, defaults to the value of `expiry-interval`.\n- `expiry-interval-timer`: interval before timers are expired, defaults to the value of `expiry-interval`.\n- `flush-aligned`: whether or not the flush should be aligned.  Setting this will flush at an exact time interval.  With\n  a 10 second flush-interval, if the service happens to be started at 12:47:13, then flushing will occur at 12:47:20,\n  12:47:30, etc, rather than 12:47:23, 12:47:33, etc.  This removes query time ambiguity in a multi-server environment.\n  Defaults to `false`.\n- `flush-interval`: dur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/README.md"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 102,
                  "endLine": 57,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\nConfiguring the server mode\n---------------------------\nThe server can currently run in two modes: `standalone` and `forwarder`.  It is configured through the top level\n`server-mode` configuration setting.  The default is `standalone`.\n\nIn `standalone` mode, raw metrics are processed and aggregated as normal, and aggregated data is submitted to\n",
                    "rendered": {
                      "text": "\nConfiguring the server mode\n---------------------------\nThe server can currently run in two modes: `standalone` and `forwarder`.  It is configured through the top level\n`server-mode` configuration setting.  The default is `standalone`.\n\nIn `standalone` mode, raw metrics are processed and aggregated as normal, and aggregated data is submitted to\n",
                      "markdown": "`\nConfiguring the server mode\n---------------------------\nThe server can currently run in two modes: `standalone` and `forwarder`.  It is configured through the top level\n`server-mode` configuration setting.  The default is `standalone`.\n\nIn `standalone` mode, raw metrics are processed and aggregated as normal, and aggregated data is submitted to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/cluster/server.go"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 80,
                  "endLine": 48,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\tfs.StringVar(&c.RedisAddr, \"redis-addr\", c.RedisAddr, \"Redis address\")\n\tfs.StringVar(&c.Namespace, \"namespace\", c.Namespace, \"Namespace\")\n\tfs.StringVar(&c.Target, \"target\", c.Target, \"Target host to advertise\")\n\tfs.DurationVar(&c.UpdateInterval, \"update-interval\", c.UpdateInterval, \"Cluster update interval\")\n\tfs.DurationVar(&c.ExpiryInterval, \"expiry-interval\", c.ExpiryInterval, \"Cluster expiry interval\")\n}\n\n",
                    "rendered": {
                      "text": "\tfs.StringVar(&c.RedisAddr, \"redis-addr\", c.RedisAddr, \"Redis address\")\n\tfs.StringVar(&c.Namespace, \"namespace\", c.Namespace, \"Namespace\")\n\tfs.StringVar(&c.Target, \"target\", c.Target, \"Target host to advertise\")\n\tfs.DurationVar(&c.UpdateInterval, \"update-interval\", c.UpdateInterval, \"Cluster update interval\")\n\tfs.DurationVar(&c.ExpiryInterval, \"expiry-interval\", c.ExpiryInterval, \"Cluster expiry interval\")\n}\n\n",
                      "markdown": "`\tfs.StringVar(&c.RedisAddr, \"redis-addr\", c.RedisAddr, \"Redis address\")\n\tfs.StringVar(&c.Namespace, \"namespace\", c.Namespace, \"Namespace\")\n\tfs.StringVar(&c.Target, \"target\", c.Target, \"Target host to advertise\")\n\tfs.DurationVar(&c.UpdateInterval, \"update-interval\", c.UpdateInterval, \"Cluster update interval\")\n\tfs.DurationVar(&c.ExpiryInterval, \"expiry-interval\", c.ExpiryInterval, \"Cluster expiry interval\")\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/gostatsd/main.go"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 39,
                  "endLine": 106,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\tcase nil:\n\t\tcase cachedinstances.ErrUnknownProvider:\n\t\t\t// See if requested cloud provider is a CloudProvider implementation\n\t\t\tcloudProvider, err := cloudproviders.Get(logger, cloudProviderName, v, Version)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n",
                    "rendered": {
                      "text": "\t\tcase nil:\n\t\tcase cachedinstances.ErrUnknownProvider:\n\t\t\t// See if requested cloud provider is a CloudProvider implementation\n\t\t\tcloudProvider, err := cloudproviders.Get(logger, cloudProviderName, v, Version)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n",
                      "markdown": "`\t\tcase nil:\n\t\tcase cachedinstances.ErrUnknownProvider:\n\t\t\t// See if requested cloud provider is a CloudProvider implementation\n\t\t\tcloudProvider, err := cloudproviders.Get(logger, cloudProviderName, v, Version)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/gostatsd/main.go"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 40,
                  "endLine": 101,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t} else {\n\t\tvar err error\n\t\t// See if requested cloud provider is a native CachedInstances implementation\n\t\tcachedInstances, err = cachedinstances.Get(logger, cloudProviderName, v, Version)\n\t\tswitch err {\n\t\tcase nil:\n\t\tcase cachedinstances.ErrUnknownProvider:\n",
                    "rendered": {
                      "text": "\t} else {\n\t\tvar err error\n\t\t// See if requested cloud provider is a native CachedInstances implementation\n\t\tcachedInstances, err = cachedinstances.Get(logger, cloudProviderName, v, Version)\n\t\tswitch err {\n\t\tcase nil:\n\t\tcase cachedinstances.ErrUnknownProvider:\n",
                      "markdown": "`\t} else {\n\t\tvar err error\n\t\t// See if requested cloud provider is a native CachedInstances implementation\n\t\tcachedInstances, err = cachedinstances.Get(logger, cloudProviderName, v, Version)\n\t\tswitch err {\n\t\tcase nil:\n\t\tcase cachedinstances.ErrUnknownProvider:\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/gostatsd/main.go"
                },
                "region": {
                  "startLine": 204,
                  "endLine": 204,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\tvar version bool\n\n\tcmd := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)\n\n\tcmd.BoolVar(&version, ParamVersion, false, \"Print the version and exit\")\n\tcmd.Bool(ParamVerbose, false, \"Verbose\")\n",
                    "rendered": {
                      "text": "\n\tvar version bool\n\n\tcmd := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)\n\n\tcmd.BoolVar(&version, ParamVersion, false, \"Print the version and exit\")\n\tcmd.Bool(ParamVerbose, false, \"Verbose\")\n",
                      "markdown": "`\n\tvar version bool\n\n\tcmd := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)\n\n\tcmd.BoolVar(&version, ParamVersion, false, \"Print the version and exit\")\n\tcmd.Bool(ParamVerbose, false, \"Verbose\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/cmd/lambda-extension/main.go"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tv := viper.New()\n\tutil.InitViper(v, \"\")\n\n\tcmd := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)\n\tcmd.Bool(ParamVerbose, false, \"Enables debug level logs within the extension\")\n\tcmd.String(ParamConfigPath, \"\", \"Path to a configuration file\")\n\tcmd.String(ParamLambdaFileName, \"\", \"Name of executable that bootstraps lambda. Used as Lambda-Extension-Name header\")\n",
                    "rendered": {
                      "text": "\tv := viper.New()\n\tutil.InitViper(v, \"\")\n\n\tcmd := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)\n\tcmd.Bool(ParamVerbose, false, \"Enables debug level logs within the extension\")\n\tcmd.String(ParamConfigPath, \"\", \"Path to a configuration file\")\n\tcmd.String(ParamLambdaFileName, \"\", \"Name of executable that bootstraps lambda. Used as Lambda-Extension-Name header\")\n",
                      "markdown": "`\tv := viper.New()\n\tutil.InitViper(v, \"\")\n\n\tcmd := pflag.NewFlagSet(os.Args[0], pflag.ContinueOnError)\n\tcmd.Bool(ParamVerbose, false, \"Enables debug level logs within the extension\")\n\tcmd.String(ParamConfigPath, \"\", \"Path to a configuration file\")\n\tcmd.String(ParamLambdaFileName, \"\", \"Name of executable that bootstraps lambda. Used as Lambda-Extension-Name header\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/handler_cloud.go"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 3,
                  "endLine": 305,
                  "endColumn": 7,
                  "snippet": {
                    "text": "}\n\nfunc (ch *CloudHandler) getInstance(ip gostatsd.Source) (*gostatsd.Instance, bool /*is a cache hit*/) {\n\tif ip == gostatsd.UnknownSource {\n\t\treturn nil, true\n\t}\n\tinstance, cacheHit := ch.cachedInstances.Peek(ip)\n",
                    "rendered": {
                      "text": "}\n\nfunc (ch *CloudHandler) getInstance(ip gostatsd.Source) (*gostatsd.Instance, bool /*is a cache hit*/) {\n\tif ip == gostatsd.UnknownSource {\n\t\treturn nil, true\n\t}\n\tinstance, cacheHit := ch.cachedInstances.Peek(ip)\n",
                      "markdown": "`}\n\nfunc (ch *CloudHandler) getInstance(ip gostatsd.Source) (*gostatsd.Instance, bool /*is a cache hit*/) {\n\tif ip == gostatsd.UnknownSource {\n\t\treturn nil, true\n\t}\n\tinstance, cacheHit := ch.cachedInstances.Peek(ip)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 16,
                  "endLine": 292,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tTitle:        \"Gostatsd stopped\",\n\t\tText:         \"Gostatsd stopped\",\n\t\tDateHappened: time.Now().Unix(),\n\t\tSource:       hostname,\n\t\tPriority:     gostatsd.PriLow,\n\t})\n\n",
                    "rendered": {
                      "text": "\t\tTitle:        \"Gostatsd stopped\",\n\t\tText:         \"Gostatsd stopped\",\n\t\tDateHappened: time.Now().Unix(),\n\t\tSource:       hostname,\n\t\tPriority:     gostatsd.PriLow,\n\t})\n\n",
                      "markdown": "`\t\tTitle:        \"Gostatsd stopped\",\n\t\tText:         \"Gostatsd stopped\",\n\t\tDateHappened: time.Now().Unix(),\n\t\tSource:       hostname,\n\t\tPriority:     gostatsd.PriLow,\n\t})\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 42,
                  "endLine": 284,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\t})\n}\n\nfunc sendStopEvent(statser stats.Statser, hostname gostatsd.Source) {\n\tctx, cancelFunc := context.WithTimeout(context.Background(), 2*time.Second)\n\tdefer cancelFunc()\n\n",
                    "rendered": {
                      "text": "\t})\n}\n\nfunc sendStopEvent(statser stats.Statser, hostname gostatsd.Source) {\n\tctx, cancelFunc := context.WithTimeout(context.Background(), 2*time.Second)\n\tdefer cancelFunc()\n\n",
                      "markdown": "`\t})\n}\n\nfunc sendStopEvent(statser stats.Statser, hostname gostatsd.Source) {\n\tctx, cancelFunc := context.WithTimeout(context.Background(), 2*time.Second)\n\tdefer cancelFunc()\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 16,
                  "endLine": 279,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\tTitle:        \"Gostatsd started\",\n\t\tText:         \"Gostatsd started\",\n\t\tDateHappened: time.Now().Unix(),\n\t\tSource:       hostname,\n\t\tPriority:     gostatsd.PriLow,\n\t})\n}\n",
                    "rendered": {
                      "text": "\t\tTitle:        \"Gostatsd started\",\n\t\tText:         \"Gostatsd started\",\n\t\tDateHappened: time.Now().Unix(),\n\t\tSource:       hostname,\n\t\tPriority:     gostatsd.PriLow,\n\t})\n}\n",
                      "markdown": "`\t\tTitle:        \"Gostatsd started\",\n\t\tText:         \"Gostatsd started\",\n\t\tDateHappened: time.Now().Unix(),\n\t\tSource:       hostname,\n\t\tPriority:     gostatsd.PriLow,\n\t})\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 64,
                  "endLine": 274,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\t}\n}\n\nfunc sendStartEvent(ctx context.Context, statser stats.Statser, hostname gostatsd.Source) {\n\tstatser.Event(ctx, &gostatsd.Event{\n\t\tTitle:        \"Gostatsd started\",\n\t\tText:         \"Gostatsd started\",\n",
                    "rendered": {
                      "text": "\t}\n}\n\nfunc sendStartEvent(ctx context.Context, statser stats.Statser, hostname gostatsd.Source) {\n\tstatser.Event(ctx, &gostatsd.Event{\n\t\tTitle:        \"Gostatsd started\",\n\t\tText:         \"Gostatsd started\",\n",
                      "markdown": "`\t}\n}\n\nfunc sendStartEvent(ctx context.Context, statser stats.Statser, hostname gostatsd.Source) {\n\tstatser.Event(ctx, &gostatsd.Event{\n\t\tTitle:        \"Gostatsd started\",\n\t\tText:         \"Gostatsd started\",\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 3,
                  "endLine": 266,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\t\treturn stats.NewInternalStatser(\n\t\t\ts.InternalTags,\n\t\t\tnamespace,\n\t\t\thostname,\n\t\t\thandler,\n\t\t\tdisableEvents,\n\t\t\tforwarderMode,\n",
                    "rendered": {
                      "text": "\t\treturn stats.NewInternalStatser(\n\t\t\ts.InternalTags,\n\t\t\tnamespace,\n\t\t\thostname,\n\t\t\thandler,\n\t\t\tdisableEvents,\n\t\t\tforwarderMode,\n",
                      "markdown": "`\t\treturn stats.NewInternalStatser(\n\t\t\ts.InternalTags,\n\t\t\tnamespace,\n\t\t\thostname,\n\t\t\thandler,\n\t\t\tdisableEvents,\n\t\t\tforwarderMode,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 1,
                  "endLine": 243,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\nfunc (s *Server) createStatser(\n\thostname gostatsd.Source,\n\thandler gostatsd.PipelineHandler,\n\tlogger logrus.FieldLogger,\n\tdisableEvents bool,\n",
                    "rendered": {
                      "text": "}\n\nfunc (s *Server) createStatser(\n\thostname gostatsd.Source,\n\thandler gostatsd.PipelineHandler,\n\tlogger logrus.FieldLogger,\n\tdisableEvents bool,\n",
                      "markdown": "`}\n\nfunc (s *Server) createStatser(\n\thostname gostatsd.Source,\n\thandler gostatsd.PipelineHandler,\n\tlogger logrus.FieldLogger,\n\tdisableEvents bool,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 33,
                  "endLine": 235,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n\t// sendStopEvent uses its own context with a timeout, because the system is shutting down\n\tdefer sendStopEvent(statser, hostname)\n\tsendStartEvent(runCtx, statser, hostname)\n\n\t// Listen until done\n\t<-ctx.Done()\n",
                    "rendered": {
                      "text": "\n\t// sendStopEvent uses its own context with a timeout, because the system is shutting down\n\tdefer sendStopEvent(statser, hostname)\n\tsendStartEvent(runCtx, statser, hostname)\n\n\t// Listen until done\n\t<-ctx.Done()\n",
                      "markdown": "`\n\t// sendStopEvent uses its own context with a timeout, because the system is shutting down\n\tdefer sendStopEvent(statser, hostname)\n\tsendStartEvent(runCtx, statser, hostname)\n\n\t// Listen until done\n\t<-ctx.Done()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 30,
                  "endLine": 234,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t}\n\n\t// sendStopEvent uses its own context with a timeout, because the system is shutting down\n\tdefer sendStopEvent(statser, hostname)\n\tsendStartEvent(runCtx, statser, hostname)\n\n\t// Listen until done\n",
                    "rendered": {
                      "text": "\t}\n\n\t// sendStopEvent uses its own context with a timeout, because the system is shutting down\n\tdefer sendStopEvent(statser, hostname)\n\tsendStartEvent(runCtx, statser, hostname)\n\n\t// Listen until done\n",
                      "markdown": "`\t}\n\n\t// sendStopEvent uses its own context with a timeout, because the system is shutting down\n\tdefer sendStopEvent(statser, hostname)\n\tsendStartEvent(runCtx, statser, hostname)\n\n\t// Listen until done\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 2,
                  "endLine": 205,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t// Create the Statser\n\thostname := s.Hostname\n\tstatser := s.createStatser(\n\t\thostname,\n\t\thandler,\n\t\tlogger,\n\t\ts.DisableInternalEvents,\n",
                    "rendered": {
                      "text": "\t// Create the Statser\n\thostname := s.Hostname\n\tstatser := s.createStatser(\n\t\thostname,\n\t\thandler,\n\t\tlogger,\n\t\ts.DisableInternalEvents,\n",
                      "markdown": "`\t// Create the Statser\n\thostname := s.Hostname\n\tstatser := s.createStatser(\n\t\thostname,\n\t\thandler,\n\t\tlogger,\n\t\ts.DisableInternalEvents,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/statsd.go"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 1,
                  "endLine": 203,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\trunnables = gostatsd.MaybeAppendRunnable(runnables, receiver)\n\n\t// Create the Statser\n\thostname := s.Hostname\n\tstatser := s.createStatser(\n\t\thostname,\n\t\thandler,\n",
                    "rendered": {
                      "text": "\trunnables = gostatsd.MaybeAppendRunnable(runnables, receiver)\n\n\t// Create the Statser\n\thostname := s.Hostname\n\tstatser := s.createStatser(\n\t\thostname,\n\t\thandler,\n",
                      "markdown": "`\trunnables = gostatsd.MaybeAppendRunnable(runnables, receiver)\n\n\t// Create the Statser\n\thostname := s.Hostname\n\tstatser := s.createStatser(\n\t\thostname,\n\t\thandler,\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/handler_http_forwarder_v2.go"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 4,
                  "endLine": 637,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\t\tmessage.Type = pb.EventV2_Success\n\t}\n\n\thfh.post(ctx, message, \"\", postId, \"event\", \"/v2/event\")\n\n\tdefer hfh.eventWg.Done()\n}\n",
                    "rendered": {
                      "text": "\t\tmessage.Type = pb.EventV2_Success\n\t}\n\n\thfh.post(ctx, message, \"\", postId, \"event\", \"/v2/event\")\n\n\tdefer hfh.eventWg.Done()\n}\n",
                      "markdown": "`\t\tmessage.Type = pb.EventV2_Success\n\t}\n\n\thfh.post(ctx, message, \"\", postId, \"event\", \"/v2/event\")\n\n\tdefer hfh.eventWg.Done()\n}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/handler_http_forwarder_v2.go"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 4,
                  "endLine": 446,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nfunc (hfh *HttpForwarderHandlerV2) postMetrics(ctx context.Context, metricMap *gostatsd.MetricMap, dynHeaderTags string, batchId uint64) {\n\tmessage := translateToProtobufV2(metricMap)\n\thfh.post(ctx, message, dynHeaderTags, batchId, \"metrics\", \"/v2/raw\")\n}\n\nfunc (hfh *HttpForwarderHandlerV2) post(ctx context.Context, message proto.Message, dynHeaderTags string, id uint64, endpointType, endpoint string) {\n",
                    "rendered": {
                      "text": "\nfunc (hfh *HttpForwarderHandlerV2) postMetrics(ctx context.Context, metricMap *gostatsd.MetricMap, dynHeaderTags string, batchId uint64) {\n\tmessage := translateToProtobufV2(metricMap)\n\thfh.post(ctx, message, dynHeaderTags, batchId, \"metrics\", \"/v2/raw\")\n}\n\nfunc (hfh *HttpForwarderHandlerV2) post(ctx context.Context, message proto.Message, dynHeaderTags string, id uint64, endpointType, endpoint string) {\n",
                      "markdown": "`\nfunc (hfh *HttpForwarderHandlerV2) postMetrics(ctx context.Context, metricMap *gostatsd.MetricMap, dynHeaderTags string, batchId uint64) {\n\tmessage := translateToProtobufV2(metricMap)\n\thfh.post(ctx, message, dynHeaderTags, batchId, \"metrics\", \"/v2/raw\")\n}\n\nfunc (hfh *HttpForwarderHandlerV2) post(ctx context.Context, message proto.Message, dynHeaderTags string, id uint64, endpointType, endpoint string) {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/statsd/handler_http_forwarder_v2.go"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 24,
                  "endLine": 171,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\treturn nil, fmt.Errorf(\"compression-level must between 0 and 9 inclusive\")\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\treturn nil, fmt.Errorf(\"compression-level must between 0 and 9 inclusive\")\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                      "markdown": "`\t\treturn nil, fmt.Errorf(\"compression-level must between 0 and 9 inclusive\")\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/internal/data/metric_response_test.go"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 113,
                  "endLine": 46,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\t\t\t\treturn bytes.NewBuffer(buf)\n\t\t\t}(),\n\t\t\tdropped: 12,\n\t\t\terrVal:  \"returned a non 2XX status code of 400; dataloss: dropped 12 metrics; failed to send metrics: missing service name\",\n\t\t},\n\t} {\n\t\ttc := tc\n",
                    "rendered": {
                      "text": "\t\t\t\treturn bytes.NewBuffer(buf)\n\t\t\t}(),\n\t\t\tdropped: 12,\n\t\t\terrVal:  \"returned a non 2XX status code of 400; dataloss: dropped 12 metrics; failed to send metrics: missing service name\",\n\t\t},\n\t} {\n\t\ttc := tc\n",
                      "markdown": "`\t\t\t\treturn bytes.NewBuffer(buf)\n\t\t\t}(),\n\t\t\tdropped: 12,\n\t\t\terrVal:  \"returned a non 2XX status code of 400; dataloss: dropped 12 metrics; failed to send metrics: missing service name\",\n\t\t},\n\t} {\n\t\ttc := tc\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/otlp/internal/data/metric_response_test.go"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 34,
                  "endLine": 39,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\t\t\tbuf, err := proto.Marshal(&v1export.ExportMetricsServiceResponse{\n\t\t\t\t\tPartialSuccess: &v1export.ExportMetricsPartialSuccess{\n\t\t\t\t\t\tRejectedDataPoints: 12,\n\t\t\t\t\t\tErrorMessage:       \"missing service name\",\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\trequire.NoError(t, err, \"Must not error when constructing test values\")\n",
                    "rendered": {
                      "text": "\t\t\t\tbuf, err := proto.Marshal(&v1export.ExportMetricsServiceResponse{\n\t\t\t\t\tPartialSuccess: &v1export.ExportMetricsPartialSuccess{\n\t\t\t\t\t\tRejectedDataPoints: 12,\n\t\t\t\t\t\tErrorMessage:       \"missing service name\",\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\trequire.NoError(t, err, \"Must not error when constructing test values\")\n",
                      "markdown": "`\t\t\t\tbuf, err := proto.Marshal(&v1export.ExportMetricsServiceResponse{\n\t\t\t\t\tPartialSuccess: &v1export.ExportMetricsPartialSuccess{\n\t\t\t\t\t\tRejectedDataPoints: 12,\n\t\t\t\t\t\tErrorMessage:       \"missing service name\",\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\trequire.NoError(t, err, \"Must not error when constructing test values\")\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/influxdb.go"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 14,
                  "endLine": 335,
                  "endColumn": 20,
                  "snippet": {
                    "text": "}\n\nfunc (idb *Client) postData(ctx context.Context, buffer *bytes.Buffer, seriesCount uint64) error {\n\tif err := idb.post(ctx, buffer); err != nil {\n\t\treturn err\n\t}\n\tatomic.AddUint64(&idb.seriesSent, seriesCount)\n",
                    "rendered": {
                      "text": "}\n\nfunc (idb *Client) postData(ctx context.Context, buffer *bytes.Buffer, seriesCount uint64) error {\n\tif err := idb.post(ctx, buffer); err != nil {\n\t\treturn err\n\t}\n\tatomic.AddUint64(&idb.seriesSent, seriesCount)\n",
                      "markdown": "`}\n\nfunc (idb *Client) postData(ctx context.Context, buffer *bytes.Buffer, seriesCount uint64) error {\n\tif err := idb.post(ctx, buffer); err != nil {\n\t\treturn err\n\t}\n\tatomic.AddUint64(&idb.seriesSent, seriesCount)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/influxdb/influxdb.go"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 24,
                  "endLine": 156,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                    "rendered": {
                      "text": "\t\treturn nil, err\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n",
                      "markdown": "`\t\treturn nil, err\n\t}\n\n\thttpClient, err := pool.Get(transport)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"failed to create http client\")\n\t\treturn nil, err\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/newrelic/newrelic_test.go"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 39,
                  "endLine": 272,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tassert.Equal(t, tt.expected, body)\n\t\t\t\tassert.Equal(t, tt.apiKey, r.Header.Get(\"X-Insert-Key\"))\n\t\t\t})\n\t\t\tts := httptest.NewServer(mux)\n\t\t\tdefer ts.Close()\n",
                    "rendered": {
                      "text": "\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tassert.Equal(t, tt.expected, body)\n\t\t\t\tassert.Equal(t, tt.apiKey, r.Header.Get(\"X-Insert-Key\"))\n\t\t\t})\n\t\t\tts := httptest.NewServer(mux)\n\t\t\tdefer ts.Close()\n",
                      "markdown": "`\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tassert.Equal(t, tt.expected, body)\n\t\t\t\tassert.Equal(t, tt.apiKey, r.Header.Get(\"X-Insert-Key\"))\n\t\t\t})\n\t\t\tts := httptest.NewServer(mux)\n\t\t\tdefer ts.Close()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/pkg/backends/newrelic/newrelic_test.go"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 19,
                  "endLine": 265,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\t\t\t\tpath = \"/metric/v1\"\n\t\t\t}\n\t\t\tmux.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\t\t\tvar body string\n\t\t\t\tbody, done := decodeBody(enc, r, t)\n\t\t\t\tif done {\n",
                    "rendered": {
                      "text": "\t\t\t\tpath = \"/metric/v1\"\n\t\t\t}\n\t\t\tmux.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\t\t\tvar body string\n\t\t\t\tbody, done := decodeBody(enc, r, t)\n\t\t\t\tif done {\n",
                      "markdown": "`\t\t\t\tpath = \"/metric/v1\"\n\t\t\t}\n\t\t\tmux.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tenc := r.Header.Get(\"Content-Encoding\")\n\t\t\t\tvar body string\n\t\t\t\tbody, done := decodeBody(enc, r, t)\n\t\t\t\tif done {\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/awslambda/extension/telemetry/server_test.go"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 19,
                  "endLine": 78,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\t\tdefer cancel()\n\t\t\tgo s.Start(ctx)\n\n\t\t\tres, err := http.Post(s.Endpoint(), \"application/json\", bytes.NewReader(p))\n\t\t\trequire.NoError(t, err)\n\t\t\tdefer res.Body.Close()\n\n",
                    "rendered": {
                      "text": "\t\t\tdefer cancel()\n\t\t\tgo s.Start(ctx)\n\n\t\t\tres, err := http.Post(s.Endpoint(), \"application/json\", bytes.NewReader(p))\n\t\t\trequire.NoError(t, err)\n\t\t\tdefer res.Body.Close()\n\n",
                      "markdown": "`\t\t\tdefer cancel()\n\t\t\tgo s.Start(ctx)\n\n\t\t\tres, err := http.Post(s.Endpoint(), \"application/json\", bytes.NewReader(p))\n\t\t\trequire.NoError(t, err)\n\t\t\tdefer res.Body.Close()\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/fixtures/metrics.go"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 31,
                  "endLine": 58,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\tpanic(fmt.Sprintf(\"failed to find tag %s while building metric\", t))\n\t\t}\n\t\tm.Tags = m.Tags[:next]\n\t}\n",
                    "rendered": {
                      "text": "\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\tpanic(fmt.Sprintf(\"failed to find tag %s while building metric\", t))\n\t\t}\n\t\tm.Tags = m.Tags[:next]\n\t}\n",
                      "markdown": "`\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\tpanic(fmt.Sprintf(\"failed to find tag %s while building metric\", t))\n\t\t}\n\t\tm.Tags = m.Tags[:next]\n\t}\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/util/aligned_ticker.go"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 7,
                  "endLine": 43,
                  "snippet": {
                    "text": "\t\toffset:     offset,\n\t}\n\tgo at.start(ctx)\n\treturn at\n}\n\nfunc roundup(t time.Time, i time.Duration) time.Time {\n\treturn t.Truncate(i).Add(i)\n",
                    "rendered": {
                      "text": "\t\toffset:     offset,\n\t}\n\tgo at.start(ctx)\n\treturn at\n}\n\nfunc roundup(t time.Time, i time.Duration) time.Time {\n\treturn t.Truncate(i).Add(i)\n",
                      "markdown": "`\t\toffset:     offset,\n\t}\n\tgo at.start(ctx)\n\treturn at\n}\n\nfunc roundup(t time.Time, i time.Duration) time.Time {\n\treturn t.Truncate(i).Add(i)\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/util/aligned_ticker.go"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nfunc NewAlignedTickerWithContext(ctx context.Context, interval, offset time.Duration) *AlignedTicker {\n\tch := make(chan time.Time, 1)\n\tat := &AlignedTicker{\n\t\tC:          ch,\n\t\tchInternal: ch,\n\t\tchStop:     make(chan struct{}),\n",
                    "rendered": {
                      "text": "\nfunc NewAlignedTickerWithContext(ctx context.Context, interval, offset time.Duration) *AlignedTicker {\n\tch := make(chan time.Time, 1)\n\tat := &AlignedTicker{\n\t\tC:          ch,\n\t\tchInternal: ch,\n\t\tchStop:     make(chan struct{}),\n",
                      "markdown": "`\nfunc NewAlignedTickerWithContext(ctx context.Context, interval, offset time.Duration) *AlignedTicker {\n\tch := make(chan time.Time, 1)\n\tat := &AlignedTicker{\n\t\tC:          ch,\n\t\tchInternal: ch,\n\t\tchStop:     make(chan struct{}),\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/util/aligned_ticker.go"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 100,
                  "endLine": 19,
                  "endColumn": 106,
                  "snippet": {
                    "text": "// r = roundup(T, interval)+offset\n// [r+1*interval, r+interval*2, r+3*interval, ...]\n//\n// The time.Time sent to the channel is guaranteed to be r+offset+n*interval, rather than the actual time of firing.\ntype AlignedTicker struct {\n\tC          <-chan time.Time\n\tchInternal chan time.Time\n",
                    "rendered": {
                      "text": "// r = roundup(T, interval)+offset\n// [r+1*interval, r+interval*2, r+3*interval, ...]\n//\n// The time.Time sent to the channel is guaranteed to be r+offset+n*interval, rather than the actual time of firing.\ntype AlignedTicker struct {\n\tC          <-chan time.Time\n\tchInternal chan time.Time\n",
                      "markdown": "`// r = roundup(T, interval)+offset\n// [r+1*interval, r+interval*2, r+3*interval, ...]\n//\n// The time.Time sent to the channel is guaranteed to be r+offset+n*interval, rather than the actual time of firing.\ntype AlignedTicker struct {\n\tC          <-chan time.Time\n\tchInternal chan time.Time\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/internal/util/aligned_ticker.go"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 63,
                  "endLine": 10,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\"github.com/tilinna/clock\"\n)\n\n// AlignedTicker is a wrapper around time.Ticker will align the time on a specific interval.  The first tick will\n// always occur within interval, the caller should explicitly discard this on creation, or not.\n// Instead of firing at:\n// [T+1*interval, T+2*interval, T+3*interval, ...]\n",
                    "rendered": {
                      "text": "\t\"github.com/tilinna/clock\"\n)\n\n// AlignedTicker is a wrapper around time.Ticker will align the time on a specific interval.  The first tick will\n// always occur within interval, the caller should explicitly discard this on creation, or not.\n// Instead of firing at:\n// [T+1*interval, T+2*interval, T+3*interval, ...]\n",
                      "markdown": "`\t\"github.com/tilinna/clock\"\n)\n\n// AlignedTicker is a wrapper around time.Ticker will align the time on a specific interval.  The first tick will\n// always occur within interval, the caller should explicitly discard this on creation, or not.\n// Instead of firing at:\n// [T+1*interval, T+2*interval, T+3*interval, ...]\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/defaults_and_params.go"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 27,
                  "endLine": 245,
                  "endColumn": 35,
                  "snippet": {
                    "text": "func getHost() string {\n\thost, err := os.Hostname()\n\tif err != nil {\n\t\tlogrus.Warnf(\"Cannot get hostname: %v\", err)\n\t\treturn \"\"\n\t}\n\treturn host\n",
                    "rendered": {
                      "text": "func getHost() string {\n\thost, err := os.Hostname()\n\tif err != nil {\n\t\tlogrus.Warnf(\"Cannot get hostname: %v\", err)\n\t\treturn \"\"\n\t}\n\treturn host\n",
                      "markdown": "`func getHost() string {\n\thost, err := os.Hostname()\n\tif err != nil {\n\t\tlogrus.Warnf(\"Cannot get hostname: %v\", err)\n\t\treturn \"\"\n\t}\n\treturn host\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/defaults_and_params.go"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 52,
                  "endLine": 221,
                  "endColumn": 60,
                  "snippet": {
                    "text": " read in each receive batch\")\n\tfs.Bool(ParamConnPerReader, DefaultConnPerReader, \"Create a separate connection per reader (requires system support for reusing addresses)\")\n\tfs.String(ParamServerMode, DefaultServerMode, \"The server mode to run in\")\n\tfs.String(ParamHostname, getHost(), \"overrides the hostname of the server\")\n\tfs.Uint32(ParamTimerHistogramLimit, DefaultTimerHistogramLimit, \"upper limit of timer histogram buckets (MaxUint32 by default)\")\n\tfs.Bool(ParamLogRawMetric, DefaultLogRawMetric, \"Print metrics received from network to stdout in JSON format\")\n\tfs.Bool(ParamDisableInternalEvents, Def",
                    "rendered": {
                      "text": " read in each receive batch\")\n\tfs.Bool(ParamConnPerReader, DefaultConnPerReader, \"Create a separate connection per reader (requires system support for reusing addresses)\")\n\tfs.String(ParamServerMode, DefaultServerMode, \"The server mode to run in\")\n\tfs.String(ParamHostname, getHost(), \"overrides the hostname of the server\")\n\tfs.Uint32(ParamTimerHistogramLimit, DefaultTimerHistogramLimit, \"upper limit of timer histogram buckets (MaxUint32 by default)\")\n\tfs.Bool(ParamLogRawMetric, DefaultLogRawMetric, \"Print metrics received from network to stdout in JSON format\")\n\tfs.Bool(ParamDisableInternalEvents, Def",
                      "markdown": "` read in each receive batch\")\n\tfs.Bool(ParamConnPerReader, DefaultConnPerReader, \"Create a separate connection per reader (requires system support for reusing addresses)\")\n\tfs.String(ParamServerMode, DefaultServerMode, \"The server mode to run in\")\n\tfs.String(ParamHostname, getHost(), \"overrides the hostname of the server\")\n\tfs.Uint32(ParamTimerHistogramLimit, DefaultTimerHistogramLimit, \"upper limit of timer histogram buckets (MaxUint32 by default)\")\n\tfs.Bool(ParamLogRawMetric, DefaultLogRawMetric, \"Print metrics received from network to stdout in JSON format\")\n\tfs.Bool(ParamDisableInternalEvents, Def`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/defaults_and_params.go"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 83,
                  "endLine": 196,
                  "endColumn": 91,
                  "snippet": {
                    "text": "sh metrics to the backends\")\n\tfs.Duration(ParamFlushOffset, DefaultFlushOffset, \"Flush offset to use when flush alignment is enabled\")\n\tfs.Bool(ParamFlushAligned, DefaultFlushAligned, \"Enable aligned flush interval\")\n\tfs.Bool(ParamIgnoreHost, DefaultIgnoreHost, \"Ignore the source for populating the hostname field of metrics\")\n\tfs.Int(ParamMaxReaders, DefaultMaxReaders, \"Maximum number of socket readers\")\n\tfs.Int(ParamMaxParsers, DefaultMaxParsers, \"Maximum number of workers to parse datagrams into metrics\")\n\tfs.Int(ParamMaxWorkers, DefaultMaxWorkers, \"Maximum number of workers to process metrics\")\n\tfs",
                    "rendered": {
                      "text": "sh metrics to the backends\")\n\tfs.Duration(ParamFlushOffset, DefaultFlushOffset, \"Flush offset to use when flush alignment is enabled\")\n\tfs.Bool(ParamFlushAligned, DefaultFlushAligned, \"Enable aligned flush interval\")\n\tfs.Bool(ParamIgnoreHost, DefaultIgnoreHost, \"Ignore the source for populating the hostname field of metrics\")\n\tfs.Int(ParamMaxReaders, DefaultMaxReaders, \"Maximum number of socket readers\")\n\tfs.Int(ParamMaxParsers, DefaultMaxParsers, \"Maximum number of workers to parse datagrams into metrics\")\n\tfs.Int(ParamMaxWorkers, DefaultMaxWorkers, \"Maximum number of workers to process metrics\")\n\tfs",
                      "markdown": "`sh metrics to the backends\")\n\tfs.Duration(ParamFlushOffset, DefaultFlushOffset, \"Flush offset to use when flush alignment is enabled\")\n\tfs.Bool(ParamFlushAligned, DefaultFlushAligned, \"Enable aligned flush interval\")\n\tfs.Bool(ParamIgnoreHost, DefaultIgnoreHost, \"Ignore the source for populating the hostname field of metrics\")\n\tfs.Int(ParamMaxReaders, DefaultMaxReaders, \"Maximum number of socket readers\")\n\tfs.Int(ParamMaxParsers, DefaultMaxParsers, \"Maximum number of workers to parse datagrams into metrics\")\n\tfs.Int(ParamMaxWorkers, DefaultMaxWorkers, \"Maximum number of workers to process metrics\")\n\tfs`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/defaults_and_params.go"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 18,
                  "endLine": 172,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\t// ParamServerMode is the name of the parameter used to configure the server mode.\n\tParamServerMode = \"server-mode\"\n\t// ParamHostname allows hostname overrides\n\tParamHostname = \"hostname\"\n\t// ParamTimerHistogramLimit upper limit of timer histogram buckets that can be specified\n\tParamTimerHistogramLimit = \"timer-histogram-limit\"\n\t// ParamLogRawMetric enables custom metrics to be printed to stdout\n",
                    "rendered": {
                      "text": "\t// ParamServerMode is the name of the parameter used to configure the server mode.\n\tParamServerMode = \"server-mode\"\n\t// ParamHostname allows hostname overrides\n\tParamHostname = \"hostname\"\n\t// ParamTimerHistogramLimit upper limit of timer histogram buckets that can be specified\n\tParamTimerHistogramLimit = \"timer-histogram-limit\"\n\t// ParamLogRawMetric enables custom metrics to be printed to stdout\n",
                      "markdown": "`\t// ParamServerMode is the name of the parameter used to configure the server mode.\n\tParamServerMode = \"server-mode\"\n\t// ParamHostname allows hostname overrides\n\tParamHostname = \"hostname\"\n\t// ParamTimerHistogramLimit upper limit of timer histogram buckets that can be specified\n\tParamTimerHistogramLimit = \"timer-histogram-limit\"\n\t// ParamLogRawMetric enables custom metrics to be printed to stdout\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/HTTP.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 36,
                  "endLine": 8,
                  "endColumn": 40,
                  "snippet": {
                    "text": "- `/debug/pprof/profile`, runs a pprof profile for 30 seconds\n- `/debug/pprof/heap`, runs a `heap` memory profile for 30 seconds\n\nOnly one prof will be allowed to run at any point, and requesting multiple will block until the previous has completed.\n\n### `expvar` endpoints\n- `/expvar`, routes directly to the [expvar handler](https://golang.org/pkg/expvar/#Handler)\n",
                    "rendered": {
                      "text": "- `/debug/pprof/profile`, runs a pprof profile for 30 seconds\n- `/debug/pprof/heap`, runs a `heap` memory profile for 30 seconds\n\nOnly one prof will be allowed to run at any point, and requesting multiple will block until the previous has completed.\n\n### `expvar` endpoints\n- `/expvar`, routes directly to the [expvar handler](https://golang.org/pkg/expvar/#Handler)\n",
                      "markdown": "`- `/debug/pprof/profile`, runs a pprof profile for 30 seconds\n- `/debug/pprof/heap`, runs a `heap` memory profile for 30 seconds\n\nOnly one prof will be allowed to run at any point, and requesting multiple will block until the previous has completed.\n\n### `expvar` endpoints\n- `/expvar`, routes directly to the [expvar handler](https://golang.org/pkg/expvar/#Handler)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/HTTP.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 23,
                  "endLine": 41,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n  - There will never be more than N-1 and N.\n\n  All changes of N will be documented in the [CHANGELOG.md](CHANGELOG.md).  N is currently 2.\n",
                    "rendered": {
                      "text": "  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n  - There will never be more than N-1 and N.\n\n  All changes of N will be documented in the [CHANGELOG.md](CHANGELOG.md).  N is currently 2.\n",
                      "markdown": "`  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n  - There will never be more than N-1 and N.\n\n  All changes of N will be documented in the [CHANGELOG.md](CHANGELOG.md).  N is currently 2.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/HTTP.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 23,
                  "endLine": 40,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  The compatibility guarantee is:\n  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n  - There will never be more than N-1 and N.\n\n",
                    "rendered": {
                      "text": "  The compatibility guarantee is:\n  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n  - There will never be more than N-1 and N.\n\n",
                      "markdown": "`  The compatibility guarantee is:\n  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n  - There will never be more than N-1 and N.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/HTTP.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 43,
                  "endLine": 38,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  instance is not configurable.\n\n  The compatibility guarantee is:\n  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n",
                    "rendered": {
                      "text": "  instance is not configurable.\n\n  The compatibility guarantee is:\n  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n",
                      "markdown": "`  instance is not configurable.\n\n  The compatibility guarantee is:\n  - A bump of N will be a major bump of the service version\n  - A bump of N will retain support for N-1, dropping N-2 if present.\n  - A major bump of the service version may not increase N.\n  - A major bump of the service version may drop N-1 support without adding N+1.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/HTTP.md"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 74,
                  "endLine": 33,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n### `ingestion` endpoint\n- `/vN/raw` and `/vN/event`, takes in protobuf formatted raw metrics.  This endpoint is intended for gostatsd to\n  gostatsd communication only, and thus not documented. This is to deter a service which may not bother to consolidate\n  metrics, which would be detrimental to the health of the aggregation service. The version spoken by a forwarding\n  instance is not configurable.\n\n",
                    "rendered": {
                      "text": "\n### `ingestion` endpoint\n- `/vN/raw` and `/vN/event`, takes in protobuf formatted raw metrics.  This endpoint is intended for gostatsd to\n  gostatsd communication only, and thus not documented. This is to deter a service which may not bother to consolidate\n  metrics, which would be detrimental to the health of the aggregation service. The version spoken by a forwarding\n  instance is not configurable.\n\n",
                      "markdown": "`\n### `ingestion` endpoint\n- `/vN/raw` and `/vN/event`, takes in protobuf formatted raw metrics.  This endpoint is intended for gostatsd to\n  gostatsd communication only, and thus not documented. This is to deter a service which may not bother to consolidate\n  metrics, which would be detrimental to the health of the aggregation service. The version spoken by a forwarding\n  instance is not configurable.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 97,
                  "endLine": 86,
                  "endColumn": 101,
                  "snippet": {
                    "text": "| Channel name              | Additional tags | Description\n| ------------------------- | --------------- | -----------\n| dispatch_aggregator_map   | aggregator_id   | Channel to dispatch metric maps to a given aggregator.\n| backend_events_sem        |                 | Semaphore limiting the number of events in flight at once.  Corresponds to\n|                           |                 | the `--max-concurrent-events` flag.\n\n\n",
                    "rendered": {
                      "text": "| Channel name              | Additional tags | Description\n| ------------------------- | --------------- | -----------\n| dispatch_aggregator_map   | aggregator_id   | Channel to dispatch metric maps to a given aggregator.\n| backend_events_sem        |                 | Semaphore limiting the number of events in flight at once.  Corresponds to\n|                           |                 | the `--max-concurrent-events` flag.\n\n\n",
                      "markdown": "`| Channel name              | Additional tags | Description\n| ------------------------- | --------------- | -----------\n| dispatch_aggregator_map   | aggregator_id   | Channel to dispatch metric maps to a given aggregator.\n| backend_events_sem        |                 | Semaphore limiting the number of events in flight at once.  Corresponds to\n|                           |                 | the `--max-concurrent-events` flag.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 80,
                  "endLine": 79,
                  "endColumn": 84,
                  "snippet": {
                    "text": "| server-name   | The name of an http-server as specified in the config file\n\nA number of channels are tracked internally, they emit metrics under the channel.* space.  They will all have a\nchannel tag, and may have additional tags specified below.  Channels are sampled at a regular interval. After a\nflush, basic stats are sent about the data sampled (internal metrics lag regular metrics by a flush interval) and\nthe samples are reset.\n\n",
                    "rendered": {
                      "text": "| server-name   | The name of an http-server as specified in the config file\n\nA number of channels are tracked internally, they emit metrics under the channel.* space.  They will all have a\nchannel tag, and may have additional tags specified below.  Channels are sampled at a regular interval. After a\nflush, basic stats are sent about the data sampled (internal metrics lag regular metrics by a flush interval) and\nthe samples are reset.\n\n",
                      "markdown": "`| server-name   | The name of an http-server as specified in the config file\n\nA number of channels are tracked internally, they emit metrics under the channel.* space.  They will all have a\nchannel tag, and may have additional tags specified below.  Channels are sampled at a regular interval. After a\nflush, basic stats are sent about the data sampled (internal metrics lag regular metrics by a flush interval) and\nthe samples are reset.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 147,
                  "endLine": 36,
                  "endColumn": 151,
                  "snippet": {
                    "text": " The last sample seen\n| channel.capacity                            | gauge (flush)         | channel                      | The capacity of the channel\n| channel.samples                             | gauge (flush)         | channel                      | The number of samples seen (guaranteed to be at least 1)\n| heartbeat                                   | reported (flush)      | version, commit              | The value 1, tagged by the version (git tag) and short commit hash\n| flusher.total_time                          | gauge (time)          |                              | Time taken to flus",
                    "rendered": {
                      "text": " The last sample seen\n| channel.capacity                            | gauge (flush)         | channel                      | The capacity of the channel\n| channel.samples                             | gauge (flush)         | channel                      | The number of samples seen (guaranteed to be at least 1)\n| heartbeat                                   | reported (flush)      | version, commit              | The value 1, tagged by the version (git tag) and short commit hash\n| flusher.total_time                          | gauge (time)          |                              | Time taken to flus",
                      "markdown": "` The last sample seen\n| channel.capacity                            | gauge (flush)         | channel                      | The capacity of the channel\n| channel.samples                             | gauge (flush)         | channel                      | The number of samples seen (guaranteed to be at least 1)\n| heartbeat                                   | reported (flush)      | version, commit              | The value 1, tagged by the version (git tag) and short commit hash\n| flusher.total_time                          | gauge (time)          |                              | Time taken to flus`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 27,
                  "endLine": 71,
                  "endColumn": 32,
                  "snippet": {
                    "text": "| aggregator_id | The index of an aggregator, the amount corresponds to the --max-workers flag\n| channel       | The name of an internal channel\n| version       | The git tag of the build\n| commit        | The short git commit of the build\n| backend       | The backend sending a particular metric\n| type          | Either metric or event for cloudprovider.hosts_queued, or event for cloudprovider.items_queued\n| result        | Success to indicate a batch of metrics was successfully processed, failure to indicate a batch of metrics was not processed, with additional failure tag for why)\n",
                    "rendered": {
                      "text": "| aggregator_id | The index of an aggregator, the amount corresponds to the --max-workers flag\n| channel       | The name of an internal channel\n| version       | The git tag of the build\n| commit        | The short git commit of the build\n| backend       | The backend sending a particular metric\n| type          | Either metric or event for cloudprovider.hosts_queued, or event for cloudprovider.items_queued\n| result        | Success to indicate a batch of metrics was successfully processed, failure to indicate a batch of metrics was not processed, with additional failure tag for why)\n",
                      "markdown": "`| aggregator_id | The index of an aggregator, the amount corresponds to the --max-workers flag\n| channel       | The name of an internal channel\n| version       | The git tag of the build\n| commit        | The short git commit of the build\n| backend       | The backend sending a particular metric\n| type          | Either metric or event for cloudprovider.hosts_queued, or event for cloudprovider.items_queued\n| result        | Success to indicate a batch of metrics was successfully processed, failure to indicate a batch of metrics was not processed, with additional failure tag for why)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 21,
                  "endLine": 70,
                  "endColumn": 26,
                  "snippet": {
                    "text": "| ------------- | -----------\n| aggregator_id | The index of an aggregator, the amount corresponds to the --max-workers flag\n| channel       | The name of an internal channel\n| version       | The git tag of the build\n| commit        | The short git commit of the build\n| backend       | The backend sending a particular metric\n| type          | Either metric or event for cloudprovider.hosts_queued, or event for cloudprovider.items_queued\n",
                    "rendered": {
                      "text": "| ------------- | -----------\n| aggregator_id | The index of an aggregator, the amount corresponds to the --max-workers flag\n| channel       | The name of an internal channel\n| version       | The git tag of the build\n| commit        | The short git commit of the build\n| backend       | The backend sending a particular metric\n| type          | Either metric or event for cloudprovider.hosts_queued, or event for cloudprovider.items_queued\n",
                      "markdown": "`| ------------- | -----------\n| aggregator_id | The index of an aggregator, the amount corresponds to the --max-workers flag\n| channel       | The name of an internal channel\n| version       | The git tag of the build\n| commit        | The short git commit of the build\n| backend       | The backend sending a particular metric\n| type          | Either metric or event for cloudprovider.hosts_queued, or event for cloudprovider.items_queued\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 102,
                  "endLine": 38,
                  "endColumn": 108,
                  "snippet": {
                    "text": "uaranteed to be at least 1)\n| heartbeat                                   | reported (flush)      | version, commit              | The value 1, tagged by the version (git tag) and short commit hash\n| flusher.total_time                          | gauge (time)          |                              | Time taken to flush all metrics to all backends for the flush interval\n| backend.created                             | gauge (cumulative)    | backend                      | Lifetime number of metric batches generated by the backend\n| backend.create.failed                       | gauge (cumulative)    | ",
                    "rendered": {
                      "text": "uaranteed to be at least 1)\n| heartbeat                                   | reported (flush)      | version, commit              | The value 1, tagged by the version (git tag) and short commit hash\n| flusher.total_time                          | gauge (time)          |                              | Time taken to flush all metrics to all backends for the flush interval\n| backend.created                             | gauge (cumulative)    | backend                      | Lifetime number of metric batches generated by the backend\n| backend.create.failed                       | gauge (cumulative)    | ",
                      "markdown": "`uaranteed to be at least 1)\n| heartbeat                                   | reported (flush)      | version, commit              | The value 1, tagged by the version (git tag) and short commit hash\n| flusher.total_time                          | gauge (time)          |                              | Time taken to flush all metrics to all backends for the flush interval\n| backend.created                             | gauge (cumulative)    | backend                      | Lifetime number of metric batches generated by the backend\n| backend.create.failed                       | gauge (cumulative)    | `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 106,
                  "endLine": 25,
                  "endColumn": 112,
                  "snippet": {
                    "text": " datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time taken to process all synchronous flush actions\n| aggregator.reset_time                       | gauge (time)          | aggregator_id                | The time taken to reset the aggregator after flush\n| parser.bad_lines_seen                       | gauge (sparse)        |                              | The number of unparseable lines\n| parser.events_received                      | reported              |                              | The number of events",
                    "rendered": {
                      "text": " datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time taken to process all synchronous flush actions\n| aggregator.reset_time                       | gauge (time)          | aggregator_id                | The time taken to reset the aggregator after flush\n| parser.bad_lines_seen                       | gauge (sparse)        |                              | The number of unparseable lines\n| parser.events_received                      | reported              |                              | The number of events",
                      "markdown": "` datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time taken to process all synchronous flush actions\n| aggregator.reset_time                       | gauge (time)          | aggregator_id                | The time taken to reset the aggregator after flush\n| parser.bad_lines_seen                       | gauge (sparse)        |                              | The number of unparseable lines\n| parser.events_received                      | reported              |                              | The number of events`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 106,
                  "endLine": 24,
                  "endColumn": 112,
                  "snippet": {
                    "text": "he time taken (in ms) to aggregate all counter and timer\n|                                             |                       |                              | datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time taken to process all synchronous flush actions\n| aggregator.reset_time                       | gauge (time)          | aggregator_id                | The time taken to reset the aggregator after flush\n| parser.bad_lines_seen                       | gauge (sparse)        |                            ",
                    "rendered": {
                      "text": "he time taken (in ms) to aggregate all counter and timer\n|                                             |                       |                              | datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time taken to process all synchronous flush actions\n| aggregator.reset_time                       | gauge (time)          | aggregator_id                | The time taken to reset the aggregator after flush\n| parser.bad_lines_seen                       | gauge (sparse)        |                            ",
                      "markdown": "`he time taken (in ms) to aggregate all counter and timer\n|                                             |                       |                              | datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time taken to process all synchronous flush actions\n| aggregator.reset_time                       | gauge (time)          | aggregator_id                | The time taken to reset the aggregator after flush\n| parser.bad_lines_seen                       | gauge (sparse)        |                            `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/lyvd/panic-at-the-distro-malicious-apks/datasets/upstream_repos/gostatsd.zip/METRICS.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 106,
                  "endLine": 22,
                  "endColumn": 112,
                  "snippet": {
                    "text": "--------- | -----------\n| aggregator.metricmaps_received              | gauge (flush)         | aggregator_id                | The number of datapoint batches received during the flush interval\n| aggregator.aggregation_time                 | gauge (time)          | aggregator_id                | The time taken (in ms) to aggregate all counter and timer\n|                                             |                       |                              | datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time ta",
                    "rendered": {
                      "text": "--------- | -----------\n| aggregator.metricmaps_received              | gauge (flush)         | aggregator_id                | The number of datapoint batches received during the flush interval\n| aggregator.aggregation_time                 | gauge (time)          | aggregator_id                | The time taken (in ms) to aggregate all counter and timer\n|                                             |                       |                              | datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time ta",
                      "markdown": "`--------- | -----------\n| aggregator.metricmaps_received              | gauge (flush)         | aggregator_id                | The number of datapoint batches received during the flush interval\n| aggregator.aggregation_time                 | gauge (time)          | aggregator_id                | The time taken (in ms) to aggregate all counter and timer\n|                                             |                       |                              | datapoints in this flush interval\n| aggregator.process_time                     | gauge (time)          | aggregator_id                | The time ta`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}