{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 2091,
                  "startColumn": 33,
                  "endLine": 2091,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            &secure_channel_ctx->cert_store,\r\n            &secure_channel_ctx->pcerts,\r\n            &secure_channel_ctx->crypto_provider,\r\n            &secure_channel_ctx->private_key);\r\n\r\n        if (err) {\r\n            AWS_LOGF_ERROR(\r\n",
                    "rendered": {
                      "text": "            &secure_channel_ctx->cert_store,\r\n            &secure_channel_ctx->pcerts,\r\n            &secure_channel_ctx->crypto_provider,\r\n            &secure_channel_ctx->private_key);\r\n\r\n        if (err) {\r\n            AWS_LOGF_ERROR(\r\n",
                      "markdown": "`            &secure_channel_ctx->cert_store,\r\n            &secure_channel_ctx->pcerts,\r\n            &secure_channel_ctx->crypto_provider,\r\n            &secure_channel_ctx->private_key);\r\n\r\n        if (err) {\r\n            AWS_LOGF_ERROR(\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 2082,
                  "startColumn": 75,
                  "endLine": 2082,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        }\r\n\r\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\r\n        struct aws_byte_cursor pk_cur = aws_byte_cursor_from_buf(&options->private_key);\r\n        int err = aws_import_key_pair_to_cert_context(\r\n            alloc,\r\n            &cert_chain_cur,\r\n",
                    "rendered": {
                      "text": "        }\r\n\r\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\r\n        struct aws_byte_cursor pk_cur = aws_byte_cursor_from_buf(&options->private_key);\r\n        int err = aws_import_key_pair_to_cert_context(\r\n            alloc,\r\n            &cert_chain_cur,\r\n",
                      "markdown": "`        }\r\n\r\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\r\n        struct aws_byte_cursor pk_cur = aws_byte_cursor_from_buf(&options->private_key);\r\n        int err = aws_import_key_pair_to_cert_context(\r\n            alloc,\r\n            &cert_chain_cur,\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 2075,
                  "startColumn": 68,
                  "endLine": 2075,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            goto clean_up;\r\n        }\r\n\r\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\r\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\r\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\r\n            goto clean_up;\r\n",
                    "rendered": {
                      "text": "            goto clean_up;\r\n        }\r\n\r\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\r\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\r\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\r\n            goto clean_up;\r\n",
                      "markdown": "`            goto clean_up;\r\n        }\r\n\r\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\r\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\r\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\r\n            goto clean_up;\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 2075,
                  "startColumn": 39,
                  "endLine": 2075,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            goto clean_up;\r\n        }\r\n\r\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\r\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\r\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\r\n            goto clean_up;\r\n",
                    "rendered": {
                      "text": "            goto clean_up;\r\n        }\r\n\r\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\r\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\r\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\r\n            goto clean_up;\r\n",
                      "markdown": "`            goto clean_up;\r\n        }\r\n\r\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\r\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\r\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\r\n            goto clean_up;\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 2065,
                  "startColumn": 105,
                  "endLine": 2065,
                  "endColumn": 116,
                  "snippet": {
                    "text": "        secure_channel_ctx->credentials.paCred = &secure_channel_ctx->pcerts;\r\n        secure_channel_ctx->credentials.cCreds = 1;\r\n        /* if using traditional PEM armored PKCS#7 and ASN Encoding public/private key pairs */\r\n    } else if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\r\n\r\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: certificate and key have been set, setting them up now.\");\r\n\r\n",
                    "rendered": {
                      "text": "        secure_channel_ctx->credentials.paCred = &secure_channel_ctx->pcerts;\r\n        secure_channel_ctx->credentials.cCreds = 1;\r\n        /* if using traditional PEM armored PKCS#7 and ASN Encoding public/private key pairs */\r\n    } else if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\r\n\r\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: certificate and key have been set, setting them up now.\");\r\n\r\n",
                      "markdown": "`        secure_channel_ctx->credentials.paCred = &secure_channel_ctx->pcerts;\r\n        secure_channel_ctx->credentials.cCreds = 1;\r\n        /* if using traditional PEM armored PKCS#7 and ASN Encoding public/private key pairs */\r\n    } else if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\r\n\r\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: certificate and key have been set, setting them up now.\");\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 1906,
                  "startColumn": 44,
                  "endLine": 1906,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    }\r\n\r\n    if (secure_channel_ctx->private_key) {\r\n        CryptDestroyKey(secure_channel_ctx->private_key);\r\n    }\r\n\r\n    if (secure_channel_ctx->crypto_provider) {\r\n",
                    "rendered": {
                      "text": "    }\r\n\r\n    if (secure_channel_ctx->private_key) {\r\n        CryptDestroyKey(secure_channel_ctx->private_key);\r\n    }\r\n\r\n    if (secure_channel_ctx->crypto_provider) {\r\n",
                      "markdown": "`    }\r\n\r\n    if (secure_channel_ctx->private_key) {\r\n        CryptDestroyKey(secure_channel_ctx->private_key);\r\n    }\r\n\r\n    if (secure_channel_ctx->crypto_provider) {\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 1905,
                  "startColumn": 28,
                  "endLine": 1905,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        return;\r\n    }\r\n\r\n    if (secure_channel_ctx->private_key) {\r\n        CryptDestroyKey(secure_channel_ctx->private_key);\r\n    }\r\n\r\n",
                    "rendered": {
                      "text": "        return;\r\n    }\r\n\r\n    if (secure_channel_ctx->private_key) {\r\n        CryptDestroyKey(secure_channel_ctx->private_key);\r\n    }\r\n\r\n",
                      "markdown": "`        return;\r\n    }\r\n\r\n    if (secure_channel_ctx->private_key) {\r\n        CryptDestroyKey(secure_channel_ctx->private_key);\r\n    }\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 14,
                  "endLine": 60,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    HCERTSTORE cert_store;\r\n    HCERTSTORE custom_trust_store;\r\n    HCRYPTPROV crypto_provider;\r\n    HCRYPTKEY private_key;\r\n    bool verify_peer;\r\n    bool should_free_pcerts;\r\n};\r\n",
                    "rendered": {
                      "text": "    HCERTSTORE cert_store;\r\n    HCERTSTORE custom_trust_store;\r\n    HCRYPTPROV crypto_provider;\r\n    HCRYPTKEY private_key;\r\n    bool verify_peer;\r\n    bool should_free_pcerts;\r\n};\r\n",
                      "markdown": "`    HCERTSTORE cert_store;\r\n    HCERTSTORE custom_trust_store;\r\n    HCRYPTPROV crypto_provider;\r\n    HCRYPTKEY private_key;\r\n    bool verify_peer;\r\n    bool should_free_pcerts;\r\n};\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 15,
                  "endLine": 160,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    AWS_LOGF_WARN(\r\n        AWS_LS_IO_TLS,\r\n        \"static: Running on older version of windows, ALPN is not supported. \"\r\n        \"Please update your OS to take advantage of modern features.\");\r\n#else\r\n    AWS_LOGF_WARN(\r\n        AWS_LS_IO_TLS,\r\n",
                    "rendered": {
                      "text": "    AWS_LOGF_WARN(\r\n        AWS_LS_IO_TLS,\r\n        \"static: Running on older version of windows, ALPN is not supported. \"\r\n        \"Please update your OS to take advantage of modern features.\");\r\n#else\r\n    AWS_LOGF_WARN(\r\n        AWS_LS_IO_TLS,\r\n",
                      "markdown": "`    AWS_LOGF_WARN(\r\n        AWS_LS_IO_TLS,\r\n        \"static: Running on older version of windows, ALPN is not supported. \"\r\n        \"Please update your OS to take advantage of modern features.\");\r\n#else\r\n    AWS_LOGF_WARN(\r\n        AWS_LS_IO_TLS,\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/secure_channel_tls_handler.c"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 29,
                  "endLine": 257,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            &cert_chain_ctx)) {\r\n        AWS_LOGF_ERROR(\r\n            AWS_LS_IO_TLS,\r\n            \"id=%p: unable to find certificate in chain with SECURITY_STATUS %d.\",\r\n            (void *)handler,\r\n            (int)status);\r\n        goto done;\r\n",
                    "rendered": {
                      "text": "            &cert_chain_ctx)) {\r\n        AWS_LOGF_ERROR(\r\n            AWS_LS_IO_TLS,\r\n            \"id=%p: unable to find certificate in chain with SECURITY_STATUS %d.\",\r\n            (void *)handler,\r\n            (int)status);\r\n        goto done;\r\n",
                      "markdown": "`            &cert_chain_ctx)) {\r\n        AWS_LOGF_ERROR(\r\n            AWS_LS_IO_TLS,\r\n            \"id=%p: unable to find certificate in chain with SECURITY_STATUS %d.\",\r\n            (void *)handler,\r\n            (int)status);\r\n        goto done;\r\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/iocp/socket.c"
                },
                "region": {
                  "startLine": 1023,
                  "startColumn": 56,
                  "endLine": 1023,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_IO_SOCKET,\n        \"id=%p handle=%p: connection pending, scheduling timeout task\",\n        (void *)socket,\n        (void *)socket->io_handle.data.handle);\n    aws_event_loop_schedule_task_future(connect_loop, &connect_args->timeout_task, time_to_run);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_TRACE(\n        AWS_LS_IO_SOCKET,\n        \"id=%p handle=%p: connection pending, scheduling timeout task\",\n        (void *)socket,\n        (void *)socket->io_handle.data.handle);\n    aws_event_loop_schedule_task_future(connect_loop, &connect_args->timeout_task, time_to_run);\n",
                      "markdown": "`\n    AWS_LOGF_TRACE(\n        AWS_LS_IO_SOCKET,\n        \"id=%p handle=%p: connection pending, scheduling timeout task\",\n        (void *)socket,\n        (void *)socket->io_handle.data.handle);\n    aws_event_loop_schedule_task_future(connect_loop, &connect_args->timeout_task, time_to_run);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/iocp/socket.c"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 49,
                  "endLine": 900,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    (void)status;\n    struct socket_connect_args *socket_args = args;\n\n    AWS_LOGF_TRACE(AWS_LS_IO_SOCKET, \"task_id=%p: timeout task triggered, evaluating timeouts.\", (void *)task);\n    if (socket_args->socket) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SOCKET,\n",
                    "rendered": {
                      "text": "    (void)status;\n    struct socket_connect_args *socket_args = args;\n\n    AWS_LOGF_TRACE(AWS_LS_IO_SOCKET, \"task_id=%p: timeout task triggered, evaluating timeouts.\", (void *)task);\n    if (socket_args->socket) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SOCKET,\n",
                      "markdown": "`    (void)status;\n    struct socket_connect_args *socket_args = args;\n\n    AWS_LOGF_TRACE(AWS_LS_IO_SOCKET, \"task_id=%p: timeout task triggered, evaluating timeouts.\", (void *)task);\n    if (socket_args->socket) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SOCKET,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1308,
                  "startColumn": 18,
                  "endLine": 1308,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    CK_ULONG ulOldRandomLen;\n    CK_BYTE * pOldRandomA;\n    CK_ULONG ulNewPasswordLen;\n    CK_BYTE * pNewPassword;\n    CK_ULONG ulNewPublicDataLen;\n    CK_BYTE * pNewPublicData;\n    CK_ULONG ulNewRandomLen;\n",
                    "rendered": {
                      "text": "    CK_ULONG ulOldRandomLen;\n    CK_BYTE * pOldRandomA;\n    CK_ULONG ulNewPasswordLen;\n    CK_BYTE * pNewPassword;\n    CK_ULONG ulNewPublicDataLen;\n    CK_BYTE * pNewPublicData;\n    CK_ULONG ulNewRandomLen;\n",
                      "markdown": "`    CK_ULONG ulOldRandomLen;\n    CK_BYTE * pOldRandomA;\n    CK_ULONG ulNewPasswordLen;\n    CK_BYTE * pNewPassword;\n    CK_ULONG ulNewPublicDataLen;\n    CK_BYTE * pNewPublicData;\n    CK_ULONG ulNewRandomLen;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1307,
                  "startColumn": 18,
                  "endLine": 1307,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    CK_BYTE * pOldPublicData;\n    CK_ULONG ulOldRandomLen;\n    CK_BYTE * pOldRandomA;\n    CK_ULONG ulNewPasswordLen;\n    CK_BYTE * pNewPassword;\n    CK_ULONG ulNewPublicDataLen;\n    CK_BYTE * pNewPublicData;\n",
                    "rendered": {
                      "text": "    CK_BYTE * pOldPublicData;\n    CK_ULONG ulOldRandomLen;\n    CK_BYTE * pOldRandomA;\n    CK_ULONG ulNewPasswordLen;\n    CK_BYTE * pNewPassword;\n    CK_ULONG ulNewPublicDataLen;\n    CK_BYTE * pNewPublicData;\n",
                      "markdown": "`    CK_BYTE * pOldPublicData;\n    CK_ULONG ulOldRandomLen;\n    CK_BYTE * pOldRandomA;\n    CK_ULONG ulNewPasswordLen;\n    CK_BYTE * pNewPassword;\n    CK_ULONG ulNewPublicDataLen;\n    CK_BYTE * pNewPublicData;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1302,
                  "startColumn": 18,
                  "endLine": 1302,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    CK_ULONG ulOldWrappedXLen;\n    CK_BYTE * pOldWrappedX;\n    CK_ULONG ulOldPasswordLen;\n    CK_BYTE * pOldPassword;\n    CK_ULONG ulOldPublicDataLen;\n    CK_BYTE * pOldPublicData;\n    CK_ULONG ulOldRandomLen;\n",
                    "rendered": {
                      "text": "    CK_ULONG ulOldWrappedXLen;\n    CK_BYTE * pOldWrappedX;\n    CK_ULONG ulOldPasswordLen;\n    CK_BYTE * pOldPassword;\n    CK_ULONG ulOldPublicDataLen;\n    CK_BYTE * pOldPublicData;\n    CK_ULONG ulOldRandomLen;\n",
                      "markdown": "`    CK_ULONG ulOldWrappedXLen;\n    CK_BYTE * pOldWrappedX;\n    CK_ULONG ulOldPasswordLen;\n    CK_BYTE * pOldPassword;\n    CK_ULONG ulOldPublicDataLen;\n    CK_BYTE * pOldPublicData;\n    CK_ULONG ulOldRandomLen;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1301,
                  "startColumn": 18,
                  "endLine": 1301,
                  "endColumn": 26,
                  "snippet": {
                    "text": "struct CK_SKIPJACK_RELAYX_PARAMS {\n    CK_ULONG ulOldWrappedXLen;\n    CK_BYTE * pOldWrappedX;\n    CK_ULONG ulOldPasswordLen;\n    CK_BYTE * pOldPassword;\n    CK_ULONG ulOldPublicDataLen;\n    CK_BYTE * pOldPublicData;\n",
                    "rendered": {
                      "text": "struct CK_SKIPJACK_RELAYX_PARAMS {\n    CK_ULONG ulOldWrappedXLen;\n    CK_BYTE * pOldWrappedX;\n    CK_ULONG ulOldPasswordLen;\n    CK_BYTE * pOldPassword;\n    CK_ULONG ulOldPublicDataLen;\n    CK_BYTE * pOldPublicData;\n",
                      "markdown": "`struct CK_SKIPJACK_RELAYX_PARAMS {\n    CK_ULONG ulOldWrappedXLen;\n    CK_BYTE * pOldWrappedX;\n    CK_ULONG ulOldPasswordLen;\n    CK_BYTE * pOldPassword;\n    CK_ULONG ulOldPublicDataLen;\n    CK_BYTE * pOldPublicData;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 15,
                  "endLine": 1286,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nstruct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pPassword;\n    CK_ULONG ulPublicDataLen;\n    CK_BYTE * pPublicData;\n    CK_ULONG ulPAndGLen;\n",
                    "rendered": {
                      "text": "\nstruct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pPassword;\n    CK_ULONG ulPublicDataLen;\n    CK_BYTE * pPublicData;\n    CK_ULONG ulPAndGLen;\n",
                      "markdown": "`\nstruct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pPassword;\n    CK_ULONG ulPublicDataLen;\n    CK_BYTE * pPublicData;\n    CK_ULONG ulPAndGLen;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1285,
                  "startColumn": 15,
                  "endLine": 1285,
                  "endColumn": 23,
                  "snippet": {
                    "text": "};\n\nstruct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pPassword;\n    CK_ULONG ulPublicDataLen;\n    CK_BYTE * pPublicData;\n",
                    "rendered": {
                      "text": "};\n\nstruct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pPassword;\n    CK_ULONG ulPublicDataLen;\n    CK_BYTE * pPublicData;\n",
                      "markdown": "`};\n\nstruct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pPassword;\n    CK_ULONG ulPublicDataLen;\n    CK_BYTE * pPublicData;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1228,
                  "startColumn": 15,
                  "endLine": 1228,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n};\n\nstruct CK_RC2_CBC_PARAMS {\n",
                    "rendered": {
                      "text": "    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n};\n\nstruct CK_RC2_CBC_PARAMS {\n",
                      "markdown": "`    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n};\n\nstruct CK_RC2_CBC_PARAMS {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1227,
                  "startColumn": 19,
                  "endLine": 1227,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;\n    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n};\n\n",
                    "rendered": {
                      "text": "    CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;\n    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n};\n\n",
                      "markdown": "`    CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;\n    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1216,
                  "startColumn": 17,
                  "endLine": 1216,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG * ulPasswordLen;\n};\n\nstruct CK_PKCS5_PBKD2_PARAMS2 {\n",
                    "rendered": {
                      "text": "    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG * ulPasswordLen;\n};\n\nstruct CK_PKCS5_PBKD2_PARAMS2 {\n",
                      "markdown": "`    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG * ulPasswordLen;\n};\n\nstruct CK_PKCS5_PBKD2_PARAMS2 {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 19,
                  "endLine": 1215,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;\n    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG * ulPasswordLen;\n};\n\n",
                    "rendered": {
                      "text": "    CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;\n    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG * ulPasswordLen;\n};\n\n",
                      "markdown": "`    CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE prf;\n    void * pPrfData;\n    CK_ULONG ulPrfDataLen;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG * ulPasswordLen;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1201,
                  "startColumn": 15,
                  "endLine": 1201,
                  "endColumn": 23,
                  "snippet": {
                    "text": "struct CK_PBE_PARAMS {\n    CK_BYTE * pInitVector;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pSalt;\n    CK_ULONG ulSaltLen;\n    CK_ULONG ulIteration;\n",
                    "rendered": {
                      "text": "struct CK_PBE_PARAMS {\n    CK_BYTE * pInitVector;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pSalt;\n    CK_ULONG ulSaltLen;\n    CK_ULONG ulIteration;\n",
                      "markdown": "`struct CK_PBE_PARAMS {\n    CK_BYTE * pInitVector;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pSalt;\n    CK_ULONG ulSaltLen;\n    CK_ULONG ulIteration;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 1200,
                  "startColumn": 19,
                  "endLine": 1200,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nstruct CK_PBE_PARAMS {\n    CK_BYTE * pInitVector;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pSalt;\n    CK_ULONG ulSaltLen;\n",
                    "rendered": {
                      "text": "\nstruct CK_PBE_PARAMS {\n    CK_BYTE * pInitVector;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pSalt;\n    CK_ULONG ulSaltLen;\n",
                      "markdown": "`\nstruct CK_PBE_PARAMS {\n    CK_BYTE * pInitVector;\n    CK_UTF8CHAR * pPassword;\n    CK_ULONG ulPasswordLen;\n    CK_BYTE * pSalt;\n    CK_ULONG ulSaltLen;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 12,
                  "endLine": 721,
                  "endColumn": 22,
                  "snippet": {
                    "text": "#define CKO_CERTIFICATE 0x00000001UL\n#define CKO_PUBLIC_KEY 0x00000002UL\n#define CKO_PRIVATE_KEY 0x00000003UL\n#define CKO_SECRET_KEY 0x00000004UL\n#define CKO_HW_FEATURE 0x00000005UL\n#define CKO_DOMAIN_PARAMETERS 0x00000006UL\n#define CKO_MECHANISM 0x00000007UL\n",
                    "rendered": {
                      "text": "#define CKO_CERTIFICATE 0x00000001UL\n#define CKO_PUBLIC_KEY 0x00000002UL\n#define CKO_PRIVATE_KEY 0x00000003UL\n#define CKO_SECRET_KEY 0x00000004UL\n#define CKO_HW_FEATURE 0x00000005UL\n#define CKO_DOMAIN_PARAMETERS 0x00000006UL\n#define CKO_MECHANISM 0x00000007UL\n",
                      "markdown": "`#define CKO_CERTIFICATE 0x00000001UL\n#define CKO_PUBLIC_KEY 0x00000002UL\n#define CKO_PRIVATE_KEY 0x00000003UL\n#define CKO_SECRET_KEY 0x00000004UL\n#define CKO_HW_FEATURE 0x00000005UL\n#define CKO_DOMAIN_PARAMETERS 0x00000006UL\n#define CKO_MECHANISM 0x00000007UL\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 12,
                  "endLine": 720,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define CKO_DATA 0x00000000UL\n#define CKO_CERTIFICATE 0x00000001UL\n#define CKO_PUBLIC_KEY 0x00000002UL\n#define CKO_PRIVATE_KEY 0x00000003UL\n#define CKO_SECRET_KEY 0x00000004UL\n#define CKO_HW_FEATURE 0x00000005UL\n#define CKO_DOMAIN_PARAMETERS 0x00000006UL\n",
                    "rendered": {
                      "text": "#define CKO_DATA 0x00000000UL\n#define CKO_CERTIFICATE 0x00000001UL\n#define CKO_PUBLIC_KEY 0x00000002UL\n#define CKO_PRIVATE_KEY 0x00000003UL\n#define CKO_SECRET_KEY 0x00000004UL\n#define CKO_HW_FEATURE 0x00000005UL\n#define CKO_DOMAIN_PARAMETERS 0x00000006UL\n",
                      "markdown": "`#define CKO_DATA 0x00000000UL\n#define CKO_CERTIFICATE 0x00000001UL\n#define CKO_PUBLIC_KEY 0x00000002UL\n#define CKO_PRIVATE_KEY 0x00000003UL\n#define CKO_SECRET_KEY 0x00000004UL\n#define CKO_HW_FEATURE 0x00000005UL\n#define CKO_DOMAIN_PARAMETERS 0x00000006UL\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11/v2.40/pkcs11.h"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 20,
                  "endLine": 519,
                  "endColumn": 30,
                  "snippet": {
                    "text": "#define CKM_IDEA_MAC 0x00000343UL\n#define CKM_IDEA_MAC_GENERAL 0x00000344UL\n#define CKM_IDEA_CBC_PAD 0x00000345UL\n#define CKM_GENERIC_SECRET_KEY_GEN 0x00000350UL\n#define CKM_CONCATENATE_BASE_AND_KEY 0x00000360UL\n#define CKM_CONCATENATE_BASE_AND_DATA 0x00000362UL\n#define CKM_CONCATENATE_DATA_AND_BASE 0x00000363UL\n",
                    "rendered": {
                      "text": "#define CKM_IDEA_MAC 0x00000343UL\n#define CKM_IDEA_MAC_GENERAL 0x00000344UL\n#define CKM_IDEA_CBC_PAD 0x00000345UL\n#define CKM_GENERIC_SECRET_KEY_GEN 0x00000350UL\n#define CKM_CONCATENATE_BASE_AND_KEY 0x00000360UL\n#define CKM_CONCATENATE_BASE_AND_DATA 0x00000362UL\n#define CKM_CONCATENATE_DATA_AND_BASE 0x00000363UL\n",
                      "markdown": "`#define CKM_IDEA_MAC 0x00000343UL\n#define CKM_IDEA_MAC_GENERAL 0x00000344UL\n#define CKM_IDEA_CBC_PAD 0x00000345UL\n#define CKM_GENERIC_SECRET_KEY_GEN 0x00000350UL\n#define CKM_CONCATENATE_BASE_AND_KEY 0x00000360UL\n#define CKM_CONCATENATE_BASE_AND_DATA 0x00000362UL\n#define CKM_CONCATENATE_DATA_AND_BASE 0x00000363UL\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/main_loop.c"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 77,
                  "endLine": 161,
                  "endColumn": 81,
                  "snippet": {
                    "text": "            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n",
                    "rendered": {
                      "text": "            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n",
                      "markdown": "`            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/main_loop.c"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 28,
                  "endLine": 162,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                timeout);\n",
                    "rendered": {
                      "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                timeout);\n",
                      "markdown": "`            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/main_loop.c"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 11,
                  "endLine": 158,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n            uint64_t timeout_ms64 = aws_timestamp_convert(timeout_ns, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_MILLIS, NULL);\n            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n",
                    "rendered": {
                      "text": "            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n            uint64_t timeout_ms64 = aws_timestamp_convert(timeout_ns, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_MILLIS, NULL);\n            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n",
                      "markdown": "`            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n            uint64_t timeout_ms64 = aws_timestamp_convert(timeout_ns, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_MILLIS, NULL);\n            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/main_loop.c"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 11,
                  "endLine": 153,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        if (use_default_timeout) {\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP, \"id=%p: no more scheduled tasks using default timeout.\", (void *)event_loop);\n            timeout = DEFAULT_TIMEOUT;\n        } else {\n            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n",
                    "rendered": {
                      "text": "        if (use_default_timeout) {\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP, \"id=%p: no more scheduled tasks using default timeout.\", (void *)event_loop);\n            timeout = DEFAULT_TIMEOUT;\n        } else {\n            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n",
                      "markdown": "`        if (use_default_timeout) {\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP, \"id=%p: no more scheduled tasks using default timeout.\", (void *)event_loop);\n            timeout = DEFAULT_TIMEOUT;\n        } else {\n            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/main_loop.c"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 23,
                  "endLine": 62,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %d, and max events to process per tick %d\",\n        (void *)event_loop,\n        timeout,\n        MAX_EVENTS);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %d, and max events to process per tick %d\",\n        (void *)event_loop,\n        timeout,\n        MAX_EVENTS);\n",
                      "markdown": "`\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %d, and max events to process per tick %d\",\n        (void *)event_loop,\n        timeout,\n        MAX_EVENTS);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/main_loop.c"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 7,
                  "endLine": 56,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        return;\n    }\n\n    int timeout = DEFAULT_TIMEOUT;\n\n    struct epoll_event events[MAX_EVENTS];\n\n",
                    "rendered": {
                      "text": "        return;\n    }\n\n    int timeout = DEFAULT_TIMEOUT;\n\n    struct epoll_event events[MAX_EVENTS];\n\n",
                      "markdown": "`        return;\n    }\n\n    int timeout = DEFAULT_TIMEOUT;\n\n    struct epoll_event events[MAX_EVENTS];\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 23,
                  "endLine": 62,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        Verification of CreateArrayList succeeded. [0.05]\n        Verification of MakeEmpty succeeded. [0.03]\n        Verification of Select succeeded. [0.02]\n        Verification of Update succeeded. [0.05]\n        Verification of DisposeArrayList succeeded. [0.03]\n        Verification of Add succeeded. [0.44]\n        Verification of main_test succeeded. [0.67]\n",
                    "rendered": {
                      "text": "        Verification of CreateArrayList succeeded. [0.05]\n        Verification of MakeEmpty succeeded. [0.03]\n        Verification of Select succeeded. [0.02]\n        Verification of Update succeeded. [0.05]\n        Verification of DisposeArrayList succeeded. [0.03]\n        Verification of Add succeeded. [0.44]\n        Verification of main_test succeeded. [0.67]\n",
                      "markdown": "`        Verification of CreateArrayList succeeded. [0.05]\n        Verification of MakeEmpty succeeded. [0.03]\n        Verification of Select succeeded. [0.02]\n        Verification of Update succeeded. [0.05]\n        Verification of DisposeArrayList succeeded. [0.03]\n        Verification of Add succeeded. [0.44]\n        Verification of main_test succeeded. [0.67]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 7,
                  "endLine": 52,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n3. Run an interactive powershell in a container\n\n        docker run -it vcc powershell\n\n4. Inside the container check VCC works\n\n",
                    "rendered": {
                      "text": "\n3. Run an interactive powershell in a container\n\n        docker run -it vcc powershell\n\n4. Inside the container check VCC works\n\n",
                      "markdown": "`\n3. Run an interactive powershell in a container\n\n        docker run -it vcc powershell\n\n4. Inside the container check VCC works\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 7,
                  "endLine": 48,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n2. Build the image (this takes about 30 minutes)\n\n        docker build -t vcc docker-images/win10-vs2012/\n\n3. Run an interactive powershell in a container\n\n",
                    "rendered": {
                      "text": "\n2. Build the image (this takes about 30 minutes)\n\n        docker build -t vcc docker-images/win10-vs2012/\n\n3. Run an interactive powershell in a container\n\n",
                      "markdown": "`\n2. Build the image (this takes about 30 minutes)\n\n        docker build -t vcc docker-images/win10-vs2012/\n\n3. Run an interactive powershell in a container\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n1. Make sure that docker is running with Windows containers. Another good\nsanity check is to ensure `docker run hello-world` works as expected.\n\n2. Build the image (this takes about 30 minutes)\n",
                    "rendered": {
                      "text": "\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n1. Make sure that docker is running with Windows containers. Another good\nsanity check is to ensure `docker run hello-world` works as expected.\n\n2. Build the image (this takes about 30 minutes)\n",
                      "markdown": "`\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n1. Make sure that docker is running with Windows containers. Another good\nsanity check is to ensure `docker run hello-world` works as expected.\n\n2. Build the image (this takes about 30 minutes)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 49,
                  "endLine": 41,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n## VCC docker container\n\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n1. Make sure that docker is running with Windows containers. Another good\nsanity check is to ensure `docker run hello-world` works as expected.\n",
                    "rendered": {
                      "text": "\n## VCC docker container\n\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n1. Make sure that docker is running with Windows containers. Another good\nsanity check is to ensure `docker run hello-world` works as expected.\n",
                      "markdown": "`\n## VCC docker container\n\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n1. Make sure that docker is running with Windows containers. Another good\nsanity check is to ensure `docker run hello-world` works as expected.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 6,
                  "endLine": 39,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n        $ make\n\n## VCC docker container\n\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n",
                    "rendered": {
                      "text": "\n        $ make\n\n## VCC docker container\n\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n",
                      "markdown": "`\n        $ make\n\n## VCC docker container\n\nI've tested the following on Windows 10 1809 with Docker Desktop 2.2.03.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/README.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 68,
                  "endLine": 35,
                  "snippet": {
                    "text": "## Running proof regression\n\nThe following will check all proofs assuming VCC and make are on your path.\nFor obtaining VCC, see the next section on building VCC in a Windows docker\ncontainer.\n\n        $ make\n\n",
                    "rendered": {
                      "text": "## Running proof regression\n\nThe following will check all proofs assuming VCC and make are on your path.\nFor obtaining VCC, see the next section on building VCC in a Windows docker\ncontainer.\n\n        $ make\n\n",
                      "markdown": "`## Running proof regression\n\nThe following will check all proofs assuming VCC and make are on your path.\nFor obtaining VCC, see the next section on building VCC in a Windows docker\ncontainer.\n\n        $ make\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pem.c"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 76,
                  "endLine": 388,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n        size_t decoded_len = 0;\n        if (aws_base64_compute_decoded_len(&byte_cur, &decoded_len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_PEM, \"Failed to get length for decoded base64 pem object.\");\n            aws_raise_error(AWS_ERROR_PEM_MALFORMED);\n            goto on_error;\n        }\n",
                    "rendered": {
                      "text": "\n        size_t decoded_len = 0;\n        if (aws_base64_compute_decoded_len(&byte_cur, &decoded_len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_PEM, \"Failed to get length for decoded base64 pem object.\");\n            aws_raise_error(AWS_ERROR_PEM_MALFORMED);\n            goto on_error;\n        }\n",
                      "markdown": "`\n        size_t decoded_len = 0;\n        if (aws_base64_compute_decoded_len(&byte_cur, &decoded_len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_PEM, \"Failed to get length for decoded base64 pem object.\");\n            aws_raise_error(AWS_ERROR_PEM_MALFORMED);\n            goto on_error;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pem.c"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 75,
                  "endLine": 388,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n        size_t decoded_len = 0;\n        if (aws_base64_compute_decoded_len(&byte_cur, &decoded_len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_PEM, \"Failed to get length for decoded base64 pem object.\");\n            aws_raise_error(AWS_ERROR_PEM_MALFORMED);\n            goto on_error;\n        }\n",
                    "rendered": {
                      "text": "\n        size_t decoded_len = 0;\n        if (aws_base64_compute_decoded_len(&byte_cur, &decoded_len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_PEM, \"Failed to get length for decoded base64 pem object.\");\n            aws_raise_error(AWS_ERROR_PEM_MALFORMED);\n            goto on_error;\n        }\n",
                      "markdown": "`\n        size_t decoded_len = 0;\n        if (aws_base64_compute_decoded_len(&byte_cur, &decoded_len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_PEM, \"Failed to get length for decoded base64 pem object.\");\n            aws_raise_error(AWS_ERROR_PEM_MALFORMED);\n            goto on_error;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/closed-issue-message.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 27,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                    "rendered": {
                      "text": "                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n",
                      "markdown": "`                     ### ⚠️COMMENT VISIBILITY WARNING⚠️ \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 13,
                  "endLine": 743,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n    }\n\n",
                    "rendered": {
                      "text": "\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n    }\n\n",
                      "markdown": "`\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 742,
                  "startColumn": 29,
                  "endLine": 742,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        }\n\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n    }\n",
                    "rendered": {
                      "text": "        }\n\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n    }\n",
                      "markdown": "`        }\n\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 13,
                  "endLine": 741,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            *crypto_provider = 0;\n        }\n\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n",
                    "rendered": {
                      "text": "            *crypto_provider = 0;\n        }\n\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n",
                      "markdown": "`            *crypto_provider = 0;\n        }\n\n        if (*private_key_handle != 0) {\n            CryptDestroyKey(*private_key_handle);\n            *private_key_handle = 0;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 30,
                  "endLine": 721,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nclean_up:\n    aws_pem_objects_clean_up(&certificates);\n    aws_pem_objects_clean_up(&private_keys);\n\n    LocalFree(key);\n\n",
                    "rendered": {
                      "text": "\nclean_up:\n    aws_pem_objects_clean_up(&certificates);\n    aws_pem_objects_clean_up(&private_keys);\n\n    LocalFree(key);\n\n",
                      "markdown": "`\nclean_up:\n    aws_pem_objects_clean_up(&certificates);\n    aws_pem_objects_clean_up(&private_keys);\n\n    LocalFree(key);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 47,
                  "endLine": 709,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n#ifndef AWS_SUPPORT_WIN7\n        case AWS_CT_X509_ECC:\n            result = s_cert_context_import_ecc_private_key(*certs, alloc, key, decoded_len, uuid_wstr);\n            break;\n#endif /* AWS_SUPPORT_WIN7 */\n\n",
                    "rendered": {
                      "text": "\n#ifndef AWS_SUPPORT_WIN7\n        case AWS_CT_X509_ECC:\n            result = s_cert_context_import_ecc_private_key(*certs, alloc, key, decoded_len, uuid_wstr);\n            break;\n#endif /* AWS_SUPPORT_WIN7 */\n\n",
                      "markdown": "`\n#ifndef AWS_SUPPORT_WIN7\n        case AWS_CT_X509_ECC:\n            result = s_cert_context_import_ecc_private_key(*certs, alloc, key, decoded_len, uuid_wstr);\n            break;\n#endif /* AWS_SUPPORT_WIN7 */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 86,
                  "endLine": 704,
                  "endColumn": 97,
                  "snippet": {
                    "text": "    switch (cert_type) {\n        case AWS_CT_X509_RSA:\n            result = s_cert_context_import_rsa_private_key(\n                *certs, key, decoded_len, is_client_mode, uuid_wstr, crypto_provider, private_key_handle);\n            break;\n\n#ifndef AWS_SUPPORT_WIN7\n",
                    "rendered": {
                      "text": "    switch (cert_type) {\n        case AWS_CT_X509_RSA:\n            result = s_cert_context_import_rsa_private_key(\n                *certs, key, decoded_len, is_client_mode, uuid_wstr, crypto_provider, private_key_handle);\n            break;\n\n#ifndef AWS_SUPPORT_WIN7\n",
                      "markdown": "`    switch (cert_type) {\n        case AWS_CT_X509_RSA:\n            result = s_cert_context_import_rsa_private_key(\n                *certs, key, decoded_len, is_client_mode, uuid_wstr, crypto_provider, private_key_handle);\n            break;\n\n#ifndef AWS_SUPPORT_WIN7\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 47,
                  "endLine": 703,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    switch (cert_type) {\n        case AWS_CT_X509_RSA:\n            result = s_cert_context_import_rsa_private_key(\n                *certs, key, decoded_len, is_client_mode, uuid_wstr, crypto_provider, private_key_handle);\n            break;\n\n",
                    "rendered": {
                      "text": "\n    switch (cert_type) {\n        case AWS_CT_X509_RSA:\n            result = s_cert_context_import_rsa_private_key(\n                *certs, key, decoded_len, is_client_mode, uuid_wstr, crypto_provider, private_key_handle);\n            break;\n\n",
                      "markdown": "`\n    switch (cert_type) {\n        case AWS_CT_X509_RSA:\n            result = s_cert_context_import_rsa_private_key(\n                *certs, key, decoded_len, is_client_mode, uuid_wstr, crypto_provider, private_key_handle);\n            break;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 28,
                  "endLine": 664,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n                     NULL,\n                     &key,\n",
                    "rendered": {
                      "text": "                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n                     NULL,\n                     &key,\n",
                      "markdown": "`                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n                     NULL,\n                     &key,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 21,
                  "endLine": 663,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        else if (CryptDecodeObjectEx(\n                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n                     NULL,\n",
                    "rendered": {
                      "text": "        else if (CryptDecodeObjectEx(\n                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n                     NULL,\n",
                      "markdown": "`        else if (CryptDecodeObjectEx(\n                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n                     NULL,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 662,
                  "startColumn": 30,
                  "endLine": 662,
                  "endColumn": 41,
                  "snippet": {
                    "text": "#ifndef AWS_SUPPORT_WIN7\n        else if (CryptDecodeObjectEx(\n                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n",
                    "rendered": {
                      "text": "#ifndef AWS_SUPPORT_WIN7\n        else if (CryptDecodeObjectEx(\n                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n",
                      "markdown": "`#ifndef AWS_SUPPORT_WIN7\n        else if (CryptDecodeObjectEx(\n                     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                     X509_ECC_PRIVATE_KEY,\n                     private_key_ptr->data.buffer,\n                     (DWORD)private_key_ptr->data.len,\n                     CRYPT_DECODE_ALLOC_FLAG,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 652,
                  "startColumn": 23,
                  "endLine": 652,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n                0,\n                &key,\n",
                    "rendered": {
                      "text": "                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n                0,\n                &key,\n",
                      "markdown": "`                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n                0,\n                &key,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 16,
                  "endLine": 651,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n                0,\n",
                    "rendered": {
                      "text": "        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n                0,\n",
                      "markdown": "`        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n                0,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 25,
                  "endLine": 650,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n",
                    "rendered": {
                      "text": "\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n",
                      "markdown": "`\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n                PKCS_RSA_PRIVATE_KEY,\n                private_key_ptr->data.buffer,\n                (DWORD)private_key_ptr->data.len,\n                CRYPT_DECODE_ALLOC_FLAG,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 59,
                  "endLine": 646,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n",
                    "rendered": {
                      "text": "    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n",
                      "markdown": "`    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 35,
                  "endLine": 646,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n",
                    "rendered": {
                      "text": "    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n",
                      "markdown": "`    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n                X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 27,
                  "endLine": 645,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n",
                    "rendered": {
                      "text": "    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n",
                      "markdown": "`    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n        if (CryptDecodeObjectEx(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 54,
                  "endLine": 644,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n",
                    "rendered": {
                      "text": "    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n",
                      "markdown": "`    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 11,
                  "endLine": 644,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n",
                    "rendered": {
                      "text": "    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n",
                      "markdown": "`    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n    for (size_t i = 0; i < private_key_count; ++i) {\n        aws_array_list_get_at_ptr(&private_keys, (void **)&private_key_ptr, i);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 27,
                  "endLine": 641,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        goto clean_up;\n    }\n\n    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n",
                    "rendered": {
                      "text": "        goto clean_up;\n    }\n\n    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n",
                      "markdown": "`        goto clean_up;\n    }\n\n    struct aws_pem_object *private_key_ptr = NULL;\n    DWORD decoded_len = 0;\n    enum aws_certificate_type cert_type = AWS_CT_X509_UNKNOWN;\n    size_t private_key_count = aws_array_list_length(&private_keys);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 71,
                  "endLine": 569,
                  "endColumn": 82,
                  "snippet": {
                    "text": "        goto clean_up;\n    }\n\n    if (aws_pem_objects_init_from_file_contents(&private_keys, alloc, *private_key)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKI, \"static: failed to decode key pem to buffer list with error %d\", (int)aws_last_error());\n        goto clean_up;\n",
                    "rendered": {
                      "text": "        goto clean_up;\n    }\n\n    if (aws_pem_objects_init_from_file_contents(&private_keys, alloc, *private_key)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKI, \"static: failed to decode key pem to buffer list with error %d\", (int)aws_last_error());\n        goto clean_up;\n",
                      "markdown": "`        goto clean_up;\n    }\n\n    if (aws_pem_objects_init_from_file_contents(&private_keys, alloc, *private_key)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKI, \"static: failed to decode key pem to buffer list with error %d\", (int)aws_last_error());\n        goto clean_up;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 49,
                  "endLine": 569,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        goto clean_up;\n    }\n\n    if (aws_pem_objects_init_from_file_contents(&private_keys, alloc, *private_key)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKI, \"static: failed to decode key pem to buffer list with error %d\", (int)aws_last_error());\n        goto clean_up;\n",
                    "rendered": {
                      "text": "        goto clean_up;\n    }\n\n    if (aws_pem_objects_init_from_file_contents(&private_keys, alloc, *private_key)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKI, \"static: failed to decode key pem to buffer list with error %d\", (int)aws_last_error());\n        goto clean_up;\n",
                      "markdown": "`        goto clean_up;\n    }\n\n    if (aws_pem_objects_init_from_file_contents(&private_keys, alloc, *private_key)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKI, \"static: failed to decode key pem to buffer list with error %d\", (int)aws_last_error());\n        goto clean_up;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 5,
                  "endLine": 558,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    *certs = NULL;\n    *store = NULL;\n    *crypto_provider = 0;\n    *private_key_handle = 0;\n\n    int result = AWS_OP_ERR;\n    BYTE *key = NULL;\n",
                    "rendered": {
                      "text": "    *certs = NULL;\n    *store = NULL;\n    *crypto_provider = 0;\n    *private_key_handle = 0;\n\n    int result = AWS_OP_ERR;\n    BYTE *key = NULL;\n",
                      "markdown": "`    *certs = NULL;\n    *store = NULL;\n    *crypto_provider = 0;\n    *private_key_handle = 0;\n\n    int result = AWS_OP_ERR;\n    BYTE *key = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 20,
                  "endLine": 553,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n    AWS_ZERO_STRUCT(private_keys);\n\n    *certs = NULL;\n    *store = NULL;\n",
                    "rendered": {
                      "text": "\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n    AWS_ZERO_STRUCT(private_keys);\n\n    *certs = NULL;\n    *store = NULL;\n",
                      "markdown": "`\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n    AWS_ZERO_STRUCT(private_keys);\n\n    *certs = NULL;\n    *store = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 551,
                  "startColumn": 40,
                  "endLine": 551,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle) {\n\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n    AWS_ZERO_STRUCT(private_keys);\n\n",
                    "rendered": {
                      "text": "    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle) {\n\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n    AWS_ZERO_STRUCT(private_keys);\n\n",
                      "markdown": "`    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle) {\n\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n    AWS_ZERO_STRUCT(private_keys);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 15,
                  "endLine": 549,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    HCERTSTORE *store,\n    PCCERT_CONTEXT *certs,\n    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle) {\n\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n",
                    "rendered": {
                      "text": "    HCERTSTORE *store,\n    PCCERT_CONTEXT *certs,\n    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle) {\n\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n",
                      "markdown": "`    HCERTSTORE *store,\n    PCCERT_CONTEXT *certs,\n    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle) {\n\n    struct aws_array_list certificates, private_keys;\n    AWS_ZERO_STRUCT(certificates);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 34,
                  "endLine": 544,
                  "endColumn": 45,
                  "snippet": {
                    "text": "int aws_import_key_pair_to_cert_context(\n    struct aws_allocator *alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    bool is_client_mode,\n    HCERTSTORE *store,\n    PCCERT_CONTEXT *certs,\n",
                    "rendered": {
                      "text": "int aws_import_key_pair_to_cert_context(\n    struct aws_allocator *alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    bool is_client_mode,\n    HCERTSTORE *store,\n    PCCERT_CONTEXT *certs,\n",
                      "markdown": "`int aws_import_key_pair_to_cert_context(\n    struct aws_allocator *alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    bool is_client_mode,\n    HCERTSTORE *store,\n    PCCERT_CONTEXT *certs,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 47,
                  "endLine": 466,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    if (aws_byte_buf_append(&key_blob_buffer, &private_key_cursor)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: insufficient space to build ecc key blob\");\n        goto done;\n    }\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    if (aws_byte_buf_append(&key_blob_buffer, &private_key_cursor)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: insufficient space to build ecc key blob\");\n        goto done;\n    }\n",
                      "markdown": "`        goto done;\n    }\n\n    if (aws_byte_buf_append(&key_blob_buffer, &private_key_cursor)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: insufficient space to build ecc key blob\");\n        goto done;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 22,
                  "endLine": 453,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n        .buffer = (uint8_t *)key_blob,\n",
                    "rendered": {
                      "text": "    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n        .buffer = (uint8_t *)key_blob,\n",
                      "markdown": "`    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n        .buffer = (uint8_t *)key_blob,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 69,
                  "endLine": 452,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n",
                      "markdown": "`        goto done;\n    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 52,
                  "endLine": 452,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n",
                      "markdown": "`        goto done;\n    }\n\n    key_blob->dwMagic = s_compute_ecc_key_type_from_private_key_size(private_key_cursor.len);\n    key_blob->cbKey = private_key_length;\n\n    struct aws_byte_buf key_blob_buffer = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 80,
                  "endLine": 445,
                  "endColumn": 91,
                  "snippet": {
                    "text": "        .len = private_key_length,\n    };\n\n    DWORD key_blob_size = sizeof(BCRYPT_ECCKEY_BLOB) + public_key_blob_length + private_key_length;\n    key_blob = (BCRYPT_ECCKEY_BLOB *)aws_mem_calloc(allocator, 1, key_blob_size);\n    if (key_blob == NULL) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: could not allocate ecc key blob memory\");\n",
                    "rendered": {
                      "text": "        .len = private_key_length,\n    };\n\n    DWORD key_blob_size = sizeof(BCRYPT_ECCKEY_BLOB) + public_key_blob_length + private_key_length;\n    key_blob = (BCRYPT_ECCKEY_BLOB *)aws_mem_calloc(allocator, 1, key_blob_size);\n    if (key_blob == NULL) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: could not allocate ecc key blob memory\");\n",
                      "markdown": "`        .len = private_key_length,\n    };\n\n    DWORD key_blob_size = sizeof(BCRYPT_ECCKEY_BLOB) + public_key_blob_length + private_key_length;\n    key_blob = (BCRYPT_ECCKEY_BLOB *)aws_mem_calloc(allocator, 1, key_blob_size);\n    if (key_blob == NULL) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: could not allocate ecc key blob memory\");\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 15,
                  "endLine": 442,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n    DWORD key_blob_size = sizeof(BCRYPT_ECCKEY_BLOB) + public_key_blob_length + private_key_length;\n",
                    "rendered": {
                      "text": "    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n    DWORD key_blob_size = sizeof(BCRYPT_ECCKEY_BLOB) + public_key_blob_length + private_key_length;\n",
                      "markdown": "`    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n    DWORD key_blob_size = sizeof(BCRYPT_ECCKEY_BLOB) + public_key_blob_length + private_key_length;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 33,
                  "endLine": 441,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n",
                    "rendered": {
                      "text": "    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n",
                      "markdown": "`    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 15,
                  "endLine": 441,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n",
                    "rendered": {
                      "text": "    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n",
                      "markdown": "`    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 27,
                  "endLine": 440,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n",
                    "rendered": {
                      "text": "\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n",
                      "markdown": "`\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n    };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 49,
                  "endLine": 439,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n",
                    "rendered": {
                      "text": "    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n",
                      "markdown": "`    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 31,
                  "endLine": 439,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n",
                    "rendered": {
                      "text": "    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n",
                      "markdown": "`    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 10,
                  "endLine": 439,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n",
                    "rendered": {
                      "text": "    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n",
                      "markdown": "`    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n        .len = private_key_length,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 62,
                  "endLine": 438,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n",
                    "rendered": {
                      "text": "        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n",
                      "markdown": "`        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 32,
                  "endLine": 438,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n",
                    "rendered": {
                      "text": "        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n",
                      "markdown": "`        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 14,
                  "endLine": 438,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n",
                    "rendered": {
                      "text": "        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n",
                      "markdown": "`        .len = public_key_blob_length,\n    };\n\n    CRYPT_ECC_PRIVATE_KEY_INFO *private_key_info = (CRYPT_ECC_PRIVATE_KEY_INFO *)key;\n    ULONG private_key_length = private_key_info->PrivateKey.cbData;\n    struct aws_byte_cursor private_key_cursor = {\n        .ptr = private_key_info->PrivateKey.pbData,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 37,
                  "endLine": 383,
                  "endColumn": 48,
                  "snippet": {
                    "text": "};\n\n/* TODO ALSO NEEDS TO BE EPHEMERAL */\nstatic int s_cert_context_import_ecc_private_key(\n    PCCERT_CONTEXT cert_context,\n    struct aws_allocator *allocator,\n    const BYTE *key,\n",
                    "rendered": {
                      "text": "};\n\n/* TODO ALSO NEEDS TO BE EPHEMERAL */\nstatic int s_cert_context_import_ecc_private_key(\n    PCCERT_CONTEXT cert_context,\n    struct aws_allocator *allocator,\n    const BYTE *key,\n",
                      "markdown": "`};\n\n/* TODO ALSO NEEDS TO BE EPHEMERAL */\nstatic int s_cert_context_import_ecc_private_key(\n    PCCERT_CONTEXT cert_context,\n    struct aws_allocator *allocator,\n    const BYTE *key,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 12,
                  "endLine": 364,
                  "endColumn": 23,
                  "snippet": {
                    "text": "#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n        case ECC_384_MAGIC_NUMBER:\n",
                    "rendered": {
                      "text": "#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n        case ECC_384_MAGIC_NUMBER:\n",
                      "markdown": "`#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n        case ECC_384_MAGIC_NUMBER:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 65,
                  "endLine": 363,
                  "endColumn": 76,
                  "snippet": {
                    "text": "#define ECC_256_MAGIC_NUMBER 0x20\n#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n",
                    "rendered": {
                      "text": "#define ECC_256_MAGIC_NUMBER 0x20\n#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n",
                      "markdown": "`#define ECC_256_MAGIC_NUMBER 0x20\n#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 41,
                  "endLine": 363,
                  "endColumn": 52,
                  "snippet": {
                    "text": "#define ECC_256_MAGIC_NUMBER 0x20\n#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n",
                    "rendered": {
                      "text": "#define ECC_256_MAGIC_NUMBER 0x20\n#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n",
                      "markdown": "`#define ECC_256_MAGIC_NUMBER 0x20\n#define ECC_384_MAGIC_NUMBER 0x30\n\nstatic ULONG s_compute_ecc_key_type_from_private_key_size(size_t private_key_len) {\n    switch (private_key_len) {\n        case ECC_256_MAGIC_NUMBER:\n            return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 9,
                  "endLine": 344,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    }\n\n    *out_crypto_provider = crypto_prov;\n    *out_private_key_handle = h_key;\n    return AWS_OP_SUCCESS;\n\non_error:\n",
                    "rendered": {
                      "text": "    }\n\n    *out_crypto_provider = crypto_prov;\n    *out_private_key_handle = h_key;\n    return AWS_OP_SUCCESS;\n\non_error:\n",
                      "markdown": "`    }\n\n    *out_crypto_provider = crypto_prov;\n    *out_private_key_handle = h_key;\n    return AWS_OP_SUCCESS;\n\non_error:\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 19,
                  "endLine": 279,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    bool is_client_mode,\n    wchar_t uuid_wstr[AWS_UUID_STR_LEN],\n    HCRYPTPROV *out_crypto_provider,\n    HCRYPTKEY *out_private_key_handle) {\n\n    /* out-params will adopt these resources if the function is successful.\n     * if function fails these resources will be cleaned up before returning */\n",
                    "rendered": {
                      "text": "    bool is_client_mode,\n    wchar_t uuid_wstr[AWS_UUID_STR_LEN],\n    HCRYPTPROV *out_crypto_provider,\n    HCRYPTKEY *out_private_key_handle) {\n\n    /* out-params will adopt these resources if the function is successful.\n     * if function fails these resources will be cleaned up before returning */\n",
                      "markdown": "`    bool is_client_mode,\n    wchar_t uuid_wstr[AWS_UUID_STR_LEN],\n    HCRYPTPROV *out_crypto_provider,\n    HCRYPTKEY *out_private_key_handle) {\n\n    /* out-params will adopt these resources if the function is successful.\n     * if function fails these resources will be cleaned up before returning */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 37,
                  "endLine": 272,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    CertCloseStore(cert_store, 0);\n}\n\nstatic int s_cert_context_import_rsa_private_key(\n    PCCERT_CONTEXT certs,\n    const BYTE *key,\n    DWORD decoded_len,\n",
                    "rendered": {
                      "text": "    CertCloseStore(cert_store, 0);\n}\n\nstatic int s_cert_context_import_rsa_private_key(\n    PCCERT_CONTEXT certs,\n    const BYTE *key,\n    DWORD decoded_len,\n",
                      "markdown": "`    CertCloseStore(cert_store, 0);\n}\n\nstatic int s_cert_context_import_rsa_private_key(\n    PCCERT_CONTEXT certs,\n    const BYTE *key,\n    DWORD decoded_len,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/windows_pki_utils.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 61,
                  "endLine": 58,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\nint aws_load_cert_from_system_cert_store(const char *cert_path, HCERTSTORE *cert_store, PCCERT_CONTEXT *certs) {\n\n    AWS_LOGF_INFO(AWS_LS_IO_PKI, \"static: loading certificate at windows cert manager path '%s'.\", cert_path);\n\n    struct aws_byte_cursor segments[3];\n    if (s_split_system_cert_path(cert_path, segments)) {\n",
                    "rendered": {
                      "text": "\nint aws_load_cert_from_system_cert_store(const char *cert_path, HCERTSTORE *cert_store, PCCERT_CONTEXT *certs) {\n\n    AWS_LOGF_INFO(AWS_LS_IO_PKI, \"static: loading certificate at windows cert manager path '%s'.\", cert_path);\n\n    struct aws_byte_cursor segments[3];\n    if (s_split_system_cert_path(cert_path, segments)) {\n",
                      "markdown": "`\nint aws_load_cert_from_system_cert_store(const char *cert_path, HCERTSTORE *cert_store, PCCERT_CONTEXT *certs) {\n\n    AWS_LOGF_INFO(AWS_LS_IO_PKI, \"static: loading certificate at windows cert manager path '%s'.\", cert_path);\n\n    struct aws_byte_cursor segments[3];\n    if (s_split_system_cert_path(cert_path, segments)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/host_resolver.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 33,
                  "endLine": 35,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    int res_error = GetAddrInfoA(hostname_cstr, NULL, &hints, &result);\n\n    if (res_error) {\n        AWS_LOGF_ERROR(AWS_LS_IO_DNS, \"static: getaddrinfo failed with error_code %d\", res_error);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    int res_error = GetAddrInfoA(hostname_cstr, NULL, &hints, &result);\n\n    if (res_error) {\n        AWS_LOGF_ERROR(AWS_LS_IO_DNS, \"static: getaddrinfo failed with error_code %d\", res_error);\n",
                      "markdown": "`\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    int res_error = GetAddrInfoA(hostname_cstr, NULL, &hints, &result);\n\n    if (res_error) {\n        AWS_LOGF_ERROR(AWS_LS_IO_DNS, \"static: getaddrinfo failed with error_code %d\", res_error);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/host_resolver.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 63,
                  "endLine": 33,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_ALL | AI_V4MAPPED;\n\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    int res_error = GetAddrInfoA(hostname_cstr, NULL, &hints, &result);\n\n",
                    "rendered": {
                      "text": "    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_ALL | AI_V4MAPPED;\n\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    int res_error = GetAddrInfoA(hostname_cstr, NULL, &hints, &result);\n\n",
                      "markdown": "`    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_ALL | AI_V4MAPPED;\n\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    int res_error = GetAddrInfoA(hostname_cstr, NULL, &hints, &result);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/host_resolver.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 16,
                  "endLine": 23,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    (void)user_data;\n    ADDRINFOA *result = NULL;\n    const char *hostname_cstr = aws_string_c_str(host_name);\n\n    aws_check_and_init_winsock();\n\n",
                    "rendered": {
                      "text": "\n    (void)user_data;\n    ADDRINFOA *result = NULL;\n    const char *hostname_cstr = aws_string_c_str(host_name);\n\n    aws_check_and_init_winsock();\n\n",
                      "markdown": "`\n    (void)user_data;\n    ADDRINFOA *result = NULL;\n    const char *hostname_cstr = aws_string_c_str(host_name);\n\n    aws_check_and_init_winsock();\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/shared_library.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 29,
                  "endLine": 57,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        DWORD ec = GetLastError();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to find shared library symbol \\\"%s\\\" with error code: %ul\",\n            (void *)library,\n            symbol_name ? symbol_name : s_null,\n            ec);\n",
                    "rendered": {
                      "text": "        DWORD ec = GetLastError();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to find shared library symbol \\\"%s\\\" with error code: %ul\",\n            (void *)library,\n            symbol_name ? symbol_name : s_null,\n            ec);\n",
                      "markdown": "`        DWORD ec = GetLastError();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to find shared library symbol \\\"%s\\\" with error code: %ul\",\n            (void *)library,\n            symbol_name ? symbol_name : s_null,\n            ec);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1581,
                  "startColumn": 34,
                  "endLine": 1581,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n\n        aws_string_destroy(certificate_string);\n        aws_string_destroy_secure(private_key_string);\n\n        if (mode == S2N_CLIENT) {\n            s2n_config_set_client_auth_type(s2n_ctx->s2n_config, S2N_CERT_AUTH_REQUIRED);\n",
                    "rendered": {
                      "text": "            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n\n        aws_string_destroy(certificate_string);\n        aws_string_destroy_secure(private_key_string);\n\n        if (mode == S2N_CLIENT) {\n            s2n_config_set_client_auth_type(s2n_ctx->s2n_config, S2N_CERT_AUTH_REQUIRED);\n",
                      "markdown": "`            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n\n        aws_string_destroy(certificate_string);\n        aws_string_destroy_secure(private_key_string);\n\n        if (mode == S2N_CLIENT) {\n            s2n_config_set_client_auth_type(s2n_ctx->s2n_config, S2N_CERT_AUTH_REQUIRED);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1578,
                  "startColumn": 88,
                  "endLine": 1578,
                  "endColumn": 99,
                  "snippet": {
                    "text": "        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n\n        aws_string_destroy(certificate_string);\n        aws_string_destroy_secure(private_key_string);\n",
                    "rendered": {
                      "text": "        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n\n        aws_string_destroy(certificate_string);\n        aws_string_destroy_secure(private_key_string);\n",
                      "markdown": "`        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n\n        aws_string_destroy(certificate_string);\n        aws_string_destroy_secure(private_key_string);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1575,
                  "startColumn": 89,
                  "endLine": 1575,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n        /* Ensure that what we pass to s2n is zero-terminated */\n        struct aws_string *certificate_string = aws_string_new_from_buf(alloc, &options->certificate);\n        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n",
                    "rendered": {
                      "text": "\n        /* Ensure that what we pass to s2n is zero-terminated */\n        struct aws_string *certificate_string = aws_string_new_from_buf(alloc, &options->certificate);\n        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n",
                      "markdown": "`\n        /* Ensure that what we pass to s2n is zero-terminated */\n        struct aws_string *certificate_string = aws_string_new_from_buf(alloc, &options->certificate);\n        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1575,
                  "startColumn": 27,
                  "endLine": 1575,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n        /* Ensure that what we pass to s2n is zero-terminated */\n        struct aws_string *certificate_string = aws_string_new_from_buf(alloc, &options->certificate);\n        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n",
                    "rendered": {
                      "text": "\n        /* Ensure that what we pass to s2n is zero-terminated */\n        struct aws_string *certificate_string = aws_string_new_from_buf(alloc, &options->certificate);\n        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n",
                      "markdown": "`\n        /* Ensure that what we pass to s2n is zero-terminated */\n        struct aws_string *certificate_string = aws_string_new_from_buf(alloc, &options->certificate);\n        struct aws_string *private_key_string = aws_string_new_from_buf(alloc, &options->private_key);\n\n        int err_code = s2n_config_add_cert_chain_and_key(\n            s2n_ctx->s2n_config, (const char *)certificate_string->bytes, (const char *)private_key_string->bytes);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1567,
                  "startColumn": 68,
                  "endLine": 1567,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            goto cleanup_s2n_config;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_s2n_config;\n",
                    "rendered": {
                      "text": "            goto cleanup_s2n_config;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_s2n_config;\n",
                      "markdown": "`            goto cleanup_s2n_config;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_s2n_config;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1567,
                  "startColumn": 39,
                  "endLine": 1567,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            goto cleanup_s2n_config;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_s2n_config;\n",
                    "rendered": {
                      "text": "            goto cleanup_s2n_config;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_s2n_config;\n",
                      "markdown": "`            goto cleanup_s2n_config;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_s2n_config;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/s2n/s2n_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1558,
                  "startColumn": 98,
                  "endLine": 1558,
                  "endColumn": 109,
                  "snippet": {
                    "text": "        goto cleanup_s2n_config;\n    }\n\n    if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"ctx: Certificate and key have been set, setting them up now.\");\n\n        if (!aws_text_is_utf8(options->certificate.buffer, options->certificate.len)) {\n",
                    "rendered": {
                      "text": "        goto cleanup_s2n_config;\n    }\n\n    if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"ctx: Certificate and key have been set, setting them up now.\");\n\n        if (!aws_text_is_utf8(options->certificate.buffer, options->certificate.len)) {\n",
                      "markdown": "`        goto cleanup_s2n_config;\n    }\n\n    if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"ctx: Certificate and key have been set, setting them up now.\");\n\n        if (!aws_text_is_utf8(options->certificate.buffer, options->certificate.len)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/iocp/iocp_event_loop.c"
                },
                "region": {
                  "startLine": 774,
                  "startColumn": 77,
                  "endLine": 774,
                  "endColumn": 81,
                  "snippet": {
                    "text": "            timeout_ms = timeout_ms64 > MAXDWORD ? MAXDWORD : (DWORD)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)next_run_time_ns,\n",
                    "rendered": {
                      "text": "            timeout_ms = timeout_ms64 > MAXDWORD ? MAXDWORD : (DWORD)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)next_run_time_ns,\n",
                      "markdown": "`            timeout_ms = timeout_ms64 > MAXDWORD ? MAXDWORD : (DWORD)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)next_run_time_ns,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/iocp/iocp_event_loop.c"
                },
                "region": {
                  "startLine": 775,
                  "startColumn": 28,
                  "endLine": 775,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)next_run_time_ns,\n                (int)timeout_ms);\n",
                    "rendered": {
                      "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)next_run_time_ns,\n                (int)timeout_ms);\n",
                      "markdown": "`            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)next_run_time_ns,\n                (int)timeout_ms);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/windows/iocp/iocp_event_loop.c"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 55,
                  "endLine": 688,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    OVERLAPPED_ENTRY completion_packets[MAX_COMPLETION_PACKETS_PER_LOOP];\n    AWS_ZERO_ARRAY(completion_packets);\n\n    AWS_LOGF_INFO(AWS_LS_IO_EVENT_LOOP, \"id=%p: default timeout %d\", (void *)event_loop, (int)timeout_ms);\n\n    while (impl->thread_data.state == EVENT_THREAD_STATE_RUNNING) {\n        ULONG num_entries = 0;\n",
                    "rendered": {
                      "text": "    OVERLAPPED_ENTRY completion_packets[MAX_COMPLETION_PACKETS_PER_LOOP];\n    AWS_ZERO_ARRAY(completion_packets);\n\n    AWS_LOGF_INFO(AWS_LS_IO_EVENT_LOOP, \"id=%p: default timeout %d\", (void *)event_loop, (int)timeout_ms);\n\n    while (impl->thread_data.state == EVENT_THREAD_STATE_RUNNING) {\n        ULONG num_entries = 0;\n",
                      "markdown": "`    OVERLAPPED_ENTRY completion_packets[MAX_COMPLETION_PACKETS_PER_LOOP];\n    AWS_ZERO_ARRAY(completion_packets);\n\n    AWS_LOGF_INFO(AWS_LS_IO_EVENT_LOOP, \"id=%p: default timeout %d\", (void *)event_loop, (int)timeout_ms);\n\n    while (impl->thread_data.state == EVENT_THREAD_STATE_RUNNING) {\n        ULONG num_entries = 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/linux/epoll_event_loop.c"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 77,
                  "endLine": 693,
                  "endColumn": 81,
                  "snippet": {
                    "text": "            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n",
                    "rendered": {
                      "text": "            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n",
                      "markdown": "`            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/linux/epoll_event_loop.c"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 28,
                  "endLine": 694,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                timeout);\n",
                    "rendered": {
                      "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                timeout);\n",
                      "markdown": "`            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu, using timeout of %d.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/linux/epoll_event_loop.c"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 11,
                  "endLine": 690,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n            uint64_t timeout_ms64 = aws_timestamp_convert(timeout_ns, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_MILLIS, NULL);\n            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n",
                    "rendered": {
                      "text": "            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n            uint64_t timeout_ms64 = aws_timestamp_convert(timeout_ns, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_MILLIS, NULL);\n            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n",
                      "markdown": "`            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n            uint64_t timeout_ms64 = aws_timestamp_convert(timeout_ns, AWS_TIMESTAMP_NANOS, AWS_TIMESTAMP_MILLIS, NULL);\n            timeout = timeout_ms64 > INT_MAX ? INT_MAX : (int)timeout_ms64;\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/linux/epoll_event_loop.c"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 11,
                  "endLine": 685,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        if (use_default_timeout) {\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP, \"id=%p: no more scheduled tasks using default timeout.\", (void *)event_loop);\n            timeout = DEFAULT_TIMEOUT;\n        } else {\n            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n",
                    "rendered": {
                      "text": "        if (use_default_timeout) {\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP, \"id=%p: no more scheduled tasks using default timeout.\", (void *)event_loop);\n            timeout = DEFAULT_TIMEOUT;\n        } else {\n            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n",
                      "markdown": "`        if (use_default_timeout) {\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP, \"id=%p: no more scheduled tasks using default timeout.\", (void *)event_loop);\n            timeout = DEFAULT_TIMEOUT;\n        } else {\n            /* Translate timestamp (in nanoseconds) to timeout (in milliseconds) */\n            uint64_t timeout_ns = (next_run_time_ns > now_ns) ? (next_run_time_ns - now_ns) : 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/linux/epoll_event_loop.c"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 23,
                  "endLine": 595,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %d, and max events to process per tick %d\",\n        (void *)event_loop,\n        timeout,\n        MAX_EVENTS);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %d, and max events to process per tick %d\",\n        (void *)event_loop,\n        timeout,\n        MAX_EVENTS);\n",
                      "markdown": "`\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %d, and max events to process per tick %d\",\n        (void *)event_loop,\n        timeout,\n        MAX_EVENTS);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/linux/epoll_event_loop.c"
                },
                "region": {
                  "startLine": 589,
                  "startColumn": 7,
                  "endLine": 589,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    aws_thread_current_at_exit(s_aws_epoll_cleanup_aws_lc_thread_local_state, NULL);\n\n    int timeout = DEFAULT_TIMEOUT;\n\n    struct epoll_event events[MAX_EVENTS];\n\n",
                    "rendered": {
                      "text": "\n    aws_thread_current_at_exit(s_aws_epoll_cleanup_aws_lc_thread_local_state, NULL);\n\n    int timeout = DEFAULT_TIMEOUT;\n\n    struct epoll_event events[MAX_EVENTS];\n\n",
                      "markdown": "`\n    aws_thread_current_at_exit(s_aws_epoll_cleanup_aws_lc_thread_local_state, NULL);\n\n    int timeout = DEFAULT_TIMEOUT;\n\n    struct epoll_event events[MAX_EVENTS];\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 32,
                  "endLine": 210,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        aws_string_destroy(pkcs_token_label);\n    }\n    if (pkcs_private_key_object_label != NULL) {\n        aws_string_destroy(pkcs_private_key_object_label);\n    }\n\n    if (success) {\n",
                    "rendered": {
                      "text": "        aws_string_destroy(pkcs_token_label);\n    }\n    if (pkcs_private_key_object_label != NULL) {\n        aws_string_destroy(pkcs_private_key_object_label);\n    }\n\n    if (success) {\n",
                      "markdown": "`        aws_string_destroy(pkcs_token_label);\n    }\n    if (pkcs_private_key_object_label != NULL) {\n        aws_string_destroy(pkcs_private_key_object_label);\n    }\n\n    if (success) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 13,
                  "endLine": 209,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if (pkcs_token_label != NULL) {\n        aws_string_destroy(pkcs_token_label);\n    }\n    if (pkcs_private_key_object_label != NULL) {\n        aws_string_destroy(pkcs_private_key_object_label);\n    }\n\n",
                    "rendered": {
                      "text": "    if (pkcs_token_label != NULL) {\n        aws_string_destroy(pkcs_token_label);\n    }\n    if (pkcs_private_key_object_label != NULL) {\n        aws_string_destroy(pkcs_private_key_object_label);\n    }\n\n",
                      "markdown": "`    if (pkcs_token_label != NULL) {\n        aws_string_destroy(pkcs_token_label);\n    }\n    if (pkcs_private_key_object_label != NULL) {\n        aws_string_destroy(pkcs_private_key_object_label);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 29,
                  "endLine": 195,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n    }\n    success = true;\n",
                    "rendered": {
                      "text": "            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n    }\n    success = true;\n",
                      "markdown": "`            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n    }\n    success = true;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 29,
                  "endLine": 194,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n    }\n",
                    "rendered": {
                      "text": "            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n    }\n",
                      "markdown": "`            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "endLine": 193,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    if (aws_pkcs11_lib_find_private_key(\n            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n",
                    "rendered": {
                      "text": "    if (aws_pkcs11_lib_find_private_key(\n            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n",
                      "markdown": "`    if (aws_pkcs11_lib_find_private_key(\n            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n            &pkcs11_handler->private_key_handle /*out*/,\n            &pkcs11_handler->private_key_type /*out*/)) {\n        goto done;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 28,
                  "endLine": 190,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    if (aws_pkcs11_lib_find_private_key(\n            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    if (aws_pkcs11_lib_find_private_key(\n            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n",
                      "markdown": "`        goto done;\n    }\n\n    if (aws_pkcs11_lib_find_private_key(\n            pkcs11_handler->lib,\n            pkcs11_handler->session_handle,\n            pkcs_private_key_object_label,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 84,
                  "endLine": 174,
                  "endColumn": 95,
                  "snippet": {
                    "text": "\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n    CK_SLOT_ID slot_id;\n",
                    "rendered": {
                      "text": "\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n    CK_SLOT_ID slot_id;\n",
                      "markdown": "`\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n    CK_SLOT_ID slot_id;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 13,
                  "endLine": 174,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n    CK_SLOT_ID slot_id;\n",
                    "rendered": {
                      "text": "\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n    CK_SLOT_ID slot_id;\n",
                      "markdown": "`\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n    CK_SLOT_ID slot_id;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 14,
                  "endLine": 173,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    }\n\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n",
                    "rendered": {
                      "text": "    }\n\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n",
                      "markdown": "`    }\n\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 7,
                  "endLine": 172,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        pkcs_token_label = aws_string_new_from_cursor(allocator, match_token_label);\n    }\n\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n",
                    "rendered": {
                      "text": "        pkcs_token_label = aws_string_new_from_cursor(allocator, match_token_label);\n    }\n\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n",
                      "markdown": "`        pkcs_token_label = aws_string_new_from_cursor(allocator, match_token_label);\n    }\n\n    /* private_key_object_label is optional */\n    if (match_private_key_label->ptr != NULL) {\n        pkcs_private_key_object_label = aws_string_new_from_cursor(allocator, match_private_key_label);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 28,
                  "endLine": 141,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    // Optional data\n    struct aws_string *pkcs_user_pin = NULL;\n    struct aws_string *pkcs_token_label = NULL;\n    struct aws_string *pkcs_private_key_object_label = NULL;\n\n    aws_ref_count_init(\n        &pkcs11_handler->base.ref_count,\n",
                    "rendered": {
                      "text": "    // Optional data\n    struct aws_string *pkcs_user_pin = NULL;\n    struct aws_string *pkcs_token_label = NULL;\n    struct aws_string *pkcs_private_key_object_label = NULL;\n\n    aws_ref_count_init(\n        &pkcs11_handler->base.ref_count,\n",
                      "markdown": "`    // Optional data\n    struct aws_string *pkcs_user_pin = NULL;\n    struct aws_string *pkcs_token_label = NULL;\n    struct aws_string *pkcs_private_key_object_label = NULL;\n\n    aws_ref_count_init(\n        &pkcs11_handler->base.ref_count,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 40,
                  "endLine": 130,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    struct aws_pkcs11_lib *pkcs11_lib,\n    const struct aws_byte_cursor *user_pin,\n    const struct aws_byte_cursor *match_token_label,\n    const struct aws_byte_cursor *match_private_key_label,\n    const uint64_t *match_slot_id) {\n\n    bool success = false;\n",
                    "rendered": {
                      "text": "    struct aws_pkcs11_lib *pkcs11_lib,\n    const struct aws_byte_cursor *user_pin,\n    const struct aws_byte_cursor *match_token_label,\n    const struct aws_byte_cursor *match_private_key_label,\n    const uint64_t *match_slot_id) {\n\n    bool success = false;\n",
                      "markdown": "`    struct aws_pkcs11_lib *pkcs11_lib,\n    const struct aws_byte_cursor *user_pin,\n    const struct aws_byte_cursor *match_token_label,\n    const struct aws_byte_cursor *match_private_key_label,\n    const uint64_t *match_slot_id) {\n\n    bool success = false;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 36,
                  "endLine": 86,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n                    aws_tls_key_operation_get_digest_algorithm(operation),\n",
                    "rendered": {
                      "text": "                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n                    aws_tls_key_operation_get_digest_algorithm(operation),\n",
                      "markdown": "`                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n                    aws_tls_key_operation_get_digest_algorithm(operation),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 36,
                  "endLine": 85,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            if (aws_pkcs11_lib_sign(\n                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n",
                    "rendered": {
                      "text": "            if (aws_pkcs11_lib_sign(\n                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n",
                      "markdown": "`            if (aws_pkcs11_lib_sign(\n                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 36,
                  "endLine": 72,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n                    &output_buf)) {\n",
                    "rendered": {
                      "text": "                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n                    &output_buf)) {\n",
                      "markdown": "`                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n                    &output_buf)) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 36,
                  "endLine": 71,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            if (aws_pkcs11_lib_decrypt(\n                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n",
                    "rendered": {
                      "text": "            if (aws_pkcs11_lib_decrypt(\n                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n",
                      "markdown": "`            if (aws_pkcs11_lib_decrypt(\n                    pkcs11_handler->lib,\n                    pkcs11_handler->session_handle,\n                    pkcs11_handler->private_key_handle,\n                    pkcs11_handler->private_key_type,\n                    aws_tls_key_operation_get_input(operation),\n                    pkcs11_handler->alloc,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 16,
                  "endLine": 35,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    struct aws_mutex session_lock;\n    CK_SESSION_HANDLE session_handle;\n    CK_OBJECT_HANDLE private_key_handle;\n    CK_KEY_TYPE private_key_type;\n};\n\nstatic void s_aws_custom_key_op_handler_destroy(struct aws_custom_key_op_handler *key_op_handler) {\n",
                    "rendered": {
                      "text": "    struct aws_mutex session_lock;\n    CK_SESSION_HANDLE session_handle;\n    CK_OBJECT_HANDLE private_key_handle;\n    CK_KEY_TYPE private_key_type;\n};\n\nstatic void s_aws_custom_key_op_handler_destroy(struct aws_custom_key_op_handler *key_op_handler) {\n",
                      "markdown": "`    struct aws_mutex session_lock;\n    CK_SESSION_HANDLE session_handle;\n    CK_OBJECT_HANDLE private_key_handle;\n    CK_KEY_TYPE private_key_type;\n};\n\nstatic void s_aws_custom_key_op_handler_destroy(struct aws_custom_key_op_handler *key_op_handler) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_tls_op_handler.c"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 32,
                  "snippet": {
                    "text": "     * on at these times */\n    struct aws_mutex session_lock;\n    CK_SESSION_HANDLE session_handle;\n    CK_OBJECT_HANDLE private_key_handle;\n    CK_KEY_TYPE private_key_type;\n};\n\n",
                    "rendered": {
                      "text": "     * on at these times */\n    struct aws_mutex session_lock;\n    CK_SESSION_HANDLE session_handle;\n    CK_OBJECT_HANDLE private_key_handle;\n    CK_KEY_TYPE private_key_type;\n};\n\n",
                      "markdown": "`     * on at these times */\n    struct aws_mutex session_lock;\n    CK_SESSION_HANDLE session_handle;\n    CK_OBJECT_HANDLE private_key_handle;\n    CK_KEY_TYPE private_key_type;\n};\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/preamble.h"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 14,
                  "endLine": 178,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    AWS_ERROR_MALFORMED_INPUT_STRING,\n    AWS_ERROR_UNIMPLEMENTED,\n    AWS_ERROR_INVALID_STATE,\n    AWS_ERROR_ENVIRONMENT_GET,\n    AWS_ERROR_ENVIRONMENT_SET,\n    AWS_ERROR_ENVIRONMENT_UNSET,\n    AWS_ERROR_STREAM_UNSEEKABLE,\n",
                    "rendered": {
                      "text": "    AWS_ERROR_MALFORMED_INPUT_STRING,\n    AWS_ERROR_UNIMPLEMENTED,\n    AWS_ERROR_INVALID_STATE,\n    AWS_ERROR_ENVIRONMENT_GET,\n    AWS_ERROR_ENVIRONMENT_SET,\n    AWS_ERROR_ENVIRONMENT_UNSET,\n    AWS_ERROR_STREAM_UNSEEKABLE,\n",
                      "markdown": "`    AWS_ERROR_MALFORMED_INPUT_STRING,\n    AWS_ERROR_UNIMPLEMENTED,\n    AWS_ERROR_INVALID_STATE,\n    AWS_ERROR_ENVIRONMENT_GET,\n    AWS_ERROR_ENVIRONMENT_SET,\n    AWS_ERROR_ENVIRONMENT_UNSET,\n    AWS_ERROR_STREAM_UNSEEKABLE,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 53,
                  "endLine": 808,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse, s_test_pem_private_key_parse)\n\nstatic int s_test_pem_cert_chain_comments_and_whitespace(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse, s_test_pem_private_key_parse)\n\nstatic int s_test_pem_cert_chain_comments_and_whitespace(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse, s_test_pem_private_key_parse)\n\nstatic int s_test_pem_cert_chain_comments_and_whitespace(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 23,
                  "endLine": 808,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse, s_test_pem_private_key_parse)\n\nstatic int s_test_pem_cert_chain_comments_and_whitespace(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse, s_test_pem_private_key_parse)\n\nstatic int s_test_pem_cert_chain_comments_and_whitespace(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse, s_test_pem_private_key_parse)\n\nstatic int s_test_pem_cert_chain_comments_and_whitespace(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 67,
                  "endLine": 792,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        0x20, 0xc8, 0x55, 0xb3,\n    };\n\n    struct aws_byte_cursor pem_data = aws_byte_cursor_from_c_str(s_private_key_pem);\n    struct aws_array_list output_list;\n\n    ASSERT_SUCCESS(aws_pem_objects_init_from_file_contents(&output_list, allocator, pem_data));\n",
                    "rendered": {
                      "text": "        0x20, 0xc8, 0x55, 0xb3,\n    };\n\n    struct aws_byte_cursor pem_data = aws_byte_cursor_from_c_str(s_private_key_pem);\n    struct aws_array_list output_list;\n\n    ASSERT_SUCCESS(aws_pem_objects_init_from_file_contents(&output_list, allocator, pem_data));\n",
                      "markdown": "`        0x20, 0xc8, 0x55, 0xb3,\n    };\n\n    struct aws_byte_cursor pem_data = aws_byte_cursor_from_c_str(s_private_key_pem);\n    struct aws_array_list output_list;\n\n    ASSERT_SUCCESS(aws_pem_objects_init_from_file_contents(&output_list, allocator, pem_data));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 25,
                  "endLine": 694,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nstatic int s_test_pem_private_key_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    static const char *s_private_key_pem = \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n                                           \"MIIEpAIBAAKCAQEA12pXSPgORAMlQtYRbxuz/Ocaoran3C2Fjyjhu0vucSEZSwxD\\n\"\n                                           \"Jp75TBQEMafSpSEKAQLeDt7xuDRDYn52V4UE6cF+xTWhtzsf7mhN/lHaDPcvR2AS\\n\"\n                                           \"PAEkzkil8KCLY4e6tTxSwQ97splNuEZ099HoJYTTLFaReIfd1D3zZ1EYcSw8w+GZ\\n\"\n",
                    "rendered": {
                      "text": "\nstatic int s_test_pem_private_key_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    static const char *s_private_key_pem = \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n                                           \"MIIEpAIBAAKCAQEA12pXSPgORAMlQtYRbxuz/Ocaoran3C2Fjyjhu0vucSEZSwxD\\n\"\n                                           \"Jp75TBQEMafSpSEKAQLeDt7xuDRDYn52V4UE6cF+xTWhtzsf7mhN/lHaDPcvR2AS\\n\"\n                                           \"PAEkzkil8KCLY4e6tTxSwQ97splNuEZ099HoJYTTLFaReIfd1D3zZ1EYcSw8w+GZ\\n\"\n",
                      "markdown": "`\nstatic int s_test_pem_private_key_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    static const char *s_private_key_pem = \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n                                           \"MIIEpAIBAAKCAQEA12pXSPgORAMlQtYRbxuz/Ocaoran3C2Fjyjhu0vucSEZSwxD\\n\"\n                                           \"Jp75TBQEMafSpSEKAQLeDt7xuDRDYn52V4UE6cF+xTWhtzsf7mhN/lHaDPcvR2AS\\n\"\n                                           \"PAEkzkil8KCLY4e6tTxSwQ97splNuEZ099HoJYTTLFaReIfd1D3zZ1EYcSw8w+GZ\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 22,
                  "endLine": 692,
                  "endColumn": 33,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(test_pem_cert_chain_parse, s_test_pem_cert_chain_parse)\n\nstatic int s_test_pem_private_key_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    static const char *s_private_key_pem = \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n                                           \"MIIEpAIBAAKCAQEA12pXSPgORAMlQtYRbxuz/Ocaoran3C2Fjyjhu0vucSEZSwxD\\n\"\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(test_pem_cert_chain_parse, s_test_pem_cert_chain_parse)\n\nstatic int s_test_pem_private_key_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    static const char *s_private_key_pem = \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n                                           \"MIIEpAIBAAKCAQEA12pXSPgORAMlQtYRbxuz/Ocaoran3C2Fjyjhu0vucSEZSwxD\\n\"\n",
                      "markdown": "`}\nAWS_TEST_CASE(test_pem_cert_chain_parse, s_test_pem_cert_chain_parse)\n\nstatic int s_test_pem_private_key_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    static const char *s_private_key_pem = \"-----BEGIN RSA PRIVATE KEY-----\\n\"\n                                           \"MIIEpAIBAAKCAQEA12pXSPgORAMlQtYRbxuz/Ocaoran3C2Fjyjhu0vucSEZSwxD\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 63,
                  "endLine": 392,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse_from_file, s_test_pem_private_key_parse_from_file)\n\nstatic int s_test_pem_single_cert_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse_from_file, s_test_pem_private_key_parse_from_file)\n\nstatic int s_test_pem_single_cert_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse_from_file, s_test_pem_private_key_parse_from_file)\n\nstatic int s_test_pem_single_cert_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 23,
                  "endLine": 392,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse_from_file, s_test_pem_private_key_parse_from_file)\n\nstatic int s_test_pem_single_cert_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse_from_file, s_test_pem_private_key_parse_from_file)\n\nstatic int s_test_pem_single_cert_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(test_pem_private_key_parse_from_file, s_test_pem_private_key_parse_from_file)\n\nstatic int s_test_pem_single_cert_parse(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pem_test.c"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 22,
                  "endLine": 304,
                  "endColumn": 33,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(test_pem_cert_parse_from_file_crlf, s_test_pem_cert_parse_from_file_crlf)\n\nstatic int s_test_pem_private_key_parse_from_file(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    static const uint8_t s_expected[] = {\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(test_pem_cert_parse_from_file_crlf, s_test_pem_cert_parse_from_file_crlf)\n\nstatic int s_test_pem_private_key_parse_from_file(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    static const uint8_t s_expected[] = {\n",
                      "markdown": "`}\nAWS_TEST_CASE(test_pem_cert_parse_from_file_crlf, s_test_pem_cert_parse_from_file_crlf)\n\nstatic int s_test_pem_private_key_parse_from_file(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n\n    static const uint8_t s_expected[] = {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/private/pki_utils.h"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 15,
                  "endLine": 116,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    HCERTSTORE *cert_store,\n    PCCERT_CONTEXT *certs,\n    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle);\n\n#endif /* _WIN32 */\n\n",
                    "rendered": {
                      "text": "    HCERTSTORE *cert_store,\n    PCCERT_CONTEXT *certs,\n    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle);\n\n#endif /* _WIN32 */\n\n",
                      "markdown": "`    HCERTSTORE *cert_store,\n    PCCERT_CONTEXT *certs,\n    HCRYPTPROV *crypto_provider,\n    HCRYPTKEY *private_key_handle);\n\n#endif /* _WIN32 */\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/private/pki_utils.h"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 34,
                  "endLine": 111,
                  "endColumn": 45,
                  "snippet": {
                    "text": "AWS_IO_API int aws_import_key_pair_to_cert_context(\n    struct aws_allocator *alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    bool is_client_mode,\n    HCERTSTORE *cert_store,\n    PCCERT_CONTEXT *certs,\n",
                    "rendered": {
                      "text": "AWS_IO_API int aws_import_key_pair_to_cert_context(\n    struct aws_allocator *alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    bool is_client_mode,\n    HCERTSTORE *cert_store,\n    PCCERT_CONTEXT *certs,\n",
                      "markdown": "`AWS_IO_API int aws_import_key_pair_to_cert_context(\n    struct aws_allocator *alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    bool is_client_mode,\n    HCERTSTORE *cert_store,\n    PCCERT_CONTEXT *certs,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/private/pki_utils.h"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 34,
                  "endLine": 53,
                  "endColumn": 42,
                  "snippet": {
                    "text": "int aws_import_pkcs12_to_identity(\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *pkcs12_cursor,\n    const struct aws_byte_cursor *password,\n    CFArrayRef *identity);\n\n/**\n",
                    "rendered": {
                      "text": "int aws_import_pkcs12_to_identity(\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *pkcs12_cursor,\n    const struct aws_byte_cursor *password,\n    CFArrayRef *identity);\n\n/**\n",
                      "markdown": "`int aws_import_pkcs12_to_identity(\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *pkcs12_cursor,\n    const struct aws_byte_cursor *password,\n    CFArrayRef *identity);\n\n/**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/private/pki_utils.h"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 34,
                  "endLine": 41,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    CFArrayRef *identity,\n    const struct aws_string *keychain_path);\n#    endif /* AWS_OS_IOS */\n",
                    "rendered": {
                      "text": "    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    CFArrayRef *identity,\n    const struct aws_string *keychain_path);\n#    endif /* AWS_OS_IOS */\n",
                      "markdown": "`    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    CFArrayRef *identity,\n    const struct aws_string *keychain_path);\n#    endif /* AWS_OS_IOS */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/private/pki_utils.h"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 26,
                  "endLine": 37,
                  "endColumn": 37,
                  "snippet": {
                    "text": " * Imports a PEM armored PKCS#7 public/private key pair\n * into identity for use with SecurityFramework.\n */\nint aws_import_public_and_private_keys_to_identity(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n",
                    "rendered": {
                      "text": " * Imports a PEM armored PKCS#7 public/private key pair\n * into identity for use with SecurityFramework.\n */\nint aws_import_public_and_private_keys_to_identity(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n",
                      "markdown": "` * Imports a PEM armored PKCS#7 public/private key pair\n * into identity for use with SecurityFramework.\n */\nint aws_import_public_and_private_keys_to_identity(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/testing/stream_tester.h"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 73,
                  "endLine": 162,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    switch (style) {\n        case AWS_AUTOGEN_LOREM_IPSUM:\n            pattern = aws_byte_cursor_from_c_str(\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore \"\n                \"et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut \"\n                \"aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse \"\n                \"cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \"\n",
                    "rendered": {
                      "text": "    switch (style) {\n        case AWS_AUTOGEN_LOREM_IPSUM:\n            pattern = aws_byte_cursor_from_c_str(\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore \"\n                \"et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut \"\n                \"aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse \"\n                \"cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \"\n",
                      "markdown": "`    switch (style) {\n        case AWS_AUTOGEN_LOREM_IPSUM:\n            pattern = aws_byte_cursor_from_c_str(\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore \"\n                \"et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut \"\n                \"aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse \"\n                \"cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \"\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 235,
                  "endLine": 21,
                  "endColumn": 243,
                  "snippet": {
                    "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                    "rendered": {
                      "text": "hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-",
                      "markdown": "`hat this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 334,
                  "endLine": 21,
                  "endColumn": 340,
                  "snippet": {
                    "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                    "rendered": {
                      "text": "ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment",
                      "markdown": "`ings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the last update on this, and in the absence of more information, we will be closing this issue soon. If you find that this is still a problem, please feel free to provide a comment or add an upvote to prevent automatic closure, or if the issue is already closed, please feel free to open a new one.\n        stale-pr-message: Greetings! It looks like this PR hasn’t been active in longer than a week, add a comment`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/stale_issue.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 232,
                  "endLine": 20,
                  "endColumn": 238,
                  "snippet": {
                    "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                    "rendered": {
                      "text": "ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las",
                      "markdown": "`ty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! Sorry to say but this is a very old issue that is probably not getting as much attention as it deservers. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to open a new one.\n        stale-issue-message: Greetings! It looks like this issue hasn’t been active in longer than a week. We encourage you to check if this is still an issue in the latest release. Because it has been longer than a week since the las`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/socket.c"
                },
                "region": {
                  "startLine": 1223,
                  "startColumn": 74,
                  "endLine": 1223,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n    AWS_LOGF_DEBUG(\n        AWS_LS_IO_SOCKET,\n        \"id=%p fd=%d: setting socket options to: keep-alive %d, keep-alive timeout %d, keep-alive interval %d, \"\n        \"keep-alive probe \"\n        \"count %d.\",\n        (void *)socket,\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_DEBUG(\n        AWS_LS_IO_SOCKET,\n        \"id=%p fd=%d: setting socket options to: keep-alive %d, keep-alive timeout %d, keep-alive interval %d, \"\n        \"keep-alive probe \"\n        \"count %d.\",\n        (void *)socket,\n",
                      "markdown": "`\n    AWS_LOGF_DEBUG(\n        AWS_LS_IO_SOCKET,\n        \"id=%p fd=%d: setting socket options to: keep-alive %d, keep-alive timeout %d, keep-alive interval %d, \"\n        \"keep-alive probe \"\n        \"count %d.\",\n        (void *)socket,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/socket.c"
                },
                "region": {
                  "startLine": 761,
                  "startColumn": 40,
                  "endLine": 761,
                  "endColumn": 49,
                  "snippet": {
                    "text": "                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_SOCKET,\n                \"id=%p fd=%d: scheduling timeout task for %llu.\",\n                (void *)socket,\n                socket->io_handle.data.fd,\n                (unsigned long long)timeout);\n",
                    "rendered": {
                      "text": "                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_SOCKET,\n                \"id=%p fd=%d: scheduling timeout task for %llu.\",\n                (void *)socket,\n                socket->io_handle.data.fd,\n                (unsigned long long)timeout);\n",
                      "markdown": "`                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_SOCKET,\n                \"id=%p fd=%d: scheduling timeout task for %llu.\",\n                (void *)socket,\n                socket->io_handle.data.fd,\n                (unsigned long long)timeout);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/socket.c"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 11,
                  "endLine": 757,
                  "endColumn": 20,
                  "snippet": {
                    "text": "             * happens, we consider that a timeout. */\n            uint64_t timeout = 0;\n            aws_event_loop_current_clock_time(event_loop, &timeout);\n            timeout += aws_timestamp_convert(\n                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_SOCKET,\n",
                    "rendered": {
                      "text": "             * happens, we consider that a timeout. */\n            uint64_t timeout = 0;\n            aws_event_loop_current_clock_time(event_loop, &timeout);\n            timeout += aws_timestamp_convert(\n                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_SOCKET,\n",
                      "markdown": "`             * happens, we consider that a timeout. */\n            uint64_t timeout = 0;\n            aws_event_loop_current_clock_time(event_loop, &timeout);\n            timeout += aws_timestamp_convert(\n                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_SOCKET,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/socket.c"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 20,
                  "endLine": 755,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n            /* schedule a task to run at the connect timeout interval, if this task runs before the connect\n             * happens, we consider that a timeout. */\n            uint64_t timeout = 0;\n            aws_event_loop_current_clock_time(event_loop, &timeout);\n            timeout += aws_timestamp_convert(\n                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n",
                    "rendered": {
                      "text": "\n            /* schedule a task to run at the connect timeout interval, if this task runs before the connect\n             * happens, we consider that a timeout. */\n            uint64_t timeout = 0;\n            aws_event_loop_current_clock_time(event_loop, &timeout);\n            timeout += aws_timestamp_convert(\n                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n",
                      "markdown": "`\n            /* schedule a task to run at the connect timeout interval, if this task runs before the connect\n             * happens, we consider that a timeout. */\n            uint64_t timeout = 0;\n            aws_event_loop_current_clock_time(event_loop, &timeout);\n            timeout += aws_timestamp_convert(\n                socket->options.connect_timeout_ms, AWS_TIMESTAMP_MILLIS, AWS_TIMESTAMP_NANOS, NULL);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/socket.c"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 49,
                  "endLine": 496,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    struct posix_socket_connect_args *socket_args = args;\n\n    AWS_LOGF_TRACE(AWS_LS_IO_SOCKET, \"task_id=%p: timeout task triggered, evaluating timeouts.\", (void *)task);\n    /* successful connection will have nulled out connect_args->socket */\n    if (socket_args->socket) {\n        AWS_LOGF_ERROR(\n",
                    "rendered": {
                      "text": "\n    struct posix_socket_connect_args *socket_args = args;\n\n    AWS_LOGF_TRACE(AWS_LS_IO_SOCKET, \"task_id=%p: timeout task triggered, evaluating timeouts.\", (void *)task);\n    /* successful connection will have nulled out connect_args->socket */\n    if (socket_args->socket) {\n        AWS_LOGF_ERROR(\n",
                      "markdown": "`\n    struct posix_socket_connect_args *socket_args = args;\n\n    AWS_LOGF_TRACE(AWS_LS_IO_SOCKET, \"task_id=%p: timeout task triggered, evaluating timeouts.\", (void *)task);\n    /* successful connection will have nulled out connect_args->socket */\n    if (socket_args->socket) {\n        AWS_LOGF_ERROR(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/host_resolver.c"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 31,
                  "endLine": 45,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    hints.ai_flags = AI_ALL | AI_V4MAPPED;\n#    endif /* __OpenBSD__ */\n\n    int err_code = getaddrinfo(hostname_cstr, NULL, &hints, &result);\n#endif\n\n    if (err_code) {\n",
                    "rendered": {
                      "text": "    hints.ai_flags = AI_ALL | AI_V4MAPPED;\n#    endif /* __OpenBSD__ */\n\n    int err_code = getaddrinfo(hostname_cstr, NULL, &hints, &result);\n#endif\n\n    if (err_code) {\n",
                      "markdown": "`    hints.ai_flags = AI_ALL | AI_V4MAPPED;\n#    endif /* __OpenBSD__ */\n\n    int err_code = getaddrinfo(hostname_cstr, NULL, &hints, &result);\n#endif\n\n    if (err_code) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/host_resolver.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 31,
                  "endLine": 35,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n#if defined(ANDROID)\n    int err_code = getaddrinfo(hostname_cstr, NULL, NULL, &result);\n#else\n    struct addrinfo hints;\n    AWS_ZERO_STRUCT(hints);\n",
                    "rendered": {
                      "text": "\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n#if defined(ANDROID)\n    int err_code = getaddrinfo(hostname_cstr, NULL, NULL, &result);\n#else\n    struct addrinfo hints;\n    AWS_ZERO_STRUCT(hints);\n",
                      "markdown": "`\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n#if defined(ANDROID)\n    int err_code = getaddrinfo(hostname_cstr, NULL, NULL, &result);\n#else\n    struct addrinfo hints;\n    AWS_ZERO_STRUCT(hints);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/host_resolver.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 63,
                  "endLine": 31,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    char address_buffer[max_len];\n\n    const char *hostname_cstr = aws_string_c_str(host_name);\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n#if defined(ANDROID)\n",
                    "rendered": {
                      "text": "    char address_buffer[max_len];\n\n    const char *hostname_cstr = aws_string_c_str(host_name);\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n#if defined(ANDROID)\n",
                      "markdown": "`    char address_buffer[max_len];\n\n    const char *hostname_cstr = aws_string_c_str(host_name);\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n#if defined(ANDROID)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/host_resolver.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 16,
                  "endLine": 30,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    socklen_t max_len = INET6_ADDRSTRLEN;\n    char address_buffer[max_len];\n\n    const char *hostname_cstr = aws_string_c_str(host_name);\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n",
                    "rendered": {
                      "text": "    socklen_t max_len = INET6_ADDRSTRLEN;\n    char address_buffer[max_len];\n\n    const char *hostname_cstr = aws_string_c_str(host_name);\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n",
                      "markdown": "`    socklen_t max_len = INET6_ADDRSTRLEN;\n    char address_buffer[max_len];\n\n    const char *hostname_cstr = aws_string_c_str(host_name);\n    AWS_LOGF_DEBUG(AWS_LS_IO_DNS, \"static: resolving host %s\", hostname_cstr);\n\n    /* Android would prefer NO HINTS IF YOU DON'T MIND, SIR */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/shared_library.c"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "endLine": 23,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        const char *error = dlerror();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to load shared library at path \\\"%s\\\" with error: %s\",\n            (void *)library,\n            library_path ? library_path : s_null,\n            error ? error : s_unknown_error);\n",
                    "rendered": {
                      "text": "        const char *error = dlerror();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to load shared library at path \\\"%s\\\" with error: %s\",\n            (void *)library,\n            library_path ? library_path : s_null,\n            error ? error : s_unknown_error);\n",
                      "markdown": "`        const char *error = dlerror();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to load shared library at path \\\"%s\\\" with error: %s\",\n            (void *)library,\n            library_path ? library_path : s_null,\n            error ? error : s_unknown_error);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/posix/shared_library.c"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 29,
                  "endLine": 58,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        const char *error = dlerror();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to find shared library symbol \\\"%s\\\" with error: %s\",\n            (void *)library,\n            symbol_name ? symbol_name : s_null,\n            error ? error : s_unknown_error);\n",
                    "rendered": {
                      "text": "        const char *error = dlerror();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to find shared library symbol \\\"%s\\\" with error: %s\",\n            (void *)library,\n            symbol_name ? symbol_name : s_null,\n            error ? error : s_unknown_error);\n",
                      "markdown": "`        const char *error = dlerror();\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_SHARED_LIBRARY,\n            \"id=%p: Failed to find shared library symbol \\\"%s\\\" with error: %s\",\n            (void *)library,\n            symbol_name ? symbol_name : s_null,\n            error ? error : s_unknown_error);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/bsd/kqueue_event_loop.c"
                },
                "region": {
                  "startLine": 986,
                  "startColumn": 77,
                  "endLine": 986,
                  "endColumn": 81,
                  "snippet": {
                    "text": "\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu using timeout of %ds %lluns.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n",
                    "rendered": {
                      "text": "\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu using timeout of %ds %lluns.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n",
                      "markdown": "`\n            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu using timeout of %ds %lluns.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/bsd/kqueue_event_loop.c"
                },
                "region": {
                  "startLine": 987,
                  "startColumn": 27,
                  "endLine": 987,
                  "endColumn": 36,
                  "snippet": {
                    "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu using timeout of %ds %lluns.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                (int)timeout_sec,\n",
                    "rendered": {
                      "text": "            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu using timeout of %ds %lluns.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                (int)timeout_sec,\n",
                      "markdown": "`            AWS_LOGF_TRACE(\n                AWS_LS_IO_EVENT_LOOP,\n                \"id=%p: detected more scheduled tasks with the next occurring at \"\n                \"%llu using timeout of %ds %lluns.\",\n                (void *)event_loop,\n                (unsigned long long)timeout_ns,\n                (int)timeout_sec,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/bsd/kqueue_event_loop.c"
                },
                "region": {
                  "startLine": 857,
                  "startColumn": 23,
                  "endLine": 857,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %ds, and max events to process per tick %d\",\n        (void *)event_loop,\n        DEFAULT_TIMEOUT_SEC,\n        MAX_EVENTS);\n",
                    "rendered": {
                      "text": "\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %ds, and max events to process per tick %d\",\n        (void *)event_loop,\n        DEFAULT_TIMEOUT_SEC,\n        MAX_EVENTS);\n",
                      "markdown": "`\n    AWS_LOGF_INFO(\n        AWS_LS_IO_EVENT_LOOP,\n        \"id=%p: default timeout %ds, and max events to process per tick %d\",\n        (void *)event_loop,\n        DEFAULT_TIMEOUT_SEC,\n        MAX_EVENTS);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/bsd/kqueue_event_loop.c"
                },
                "region": {
                  "startLine": 850,
                  "startColumn": 19,
                  "endLine": 850,
                  "endColumn": 28,
                  "snippet": {
                    "text": "     * This makes the kqueue_event_loop behave more like the other platform implementations. */\n    struct handle_data *io_handle_events[MAX_EVENTS];\n\n    struct timespec timeout = {\n        .tv_sec = DEFAULT_TIMEOUT_SEC,\n        .tv_nsec = 0,\n    };\n",
                    "rendered": {
                      "text": "     * This makes the kqueue_event_loop behave more like the other platform implementations. */\n    struct handle_data *io_handle_events[MAX_EVENTS];\n\n    struct timespec timeout = {\n        .tv_sec = DEFAULT_TIMEOUT_SEC,\n        .tv_nsec = 0,\n    };\n",
                      "markdown": "`     * This makes the kqueue_event_loop behave more like the other platform implementations. */\n    struct handle_data *io_handle_events[MAX_EVENTS];\n\n    struct timespec timeout = {\n        .tv_sec = DEFAULT_TIMEOUT_SEC,\n        .tv_nsec = 0,\n    };\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 17,
                  "endLine": 1121,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n                &password_cur,\n                &secure_transport_ctx->certs)) {\n            AWS_LOGF_ERROR(\n                AWS_LS_IO_TLS, \"static: failed to import pkcs#12 certificate with error %d.\", aws_last_error());\n",
                    "rendered": {
                      "text": "        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n                &password_cur,\n                &secure_transport_ctx->certs)) {\n            AWS_LOGF_ERROR(\n                AWS_LS_IO_TLS, \"static: failed to import pkcs#12 certificate with error %d.\", aws_last_error());\n",
                      "markdown": "`        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n                &password_cur,\n                &secure_transport_ctx->certs)) {\n            AWS_LOGF_ERROR(\n                AWS_LS_IO_TLS, \"static: failed to import pkcs#12 certificate with error %d.\", aws_last_error());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 88,
                  "endLine": 1117,
                  "endColumn": 96,
                  "snippet": {
                    "text": "        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: a pkcs$12 certificate and key has been set, setting it up now.\");\n\n        struct aws_byte_cursor pkcs12_blob_cur = aws_byte_cursor_from_buf(&options->pkcs12);\n        struct aws_byte_cursor password_cur = aws_byte_cursor_from_buf(&options->pkcs12_password);\n        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n",
                    "rendered": {
                      "text": "        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: a pkcs$12 certificate and key has been set, setting it up now.\");\n\n        struct aws_byte_cursor pkcs12_blob_cur = aws_byte_cursor_from_buf(&options->pkcs12);\n        struct aws_byte_cursor password_cur = aws_byte_cursor_from_buf(&options->pkcs12_password);\n        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n",
                      "markdown": "`        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: a pkcs$12 certificate and key has been set, setting it up now.\");\n\n        struct aws_byte_cursor pkcs12_blob_cur = aws_byte_cursor_from_buf(&options->pkcs12);\n        struct aws_byte_cursor password_cur = aws_byte_cursor_from_buf(&options->pkcs12_password);\n        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 31,
                  "endLine": 1117,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: a pkcs$12 certificate and key has been set, setting it up now.\");\n\n        struct aws_byte_cursor pkcs12_blob_cur = aws_byte_cursor_from_buf(&options->pkcs12);\n        struct aws_byte_cursor password_cur = aws_byte_cursor_from_buf(&options->pkcs12_password);\n        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n",
                    "rendered": {
                      "text": "        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: a pkcs$12 certificate and key has been set, setting it up now.\");\n\n        struct aws_byte_cursor pkcs12_blob_cur = aws_byte_cursor_from_buf(&options->pkcs12);\n        struct aws_byte_cursor password_cur = aws_byte_cursor_from_buf(&options->pkcs12_password);\n        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n",
                      "markdown": "`        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: a pkcs$12 certificate and key has been set, setting it up now.\");\n\n        struct aws_byte_cursor pkcs12_blob_cur = aws_byte_cursor_from_buf(&options->pkcs12);\n        struct aws_byte_cursor password_cur = aws_byte_cursor_from_buf(&options->pkcs12_password);\n        if (aws_import_pkcs12_to_identity(\n                secure_transport_ctx->wrapped_allocator,\n                &pkcs12_blob_cur,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 17,
                  "endLine": 1105,
                  "endColumn": 28,
                  "snippet": {
                    "text": "                alloc,\n                secure_transport_ctx->wrapped_allocator,\n                &cert_chain_cur,\n                &private_key_cur,\n                &secure_transport_ctx->certs,\n                options->keychain_path)) {\n            AWS_LOGF_ERROR(\n",
                    "rendered": {
                      "text": "                alloc,\n                secure_transport_ctx->wrapped_allocator,\n                &cert_chain_cur,\n                &private_key_cur,\n                &secure_transport_ctx->certs,\n                options->keychain_path)) {\n            AWS_LOGF_ERROR(\n",
                      "markdown": "`                alloc,\n                secure_transport_ctx->wrapped_allocator,\n                &cert_chain_cur,\n                &private_key_cur,\n                &secure_transport_ctx->certs,\n                options->keychain_path)) {\n            AWS_LOGF_ERROR(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 34,
                  "endLine": 1101,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n                &cert_chain_cur,\n",
                    "rendered": {
                      "text": "\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n                &cert_chain_cur,\n",
                      "markdown": "`\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n                &cert_chain_cur,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1100,
                  "startColumn": 84,
                  "endLine": 1100,
                  "endColumn": 95,
                  "snippet": {
                    "text": "        }\n\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n",
                    "rendered": {
                      "text": "        }\n\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n",
                      "markdown": "`        }\n\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1100,
                  "startColumn": 31,
                  "endLine": 1100,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        }\n\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n",
                    "rendered": {
                      "text": "        }\n\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n",
                      "markdown": "`        }\n\n        struct aws_byte_cursor cert_chain_cur = aws_byte_cursor_from_buf(&options->certificate);\n        struct aws_byte_cursor private_key_cur = aws_byte_cursor_from_buf(&options->private_key);\n        if (aws_import_public_and_private_keys_to_identity(\n                alloc,\n                secure_transport_ctx->wrapped_allocator,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 68,
                  "endLine": 1093,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            goto cleanup_wrapped_allocator;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_wrapped_allocator;\n",
                    "rendered": {
                      "text": "            goto cleanup_wrapped_allocator;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_wrapped_allocator;\n",
                      "markdown": "`            goto cleanup_wrapped_allocator;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_wrapped_allocator;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 39,
                  "endLine": 1093,
                  "endColumn": 50,
                  "snippet": {
                    "text": "            goto cleanup_wrapped_allocator;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_wrapped_allocator;\n",
                    "rendered": {
                      "text": "            goto cleanup_wrapped_allocator;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_wrapped_allocator;\n",
                      "markdown": "`            goto cleanup_wrapped_allocator;\n        }\n\n        if (!aws_text_is_utf8(options->private_key.buffer, options->private_key.len)) {\n            AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: failed to import private key, must be ASCII/UTF-8 encoded\");\n            aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto cleanup_wrapped_allocator;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/secure_transport_tls_channel_handler.c"
                },
                "region": {
                  "startLine": 1083,
                  "startColumn": 98,
                  "endLine": 1083,
                  "endColumn": 109,
                  "snippet": {
                    "text": "        secure_transport_ctx,\n        (aws_simple_completion_callback *)s_aws_secure_transport_ctx_destroy);\n\n    if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\n#if !defined(AWS_OS_IOS)\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: certificate and key have been set, setting them up now.\");\n\n",
                    "rendered": {
                      "text": "        secure_transport_ctx,\n        (aws_simple_completion_callback *)s_aws_secure_transport_ctx_destroy);\n\n    if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\n#if !defined(AWS_OS_IOS)\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: certificate and key have been set, setting them up now.\");\n\n",
                      "markdown": "`        secure_transport_ctx,\n        (aws_simple_completion_callback *)s_aws_secure_transport_ctx_destroy);\n\n    if (aws_tls_options_buf_is_set(&options->certificate) && aws_tls_options_buf_is_set(&options->private_key)) {\n#if !defined(AWS_OS_IOS)\n        AWS_LOGF_DEBUG(AWS_LS_IO_TLS, \"static: certificate and key have been set, setting them up now.\");\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 18,
                  "endLine": 313,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    CFRelease(pkcs12_data);\n\n    if (password_ref) {\n        CFRelease(password_ref);\n    }\n\n    CFRelease(dictionary);\n",
                    "rendered": {
                      "text": "    CFRelease(pkcs12_data);\n\n    if (password_ref) {\n        CFRelease(password_ref);\n    }\n\n    CFRelease(dictionary);\n",
                      "markdown": "`    CFRelease(pkcs12_data);\n\n    if (password_ref) {\n        CFRelease(password_ref);\n    }\n\n    CFRelease(dictionary);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 8,
                  "endLine": 312,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    aws_mutex_unlock(&s_sec_mutex);\n    CFRelease(pkcs12_data);\n\n    if (password_ref) {\n        CFRelease(password_ref);\n    }\n\n",
                    "rendered": {
                      "text": "    aws_mutex_unlock(&s_sec_mutex);\n    CFRelease(pkcs12_data);\n\n    if (password_ref) {\n        CFRelease(password_ref);\n    }\n\n",
                      "markdown": "`    aws_mutex_unlock(&s_sec_mutex);\n    CFRelease(pkcs12_data);\n\n    if (password_ref) {\n        CFRelease(password_ref);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 65,
                  "endLine": 305,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n\n    aws_mutex_lock(&s_sec_mutex);\n    OSStatus status = SecPKCS12Import(pkcs12_data, dictionary, &items);\n",
                    "rendered": {
                      "text": "        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n\n    aws_mutex_lock(&s_sec_mutex);\n    OSStatus status = SecPKCS12Import(pkcs12_data, dictionary, &items);\n",
                      "markdown": "`        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n\n    aws_mutex_lock(&s_sec_mutex);\n    OSStatus status = SecPKCS12Import(pkcs12_data, dictionary, &items);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 72,
                  "endLine": 302,
                  "endColumn": 80,
                  "snippet": {
                    "text": "    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n",
                    "rendered": {
                      "text": "    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n",
                      "markdown": "`    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 57,
                  "endLine": 302,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n",
                    "rendered": {
                      "text": "    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n",
                      "markdown": "`    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 8,
                  "endLine": 302,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n",
                    "rendered": {
                      "text": "    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n",
                      "markdown": "`    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n    CFDictionaryAddValue(dictionary, kSecImportExportPassphrase, password_ref);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 8,
                  "endLine": 301,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n",
                    "rendered": {
                      "text": "\n    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n",
                      "markdown": "`\n    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 16,
                  "endLine": 299,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n    CFMutableDictionaryRef dictionary = CFDictionaryCreateMutable(cf_alloc, 0, NULL, NULL);\n\n    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n",
                    "rendered": {
                      "text": "\n    CFMutableDictionaryRef dictionary = CFDictionaryCreateMutable(cf_alloc, 0, NULL, NULL);\n\n    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n",
                      "markdown": "`\n    CFMutableDictionaryRef dictionary = CFDictionaryCreateMutable(cf_alloc, 0, NULL, NULL);\n\n    CFStringRef password_ref = CFSTR(\"\");\n\n    if (password->len) {\n        password_ref = CFStringCreateWithBytes(cf_alloc, password->ptr, password->len, kCFStringEncodingUTF8, false);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 34,
                  "endLine": 292,
                  "endColumn": 42,
                  "snippet": {
                    "text": "int aws_import_pkcs12_to_identity(\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *pkcs12_cursor,\n    const struct aws_byte_cursor *password,\n    CFArrayRef *identity) {\n    CFDataRef pkcs12_data = CFDataCreate(cf_alloc, pkcs12_cursor->ptr, pkcs12_cursor->len);\n    CFArrayRef items = NULL;\n",
                    "rendered": {
                      "text": "int aws_import_pkcs12_to_identity(\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *pkcs12_cursor,\n    const struct aws_byte_cursor *password,\n    CFArrayRef *identity) {\n    CFDataRef pkcs12_data = CFDataCreate(cf_alloc, pkcs12_cursor->ptr, pkcs12_cursor->len);\n    CFArrayRef items = NULL;\n",
                      "markdown": "`int aws_import_pkcs12_to_identity(\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *pkcs12_cursor,\n    const struct aws_byte_cursor *password,\n    CFArrayRef *identity) {\n    CFDataRef pkcs12_data = CFDataCreate(cf_alloc, pkcs12_cursor->ptr, pkcs12_cursor->len);\n    CFArrayRef items = NULL;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 62,
                  "endLine": 199,
                  "endColumn": 73,
                  "snippet": {
                    "text": "     */\n    if (key_status == errSecUnknownFormat) {\n        AWS_LOGF_TRACE(AWS_LS_IO_PKI, \"static: error reading private key format, try ECC key format.\");\n        if (aws_import_ecc_key_into_keychain(alloc, cf_alloc, private_key, import_keychain)) {\n            result = aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto done;\n        }\n",
                    "rendered": {
                      "text": "     */\n    if (key_status == errSecUnknownFormat) {\n        AWS_LOGF_TRACE(AWS_LS_IO_PKI, \"static: error reading private key format, try ECC key format.\");\n        if (aws_import_ecc_key_into_keychain(alloc, cf_alloc, private_key, import_keychain)) {\n            result = aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto done;\n        }\n",
                      "markdown": "`     */\n    if (key_status == errSecUnknownFormat) {\n        AWS_LOGF_TRACE(AWS_LS_IO_PKI, \"static: error reading private key format, try ECC key format.\");\n        if (aws_import_ecc_key_into_keychain(alloc, cf_alloc, private_key, import_keychain)) {\n            result = aws_raise_error(AWS_IO_FILE_VALIDATION_FAILURE);\n            goto done;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 28,
                  "endLine": 183,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    /* import private key */\n    format = kSecFormatUnknown;\n    item_type = kSecItemTypePrivateKey;\n    OSStatus key_status =\n        SecItemImport(key_data, NULL, &format, &item_type, 0, &import_params, import_keychain, &key_import_output);\n\n",
                    "rendered": {
                      "text": "\n    /* import private key */\n    format = kSecFormatUnknown;\n    item_type = kSecItemTypePrivateKey;\n    OSStatus key_status =\n        SecItemImport(key_data, NULL, &format, &item_type, 0, &import_params, import_keychain, &key_import_output);\n\n",
                      "markdown": "`\n    /* import private key */\n    format = kSecFormatUnknown;\n    item_type = kSecItemTypePrivateKey;\n    OSStatus key_status =\n        SecItemImport(key_data, NULL, &format, &item_type, 0, &import_params, import_keychain, &key_import_output);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 56,
                  "endLine": 130,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    key_data = CFDataCreate(cf_alloc, private_key->ptr, private_key->len);\n    if (!key_data) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: failed creating private key data.\");\n        result = aws_raise_error(AWS_ERROR_SYS_CALL_FAILURE);\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    key_data = CFDataCreate(cf_alloc, private_key->ptr, private_key->len);\n    if (!key_data) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: failed creating private key data.\");\n        result = aws_raise_error(AWS_ERROR_SYS_CALL_FAILURE);\n",
                      "markdown": "`        goto done;\n    }\n\n    key_data = CFDataCreate(cf_alloc, private_key->ptr, private_key->len);\n    if (!key_data) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: failed creating private key data.\");\n        result = aws_raise_error(AWS_ERROR_SYS_CALL_FAILURE);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 38,
                  "endLine": 130,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        goto done;\n    }\n\n    key_data = CFDataCreate(cf_alloc, private_key->ptr, private_key->len);\n    if (!key_data) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: failed creating private key data.\");\n        result = aws_raise_error(AWS_ERROR_SYS_CALL_FAILURE);\n",
                    "rendered": {
                      "text": "        goto done;\n    }\n\n    key_data = CFDataCreate(cf_alloc, private_key->ptr, private_key->len);\n    if (!key_data) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: failed creating private key data.\");\n        result = aws_raise_error(AWS_ERROR_SYS_CALL_FAILURE);\n",
                      "markdown": "`        goto done;\n    }\n\n    key_data = CFDataCreate(cf_alloc, private_key->ptr, private_key->len);\n    if (!key_data) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: failed creating private key data.\");\n        result = aws_raise_error(AWS_ERROR_SYS_CALL_FAILURE);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 21,
                  "endLine": 100,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    CFArrayRef *identity,\n    const struct aws_string *keychain_path) {\n    AWS_PRECONDITION(public_cert_chain != NULL);\n    AWS_PRECONDITION(private_key != NULL);\n\n    int result = AWS_OP_ERR;\n\n",
                    "rendered": {
                      "text": "    CFArrayRef *identity,\n    const struct aws_string *keychain_path) {\n    AWS_PRECONDITION(public_cert_chain != NULL);\n    AWS_PRECONDITION(private_key != NULL);\n\n    int result = AWS_OP_ERR;\n\n",
                      "markdown": "`    CFArrayRef *identity,\n    const struct aws_string *keychain_path) {\n    AWS_PRECONDITION(public_cert_chain != NULL);\n    AWS_PRECONDITION(private_key != NULL);\n\n    int result = AWS_OP_ERR;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 34,
                  "endLine": 96,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    CFArrayRef *identity,\n    const struct aws_string *keychain_path) {\n    AWS_PRECONDITION(public_cert_chain != NULL);\n",
                    "rendered": {
                      "text": "    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    CFArrayRef *identity,\n    const struct aws_string *keychain_path) {\n    AWS_PRECONDITION(public_cert_chain != NULL);\n",
                      "markdown": "`    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n    const struct aws_byte_cursor *private_key,\n    CFArrayRef *identity,\n    const struct aws_string *keychain_path) {\n    AWS_PRECONDITION(public_cert_chain != NULL);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 26,
                  "endLine": 92,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    return result;\n}\n\nint aws_import_public_and_private_keys_to_identity(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n",
                    "rendered": {
                      "text": "    return result;\n}\n\nint aws_import_public_and_private_keys_to_identity(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n",
                      "markdown": "`    return result;\n}\n\nint aws_import_public_and_private_keys_to_identity(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *public_cert_chain,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 52,
                  "endLine": 64,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n        /* Import ECC key data into keychain. */\n        SecExternalFormat format = kSecFormatOpenSSL;\n        SecExternalItemType item_type = kSecItemTypePrivateKey;\n        SecItemImportExportKeyParameters import_params;\n        AWS_ZERO_STRUCT(import_params);\n        import_params.version = SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION;\n",
                    "rendered": {
                      "text": "\n        /* Import ECC key data into keychain. */\n        SecExternalFormat format = kSecFormatOpenSSL;\n        SecExternalItemType item_type = kSecItemTypePrivateKey;\n        SecItemImportExportKeyParameters import_params;\n        AWS_ZERO_STRUCT(import_params);\n        import_params.version = SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION;\n",
                      "markdown": "`\n        /* Import ECC key data into keychain. */\n        SecExternalFormat format = kSecFormatOpenSSL;\n        SecExternalItemType item_type = kSecItemTypePrivateKey;\n        SecItemImportExportKeyParameters import_params;\n        AWS_ZERO_STRUCT(import_params);\n        import_params.version = SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 82,
                  "endLine": 43,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    struct aws_array_list decoded_key_buffer_list;\n\n    /* Decode PEM format file to DER format */\n    if (aws_pem_objects_init_from_file_contents(&decoded_key_buffer_list, alloc, *private_key)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: Failed to decode PEM private key to DER format.\");\n        goto ecc_import_cleanup;\n    }\n",
                    "rendered": {
                      "text": "    struct aws_array_list decoded_key_buffer_list;\n\n    /* Decode PEM format file to DER format */\n    if (aws_pem_objects_init_from_file_contents(&decoded_key_buffer_list, alloc, *private_key)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: Failed to decode PEM private key to DER format.\");\n        goto ecc_import_cleanup;\n    }\n",
                      "markdown": "`    struct aws_array_list decoded_key_buffer_list;\n\n    /* Decode PEM format file to DER format */\n    if (aws_pem_objects_init_from_file_contents(&decoded_key_buffer_list, alloc, *private_key)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_PKI, \"static: Failed to decode PEM private key to DER format.\");\n        goto ecc_import_cleanup;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 21,
                  "endLine": 37,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    SecKeychainRef import_keychain) {\n    // Ensure imported_keychain is not NULL\n    AWS_PRECONDITION(import_keychain != NULL);\n    AWS_PRECONDITION(private_key != NULL);\n\n    int result = AWS_OP_ERR;\n    struct aws_array_list decoded_key_buffer_list;\n",
                    "rendered": {
                      "text": "    SecKeychainRef import_keychain) {\n    // Ensure imported_keychain is not NULL\n    AWS_PRECONDITION(import_keychain != NULL);\n    AWS_PRECONDITION(private_key != NULL);\n\n    int result = AWS_OP_ERR;\n    struct aws_array_list decoded_key_buffer_list;\n",
                      "markdown": "`    SecKeychainRef import_keychain) {\n    // Ensure imported_keychain is not NULL\n    AWS_PRECONDITION(import_keychain != NULL);\n    AWS_PRECONDITION(private_key != NULL);\n\n    int result = AWS_OP_ERR;\n    struct aws_array_list decoded_key_buffer_list;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 34,
                  "endLine": 33,
                  "endColumn": 45,
                  "snippet": {
                    "text": "int aws_import_ecc_key_into_keychain(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *private_key,\n    SecKeychainRef import_keychain) {\n    // Ensure imported_keychain is not NULL\n    AWS_PRECONDITION(import_keychain != NULL);\n",
                    "rendered": {
                      "text": "int aws_import_ecc_key_into_keychain(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *private_key,\n    SecKeychainRef import_keychain) {\n    // Ensure imported_keychain is not NULL\n    AWS_PRECONDITION(import_keychain != NULL);\n",
                      "markdown": "`int aws_import_ecc_key_into_keychain(\n    struct aws_allocator *alloc,\n    CFAllocatorRef cf_alloc,\n    const struct aws_byte_cursor *private_key,\n    SecKeychainRef import_keychain) {\n    // Ensure imported_keychain is not NULL\n    AWS_PRECONDITION(import_keychain != NULL);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/darwin/darwin_pki_utils.c"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 4,
                  "endLine": 26,
                  "endColumn": 15,
                  "snippet": {
                    "text": " * Helper function to import ECC private key in PEM format into `import_keychain`. Return\n * AWS_OP_SUCCESS if successfully imported a private key or find a duplicate key in the\n * `import_keychain`, otherwise return AWS_OP_ERR.\n * `private_key`: UTF-8 key data in PEM format. If the key file contains multiple key sections,\n * the function will only import the first valid key.\n * `import_keychain`: The keychain to be imported to. `import_keychain` should not be NULL.\n */\n",
                    "rendered": {
                      "text": " * Helper function to import ECC private key in PEM format into `import_keychain`. Return\n * AWS_OP_SUCCESS if successfully imported a private key or find a duplicate key in the\n * `import_keychain`, otherwise return AWS_OP_ERR.\n * `private_key`: UTF-8 key data in PEM format. If the key file contains multiple key sections,\n * the function will only import the first valid key.\n * `import_keychain`: The keychain to be imported to. `import_keychain` should not be NULL.\n */\n",
                      "markdown": "` * Helper function to import ECC private key in PEM format into `import_keychain`. Return\n * AWS_OP_SUCCESS if successfully imported a private key or find a duplicate key in the\n * `import_keychain`, otherwise return AWS_OP_ERR.\n * `private_key`: UTF-8 key data in PEM format. If the key file contains multiple key sections,\n * the function will only import the first valid key.\n * `import_keychain`: The keychain to be imported to. `import_keychain` should not be NULL.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/io.c"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 44,
                  "endLine": 151,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        \"System call error during attempt to load shared library\"),\n    AWS_DEFINE_ERROR_INFO_IO(\n        AWS_IO_SHARED_LIBRARY_FIND_SYMBOL_FAILURE,\n        \"System call error during attempt to find shared library symbol\"),\n    AWS_DEFINE_ERROR_INFO_IO(\n        AWS_IO_TLS_NEGOTIATION_TIMEOUT,\n        \"Channel shutdown due to tls negotiation timeout\"),\n",
                    "rendered": {
                      "text": "        \"System call error during attempt to load shared library\"),\n    AWS_DEFINE_ERROR_INFO_IO(\n        AWS_IO_SHARED_LIBRARY_FIND_SYMBOL_FAILURE,\n        \"System call error during attempt to find shared library symbol\"),\n    AWS_DEFINE_ERROR_INFO_IO(\n        AWS_IO_TLS_NEGOTIATION_TIMEOUT,\n        \"Channel shutdown due to tls negotiation timeout\"),\n",
                      "markdown": "`        \"System call error during attempt to load shared library\"),\n    AWS_DEFINE_ERROR_INFO_IO(\n        AWS_IO_SHARED_LIBRARY_FIND_SYMBOL_FAILURE,\n        \"System call error during attempt to find shared library symbol\"),\n    AWS_DEFINE_ERROR_INFO_IO(\n        AWS_IO_TLS_NEGOTIATION_TIMEOUT,\n        \"Channel shutdown due to tls negotiation timeout\"),\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_private.h"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 40,
                  "endLine": 146,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    struct aws_pkcs11_lib *pkcs11_lib,\n    const struct aws_byte_cursor *user_pin,\n    const struct aws_byte_cursor *match_token_label,\n    const struct aws_byte_cursor *match_private_key_label,\n    const uint64_t *match_slot_id);\n\nAWS_EXTERN_C_END\n",
                    "rendered": {
                      "text": "    struct aws_pkcs11_lib *pkcs11_lib,\n    const struct aws_byte_cursor *user_pin,\n    const struct aws_byte_cursor *match_token_label,\n    const struct aws_byte_cursor *match_private_key_label,\n    const uint64_t *match_slot_id);\n\nAWS_EXTERN_C_END\n",
                      "markdown": "`    struct aws_pkcs11_lib *pkcs11_lib,\n    const struct aws_byte_cursor *user_pin,\n    const struct aws_byte_cursor *match_token_label,\n    const struct aws_byte_cursor *match_private_key_label,\n    const uint64_t *match_slot_id);\n\nAWS_EXTERN_C_END\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_private.h"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 24,
                  "endLine": 79,
                  "endColumn": 35,
                  "snippet": {
                    "text": " * The function fails unless it finds exactly one object meeting all criteria.\n */\nAWS_IO_API\nint aws_pkcs11_lib_find_private_key(\n    struct aws_pkcs11_lib *pkcs11_lib,\n    CK_SESSION_HANDLE session_handle,\n    const struct aws_string *match_label,\n",
                    "rendered": {
                      "text": " * The function fails unless it finds exactly one object meeting all criteria.\n */\nAWS_IO_API\nint aws_pkcs11_lib_find_private_key(\n    struct aws_pkcs11_lib *pkcs11_lib,\n    CK_SESSION_HANDLE session_handle,\n    const struct aws_string *match_label,\n",
                      "markdown": "` * The function fails unless it finds exactly one object meeting all criteria.\n */\nAWS_IO_API\nint aws_pkcs11_lib_find_private_key(\n    struct aws_pkcs11_lib *pkcs11_lib,\n    CK_SESSION_HANDLE session_handle,\n    const struct aws_string *match_label,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/ca_root.cnf"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "endColumn": 11,
                  "snippet": {
                    "text": "RANDFILE          = $dir/private/.rand\n\n# The root key and root certificate.\nprivate_key       = $dir/ca_root.key\ncertificate       = $dir/ca_root.crt\n\n# For certificate revocation lists.\n",
                    "rendered": {
                      "text": "RANDFILE          = $dir/private/.rand\n\n# The root key and root certificate.\nprivate_key       = $dir/ca_root.key\ncertificate       = $dir/ca_root.crt\n\n# For certificate revocation lists.\n",
                      "markdown": "`RANDFILE          = $dir/private/.rand\n\n# The root key and root certificate.\nprivate_key       = $dir/ca_root.key\ncertificate       = $dir/ca_root.crt\n\n# For certificate revocation lists.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/ca_root.cnf"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# OpenSSL root CA configuration file.\n# Copy to `/root/ca/openssl.cnf`.\n\n[ ca ]\n",
                    "rendered": {
                      "text": "# OpenSSL root CA configuration file.\n# Copy to `/root/ca/openssl.cnf`.\n\n[ ca ]\n",
                      "markdown": "`# OpenSSL root CA configuration file.\n# Copy to `/root/ca/openssl.cnf`.\n\n[ ca ]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 82,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            -out $base.p12 \\\n            -inkey $base.key \\\n            -in $base.crt \\\n            -password pass:1234\ndone\n\n# Copy the generated certificates and keys to the resources folder\n",
                    "rendered": {
                      "text": "            -out $base.p12 \\\n            -inkey $base.key \\\n            -in $base.crt \\\n            -password pass:1234\ndone\n\n# Copy the generated certificates and keys to the resources folder\n",
                      "markdown": "`            -out $base.p12 \\\n            -inkey $base.key \\\n            -in $base.crt \\\n            -password pass:1234\ndone\n\n# Copy the generated certificates and keys to the resources folder\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 92,
                  "endLine": 19,
                  "endColumn": 100,
                  "snippet": {
                    "text": "# unittests.p12:      pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n# ec_unittests.crt:   elliptic curve self-signed certificate\n# ec_unittests.p8:    elliptic curve private key, pkcs#8 syntax\n# ec_unittests.p12:   elliptic curve pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n\n# Create directory for use with certificate generation\nmkdir -p certGeneration\n",
                    "rendered": {
                      "text": "# unittests.p12:      pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n# ec_unittests.crt:   elliptic curve self-signed certificate\n# ec_unittests.p8:    elliptic curve private key, pkcs#8 syntax\n# ec_unittests.p12:   elliptic curve pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n\n# Create directory for use with certificate generation\nmkdir -p certGeneration\n",
                      "markdown": "`# unittests.p12:      pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n# ec_unittests.crt:   elliptic curve self-signed certificate\n# ec_unittests.p8:    elliptic curve private key, pkcs#8 syntax\n# ec_unittests.p12:   elliptic curve pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n\n# Create directory for use with certificate generation\nmkdir -p certGeneration\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 77,
                  "endLine": 16,
                  "endColumn": 85,
                  "snippet": {
                    "text": "# server_chain.crt:   certificate chain containing server.crt and ca_root.crt\n# unittests.crt:      self-signed certificate\n# unittests.p8:       private key, pkcs#8 syntax\n# unittests.p12:      pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n# ec_unittests.crt:   elliptic curve self-signed certificate\n# ec_unittests.p8:    elliptic curve private key, pkcs#8 syntax\n# ec_unittests.p12:   elliptic curve pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n",
                    "rendered": {
                      "text": "# server_chain.crt:   certificate chain containing server.crt and ca_root.crt\n# unittests.crt:      self-signed certificate\n# unittests.p8:       private key, pkcs#8 syntax\n# unittests.p12:      pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n# ec_unittests.crt:   elliptic curve self-signed certificate\n# ec_unittests.p8:    elliptic curve private key, pkcs#8 syntax\n# ec_unittests.p12:   elliptic curve pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n",
                      "markdown": "`# server_chain.crt:   certificate chain containing server.crt and ca_root.crt\n# unittests.crt:      self-signed certificate\n# unittests.p8:       private key, pkcs#8 syntax\n# unittests.p12:      pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n# ec_unittests.crt:   elliptic curve self-signed certificate\n# ec_unittests.p8:    elliptic curve private key, pkcs#8 syntax\n# ec_unittests.p12:   elliptic curve pkcs#12 file bundling the certificate and private key. Password is \"1234\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n",
                      "markdown": "`#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 5,
                  "snippet": {
                    "text": "for base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n\n# Clean up the certGeneration folder\n",
                    "rendered": {
                      "text": "for base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n\n# Clean up the certGeneration folder\n",
                      "markdown": "`for base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n\n# Clean up the certGeneration folder\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 95,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n\n",
                    "rendered": {
                      "text": "\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n\n",
                      "markdown": "`\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 1,
                  "endLine": 94,
                  "endColumn": 5,
                  "snippet": {
                    "text": "cp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n",
                    "rendered": {
                      "text": "cp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n",
                      "markdown": "`cp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n  cp certGeneration/$base.p8 ./$base.p8\n  cp certGeneration/$base.p12 ./$base.p12\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 53,
                  "endLine": 91,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n",
                    "rendered": {
                      "text": "cp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n",
                      "markdown": "`cp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n  cp certGeneration/$base.crt ./$base.crt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 41,
                  "endLine": 90,
                  "endColumn": 3,
                  "snippet": {
                    "text": "cd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n",
                    "rendered": {
                      "text": "cd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n",
                      "markdown": "`cd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\nfor base in unittests ec_unittests; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 41,
                  "endLine": 89,
                  "endColumn": 3,
                  "snippet": {
                    "text": "# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\n",
                    "rendered": {
                      "text": "# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\n",
                      "markdown": "`# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 43,
                  "endLine": 88,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\n# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n",
                    "rendered": {
                      "text": "\n# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n",
                      "markdown": "`\n# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\ncp certGeneration/server.crt ./server.crt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 5,
                  "endLine": 87,
                  "endColumn": 3,
                  "snippet": {
                    "text": "done\n\n# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\n",
                    "rendered": {
                      "text": "done\n\n# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\n",
                      "markdown": "`done\n\n# Copy the generated certificates and keys to the resources folder\ncd ..\ncp certGeneration/ca_root.crt ./ca_root.crt\ncp certGeneration/server.crt ./server.crt\ncp certGeneration/server.key ./server.key\ncp certGeneration/server_chain.crt ./server_chain.crt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 10,
                  "snippet": {
                    "text": "            -in $base.key \\\n            -nocrypt\n\n  openssl pkcs12 -export \\\n            -out $base.p12 \\\n            -inkey $base.key \\\n            -in $base.crt \\\n",
                    "rendered": {
                      "text": "            -in $base.key \\\n            -nocrypt\n\n  openssl pkcs12 -export \\\n            -out $base.p12 \\\n            -inkey $base.key \\\n            -in $base.crt \\\n",
                      "markdown": "`            -in $base.key \\\n            -nocrypt\n\n  openssl pkcs12 -export \\\n            -out $base.p12 \\\n            -inkey $base.key \\\n            -in $base.crt \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 1,
                  "endLine": 73,
                  "endColumn": 10,
                  "snippet": {
                    "text": "            -out $base.crt \\\n            -days 824\n\n  openssl pkcs8 -topk8 \\\n            -out $base.p8 \\\n            -in $base.key \\\n            -nocrypt\n",
                    "rendered": {
                      "text": "            -out $base.crt \\\n            -days 824\n\n  openssl pkcs8 -topk8 \\\n            -out $base.p8 \\\n            -in $base.key \\\n            -nocrypt\n",
                      "markdown": "`            -out $base.crt \\\n            -days 824\n\n  openssl pkcs8 -topk8 \\\n            -out $base.p8 \\\n            -in $base.key \\\n            -nocrypt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# Generate other unittest certificate variations\nfor base in unittests ec_unittests; do\n  openssl req -x509 -new \\\n            -key $base.key \\\n            -config unittests.conf \\\n            -out $base.crt \\\n",
                    "rendered": {
                      "text": "\n# Generate other unittest certificate variations\nfor base in unittests ec_unittests; do\n  openssl req -x509 -new \\\n            -key $base.key \\\n            -config unittests.conf \\\n            -out $base.crt \\\n",
                      "markdown": "`\n# Generate other unittest certificate variations\nfor base in unittests ec_unittests; do\n  openssl req -x509 -new \\\n            -key $base.key \\\n            -config unittests.conf \\\n            -out $base.crt \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 77,
                  "endLine": 63,
                  "endColumn": 4,
                  "snippet": {
                    "text": "            -in server.csr \\\n            -out server.crt\n\n# Generate a certificate chain containing the ca_root and server certificates\ncat server.crt ca_root.crt > server_chain.crt\n\n# Generate other unittest certificate variations\nfor base in unittests ec_unittests; do\n",
                    "rendered": {
                      "text": "            -in server.csr \\\n            -out server.crt\n\n# Generate a certificate chain containing the ca_root and server certificates\ncat server.crt ca_root.crt > server_chain.crt\n\n# Generate other unittest certificate variations\nfor base in unittests ec_unittests; do\n",
                      "markdown": "`            -in server.csr \\\n            -out server.crt\n\n# Generate a certificate chain containing the ca_root and server certificates\ncat server.crt ca_root.crt > server_chain.crt\n\n# Generate other unittest certificate variations\nfor base in unittests ec_unittests; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            -subj '/C=US/ST=Washington/L=Seattle/O=Amazon/OU=SDKs/CN=localhost/emailAddress=aws-sdk-common-runtime@amazon.com'\n\n# Sign the server signing request with ca_root\nyes | openssl ca -config ca_root.cnf \\\n            -extensions server_cert \\\n            -days 824 -notext -md sha256 \\\n            -in server.csr \\\n",
                    "rendered": {
                      "text": "            -subj '/C=US/ST=Washington/L=Seattle/O=Amazon/OU=SDKs/CN=localhost/emailAddress=aws-sdk-common-runtime@amazon.com'\n\n# Sign the server signing request with ca_root\nyes | openssl ca -config ca_root.cnf \\\n            -extensions server_cert \\\n            -days 824 -notext -md sha256 \\\n            -in server.csr \\\n",
                      "markdown": "`            -subj '/C=US/ST=Washington/L=Seattle/O=Amazon/OU=SDKs/CN=localhost/emailAddress=aws-sdk-common-runtime@amazon.com'\n\n# Sign the server signing request with ca_root\nyes | openssl ca -config ca_root.cnf \\\n            -extensions server_cert \\\n            -days 824 -notext -md sha256 \\\n            -in server.csr \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 55,
                  "endLine": 49,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# Generate a private key for the server\nopenssl genrsa -out server.key 2048\n\n# Generate a certificate signing request for the server\nopenssl req -new -sha256 \\\n            -key server.key \\\n            -out server.csr \\\n            -set_serial 02 \\\n",
                    "rendered": {
                      "text": "# Generate a private key for the server\nopenssl genrsa -out server.key 2048\n\n# Generate a certificate signing request for the server\nopenssl req -new -sha256 \\\n            -key server.key \\\n            -out server.csr \\\n            -set_serial 02 \\\n",
                      "markdown": "`# Generate a private key for the server\nopenssl genrsa -out server.key 2048\n\n# Generate a certificate signing request for the server\nopenssl req -new -sha256 \\\n            -key server.key \\\n            -out server.csr \\\n            -set_serial 02 \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 39,
                  "endLine": 46,
                  "endColumn": 8,
                  "snippet": {
                    "text": "            -set_serial 00 \\\n            -subj '/C=US/ST=Washington/L=Seattle/O=Amazon/OU=SDKs/CN=localhostCA/emailAddress=aws-sdk-common-runtime@amazon.com'\n\n# Generate a private key for the server\nopenssl genrsa -out server.key 2048\n\n# Generate a certificate signing request for the server\nopenssl req -new -sha256 \\\n",
                    "rendered": {
                      "text": "            -set_serial 00 \\\n            -subj '/C=US/ST=Washington/L=Seattle/O=Amazon/OU=SDKs/CN=localhostCA/emailAddress=aws-sdk-common-runtime@amazon.com'\n\n# Generate a private key for the server\nopenssl genrsa -out server.key 2048\n\n# Generate a certificate signing request for the server\nopenssl req -new -sha256 \\\n",
                      "markdown": "`            -set_serial 00 \\\n            -subj '/C=US/ST=Washington/L=Seattle/O=Amazon/OU=SDKs/CN=localhostCA/emailAddress=aws-sdk-common-runtime@amazon.com'\n\n# Generate a private key for the server\nopenssl genrsa -out server.key 2048\n\n# Generate a certificate signing request for the server\nopenssl req -new -sha256 \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 34,
                  "endLine": 38,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# Generating a key for the new ca_root\nopenssl genrsa -out ca_root.key 2048\n\n# Generate the ca_root certificate\nopenssl req -config ca_root.cnf \\\n            -key ca_root.key \\\n            -new -x509 -days 824 -sha256 -extensions v3_ca \\\n            -out ca_root.crt \\\n",
                    "rendered": {
                      "text": "# Generating a key for the new ca_root\nopenssl genrsa -out ca_root.key 2048\n\n# Generate the ca_root certificate\nopenssl req -config ca_root.cnf \\\n            -key ca_root.key \\\n            -new -x509 -days 824 -sha256 -extensions v3_ca \\\n            -out ca_root.crt \\\n",
                      "markdown": "`# Generating a key for the new ca_root\nopenssl genrsa -out ca_root.key 2048\n\n# Generate the ca_root certificate\nopenssl req -config ca_root.cnf \\\n            -key ca_root.key \\\n            -new -x509 -days 824 -sha256 -extensions v3_ca \\\n            -out ca_root.crt \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 35,
                  "endColumn": 8,
                  "snippet": {
                    "text": "touch index.txt\necho 1000 > serial\n\n# Generating a key for the new ca_root\nopenssl genrsa -out ca_root.key 2048\n\n# Generate the ca_root certificate\nopenssl req -config ca_root.cnf \\\n",
                    "rendered": {
                      "text": "touch index.txt\necho 1000 > serial\n\n# Generating a key for the new ca_root\nopenssl genrsa -out ca_root.key 2048\n\n# Generate the ca_root certificate\nopenssl req -config ca_root.cnf \\\n",
                      "markdown": "`touch index.txt\necho 1000 > serial\n\n# Generating a key for the new ca_root\nopenssl genrsa -out ca_root.key 2048\n\n# Generate the ca_root certificate\nopenssl req -config ca_root.cnf \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 48,
                  "endLine": 30,
                  "endColumn": 57,
                  "snippet": {
                    "text": "cp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n# index.txt and serial are required for use with openssl config files\ntouch index.txt\necho 1000 > serial\n\n",
                    "rendered": {
                      "text": "cp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n# index.txt and serial are required for use with openssl config files\ntouch index.txt\necho 1000 > serial\n\n",
                      "markdown": "`cp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n# index.txt and serial are required for use with openssl config files\ntouch index.txt\necho 1000 > serial\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 47,
                  "endLine": 27,
                  "endColumn": 3,
                  "snippet": {
                    "text": "# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n# index.txt and serial are required for use with openssl config files\n",
                    "rendered": {
                      "text": "# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n# index.txt and serial are required for use with openssl config files\n",
                      "markdown": "`# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n# index.txt and serial are required for use with openssl config files\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 51,
                  "endLine": 26,
                  "endColumn": 3,
                  "snippet": {
                    "text": "mkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n",
                    "rendered": {
                      "text": "mkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n",
                      "markdown": "`mkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 45,
                  "endLine": 25,
                  "endColumn": 3,
                  "snippet": {
                    "text": "# Create directory for use with certificate generation\nmkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n",
                    "rendered": {
                      "text": "# Create directory for use with certificate generation\nmkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n",
                      "markdown": "`# Create directory for use with certificate generation\nmkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\ncd certGeneration\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 48,
                  "endLine": 24,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\n# Create directory for use with certificate generation\nmkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\n",
                    "rendered": {
                      "text": "\n# Create directory for use with certificate generation\nmkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\n",
                      "markdown": "`\n# Create directory for use with certificate generation\nmkdir -p certGeneration\n# Copy files needed to generate new certificates\ncp unittests.key certGeneration/unittests.key\ncp ec_unittests.key certGeneration/ec_unittests.key\ncp unittests.conf certGeneration/unittests.conf\ncp ca_root.cnf certGeneration/ca_root.cnf\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 61,
                  "endLine": 6,
                  "endColumn": 69,
                  "snippet": {
                    "text": "set -e\n\n# The files generated by this script are used in unit tests that create TLS\n# connections between a localhost server and client. Run this script if any\n# certificates used for tests are expired.\n\n# Files generated by this script:\n",
                    "rendered": {
                      "text": "set -e\n\n# The files generated by this script are used in unit tests that create TLS\n# connections between a localhost server and client. Run this script if any\n# certificates used for tests are expired.\n\n# Files generated by this script:\n",
                      "markdown": "`set -e\n\n# The files generated by this script are used in unit tests that create TLS\n# connections between a localhost server and client. Run this script if any\n# certificates used for tests are expired.\n\n# Files generated by this script:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 29,
                  "endLine": 5,
                  "endColumn": 37,
                  "snippet": {
                    "text": "# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n# connections between a localhost server and client. Run this script if any\n# certificates used for tests are expired.\n\n",
                    "rendered": {
                      "text": "# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n# connections between a localhost server and client. Run this script if any\n# certificates used for tests are expired.\n\n",
                      "markdown": "`# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n# connections between a localhost server and client. Run this script if any\n# certificates used for tests are expired.\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 2,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n",
                      "markdown": "`#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/resources/generateCerts.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n",
                      "markdown": "`#!/usr/bin/env bash\n# stop script on error\nset -e\n\n# The files generated by this script are used in unit tests that create TLS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/docker-images/win10-vs2012/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 5,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# escape=`\n\nFROM mcr.microsoft.com/windows:1809\n\nCMD [ \"cmd.exe\" ]\n\nRUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n",
                    "rendered": {
                      "text": "# escape=`\n\nFROM mcr.microsoft.com/windows:1809\n\nCMD [ \"cmd.exe\" ]\n\nRUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n",
                      "markdown": "`# escape=`\n\nFROM mcr.microsoft.com/windows:1809\n\nCMD [ \"cmd.exe\" ]\n\nRUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/docker-images/win10-vs2012/Dockerfile"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n    .\\vsvars32.bat && `\n    cd \"C:\\z3\" && `\n    git checkout z3-4.3.0 && `\n    python scripts\\mk_make.py && `\n    cd \"build\" && `\n    nmake && `\n",
                    "rendered": {
                      "text": "RUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n    .\\vsvars32.bat && `\n    cd \"C:\\z3\" && `\n    git checkout z3-4.3.0 && `\n    python scripts\\mk_make.py && `\n    cd \"build\" && `\n    nmake && `\n",
                      "markdown": "`RUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n    .\\vsvars32.bat && `\n    cd \"C:\\z3\" && `\n    git checkout z3-4.3.0 && `\n    python scripts\\mk_make.py && `\n    cd \"build\" && `\n    nmake && `\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/docker-images/win10-vs2012/Dockerfile"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 3,
                  "endLine": 13,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n\nRUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n    .\\vsvars32.bat && `\n",
                    "rendered": {
                      "text": "    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n\nRUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n    .\\vsvars32.bat && `\n",
                      "markdown": "`    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n\nRUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n    .\\vsvars32.bat && `\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/docker-images/win10-vs2012/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    refreshenv && `\n    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n\nRUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n",
                    "rendered": {
                      "text": "    refreshenv && `\n    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n\nRUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n",
                      "markdown": "`    refreshenv && `\n    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n\nRUN cd \"C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\" && `\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/docker-images/win10-vs2012/Dockerfile"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 3,
                  "endLine": 10,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n    refreshenv && `\n    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n",
                    "rendered": {
                      "text": "RUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n    refreshenv && `\n    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n",
                      "markdown": "`RUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n    refreshenv && `\n    git --version\n\nRUN git clone https://github.com/nchong-at-aws/vcc.git && `\n    git clone https://github.com/z3prover/z3.git\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/docker-images/win10-vs2012/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 32,
                  "endLine": 8,
                  "endColumn": 37,
                  "snippet": {
                    "text": "CMD [ \"cmd.exe\" ]\n\nRUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n    refreshenv && `\n    git --version\n\n",
                    "rendered": {
                      "text": "CMD [ \"cmd.exe\" ]\n\nRUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n    refreshenv && `\n    git --version\n\n",
                      "markdown": "`CMD [ \"cmd.exe\" ]\n\nRUN powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" && `\n    choco install -y --timeout 0 git make python2 visualstudio2012professional && `\n    refreshenv && `\n    git --version\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/channel_test.c"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 91,
                  "endLine": 730,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        }\n    }\n    ASSERT_NOT_NULL(resolved_bh_address);\n    ASSERT_INT_EQUALS(AWS_ADDRESS_RECORD_TYPE_A, resolved_bh_address->record_type, \"Did not find an A record\");\n    addr2_ipv4 = aws_string_new_from_string(allocator, resolved_bh_address->address);\n\n    /* create a resolver with 2 addresses: 1 which will always succeed, and 1 which will always timeout */\n",
                    "rendered": {
                      "text": "        }\n    }\n    ASSERT_NOT_NULL(resolved_bh_address);\n    ASSERT_INT_EQUALS(AWS_ADDRESS_RECORD_TYPE_A, resolved_bh_address->record_type, \"Did not find an A record\");\n    addr2_ipv4 = aws_string_new_from_string(allocator, resolved_bh_address->address);\n\n    /* create a resolver with 2 addresses: 1 which will always succeed, and 1 which will always timeout */\n",
                      "markdown": "`        }\n    }\n    ASSERT_NOT_NULL(resolved_bh_address);\n    ASSERT_INT_EQUALS(AWS_ADDRESS_RECORD_TYPE_A, resolved_bh_address->record_type, \"Did not find an A record\");\n    addr2_ipv4 = aws_string_new_from_string(allocator, resolved_bh_address->address);\n\n    /* create a resolver with 2 addresses: 1 which will always succeed, and 1 which will always timeout */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/channel_test.c"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 91,
                  "endLine": 713,
                  "endColumn": 97,
                  "snippet": {
                    "text": "        }\n    }\n    ASSERT_NOT_NULL(resolved_s3_address);\n    ASSERT_INT_EQUALS(AWS_ADDRESS_RECORD_TYPE_A, resolved_s3_address->record_type, \"Did not find an A record\");\n    addr1_ipv4 = aws_string_new_from_string(allocator, resolved_s3_address->address);\n\n    /* resolve black hole */\n",
                    "rendered": {
                      "text": "        }\n    }\n    ASSERT_NOT_NULL(resolved_s3_address);\n    ASSERT_INT_EQUALS(AWS_ADDRESS_RECORD_TYPE_A, resolved_s3_address->record_type, \"Did not find an A record\");\n    addr1_ipv4 = aws_string_new_from_string(allocator, resolved_s3_address->address);\n\n    /* resolve black hole */\n",
                      "markdown": "`        }\n    }\n    ASSERT_NOT_NULL(resolved_s3_address);\n    ASSERT_INT_EQUALS(AWS_ADDRESS_RECORD_TYPE_A, resolved_s3_address->record_type, \"Did not find an A record\");\n    addr1_ipv4 = aws_string_new_from_string(allocator, resolved_s3_address->address);\n\n    /* resolve black hole */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/shared_library_test.c"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 24,
                  "endLine": 57,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    aws_generic_function find_symbol = NULL;\n    ASSERT_SUCCESS(aws_shared_library_find_function(&library, \"aws_shared_library_find_function\", &find_symbol));\n\n    find_symbol_function find = (find_symbol_function)find_symbol;\n    ASSERT_TRUE(find != NULL);\n\n    aws_shared_library_clean_up(&library);\n",
                    "rendered": {
                      "text": "    aws_generic_function find_symbol = NULL;\n    ASSERT_SUCCESS(aws_shared_library_find_function(&library, \"aws_shared_library_find_function\", &find_symbol));\n\n    find_symbol_function find = (find_symbol_function)find_symbol;\n    ASSERT_TRUE(find != NULL);\n\n    aws_shared_library_clean_up(&library);\n",
                      "markdown": "`    aws_generic_function find_symbol = NULL;\n    ASSERT_SUCCESS(aws_shared_library_find_function(&library, \"aws_shared_library_find_function\", &find_symbol));\n\n    find_symbol_function find = (find_symbol_function)find_symbol;\n    ASSERT_TRUE(find != NULL);\n\n    aws_shared_library_clean_up(&library);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/socket_handler_test.c"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "endLine": 25,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#endif\n\n#define NANOS_PER_SEC ((uint64_t)AWS_TIMESTAMP_NANOS)\n#define TIMEOUT (10 * NANOS_PER_SEC)\n\nstruct socket_test_args {\n    struct aws_allocator *allocator;\n",
                    "rendered": {
                      "text": "#endif\n\n#define NANOS_PER_SEC ((uint64_t)AWS_TIMESTAMP_NANOS)\n#define TIMEOUT (10 * NANOS_PER_SEC)\n\nstruct socket_test_args {\n    struct aws_allocator *allocator;\n",
                      "markdown": "`#endif\n\n#define NANOS_PER_SEC ((uint64_t)AWS_TIMESTAMP_NANOS)\n#define TIMEOUT (10 * NANOS_PER_SEC)\n\nstruct socket_test_args {\n    struct aws_allocator *allocator;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/docs/graphs/read_backpressure.graphml"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 388,
                  "endLine": 252,
                  "endColumn": 8,
                  "snippet": {
                    "text": "ontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"45.90625\" horizontalTextPosition=\"center\" iconTextGap=\"4\" modelName=\"custom\" textColor=\"#000000\" verticalTextPosition=\"bottom\" visible=\"true\" width=\"110.013671875\" x=\"50.9931640625\" y=\"43.046875\">Event Loop yields\ncontrol back to\nchannel<y:LabelModel>\n              <y:SmartNodeLabelModel distance=\"4.0\"/>\n            </y:LabelModel>\n            <y:ModelParameter>\n              <y:SmartNodeLabelModelParameter labelRatioX=\"0.0\" labelRatioY=\"0.0\" nodeRatioX=\"0.0\" nodeRatioY=\"0.0\" offsetX=\"0.0\" offsetY=\"0.0\" upX=\"0.0\" upY",
                    "rendered": {
                      "text": "ontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"45.90625\" horizontalTextPosition=\"center\" iconTextGap=\"4\" modelName=\"custom\" textColor=\"#000000\" verticalTextPosition=\"bottom\" visible=\"true\" width=\"110.013671875\" x=\"50.9931640625\" y=\"43.046875\">Event Loop yields\ncontrol back to\nchannel<y:LabelModel>\n              <y:SmartNodeLabelModel distance=\"4.0\"/>\n            </y:LabelModel>\n            <y:ModelParameter>\n              <y:SmartNodeLabelModelParameter labelRatioX=\"0.0\" labelRatioY=\"0.0\" nodeRatioX=\"0.0\" nodeRatioY=\"0.0\" offsetX=\"0.0\" offsetY=\"0.0\" upX=\"0.0\" upY",
                      "markdown": "`ontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"45.90625\" horizontalTextPosition=\"center\" iconTextGap=\"4\" modelName=\"custom\" textColor=\"#000000\" verticalTextPosition=\"bottom\" visible=\"true\" width=\"110.013671875\" x=\"50.9931640625\" y=\"43.046875\">Event Loop yields\ncontrol back to\nchannel<y:LabelModel>\n              <y:SmartNodeLabelModel distance=\"4.0\"/>\n            </y:LabelModel>\n            <y:ModelParameter>\n              <y:SmartNodeLabelModelParameter labelRatioX=\"0.0\" labelRatioY=\"0.0\" nodeRatioX=\"0.0\" nodeRatioY=\"0.0\" offsetX=\"0.0\" offsetY=\"0.0\" upX=\"0.0\" upY`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/docs/graphs/read_backpressure.graphml"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 388,
                  "endLine": 128,
                  "endColumn": 8,
                  "snippet": {
                    "text": "ontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"45.90625\" horizontalTextPosition=\"center\" iconTextGap=\"4\" modelName=\"custom\" textColor=\"#000000\" verticalTextPosition=\"bottom\" visible=\"true\" width=\"110.013671875\" x=\"50.9931640625\" y=\"43.046875\">Event Loop yields\ncontrol back to\nchannel<y:LabelModel>\n              <y:SmartNodeLabelModel distance=\"4.0\"/>\n            </y:LabelModel>\n            <y:ModelParameter>\n              <y:SmartNodeLabelModelParameter labelRatioX=\"0.0\" labelRatioY=\"0.0\" nodeRatioX=\"0.0\" nodeRatioY=\"0.0\" offsetX=\"0.0\" offsetY=\"0.0\" upX=\"0.0\" upY",
                    "rendered": {
                      "text": "ontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"45.90625\" horizontalTextPosition=\"center\" iconTextGap=\"4\" modelName=\"custom\" textColor=\"#000000\" verticalTextPosition=\"bottom\" visible=\"true\" width=\"110.013671875\" x=\"50.9931640625\" y=\"43.046875\">Event Loop yields\ncontrol back to\nchannel<y:LabelModel>\n              <y:SmartNodeLabelModel distance=\"4.0\"/>\n            </y:LabelModel>\n            <y:ModelParameter>\n              <y:SmartNodeLabelModelParameter labelRatioX=\"0.0\" labelRatioY=\"0.0\" nodeRatioX=\"0.0\" nodeRatioY=\"0.0\" offsetX=\"0.0\" offsetY=\"0.0\" upX=\"0.0\" upY",
                      "markdown": "`ontSize=\"12\" fontStyle=\"plain\" hasBackgroundColor=\"false\" hasLineColor=\"false\" height=\"45.90625\" horizontalTextPosition=\"center\" iconTextGap=\"4\" modelName=\"custom\" textColor=\"#000000\" verticalTextPosition=\"bottom\" visible=\"true\" width=\"110.013671875\" x=\"50.9931640625\" y=\"43.046875\">Event Loop yields\ncontrol back to\nchannel<y:LabelModel>\n              <y:SmartNodeLabelModel distance=\"4.0\"/>\n            </y:LabelModel>\n            <y:ModelParameter>\n              <y:SmartNodeLabelModelParameter labelRatioX=\"0.0\" labelRatioY=\"0.0\" nodeRatioX=\"0.0\" nodeRatioY=\"0.0\" offsetX=\"0.0\" offsetY=\"0.0\" upX=\"0.0\" upY`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/docs/epoll_event_loop_proof.md"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 43,
                  "endLine": 115,
                  "endColumn": 47,
                  "snippet": {
                    "text": "## Trusted computing base\n\n  - Soundness of verification tools: VCC, Boogie, Z3\n  - C Compiler, because the verification is at the C code-level and the\n    properties proved may not be preserved by compilation.\n\n## References\n",
                    "rendered": {
                      "text": "## Trusted computing base\n\n  - Soundness of verification tools: VCC, Boogie, Z3\n  - C Compiler, because the verification is at the C code-level and the\n    properties proved may not be preserved by compilation.\n\n## References\n",
                      "markdown": "`## Trusted computing base\n\n  - Soundness of verification tools: VCC, Boogie, Z3\n  - C Compiler, because the verification is at the C code-level and the\n    properties proved may not be preserved by compilation.\n\n## References\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/docs/epoll_event_loop_proof.md"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 38,
                  "endLine": 86,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  - The Sequentially Consistent Data Race Free (SC-DRF) guarantee required by\n    the C11 standard: if a program is race-free and contains no non-SC atomic\n    operations, then it has only SC semantics [Note 12, N1570]. We rely on\n    SC-DRF to justify the use of VCC's SC memory model. We manually\n    validate that the event loop implementation contains no non-SC atomic\n    operations. Validation is required for pre-C11 compilers.\n\n",
                    "rendered": {
                      "text": "  - The Sequentially Consistent Data Race Free (SC-DRF) guarantee required by\n    the C11 standard: if a program is race-free and contains no non-SC atomic\n    operations, then it has only SC semantics [Note 12, N1570]. We rely on\n    SC-DRF to justify the use of VCC's SC memory model. We manually\n    validate that the event loop implementation contains no non-SC atomic\n    operations. Validation is required for pre-C11 compilers.\n\n",
                      "markdown": "`  - The Sequentially Consistent Data Race Free (SC-DRF) guarantee required by\n    the C11 standard: if a program is race-free and contains no non-SC atomic\n    operations, then it has only SC semantics [Note 12, N1570]. We rely on\n    SC-DRF to justify the use of VCC's SC memory model. We manually\n    validate that the event loop implementation contains no non-SC atomic\n    operations. Validation is required for pre-C11 compilers.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/docs/epoll_event_loop_proof.md"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 32,
                  "endLine": 85,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n  - The Sequentially Consistent Data Race Free (SC-DRF) guarantee required by\n    the C11 standard: if a program is race-free and contains no non-SC atomic\n    operations, then it has only SC semantics [Note 12, N1570]. We rely on\n    SC-DRF to justify the use of VCC's SC memory model. We manually\n    validate that the event loop implementation contains no non-SC atomic\n    operations. Validation is required for pre-C11 compilers.\n",
                    "rendered": {
                      "text": "\n  - The Sequentially Consistent Data Race Free (SC-DRF) guarantee required by\n    the C11 standard: if a program is race-free and contains no non-SC atomic\n    operations, then it has only SC semantics [Note 12, N1570]. We rely on\n    SC-DRF to justify the use of VCC's SC memory model. We manually\n    validate that the event loop implementation contains no non-SC atomic\n    operations. Validation is required for pre-C11 compilers.\n",
                      "markdown": "`\n  - The Sequentially Consistent Data Race Free (SC-DRF) guarantee required by\n    the C11 standard: if a program is race-free and contains no non-SC atomic\n    operations, then it has only SC semantics [Note 12, N1570]. We rely on\n    SC-DRF to justify the use of VCC's SC memory model. We manually\n    validate that the event loop implementation contains no non-SC atomic\n    operations. Validation is required for pre-C11 compilers.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/docs/epoll_event_loop_proof.md"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 33,
                  "endLine": 11,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\nSpecification / Properties (`preamble.h`):\n  - *Memory safety*: the implementation only accesses valid memory.\n  - *Thread safety*: threads only update objects that they own.\n  - *Functional correctness*: sequential task and event callback execution in\n    the presence of multiple client threads. The proofs verify that:\n    - The scheduler for task execution is thread-local to the event loop\n",
                    "rendered": {
                      "text": "\nSpecification / Properties (`preamble.h`):\n  - *Memory safety*: the implementation only accesses valid memory.\n  - *Thread safety*: threads only update objects that they own.\n  - *Functional correctness*: sequential task and event callback execution in\n    the presence of multiple client threads. The proofs verify that:\n    - The scheduler for task execution is thread-local to the event loop\n",
                      "markdown": "`\nSpecification / Properties (`preamble.h`):\n  - *Memory safety*: the implementation only accesses valid memory.\n  - *Thread safety*: threads only update objects that they own.\n  - *Functional correctness*: sequential task and event callback execution in\n    the presence of multiple client threads. The proofs verify that:\n    - The scheduler for task execution is thread-local to the event loop\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 15,
                  "endLine": 8,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-io --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --coverage\n  post_build:\n",
                    "rendered": {
                      "text": "    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-io --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --coverage\n  post_build:\n",
                      "markdown": "`    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-io --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --coverage\n  post_build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 14,
                  "endLine": 20,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-io --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --coverage\n",
                    "rendered": {
                      "text": "  build:\n    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-io --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --coverage\n",
                      "markdown": "`  build:\n    commands:\n      - echo Build started on `date`\n      - aws s3 cp s3://aws-crt-test-stuff/setup_proxy_test_env.sh /tmp/setup_proxy_test_env.sh\n      - chmod a+xr /tmp/setup_proxy_test_env.sh\n      - python3 -c \"from urllib.request import urlretrieve; urlretrieve('$BUILDER_HOST/$BUILDER_SOURCE/$BUILDER_VERSION/builder.pyz', 'builder.pyz')\"\n      - python3 builder.pyz build -p aws-c-io --cmake-extra=-DENABLE_PROXY_INTEGRATION_TESTS=ON --coverage\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 87,
                  "endLine": 14,
                  "endColumn": 92,
                  "snippet": {
                    "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                    "rendered": {
                      "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                      "markdown": "`    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 62,
                  "endLine": 14,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                    "rendered": {
                      "text": "    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n",
                      "markdown": "`    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n  build:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 89,
                  "endLine": 13,
                  "endColumn": 94,
                  "snippet": {
                    "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                    "rendered": {
                      "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                      "markdown": "`  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 63,
                  "endLine": 13,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                    "rendered": {
                      "text": "  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n",
                      "markdown": "`  pre_build:\n    commands:\n      - export CC=gcc-7\n      - export BUILDER_VERSION=$(cat .github/workflows/ci.yml | grep 'BUILDER_VERSION:' | sed 's/\\s*BUILDER_VERSION:\\s*\\(.*\\)/\\1/')\n      - export BUILDER_SOURCE=$(cat .github/workflows/ci.yml | grep 'BUILDER_SOURCE:' | sed 's/\\s*BUILDER_SOURCE:\\s*\\(.*\\)/\\1/')\n      - echo \"Using builder version='${BUILDER_VERSION}' source='${BUILDER_SOURCE}'\"\n      - export BUILDER_HOST=https://d19elf31gohf1l.cloudfront.net\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 9,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                    "rendered": {
                      "text": "    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n",
                      "markdown": "`    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n      - export CC=gcc-7\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/codebuild/linux-integration-tests.yml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 7,
                  "endLine": 8,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                    "rendered": {
                      "text": "  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n",
                      "markdown": "`  install:\n    commands:\n      - add-apt-repository ppa:ubuntu-toolchain-r/test\n      - apt-get update -y\n      - apt-get install gcc-7 cmake ninja-build python3 -y\n  pre_build:\n    commands:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 33,
                  "endLine": 611,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password);\n\n/**\n * Sets alpn list in the form <protocol1;protocol2;...>. A maximum of 4 protocols are supported.\n",
                    "rendered": {
                      "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password);\n\n/**\n * Sets alpn list in the form <protocol1;protocol2;...>. A maximum of 4 protocols are supported.\n",
                      "markdown": "`    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password);\n\n/**\n * Sets alpn list in the form <protocol1;protocol2;...>. A maximum of 4 protocols are supported.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 33,
                  "endLine": 603,
                  "endColumn": 41,
                  "snippet": {
                    "text": "/**\n * Initializes options for use in server mode.\n * pkcs12 is a buffer containing a pkcs#12 certificate and private key; it is copied.\n * pkcs_pwd is the corresponding password for the pkcs#12 buffer; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                    "rendered": {
                      "text": "/**\n * Initializes options for use in server mode.\n * pkcs12 is a buffer containing a pkcs#12 certificate and private key; it is copied.\n * pkcs_pwd is the corresponding password for the pkcs#12 buffer; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                      "markdown": "`/**\n * Initializes options for use in server mode.\n * pkcs12 is a buffer containing a pkcs#12 certificate and private key; it is copied.\n * pkcs_pwd is the corresponding password for the pkcs#12 buffer; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 33,
                  "endLine": 598,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password);\n\n/**\n * Initializes options for use in server mode.\n",
                    "rendered": {
                      "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password);\n\n/**\n * Initializes options for use in server mode.\n",
                      "markdown": "`    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password);\n\n/**\n * Initializes options for use in server mode.\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 58,
                  "endLine": 590,
                  "endColumn": 66,
                  "snippet": {
                    "text": "/**\n * Initializes options for use in server mode.\n * pkcs12_path is a path to a file on disk containing a pkcs#12 file. The file is loaded\n * into an internal buffer. pkcs_pwd is the corresponding password for the pkcs#12 file; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                    "rendered": {
                      "text": "/**\n * Initializes options for use in server mode.\n * pkcs12_path is a path to a file on disk containing a pkcs#12 file. The file is loaded\n * into an internal buffer. pkcs_pwd is the corresponding password for the pkcs#12 file; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                      "markdown": "`/**\n * Initializes options for use in server mode.\n * pkcs12_path is a path to a file on disk containing a pkcs#12 file. The file is loaded\n * into an internal buffer. pkcs_pwd is the corresponding password for the pkcs#12 file; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 33,
                  "endLine": 577,
                  "endColumn": 41,
                  "snippet": {
                    "text": "/**\n * Initializes options for use with mutual tls in client mode.\n * pkcs12 is a buffer containing a pkcs#12 certificate and private key; it is copied.\n * pkcs_pwd is the corresponding password for the pkcs#12 buffer; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                    "rendered": {
                      "text": "/**\n * Initializes options for use with mutual tls in client mode.\n * pkcs12 is a buffer containing a pkcs#12 certificate and private key; it is copied.\n * pkcs_pwd is the corresponding password for the pkcs#12 buffer; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                      "markdown": "`/**\n * Initializes options for use with mutual tls in client mode.\n * pkcs12 is a buffer containing a pkcs#12 certificate and private key; it is copied.\n * pkcs_pwd is the corresponding password for the pkcs#12 buffer; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 58,
                  "endLine": 564,
                  "endColumn": 66,
                  "snippet": {
                    "text": "/**\n * Initializes options for use with mutual tls in client mode.\n * pkcs12_path is a path to a file on disk containing a pkcs#12 file. The file is loaded\n * into an internal buffer. pkcs_pwd is the corresponding password for the pkcs#12 file; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                    "rendered": {
                      "text": "/**\n * Initializes options for use with mutual tls in client mode.\n * pkcs12_path is a path to a file on disk containing a pkcs#12 file. The file is loaded\n * into an internal buffer. pkcs_pwd is the corresponding password for the pkcs#12 file; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n",
                      "markdown": "`/**\n * Initializes options for use with mutual tls in client mode.\n * pkcs12_path is a path to a file on disk containing a pkcs#12 file. The file is loaded\n * into an internal buffer. pkcs_pwd is the corresponding password for the pkcs#12 file; it is copied.\n *\n * NOTE: This only works on Apple devices.\n */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 27,
                  "endLine": 469,
                  "endColumn": 38,
                  "snippet": {
                    "text": "     * If zeroed out, the private key will be chosen based on other criteria\n     * (such as being the only available private key on the token).\n     */\n    struct aws_byte_cursor private_key_object_label;\n\n    /**\n     * Certificate's file path on disk (UTF-8).\n",
                    "rendered": {
                      "text": "     * If zeroed out, the private key will be chosen based on other criteria\n     * (such as being the only available private key on the token).\n     */\n    struct aws_byte_cursor private_key_object_label;\n\n    /**\n     * Certificate's file path on disk (UTF-8).\n",
                      "markdown": "`     * If zeroed out, the private key will be chosen based on other criteria\n     * (such as being the only available private key on the token).\n     */\n    struct aws_byte_cursor private_key_object_label;\n\n    /**\n     * Certificate's file path on disk (UTF-8).\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 31,
                  "endLine": 215,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    /**\n     * Password for the pkcs12 data in pkcs12.\n     */\n    struct aws_byte_buf pkcs12_password;\n\n#    if !defined(AWS_OS_IOS)\n    /**\n",
                    "rendered": {
                      "text": "    /**\n     * Password for the pkcs12 data in pkcs12.\n     */\n    struct aws_byte_buf pkcs12_password;\n\n#    if !defined(AWS_OS_IOS)\n    /**\n",
                      "markdown": "`    /**\n     * Password for the pkcs12 data in pkcs12.\n     */\n    struct aws_byte_buf pkcs12_password;\n\n#    if !defined(AWS_OS_IOS)\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 7,
                  "endLine": 213,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    struct aws_byte_buf pkcs12;\n\n    /**\n     * Password for the pkcs12 data in pkcs12.\n     */\n    struct aws_byte_buf pkcs12_password;\n\n",
                    "rendered": {
                      "text": "    struct aws_byte_buf pkcs12;\n\n    /**\n     * Password for the pkcs12 data in pkcs12.\n     */\n    struct aws_byte_buf pkcs12_password;\n\n",
                      "markdown": "`    struct aws_byte_buf pkcs12;\n\n    /**\n     * Password for the pkcs12 data in pkcs12.\n     */\n    struct aws_byte_buf pkcs12_password;\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/io/tls_channel_handler.h"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 24,
                  "endLine": 201,
                  "endColumn": 35,
                  "snippet": {
                    "text": "     * On windows, this field should be NULL only if you are\n     * using a system installed certficate.\n     */\n    struct aws_byte_buf private_key;\n\n#ifdef __APPLE__\n    /**\n",
                    "rendered": {
                      "text": "     * On windows, this field should be NULL only if you are\n     * using a system installed certficate.\n     */\n    struct aws_byte_buf private_key;\n\n#ifdef __APPLE__\n    /**\n",
                      "markdown": "`     * On windows, this field should be NULL only if you are\n     * using a system installed certficate.\n     */\n    struct aws_byte_buf private_key;\n\n#ifdef __APPLE__\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/include/aws/testing/io_testing_channel.h"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "endLine": 177,
                  "endColumn": 21,
                  "snippet": {
                    "text": "                    msg->on_completion = NULL;\n                }\n\n                node = aws_linked_list_next(node);\n            }\n        }\n    }\n",
                    "rendered": {
                      "text": "                    msg->on_completion = NULL;\n                }\n\n                node = aws_linked_list_next(node);\n            }\n        }\n    }\n",
                      "markdown": "`                    msg->on_completion = NULL;\n                }\n\n                node = aws_linked_list_next(node);\n            }\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 59,
                  "endLine": 403,
                  "endColumn": 63,
                  "snippet": {
                    "text": "ia the on_event callback that the handle was removed._\nOnce the event-loop has shutdown to a safe state, it should invoke the on_stopped function.\n\n    int (*schedule_task) (struct aws_event_loop *, struct aws_task *task, uint64_t run_at);\n\nThis function schedules a task to run in its task scheduler at the time specified by run_at. Each event-loop is responsible for implementing\na task scheduler. This function must not block, and must be thread-safe. How this is implemented will depend on platform. For example,\none reasonable implementation is if the call comes from the event-loop's thread, to que",
                    "rendered": {
                      "text": "ia the on_event callback that the handle was removed._\nOnce the event-loop has shutdown to a safe state, it should invoke the on_stopped function.\n\n    int (*schedule_task) (struct aws_event_loop *, struct aws_task *task, uint64_t run_at);\n\nThis function schedules a task to run in its task scheduler at the time specified by run_at. Each event-loop is responsible for implementing\na task scheduler. This function must not block, and must be thread-safe. How this is implemented will depend on platform. For example,\none reasonable implementation is if the call comes from the event-loop's thread, to que",
                      "markdown": "`ia the on_event callback that the handle was removed._\nOnce the event-loop has shutdown to a safe state, it should invoke the on_stopped function.\n\n    int (*schedule_task) (struct aws_event_loop *, struct aws_task *task, uint64_t run_at);\n\nThis function schedules a task to run in its task scheduler at the time specified by run_at. Each event-loop is responsible for implementing\na task scheduler. This function must not block, and must be thread-safe. How this is implemented will depend on platform. For example,\none reasonable implementation is if the call comes from the event-loop's thread, to que`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 76,
                  "endLine": 382,
                  "endColumn": 80,
                  "snippet": {
                    "text": "        BOOL (*is_on_callers_thread) (struct aws_event_loop *);\n    };\n\nEvery implementation of aws_event_loop must implement this table. Let's look at some details for what each entry does.\n\n    void (*destroy)(struct aws_event_loop *);\n\n",
                    "rendered": {
                      "text": "        BOOL (*is_on_callers_thread) (struct aws_event_loop *);\n    };\n\nEvery implementation of aws_event_loop must implement this table. Let's look at some details for what each entry does.\n\n    void (*destroy)(struct aws_event_loop *);\n\n",
                      "markdown": "`        BOOL (*is_on_callers_thread) (struct aws_event_loop *);\n    };\n\nEvery implementation of aws_event_loop must implement this table. Let's look at some details for what each entry does.\n\n    void (*destroy)(struct aws_event_loop *);\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 90,
                  "endLine": 335,
                  "endColumn": 94,
                  "snippet": {
                    "text": "\nNote: that runtime configurability may still be something we need to expose here. In that case, a compiler flag\nwill be used to denote that we are using a custom implementation for x feature. Then we will expose an implementation\nthat indirectly invokes from a v-table and provides hooks for the application to plug into at runtime.\n\n### Promise, Promise Context\nThere are many phrases for this, callback, baton, event-handler etc... The key idea is that APIs that need to notify a\n",
                    "rendered": {
                      "text": "\nNote: that runtime configurability may still be something we need to expose here. In that case, a compiler flag\nwill be used to denote that we are using a custom implementation for x feature. Then we will expose an implementation\nthat indirectly invokes from a v-table and provides hooks for the application to plug into at runtime.\n\n### Promise, Promise Context\nThere are many phrases for this, callback, baton, event-handler etc... The key idea is that APIs that need to notify a\n",
                      "markdown": "`\nNote: that runtime configurability may still be something we need to expose here. In that case, a compiler flag\nwill be used to denote that we are using a custom implementation for x feature. Then we will expose an implementation\nthat indirectly invokes from a v-table and provides hooks for the application to plug into at runtime.\n\n### Promise, Promise Context\nThere are many phrases for this, callback, baton, event-handler etc... The key idea is that APIs that need to notify a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 27,
                  "endLine": 330,
                  "endColumn": 31,
                  "snippet": {
                    "text": "build system makes a decision about which symbols to compile based on factors such as platform and compile-time flags.\n\nThese are reserved for types that:\na.) Need to be configurable at compile-time based on platform or compile-time options.\nb.) Have performance concerns caused by an indirect function call.\n\nNote: that runtime configurability may still be something we need to expose here. In that case, a compiler flag\n",
                    "rendered": {
                      "text": "build system makes a decision about which symbols to compile based on factors such as platform and compile-time flags.\n\nThese are reserved for types that:\na.) Need to be configurable at compile-time based on platform or compile-time options.\nb.) Have performance concerns caused by an indirect function call.\n\nNote: that runtime configurability may still be something we need to expose here. In that case, a compiler flag\n",
                      "markdown": "`build system makes a decision about which symbols to compile based on factors such as platform and compile-time flags.\n\nThese are reserved for types that:\na.) Need to be configurable at compile-time based on platform or compile-time options.\nb.) Have performance concerns caused by an indirect function call.\n\nNote: that runtime configurability may still be something we need to expose here. In that case, a compiler flag\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 38,
                  "endLine": 322,
                  "endColumn": 42,
                  "snippet": {
                    "text": "a c extern style API, but ultimately those public functions simply invoke the corresponding function in the v-table.\n\nThese are reserved for types that:\na.) Need to be configurable, changable at runtime\nb.) Do not have immediate performance concerns caused by an indirect function call.\n\n### Compile-time Polymorphic\n",
                    "rendered": {
                      "text": "a c extern style API, but ultimately those public functions simply invoke the corresponding function in the v-table.\n\nThese are reserved for types that:\na.) Need to be configurable, changable at runtime\nb.) Do not have immediate performance concerns caused by an indirect function call.\n\n### Compile-time Polymorphic\n",
                      "markdown": "`a c extern style API, but ultimately those public functions simply invoke the corresponding function in the v-table.\n\nThese are reserved for types that:\na.) Need to be configurable, changable at runtime\nb.) Do not have immediate performance concerns caused by an indirect function call.\n\n### Compile-time Polymorphic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 109,
                  "endLine": 287,
                  "endColumn": 117,
                  "snippet": {
                    "text": "3. The application notifies the channel (via the API on the application protocol handler) it has processed 20kb\nof data. This causes the protocol handler to issue an update_window message with an update of 20kb.\n\n    Slot 2 passes the message on to the TLS handler. It evaluates the message and simply, sends a 20kb window update message\n    to its slot.\n\n    The socket handler receives the update_window message and schedules a new read task.\n",
                    "rendered": {
                      "text": "3. The application notifies the channel (via the API on the application protocol handler) it has processed 20kb\nof data. This causes the protocol handler to issue an update_window message with an update of 20kb.\n\n    Slot 2 passes the message on to the TLS handler. It evaluates the message and simply, sends a 20kb window update message\n    to its slot.\n\n    The socket handler receives the update_window message and schedules a new read task.\n",
                      "markdown": "`3. The application notifies the channel (via the API on the application protocol handler) it has processed 20kb\nof data. This causes the protocol handler to issue an update_window message with an update of 20kb.\n\n    Slot 2 passes the message on to the TLS handler. It evaluates the message and simply, sends a 20kb window update message\n    to its slot.\n\n    The socket handler receives the update_window message and schedules a new read task.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 83,
                  "endLine": 285,
                  "endColumn": 91,
                  "snippet": {
                    "text": "    The channel now goes idle waiting on the application to finish processing its data.\n\n3. The application notifies the channel (via the API on the application protocol handler) it has processed 20kb\nof data. This causes the protocol handler to issue an update_window message with an update of 20kb.\n\n    Slot 2 passes the message on to the TLS handler. It evaluates the message and simply, sends a 20kb window update message\n    to its slot.\n",
                    "rendered": {
                      "text": "    The channel now goes idle waiting on the application to finish processing its data.\n\n3. The application notifies the channel (via the API on the application protocol handler) it has processed 20kb\nof data. This causes the protocol handler to issue an update_window message with an update of 20kb.\n\n    Slot 2 passes the message on to the TLS handler. It evaluates the message and simply, sends a 20kb window update message\n    to its slot.\n",
                      "markdown": "`    The channel now goes idle waiting on the application to finish processing its data.\n\n3. The application notifies the channel (via the API on the application protocol handler) it has processed 20kb\nof data. This causes the protocol handler to issue an update_window message with an update of 20kb.\n\n    Slot 2 passes the message on to the TLS handler. It evaluates the message and simply, sends a 20kb window update message\n    to its slot.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 55,
                  "endLine": 275,
                  "endColumn": 59,
                  "snippet": {
                    "text": "new window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\ncan read 4kb more of data. Even though it can read 16kb at a time, to honor the window, it reads 4kb and passes it on. This\ntime however, the window is 0, so the socket does not schedule another read task.\n\n    The TLS handler decrypts the data and passes it on\n",
                    "rendered": {
                      "text": "new window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\ncan read 4kb more of data. Even though it can read 16kb at a time, to honor the window, it reads 4kb and passes it on. This\ntime however, the window is 0, so the socket does not schedule another read task.\n\n    The TLS handler decrypts the data and passes it on\n",
                      "markdown": "`new window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\ncan read 4kb more of data. Even though it can read 16kb at a time, to honor the window, it reads 4kb and passes it on. This\ntime however, the window is 0, so the socket does not schedule another read task.\n\n    The TLS handler decrypts the data and passes it on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 85,
                  "endLine": 271,
                  "endColumn": 3,
                  "snippet": {
                    "text": "    Likewise, the TLS handler decrypts the data and passes\nit to the slot containing the application protocol.\n\n    The application protocol processes the 16 kb and hands it off to the application.\nAt this point, the application hasn't notified the channel it is finished with the data (suppose application queues it), so the\nnew window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\n",
                    "rendered": {
                      "text": "    Likewise, the TLS handler decrypts the data and passes\nit to the slot containing the application protocol.\n\n    The application protocol processes the 16 kb and hands it off to the application.\nAt this point, the application hasn't notified the channel it is finished with the data (suppose application queues it), so the\nnew window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\n",
                      "markdown": "`    Likewise, the TLS handler decrypts the data and passes\nit to the slot containing the application protocol.\n\n    The application protocol processes the 16 kb and hands it off to the application.\nAt this point, the application hasn't notified the channel it is finished with the data (suppose application queues it), so the\nnew window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 102,
                  "endLine": 250,
                  "endColumn": 106,
                  "snippet": {
                    "text": "### Read Back Pressure\n\nOne of the most challenging aspects of asynchronous io programming, is managing when back-pressure should be applied to\nthe underlying io layer. In the read direction, this is managed via update_window messages. Let's look at the below diagram\nfor an example of how this works.\n\nIn this example, we have a channel setup with an event-loop which manages io event notifications. The first slot contains a socket handler.\n",
                    "rendered": {
                      "text": "### Read Back Pressure\n\nOne of the most challenging aspects of asynchronous io programming, is managing when back-pressure should be applied to\nthe underlying io layer. In the read direction, this is managed via update_window messages. Let's look at the below diagram\nfor an example of how this works.\n\nIn this example, we have a channel setup with an event-loop which manages io event notifications. The first slot contains a socket handler.\n",
                      "markdown": "`### Read Back Pressure\n\nOne of the most challenging aspects of asynchronous io programming, is managing when back-pressure should be applied to\nthe underlying io layer. In the read direction, this is managed via update_window messages. Let's look at the below diagram\nfor an example of how this works.\n\nIn this example, we have a channel setup with an event-loop which manages io event notifications. The first slot contains a socket handler.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 103,
                  "endLine": 241,
                  "endColumn": 107,
                  "snippet": {
                    "text": "\nSince multiple channels run in the same event-loop, we need to make sure channels are not starved by other active channels.\nTo address this, the handlers consuming IO events from the event-loop should determine the appropriate max read and write\nand context switch before continuing. A context switch is performed, simply by scheduling a task to run at the current timestamp,\nto continue the IO operation.\n\nA reasonable default is 16kb, but a savvy implementation may want to upgrade a few connections to 256kb if they notice a particularly\n",
                    "rendered": {
                      "text": "\nSince multiple channels run in the same event-loop, we need to make sure channels are not starved by other active channels.\nTo address this, the handlers consuming IO events from the event-loop should determine the appropriate max read and write\nand context switch before continuing. A context switch is performed, simply by scheduling a task to run at the current timestamp,\nto continue the IO operation.\n\nA reasonable default is 16kb, but a savvy implementation may want to upgrade a few connections to 256kb if they notice a particularly\n",
                      "markdown": "`\nSince multiple channels run in the same event-loop, we need to make sure channels are not starved by other active channels.\nTo address this, the handlers consuming IO events from the event-loop should determine the appropriate max read and write\nand context switch before continuing. A context switch is performed, simply by scheduling a task to run at the current timestamp,\nto continue the IO operation.\n\nA reasonable default is 16kb, but a savvy implementation may want to upgrade a few connections to 256kb if they notice a particularly\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 125,
                  "endLine": 219,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nIn addition, you can always write your own handler around your favorite implementation and use that. To provide your own\nTLS implementation, you must build this library with the cmake argument `-DBYO_CRYPTO=ON`. You will no longer need s2n or\nlibcrypto once you do this. Instead, your application provides an implementation of `aws_tls_ctx`, and `aws_channel_handler`.\nAt startup time, you must invoke the functions: `aws_tls_byo_crypto_set_client_setup_options()` and `aws_tls_byo_crypto_set_server_setup_options()`.\n\n### Typical Channel\n![Typical Channel Diagram](docs/images/typical_channel.png)\n",
                    "rendered": {
                      "text": "\nIn addition, you can always write your own handler around your favorite implementation and use that. To provide your own\nTLS implementation, you must build this library with the cmake argument `-DBYO_CRYPTO=ON`. You will no longer need s2n or\nlibcrypto once you do this. Instead, your application provides an implementation of `aws_tls_ctx`, and `aws_channel_handler`.\nAt startup time, you must invoke the functions: `aws_tls_byo_crypto_set_client_setup_options()` and `aws_tls_byo_crypto_set_server_setup_options()`.\n\n### Typical Channel\n![Typical Channel Diagram](docs/images/typical_channel.png)\n",
                      "markdown": "`\nIn addition, you can always write your own handler around your favorite implementation and use that. To provide your own\nTLS implementation, you must build this library with the cmake argument `-DBYO_CRYPTO=ON`. You will no longer need s2n or\nlibcrypto once you do this. Instead, your application provides an implementation of `aws_tls_ctx`, and `aws_channel_handler`.\nAt startup time, you must invoke the functions: `aws_tls_byo_crypto_set_client_setup_options()` and `aws_tls_byo_crypto_set_server_setup_options()`.\n\n### Typical Channel\n![Typical Channel Diagram](docs/images/typical_channel.png)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 66,
                  "endLine": 403,
                  "endColumn": 72,
                  "snippet": {
                    "text": "on_event callback that the handle was removed._\nOnce the event-loop has shutdown to a safe state, it should invoke the on_stopped function.\n\n    int (*schedule_task) (struct aws_event_loop *, struct aws_task *task, uint64_t run_at);\n\nThis function schedules a task to run in its task scheduler at the time specified by run_at. Each event-loop is responsible for implementing\na task scheduler. This function must not block, and must be thread-safe. How this is implemented will depend on platform. For example,\none reasonable implementation is if the call comes from the event-loop's thread, to queue it in ",
                    "rendered": {
                      "text": "on_event callback that the handle was removed._\nOnce the event-loop has shutdown to a safe state, it should invoke the on_stopped function.\n\n    int (*schedule_task) (struct aws_event_loop *, struct aws_task *task, uint64_t run_at);\n\nThis function schedules a task to run in its task scheduler at the time specified by run_at. Each event-loop is responsible for implementing\na task scheduler. This function must not block, and must be thread-safe. How this is implemented will depend on platform. For example,\none reasonable implementation is if the call comes from the event-loop's thread, to queue it in ",
                      "markdown": "`on_event callback that the handle was removed._\nOnce the event-loop has shutdown to a safe state, it should invoke the on_stopped function.\n\n    int (*schedule_task) (struct aws_event_loop *, struct aws_task *task, uint64_t run_at);\n\nThis function schedules a task to run in its task scheduler at the time specified by run_at. Each event-loop is responsible for implementing\na task scheduler. This function must not block, and must be thread-safe. How this is implemented will depend on platform. For example,\none reasonable implementation is if the call comes from the event-loop's thread, to queue it in `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 123,
                  "endLine": 276,
                  "endColumn": 5,
                  "snippet": {
                    "text": "new window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\ncan read 4kb more of data. Even though it can read 16kb at a time, to honor the window, it reads 4kb and passes it on. This\ntime however, the window is 0, so the socket does not schedule another read task.\n\n    The TLS handler decrypts the data and passes it on\n\n",
                    "rendered": {
                      "text": "new window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\ncan read 4kb more of data. Even though it can read 16kb at a time, to honor the window, it reads 4kb and passes it on. This\ntime however, the window is 0, so the socket does not schedule another read task.\n\n    The TLS handler decrypts the data and passes it on\n\n",
                      "markdown": "`new window for the slot is 4 kb.\n\n2. The event-loop runs the scheduled read task from (1) after processing the other channels. The socket handler sees it\ncan read 4kb more of data. Even though it can read 16kb at a time, to honor the window, it reads 4kb and passes it on. This\ntime however, the window is 0, so the socket does not schedule another read task.\n\n    The TLS handler decrypts the data and passes it on\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 34,
                  "endLine": 231,
                  "endColumn": 39,
                  "snippet": {
                    "text": "API to an application. When the application wants to send data, the whole process runs in reverse.\n\nChannels can be much more complex though. For example, there could be nested channels for multiplexing/de-multiplexing,\nor there could be more handlers to cut down on handler complexity.\n\nNote however, that a channel is always pinned to a single thread. It provides utilities for applications and\nhandlers to move a task into that thread, but it is very important that handlers and application users\n",
                    "rendered": {
                      "text": "API to an application. When the application wants to send data, the whole process runs in reverse.\n\nChannels can be much more complex though. For example, there could be nested channels for multiplexing/de-multiplexing,\nor there could be more handlers to cut down on handler complexity.\n\nNote however, that a channel is always pinned to a single thread. It provides utilities for applications and\nhandlers to move a task into that thread, but it is very important that handlers and application users\n",
                      "markdown": "`API to an application. When the application wants to send data, the whole process runs in reverse.\n\nChannels can be much more complex though. For example, there could be nested channels for multiplexing/de-multiplexing,\nor there could be more handlers to cut down on handler complexity.\n\nNote however, that a channel is always pinned to a single thread. It provides utilities for applications and\nhandlers to move a task into that thread, but it is very important that handlers and application users\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 33,
                  "endLine": 143,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        aws_event_loop_group_clean_up(&el_group);\n        aws_io_library_clean_up();\n\nIf you are building a protocol on top of sockets without the use of TLS, you can still use this pattern as your starting point.\nSimply call the `aws_client_bootstrap_new_socket_channel` `aws_server_bootstrap_add_socket_listener` respectively: instead of the TLS variants.\n\n## Concepts\n",
                    "rendered": {
                      "text": "        aws_event_loop_group_clean_up(&el_group);\n        aws_io_library_clean_up();\n\nIf you are building a protocol on top of sockets without the use of TLS, you can still use this pattern as your starting point.\nSimply call the `aws_client_bootstrap_new_socket_channel` `aws_server_bootstrap_add_socket_listener` respectively: instead of the TLS variants.\n\n## Concepts\n",
                      "markdown": "`        aws_event_loop_group_clean_up(&el_group);\n        aws_io_library_clean_up();\n\nIf you are building a protocol on top of sockets without the use of TLS, you can still use this pattern as your starting point.\nSimply call the `aws_client_bootstrap_new_socket_channel` `aws_server_bootstrap_add_socket_listener` respectively: instead of the TLS variants.\n\n## Concepts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 50,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\ngit clone git@github.com:awslabs/aws-c-io.git\ncmake -S aws-c-io -B aws-c-io/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-io/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 46,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\ngit clone git@github.com:awslabs/aws-c-cal.git\ncmake -S aws-c-cal -B aws-c-cal/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build aws-c-cal/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 42,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Building aws-c-io and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                    "rendered": {
                      "text": "\n#### Building aws-c-io and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n",
                      "markdown": "`\n#### Building aws-c-io and Remaining Dependencies\n\n```\ngit clone git@github.com:awslabs/aws-c-common.git\ncmake -S aws-c-common -B aws-c-common/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-c-common/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 34,
                  "endColumn": 4,
                  "snippet": {
                    "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                    "rendered": {
                      "text": "git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n",
                      "markdown": "`git clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\ngit clone git@github.com:aws/s2n-tls.git\ncmake -S s2n-tls -B s2n-tls/build -DCMAKE_INSTALL_PREFIX=<install-path> -DCMAKE_PREFIX_PATH=<install-path>\ncmake --build s2n-tls/build --target install\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                    "rendered": {
                      "text": "\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n",
                      "markdown": "`\nIf you are building on Linux, you will need to build aws-lc and s2n-tls first.\n\n```\ngit clone git@github.com:awslabs/aws-lc.git\ncmake -S aws-lc -B aws-lc/build -DCMAKE_INSTALL_PREFIX=<install-path>\ncmake --build aws-lc/build --target install\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 79,
                  "endLine": 7,
                  "endColumn": 84,
                  "snippet": {
                    "text": "\naws-c-io is an event driven framework for implementing application protocols. It is built on top of\ncross-platform abstractions that allow you as a developer to think only about the state machine and API\nfor your protocols. A typical use-case would be to write something like Http on top of asynchronous-io\nwith TLS already baked in. All of the platform and security concerns are already handled for you.\n\nIt is designed to be light-weight, fast, portable, and flexible for multiple domain use-cases such as:\n",
                    "rendered": {
                      "text": "\naws-c-io is an event driven framework for implementing application protocols. It is built on top of\ncross-platform abstractions that allow you as a developer to think only about the state machine and API\nfor your protocols. A typical use-case would be to write something like Http on top of asynchronous-io\nwith TLS already baked in. All of the platform and security concerns are already handled for you.\n\nIt is designed to be light-weight, fast, portable, and flexible for multiple domain use-cases such as:\n",
                      "markdown": "`\naws-c-io is an event driven framework for implementing application protocols. It is built on top of\ncross-platform abstractions that allow you as a developer to think only about the state machine and API\nfor your protocols. A typical use-case would be to write something like Http on top of asynchronous-io\nwith TLS already baked in. All of the platform and security concerns are already handled for you.\n\nIt is designed to be light-weight, fast, portable, and flexible for multiple domain use-cases such as:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/README.md"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 92,
                  "endLine": 5,
                  "endColumn": 97,
                  "snippet": {
                    "text": "\nThis is a module for the AWS SDK for C. It handles all IO and TLS work for application protocols.\n\naws-c-io is an event driven framework for implementing application protocols. It is built on top of\ncross-platform abstractions that allow you as a developer to think only about the state machine and API\nfor your protocols. A typical use-case would be to write something like Http on top of asynchronous-io\nwith TLS already baked in. All of the platform and security concerns are already handled for you.\n",
                    "rendered": {
                      "text": "\nThis is a module for the AWS SDK for C. It handles all IO and TLS work for application protocols.\n\naws-c-io is an event driven framework for implementing application protocols. It is built on top of\ncross-platform abstractions that allow you as a developer to think only about the state machine and API\nfor your protocols. A typical use-case would be to write something like Http on top of asynchronous-io\nwith TLS already baked in. All of the platform and security concerns are already handled for you.\n",
                      "markdown": "`\nThis is a module for the AWS SDK for C. It handles all IO and TLS work for application protocols.\n\naws-c-io is an event driven framework for implementing application protocols. It is built on top of\ncross-platform abstractions that allow you as a developer to think only about the state machine and API\nfor your protocols. A typical use-case would be to write something like Http on top of asynchronous-io\nwith TLS already baked in. All of the platform and security concerns are already handled for you.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 85,
                  "endLine": 388,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12(options, allocator, pkcs12, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12(options, allocator, pkcs12, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n\n",
                      "markdown": "`    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12(options, allocator, pkcs12, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 33,
                  "endLine": 387,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12(options, allocator, pkcs12, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12(options, allocator, pkcs12, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    struct aws_byte_cursor *pkcs12,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12(options, allocator, pkcs12, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 100,
                  "endLine": 375,
                  "endColumn": 108,
                  "snippet": {
                    "text": "    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(options, allocator, pkcs12_path, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n\n",
                    "rendered": {
                      "text": "    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(options, allocator, pkcs12_path, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n\n",
                      "markdown": "`    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(options, allocator, pkcs12_path, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 33,
                  "endLine": 374,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(options, allocator, pkcs12_path, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(options, allocator, pkcs12_path, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`    struct aws_tls_ctx_options *options,\n    struct aws_allocator *allocator,\n    const char *pkcs12_path,\n    struct aws_byte_cursor *pkcs_password) {\n    if (aws_tls_ctx_options_init_client_mtls_pkcs12_from_path(options, allocator, pkcs12_path, pkcs_password)) {\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 60,
                  "endLine": 354,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        return AWS_OP_ERR;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->pkcs12_password, allocator, *pkcs_pwd)) {\n        aws_byte_buf_clean_up_secure(&options->pkcs12);\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "        return AWS_OP_ERR;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->pkcs12_password, allocator, *pkcs_pwd)) {\n        aws_byte_buf_clean_up_secure(&options->pkcs12);\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`        return AWS_OP_ERR;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->pkcs12_password, allocator, *pkcs_pwd)) {\n        aws_byte_buf_clean_up_secure(&options->pkcs12);\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 60,
                  "endLine": 325,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        return AWS_OP_ERR;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->pkcs12_password, allocator, *pkcs_pwd)) {\n        aws_byte_buf_clean_up_secure(&options->pkcs12);\n        return AWS_OP_ERR;\n    }\n",
                    "rendered": {
                      "text": "        return AWS_OP_ERR;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->pkcs12_password, allocator, *pkcs_pwd)) {\n        aws_byte_buf_clean_up_secure(&options->pkcs12);\n        return AWS_OP_ERR;\n    }\n",
                      "markdown": "`        return AWS_OP_ERR;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->pkcs12_password, allocator, *pkcs_pwd)) {\n        aws_byte_buf_clean_up_secure(&options->pkcs12);\n        return AWS_OP_ERR;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 25,
                  "endLine": 193,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        pkcs11_options->pkcs11_lib,\n        &pkcs11_options->user_pin,\n        &pkcs11_options->token_label,\n        &pkcs11_options->private_key_object_label,\n        pkcs11_options->slot_id);\n\n    struct aws_byte_buf tmp_cert_buf;\n",
                    "rendered": {
                      "text": "        pkcs11_options->pkcs11_lib,\n        &pkcs11_options->user_pin,\n        &pkcs11_options->token_label,\n        &pkcs11_options->private_key_object_label,\n        pkcs11_options->slot_id);\n\n    struct aws_byte_buf tmp_cert_buf;\n",
                      "markdown": "`        pkcs11_options->pkcs11_lib,\n        &pkcs11_options->user_pin,\n        &pkcs11_options->token_label,\n        &pkcs11_options->private_key_object_label,\n        pkcs11_options->slot_id);\n\n    struct aws_byte_buf tmp_cert_buf;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 35,
                  "endLine": 115,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        goto error;\n    }\n\n    if (aws_sanitize_pem(&options->private_key, allocator)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: Invalid private key. File must contain PEM encoded data\");\n        goto error;\n    }\n",
                    "rendered": {
                      "text": "        goto error;\n    }\n\n    if (aws_sanitize_pem(&options->private_key, allocator)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: Invalid private key. File must contain PEM encoded data\");\n        goto error;\n    }\n",
                      "markdown": "`        goto error;\n    }\n\n    if (aws_sanitize_pem(&options->private_key, allocator)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: Invalid private key. File must contain PEM encoded data\");\n        goto error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 46,
                  "endLine": 111,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        goto error;\n    }\n\n    if (aws_byte_buf_init_from_file(&options->private_key, allocator, pkey_path)) {\n        goto error;\n    }\n\n",
                    "rendered": {
                      "text": "        goto error;\n    }\n\n    if (aws_byte_buf_init_from_file(&options->private_key, allocator, pkey_path)) {\n        goto error;\n    }\n\n",
                      "markdown": "`        goto error;\n    }\n\n    if (aws_byte_buf_init_from_file(&options->private_key, allocator, pkey_path)) {\n        goto error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 35,
                  "endLine": 73,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        goto error;\n    }\n\n    if (aws_sanitize_pem(&options->private_key, allocator)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: Invalid private key. File must contain PEM encoded data\");\n        goto error;\n    }\n",
                    "rendered": {
                      "text": "        goto error;\n    }\n\n    if (aws_sanitize_pem(&options->private_key, allocator)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: Invalid private key. File must contain PEM encoded data\");\n        goto error;\n    }\n",
                      "markdown": "`        goto error;\n    }\n\n    if (aws_sanitize_pem(&options->private_key, allocator)) {\n        AWS_LOGF_ERROR(AWS_LS_IO_TLS, \"static: Invalid private key. File must contain PEM encoded data\");\n        goto error;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 53,
                  "endLine": 69,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        goto error;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->private_key, allocator, *pkey)) {\n        goto error;\n    }\n\n",
                    "rendered": {
                      "text": "        goto error;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->private_key, allocator, *pkey)) {\n        goto error;\n    }\n\n",
                      "markdown": "`        goto error;\n    }\n\n    if (aws_byte_buf_init_copy_from_cursor(&options->private_key, allocator, *pkey)) {\n        goto error;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 50,
                  "endLine": 37,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n#ifdef __APPLE__\n    aws_byte_buf_clean_up_secure(&options->pkcs12);\n    aws_byte_buf_clean_up_secure(&options->pkcs12_password);\n\n#    if !defined(AWS_OS_IOS)\n    aws_string_destroy(options->keychain_path);\n",
                    "rendered": {
                      "text": "\n#ifdef __APPLE__\n    aws_byte_buf_clean_up_secure(&options->pkcs12);\n    aws_byte_buf_clean_up_secure(&options->pkcs12_password);\n\n#    if !defined(AWS_OS_IOS)\n    aws_string_destroy(options->keychain_path);\n",
                      "markdown": "`\n#ifdef __APPLE__\n    aws_byte_buf_clean_up_secure(&options->pkcs12);\n    aws_byte_buf_clean_up_secure(&options->pkcs12_password);\n\n#    if !defined(AWS_OS_IOS)\n    aws_string_destroy(options->keychain_path);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/tls_channel_handler.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 43,
                  "endLine": 33,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    aws_byte_buf_clean_up(&options->ca_file);\n    aws_string_destroy(options->ca_path);\n    aws_byte_buf_clean_up(&options->certificate);\n    aws_byte_buf_clean_up_secure(&options->private_key);\n\n#ifdef __APPLE__\n    aws_byte_buf_clean_up_secure(&options->pkcs12);\n",
                    "rendered": {
                      "text": "    aws_byte_buf_clean_up(&options->ca_file);\n    aws_string_destroy(options->ca_path);\n    aws_byte_buf_clean_up(&options->certificate);\n    aws_byte_buf_clean_up_secure(&options->private_key);\n\n#ifdef __APPLE__\n    aws_byte_buf_clean_up_secure(&options->pkcs12);\n",
                      "markdown": "`    aws_byte_buf_clean_up(&options->ca_file);\n    aws_string_destroy(options->ca_path);\n    aws_byte_buf_clean_up(&options->certificate);\n    aws_byte_buf_clean_up_secure(&options->private_key);\n\n#ifdef __APPLE__\n    aws_byte_buf_clean_up_secure(&options->pkcs12);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/channel.c"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 96,
                  "endLine": 869,
                  "endColumn": 104,
                  "snippet": {
                    "text": "            slot->window_size <= slot->channel->window_update_batch_emit_threshold) {\n            slot->channel->window_update_scheduled = true;\n            aws_channel_task_init(\n                &slot->channel->window_update_task, s_window_update_task, slot->channel, \"window update task\");\n            aws_channel_schedule_task_now(slot->channel, &slot->channel->window_update_task);\n        }\n    }\n",
                    "rendered": {
                      "text": "            slot->window_size <= slot->channel->window_update_batch_emit_threshold) {\n            slot->channel->window_update_scheduled = true;\n            aws_channel_task_init(\n                &slot->channel->window_update_task, s_window_update_task, slot->channel, \"window update task\");\n            aws_channel_schedule_task_now(slot->channel, &slot->channel->window_update_task);\n        }\n    }\n",
                      "markdown": "`            slot->window_size <= slot->channel->window_update_batch_emit_threshold) {\n            slot->channel->window_update_scheduled = true;\n            aws_channel_task_init(\n                &slot->channel->window_update_task, s_window_update_task, slot->channel, \"window update task\");\n            aws_channel_schedule_task_now(slot->channel, &slot->channel->window_update_task);\n        }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/channel.c"
                },
                "region": {
                  "startLine": 847,
                  "startColumn": 44,
                  "endLine": 847,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                if (aws_channel_handler_increment_read_window(upstream_slot->handler, upstream_slot, update_size)) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_IO_CHANNEL,\n                        \"channel %p: channel update task failed with status %d\",\n                        (void *)slot->channel,\n                        aws_last_error());\n                    aws_channel_shutdown(channel, aws_last_error());\n",
                    "rendered": {
                      "text": "                if (aws_channel_handler_increment_read_window(upstream_slot->handler, upstream_slot, update_size)) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_IO_CHANNEL,\n                        \"channel %p: channel update task failed with status %d\",\n                        (void *)slot->channel,\n                        aws_last_error());\n                    aws_channel_shutdown(channel, aws_last_error());\n",
                      "markdown": "`                if (aws_channel_handler_increment_read_window(upstream_slot->handler, upstream_slot, update_size)) {\n                    AWS_LOGF_ERROR(\n                        AWS_LS_IO_CHANNEL,\n                        \"channel %p: channel update task failed with status %d\",\n                        (void *)slot->channel,\n                        aws_last_error());\n                    aws_channel_shutdown(channel, aws_last_error());\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_lib.c"
                },
                "region": {
                  "startLine": 846,
                  "startColumn": 36,
                  "endLine": 846,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    bool must_finalize_search = false;\n\n    /* set up search attributes */\n    CK_OBJECT_CLASS key_class = CKO_PRIVATE_KEY;\n    CK_ULONG num_attributes = 1;\n    CK_ATTRIBUTE attributes[2] = {\n        {\n",
                    "rendered": {
                      "text": "    bool must_finalize_search = false;\n\n    /* set up search attributes */\n    CK_OBJECT_CLASS key_class = CKO_PRIVATE_KEY;\n    CK_ULONG num_attributes = 1;\n    CK_ATTRIBUTE attributes[2] = {\n        {\n",
                      "markdown": "`    bool must_finalize_search = false;\n\n    /* set up search attributes */\n    CK_OBJECT_CLASS key_class = CKO_PRIVATE_KEY;\n    CK_ULONG num_attributes = 1;\n    CK_ATTRIBUTE attributes[2] = {\n        {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_lib.c"
                },
                "region": {
                  "startLine": 831,
                  "startColumn": 24,
                  "endLine": 831,
                  "endColumn": 35,
                  "snippet": {
                    "text": " * - if match_label is non-null, then labels must match\n * The function fails unless it finds exactly one object meeting all criteria.\n */\nint aws_pkcs11_lib_find_private_key(\n    struct aws_pkcs11_lib *pkcs11_lib,\n    CK_SESSION_HANDLE session_handle,\n    const struct aws_string *match_label,\n",
                    "rendered": {
                      "text": " * - if match_label is non-null, then labels must match\n * The function fails unless it finds exactly one object meeting all criteria.\n */\nint aws_pkcs11_lib_find_private_key(\n    struct aws_pkcs11_lib *pkcs11_lib,\n    CK_SESSION_HANDLE session_handle,\n    const struct aws_string *match_label,\n",
                      "markdown": "` * - if match_label is non-null, then labels must match\n * The function fails unless it finds exactly one object meeting all criteria.\n */\nint aws_pkcs11_lib_find_private_key(\n    struct aws_pkcs11_lib *pkcs11_lib,\n    CK_SESSION_HANDLE session_handle,\n    const struct aws_string *match_label,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_lib.c"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 41,
                  "endLine": 895,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    if ((num_found == 0) || (found_objects[0] == CK_INVALID_HANDLE)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKCS11,\n            \"id=%p session=%lu: Failed to find private key on PKCS#11 token which matches search criteria\",\n            (void *)pkcs11_lib,\n            session_handle);\n        aws_raise_error(AWS_ERROR_PKCS11_KEY_NOT_FOUND);\n",
                    "rendered": {
                      "text": "    if ((num_found == 0) || (found_objects[0] == CK_INVALID_HANDLE)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKCS11,\n            \"id=%p session=%lu: Failed to find private key on PKCS#11 token which matches search criteria\",\n            (void *)pkcs11_lib,\n            session_handle);\n        aws_raise_error(AWS_ERROR_PKCS11_KEY_NOT_FOUND);\n",
                      "markdown": "`    if ((num_found == 0) || (found_objects[0] == CK_INVALID_HANDLE)) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKCS11,\n            \"id=%p session=%lu: Failed to find private key on PKCS#11 token which matches search criteria\",\n            (void *)pkcs11_lib,\n            session_handle);\n        aws_raise_error(AWS_ERROR_PKCS11_KEY_NOT_FOUND);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/pkcs11_lib.c"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 47,
                  "endLine": 713,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n    if (candidate == NULL) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKCS11, \"id=%p: Failed to find PKCS#11 token which matches search criteria\", (void *)pkcs11_lib);\n        aws_raise_error(AWS_ERROR_PKCS11_TOKEN_NOT_FOUND);\n        goto clean_up;\n    }\n",
                    "rendered": {
                      "text": "\n    if (candidate == NULL) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKCS11, \"id=%p: Failed to find PKCS#11 token which matches search criteria\", (void *)pkcs11_lib);\n        aws_raise_error(AWS_ERROR_PKCS11_TOKEN_NOT_FOUND);\n        goto clean_up;\n    }\n",
                      "markdown": "`\n    if (candidate == NULL) {\n        AWS_LOGF_ERROR(\n            AWS_LS_IO_PKCS11, \"id=%p: Failed to find PKCS#11 token which matches search criteria\", (void *)pkcs11_lib);\n        aws_raise_error(AWS_ERROR_PKCS11_TOKEN_NOT_FOUND);\n        goto clean_up;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/source/exponential_backoff_retry_strategy.c"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 12,
                  "endLine": 172,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    uint64_t max = aws_max_u64(from, to);\n    uint64_t min = aws_min_u64(from, to);\n\n    uint64_t diff = max - min;\n\n    if (!diff) {\n        return 0;\n",
                    "rendered": {
                      "text": "    uint64_t max = aws_max_u64(from, to);\n    uint64_t min = aws_min_u64(from, to);\n\n    uint64_t diff = max - min;\n\n    if (!diff) {\n        return 0;\n",
                      "markdown": "`    uint64_t max = aws_max_u64(from, to);\n    uint64_t min = aws_min_u64(from, to);\n\n    uint64_t diff = max - min;\n\n    if (!diff) {\n        return 0;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.builder/actions/pkcs11_test_setup.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 48,
                  "endLine": 99,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        #\n        # invalid args can happen because newer versions of softhsm2-util\n        # support more args than older versions, so what works on your\n        # machine might not work on some ancient docker image.\n        if 'Usage: softhsm2-util' in result.output:\n            raise Exception('softhsm2-util failed')\n\n",
                    "rendered": {
                      "text": "        #\n        # invalid args can happen because newer versions of softhsm2-util\n        # support more args than older versions, so what works on your\n        # machine might not work on some ancient docker image.\n        if 'Usage: softhsm2-util' in result.output:\n            raise Exception('softhsm2-util failed')\n\n",
                      "markdown": "`        #\n        # invalid args can happen because newer versions of softhsm2-util\n        # support more args than older versions, so what works on your\n        # machine might not work on some ancient docker image.\n        if 'Usage: softhsm2-util' in result.output:\n            raise Exception('softhsm2-util failed')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.builder/actions/pkcs11_test_setup.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 54,
                  "endLine": 75,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        \"\"\"Return path to SoftHSM2 shared lib, or None if not found\"\"\"\n\n        # note: not using `ldconfig --print-cache` to find it because\n        # some installers put it in weird places where ldconfig doesn't look\n        # (like in a subfolder under lib/)\n\n        for lib_dir in ['lib64', 'lib']:  # search lib64 before lib\n",
                    "rendered": {
                      "text": "        \"\"\"Return path to SoftHSM2 shared lib, or None if not found\"\"\"\n\n        # note: not using `ldconfig --print-cache` to find it because\n        # some installers put it in weird places where ldconfig doesn't look\n        # (like in a subfolder under lib/)\n\n        for lib_dir in ['lib64', 'lib']:  # search lib64 before lib\n",
                      "markdown": "`        \"\"\"Return path to SoftHSM2 shared lib, or None if not found\"\"\"\n\n        # note: not using `ldconfig --print-cache` to find it because\n        # some installers put it in weird places where ldconfig doesn't look\n        # (like in a subfolder under lib/)\n\n        for lib_dir in ['lib64', 'lib']:  # search lib64 before lib\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.builder/actions/pkcs11_test_setup.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 53,
                  "endLine": 74,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    def _find_softhsm_lib(self):\n        \"\"\"Return path to SoftHSM2 shared lib, or None if not found\"\"\"\n\n        # note: not using `ldconfig --print-cache` to find it because\n        # some installers put it in weird places where ldconfig doesn't look\n        # (like in a subfolder under lib/)\n\n",
                    "rendered": {
                      "text": "    def _find_softhsm_lib(self):\n        \"\"\"Return path to SoftHSM2 shared lib, or None if not found\"\"\"\n\n        # note: not using `ldconfig --print-cache` to find it because\n        # some installers put it in weird places where ldconfig doesn't look\n        # (like in a subfolder under lib/)\n\n",
                      "markdown": "`    def _find_softhsm_lib(self):\n        \"\"\"Return path to SoftHSM2 shared lib, or None if not found\"\"\"\n\n        # note: not using `ldconfig --print-cache` to find it because\n        # some installers put it in weird places where ldconfig doesn't look\n        # (like in a subfolder under lib/)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.builder/actions/pkcs11_test_setup.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 67,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # sanity check SoftHSM is working\n        self._exec_softhsm2_util('--show-slots')\n\n        # set env vars for tests\n        self._setenv('TEST_PKCS11_LIB', softhsm_lib)\n        self._setenv('TEST_PKCS11_TOKEN_DIR', token_dir)\n\n",
                    "rendered": {
                      "text": "        # sanity check SoftHSM is working\n        self._exec_softhsm2_util('--show-slots')\n\n        # set env vars for tests\n        self._setenv('TEST_PKCS11_LIB', softhsm_lib)\n        self._setenv('TEST_PKCS11_TOKEN_DIR', token_dir)\n\n",
                      "markdown": "`        # sanity check SoftHSM is working\n        self._exec_softhsm2_util('--show-slots')\n\n        # set env vars for tests\n        self._setenv('TEST_PKCS11_LIB', softhsm_lib)\n        self._setenv('TEST_PKCS11_TOKEN_DIR', token_dir)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.builder/actions/pkcs11_test_setup.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 18,
                  "endLine": 25,
                  "snippet": {
                    "text": "            print(\"Skipping PKCS#11 setup because tests disabled for project\")\n            return\n\n        self.env = env\n\n        # total hack: don't run PKCS#11 tests when building all C libs with -DBUILD_SHARED_LIBS=ON.\n        # here's what happens:  libsofthsm2.so loads the system libcrypto.so and\n        # s2n loads the aws-lc's libcrypto.so and really strange things start happening.\n",
                    "rendered": {
                      "text": "            print(\"Skipping PKCS#11 setup because tests disabled for project\")\n            return\n\n        self.env = env\n\n        # total hack: don't run PKCS#11 tests when building all C libs with -DBUILD_SHARED_LIBS=ON.\n        # here's what happens:  libsofthsm2.so loads the system libcrypto.so and\n        # s2n loads the aws-lc's libcrypto.so and really strange things start happening.\n",
                      "markdown": "`            print(\"Skipping PKCS#11 setup because tests disabled for project\")\n            return\n\n        self.env = env\n\n        # total hack: don't run PKCS#11 tests when building all C libs with -DBUILD_SHARED_LIBS=ON.\n        # here's what happens:  libsofthsm2.so loads the system libcrypto.so and\n        # s2n loads the aws-lc's libcrypto.so and really strange things start happening.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/vcc/Makefile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "endLine": 12,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# which case the proof results may no longer be valid.\n.phony: .no_change\n.no_change:\n\tcd ../.. && $(GIT) diff --quiet $(NO_CHANGE_EXPECTED_HASH) $(NO_CHANGE_FILE)\n\n.phony: .proofs\n.proofs:\n",
                    "rendered": {
                      "text": "# which case the proof results may no longer be valid.\n.phony: .no_change\n.no_change:\n\tcd ../.. && $(GIT) diff --quiet $(NO_CHANGE_EXPECTED_HASH) $(NO_CHANGE_FILE)\n\n.phony: .proofs\n.proofs:\n",
                      "markdown": "`# which case the proof results may no longer be valid.\n.phony: .no_change\n.no_change:\n\tcd ../.. && $(GIT) diff --quiet $(NO_CHANGE_EXPECTED_HASH) $(NO_CHANGE_FILE)\n\n.phony: .proofs\n.proofs:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 1729,
                  "startColumn": 9,
                  "endLine": 1729,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        .pkcs11_lib = s_pkcs11_tester.lib,\n        .token_label = aws_byte_cursor_from_c_str(token_label),\n        .user_pin = aws_byte_cursor_from_c_str(USER_PIN),\n        .private_key_object_label = aws_byte_cursor_from_c_str(DEFAULT_KEY_LABEL),\n        .cert_file_path = aws_byte_cursor_from_c_str(cert_path),\n    };\n    ASSERT_SUCCESS(\n",
                    "rendered": {
                      "text": "        .pkcs11_lib = s_pkcs11_tester.lib,\n        .token_label = aws_byte_cursor_from_c_str(token_label),\n        .user_pin = aws_byte_cursor_from_c_str(USER_PIN),\n        .private_key_object_label = aws_byte_cursor_from_c_str(DEFAULT_KEY_LABEL),\n        .cert_file_path = aws_byte_cursor_from_c_str(cert_path),\n    };\n    ASSERT_SUCCESS(\n",
                      "markdown": "`        .pkcs11_lib = s_pkcs11_tester.lib,\n        .token_label = aws_byte_cursor_from_c_str(token_label),\n        .user_pin = aws_byte_cursor_from_c_str(USER_PIN),\n        .private_key_object_label = aws_byte_cursor_from_c_str(DEFAULT_KEY_LABEL),\n        .cert_file_path = aws_byte_cursor_from_c_str(cert_path),\n    };\n    ASSERT_SUCCESS(\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 58,
                  "endLine": 932,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key, s_test_pkcs11_find_private_key)\n\nstatic int s_test_pkcs11_find_slot(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key, s_test_pkcs11_find_private_key)\n\nstatic int s_test_pkcs11_find_slot(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key, s_test_pkcs11_find_private_key)\n\nstatic int s_test_pkcs11_find_slot(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 26,
                  "endLine": 932,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key, s_test_pkcs11_find_private_key)\n\nstatic int s_test_pkcs11_find_slot(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key, s_test_pkcs11_find_private_key)\n\nstatic int s_test_pkcs11_find_slot(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key, s_test_pkcs11_find_private_key)\n\nstatic int s_test_pkcs11_find_slot(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 28,
                  "endLine": 920,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    /* Since there is only one key, a lookup without label should also return the key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(\n        aws_pkcs11_lib_find_private_key(s_pkcs11_tester.lib, session_to_access_key, NULL, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n\n",
                    "rendered": {
                      "text": "    /* Since there is only one key, a lookup without label should also return the key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(\n        aws_pkcs11_lib_find_private_key(s_pkcs11_tester.lib, session_to_access_key, NULL, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n\n",
                      "markdown": "`    /* Since there is only one key, a lookup without label should also return the key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(\n        aws_pkcs11_lib_find_private_key(s_pkcs11_tester.lib, session_to_access_key, NULL, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 911,
                  "startColumn": 39,
                  "endLine": 911,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str = aws_string_new_from_c_str(allocator, key_label_1);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_TRUE(CK_INVALID_HANDLE != pkey_handle);\n    ASSERT_INT_EQUALS(created_key, pkey_handle);\n",
                    "rendered": {
                      "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str = aws_string_new_from_c_str(allocator, key_label_1);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_TRUE(CK_INVALID_HANDLE != pkey_handle);\n    ASSERT_INT_EQUALS(created_key, pkey_handle);\n",
                      "markdown": "`    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str = aws_string_new_from_c_str(allocator, key_label_1);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_TRUE(CK_INVALID_HANDLE != pkey_handle);\n    ASSERT_INT_EQUALS(created_key, pkey_handle);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 30,
                  "endLine": 872,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                      "markdown": "`}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 870,
                  "startColumn": 76,
                  "endLine": 870,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 870,
                  "startColumn": 35,
                  "endLine": 870,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_multiple_private_key, s_test_pkcs11_find_multiple_private_key)\n\nstatic int s_test_pkcs11_find_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 39,
                  "endLine": 855,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    /* a lookup with label for the second key should find the second key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_2_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_2, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                    "rendered": {
                      "text": "\n    /* a lookup with label for the second key should find the second key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_2_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_2, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                      "markdown": "`\n    /* a lookup with label for the second key should find the second key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_2_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_2, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 39,
                  "endLine": 848,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    /* a lookup with label for the first key should find the first key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_1, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                    "rendered": {
                      "text": "\n    /* a lookup with label for the first key should find the first key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_1, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                      "markdown": "`\n    /* a lookup with label for the first key should find the first key */\n    pkey_handle = CK_INVALID_HANDLE;\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_1, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 844,
                  "startColumn": 28,
                  "endLine": 844,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    ASSERT_FAILS(\n        aws_pkcs11_lib_find_private_key(s_pkcs11_tester.lib, session_to_access_key, NULL, &pkey_handle, &pkey_type));\n\n    /* a lookup with label for the first key should find the first key */\n    pkey_handle = CK_INVALID_HANDLE;\n",
                    "rendered": {
                      "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    ASSERT_FAILS(\n        aws_pkcs11_lib_find_private_key(s_pkcs11_tester.lib, session_to_access_key, NULL, &pkey_handle, &pkey_type));\n\n    /* a lookup with label for the first key should find the first key */\n    pkey_handle = CK_INVALID_HANDLE;\n",
                      "markdown": "`    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    ASSERT_FAILS(\n        aws_pkcs11_lib_find_private_key(s_pkcs11_tester.lib, session_to_access_key, NULL, &pkey_handle, &pkey_type));\n\n    /* a lookup with label for the first key should find the first key */\n    pkey_handle = CK_INVALID_HANDLE;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 39,
                  "endLine": 802,
                  "endColumn": 50,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                      "markdown": "`}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 65,
                  "endLine": 800,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 26,
                  "endLine": 800,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_ec, s_test_pkcs11_find_private_key_for_ec)\n\nstatic int s_test_pkcs11_find_multiple_private_key(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 39,
                  "endLine": 789,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str_ec_256 = aws_string_new_from_c_str(allocator, key_label_ec_256);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_ec_256, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_ec_256, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_EC, pkey_type);\n",
                    "rendered": {
                      "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str_ec_256 = aws_string_new_from_c_str(allocator, key_label_ec_256);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_ec_256, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_ec_256, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_EC, pkey_type);\n",
                      "markdown": "`    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str_ec_256 = aws_string_new_from_c_str(allocator, key_label_ec_256);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_ec_256, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_ec_256, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_EC, pkey_type);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 30,
                  "endLine": 753,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                      "markdown": "`}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 82,
                  "endLine": 751,
                  "endColumn": 93,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 26,
                  "endLine": 751,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                    "rendered": {
                      "text": "    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n",
                      "markdown": "`    s_pkcs11_tester_clean_up();\n    return AWS_OP_SUCCESS;\n}\nAWS_TEST_CASE(pkcs11_find_private_key_for_different_rsa_types, s_test_pkcs11_find_private_key_for_different_rsa_types)\n\nstatic int s_test_pkcs11_find_private_key_for_ec(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 39,
                  "endLine": 738,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    /* Find key */\n    struct aws_string *key_label_str_4096 = aws_string_new_from_c_str(allocator, key_label_4096);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_4096, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_4096, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                    "rendered": {
                      "text": "\n    /* Find key */\n    struct aws_string *key_label_str_4096 = aws_string_new_from_c_str(allocator, key_label_4096);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_4096, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_4096, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                      "markdown": "`\n    /* Find key */\n    struct aws_string *key_label_str_4096 = aws_string_new_from_c_str(allocator, key_label_4096);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_4096, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_4096, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 39,
                  "endLine": 723,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    /* Find key */\n    struct aws_string *key_label_str_2048 = aws_string_new_from_c_str(allocator, key_label_2048);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_2048, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_2048, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                    "rendered": {
                      "text": "\n    /* Find key */\n    struct aws_string *key_label_str_2048 = aws_string_new_from_c_str(allocator, key_label_2048);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_2048, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_2048, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                      "markdown": "`\n    /* Find key */\n    struct aws_string *key_label_str_2048 = aws_string_new_from_c_str(allocator, key_label_2048);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str_2048, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_key_2048, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 39,
                  "endLine": 708,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str = aws_string_new_from_c_str(allocator, key_label_1024);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_priv_key, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                    "rendered": {
                      "text": "    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str = aws_string_new_from_c_str(allocator, key_label_1024);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_priv_key, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n",
                      "markdown": "`    CK_OBJECT_HANDLE pkey_handle = CK_INVALID_HANDLE;\n    CK_KEY_TYPE pkey_type;\n    struct aws_string *key_label_str = aws_string_new_from_c_str(allocator, key_label_1024);\n    ASSERT_SUCCESS(aws_pkcs11_lib_find_private_key(\n        s_pkcs11_tester.lib, session_to_access_key, key_label_str, &pkey_handle, &pkey_type));\n    ASSERT_INT_EQUALS(created_priv_key, pkey_handle);\n    ASSERT_INT_EQUALS(CKK_RSA, pkey_type);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 30,
                  "endLine": 673,
                  "endColumn": 41,
                  "snippet": {
                    "text": "}\nAWS_TEST_CASE(pkcs11_login_tests, s_test_pkcs11_login_tests)\n\nstatic int s_test_pkcs11_find_private_key_for_different_rsa_types(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                    "rendered": {
                      "text": "}\nAWS_TEST_CASE(pkcs11_login_tests, s_test_pkcs11_login_tests)\n\nstatic int s_test_pkcs11_find_private_key_for_different_rsa_types(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n",
                      "markdown": "`}\nAWS_TEST_CASE(pkcs11_login_tests, s_test_pkcs11_login_tests)\n\nstatic int s_test_pkcs11_find_private_key_for_different_rsa_types(struct aws_allocator *allocator, void *ctx) {\n    (void)ctx;\n    /* Reset PKCS#11 tokens and load library */\n    ASSERT_SUCCESS(s_pkcs11_tester_init(allocator));\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 27,
                  "endLine": 246,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 13,
                  "endLine": 246,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 9,
                  "endLine": 242,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n",
                    "rendered": {
                      "text": "        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n",
                      "markdown": "`        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 23,
                  "endLine": 240,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n",
                    "rendered": {
                      "text": "        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n",
                      "markdown": "`        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 8,
                  "endLine": 239,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        &smech,\n        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n",
                    "rendered": {
                      "text": "        &smech,\n        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n",
                      "markdown": "`        &smech,\n        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 21,
                  "endLine": 232,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n        {CKA_EXTRACTABLE, &falsevalue, sizeof(falsevalue)},\n    };\n    CK_OBJECT_HANDLE privatekey, publickey = CK_INVALID_HANDLE;\n    /* Generate Key pair for signing/verifying */\n    CK_RV rv = pkcs11_function_list->C_GenerateKeyPair(\n        session,\n",
                    "rendered": {
                      "text": "        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n        {CKA_EXTRACTABLE, &falsevalue, sizeof(falsevalue)},\n    };\n    CK_OBJECT_HANDLE privatekey, publickey = CK_INVALID_HANDLE;\n    /* Generate Key pair for signing/verifying */\n    CK_RV rv = pkcs11_function_list->C_GenerateKeyPair(\n        session,\n",
                      "markdown": "`        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n        {CKA_EXTRACTABLE, &falsevalue, sizeof(falsevalue)},\n    };\n    CK_OBJECT_HANDLE privatekey, publickey = CK_INVALID_HANDLE;\n    /* Generate Key pair for signing/verifying */\n    CK_RV rv = pkcs11_function_list->C_GenerateKeyPair(\n        session,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 17,
                  "endLine": 226,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    /* Set private key. The parameters here are kind of random, does not affect the test, but trying\n     * to mimic what a real key would look like in terms of attributes */\n    CK_ATTRIBUTE privatekey_template[] = {\n        {CKA_LABEL, (void *)params->key_label, (CK_ULONG)strlen(params->key_label)},\n        {CKA_ID, (void *)params->key_id, (CK_ULONG)strlen(params->key_id)},\n        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n",
                    "rendered": {
                      "text": "\n    /* Set private key. The parameters here are kind of random, does not affect the test, but trying\n     * to mimic what a real key would look like in terms of attributes */\n    CK_ATTRIBUTE privatekey_template[] = {\n        {CKA_LABEL, (void *)params->key_label, (CK_ULONG)strlen(params->key_label)},\n        {CKA_ID, (void *)params->key_id, (CK_ULONG)strlen(params->key_id)},\n        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n",
                      "markdown": "`\n    /* Set private key. The parameters here are kind of random, does not affect the test, but trying\n     * to mimic what a real key would look like in terms of attributes */\n    CK_ATTRIBUTE privatekey_template[] = {\n        {CKA_LABEL, (void *)params->key_label, (CK_ULONG)strlen(params->key_label)},\n        {CKA_ID, (void *)params->key_id, (CK_ULONG)strlen(params->key_id)},\n        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 30,
                  "endLine": 207,
                  "endColumn": 41,
                  "snippet": {
                    "text": "static int s_pkcs11_create_ec_key(\n    struct pkcs11_key_creation_params *params,\n    CK_SESSION_HANDLE session,\n    CK_OBJECT_HANDLE *created_private_key,\n    CK_OBJECT_HANDLE *created_public_key) {\n\n    CK_FUNCTION_LIST *pkcs11_function_list = aws_pkcs11_lib_get_function_list(s_pkcs11_tester.lib);\n",
                    "rendered": {
                      "text": "static int s_pkcs11_create_ec_key(\n    struct pkcs11_key_creation_params *params,\n    CK_SESSION_HANDLE session,\n    CK_OBJECT_HANDLE *created_private_key,\n    CK_OBJECT_HANDLE *created_public_key) {\n\n    CK_FUNCTION_LIST *pkcs11_function_list = aws_pkcs11_lib_get_function_list(s_pkcs11_tester.lib);\n",
                      "markdown": "`static int s_pkcs11_create_ec_key(\n    struct pkcs11_key_creation_params *params,\n    CK_SESSION_HANDLE session,\n    CK_OBJECT_HANDLE *created_private_key,\n    CK_OBJECT_HANDLE *created_public_key) {\n\n    CK_FUNCTION_LIST *pkcs11_function_list = aws_pkcs11_lib_get_function_list(s_pkcs11_tester.lib);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 27,
                  "endLine": 199,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 13,
                  "endLine": 199,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                    "rendered": {
                      "text": "    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n",
                      "markdown": "`    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n    *created_private_key = privatekey;\n    *created_public_key = publickey;\n    return AWS_OP_SUCCESS;\n}\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 9,
                  "endLine": 195,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n",
                    "rendered": {
                      "text": "        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n",
                      "markdown": "`        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n        FAIL(\"C_GenerateKeyPair fails: PKCS#11 error: %s (0x%08lX)\", aws_pkcs11_ckr_str(rv), rv);\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 23,
                  "endLine": 193,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n",
                    "rendered": {
                      "text": "        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n",
                      "markdown": "`        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n    if (rv != CKR_OK) {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 8,
                  "endLine": 192,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        &smech,\n        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n",
                    "rendered": {
                      "text": "        &smech,\n        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n",
                      "markdown": "`        &smech,\n        publickey_template,\n        AWS_ARRAY_SIZE(publickey_template),\n        privatekey_template,\n        AWS_ARRAY_SIZE(privatekey_template),\n        &publickey,\n        &privatekey);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 21,
                  "endLine": 185,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n        {CKA_EXTRACTABLE, &falsevalue, sizeof(falsevalue)},\n    };\n    CK_OBJECT_HANDLE privatekey, publickey = CK_INVALID_HANDLE;\n    /* Generate Key pair for signing/verifying */\n    CK_RV rv = pkcs11_function_list->C_GenerateKeyPair(\n        session,\n",
                    "rendered": {
                      "text": "        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n        {CKA_EXTRACTABLE, &falsevalue, sizeof(falsevalue)},\n    };\n    CK_OBJECT_HANDLE privatekey, publickey = CK_INVALID_HANDLE;\n    /* Generate Key pair for signing/verifying */\n    CK_RV rv = pkcs11_function_list->C_GenerateKeyPair(\n        session,\n",
                      "markdown": "`        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n        {CKA_EXTRACTABLE, &falsevalue, sizeof(falsevalue)},\n    };\n    CK_OBJECT_HANDLE privatekey, publickey = CK_INVALID_HANDLE;\n    /* Generate Key pair for signing/verifying */\n    CK_RV rv = pkcs11_function_list->C_GenerateKeyPair(\n        session,\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 17,
                  "endLine": 179,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    /* Set private key. The parameters here are kind of random, does not affect the test, but trying\n     * to mimic what a real key would look like in terms of attributes */\n    CK_ATTRIBUTE privatekey_template[] = {\n        {CKA_LABEL, (void *)params->key_label, (CK_ULONG)strlen(params->key_label)},\n        {CKA_ID, (void *)params->key_id, (CK_ULONG)strlen(params->key_id)},\n        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n",
                    "rendered": {
                      "text": "\n    /* Set private key. The parameters here are kind of random, does not affect the test, but trying\n     * to mimic what a real key would look like in terms of attributes */\n    CK_ATTRIBUTE privatekey_template[] = {\n        {CKA_LABEL, (void *)params->key_label, (CK_ULONG)strlen(params->key_label)},\n        {CKA_ID, (void *)params->key_id, (CK_ULONG)strlen(params->key_id)},\n        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n",
                      "markdown": "`\n    /* Set private key. The parameters here are kind of random, does not affect the test, but trying\n     * to mimic what a real key would look like in terms of attributes */\n    CK_ATTRIBUTE privatekey_template[] = {\n        {CKA_LABEL, (void *)params->key_label, (CK_ULONG)strlen(params->key_label)},\n        {CKA_ID, (void *)params->key_id, (CK_ULONG)strlen(params->key_id)},\n        {CKA_SIGN, &truevalue, sizeof(truevalue)},\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 30,
                  "endLine": 160,
                  "endColumn": 41,
                  "snippet": {
                    "text": "static int s_pkcs11_create_rsa_key(\n    struct pkcs11_key_creation_params *params,\n    CK_SESSION_HANDLE session,\n    CK_OBJECT_HANDLE *created_private_key,\n    CK_OBJECT_HANDLE *created_public_key) {\n\n    CK_FUNCTION_LIST *pkcs11_function_list = aws_pkcs11_lib_get_function_list(s_pkcs11_tester.lib);\n",
                    "rendered": {
                      "text": "static int s_pkcs11_create_rsa_key(\n    struct pkcs11_key_creation_params *params,\n    CK_SESSION_HANDLE session,\n    CK_OBJECT_HANDLE *created_private_key,\n    CK_OBJECT_HANDLE *created_public_key) {\n\n    CK_FUNCTION_LIST *pkcs11_function_list = aws_pkcs11_lib_get_function_list(s_pkcs11_tester.lib);\n",
                      "markdown": "`static int s_pkcs11_create_rsa_key(\n    struct pkcs11_key_creation_params *params,\n    CK_SESSION_HANDLE session,\n    CK_OBJECT_HANDLE *created_private_key,\n    CK_OBJECT_HANDLE *created_public_key) {\n\n    CK_FUNCTION_LIST *pkcs11_function_list = aws_pkcs11_lib_get_function_list(s_pkcs11_tester.lib);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 65,
                  "endLine": 1299,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    ASSERT_SUCCESS(aws_pkcs11_asn1_enc_ubigint(&buffer, src_array));\n    ASSERT_INT_EQUALS(len_out, buffer.len);\n    for (size_t i = 0; i < len_out; i++) {\n        ASSERT_HEX_EQUALS(ptr_out[i], buffer.buffer[i], \"Mismatch at position %zu\", i);\n    }\n    aws_byte_buf_clean_up(&buffer);\n    return AWS_OP_SUCCESS;\n",
                    "rendered": {
                      "text": "    ASSERT_SUCCESS(aws_pkcs11_asn1_enc_ubigint(&buffer, src_array));\n    ASSERT_INT_EQUALS(len_out, buffer.len);\n    for (size_t i = 0; i < len_out; i++) {\n        ASSERT_HEX_EQUALS(ptr_out[i], buffer.buffer[i], \"Mismatch at position %zu\", i);\n    }\n    aws_byte_buf_clean_up(&buffer);\n    return AWS_OP_SUCCESS;\n",
                      "markdown": "`    ASSERT_SUCCESS(aws_pkcs11_asn1_enc_ubigint(&buffer, src_array));\n    ASSERT_INT_EQUALS(len_out, buffer.len);\n    for (size_t i = 0; i < len_out; i++) {\n        ASSERT_HEX_EQUALS(ptr_out[i], buffer.buffer[i], \"Mismatch at position %zu\", i);\n    }\n    aws_byte_buf_clean_up(&buffer);\n    return AWS_OP_SUCCESS;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/pkcs11_test.c"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 30,
                  "endLine": 301,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    aws_mem_release(s_pkcs11_tester.allocator, p_slot_list);\n\n    if (counter == 0) {\n        FAIL(\"ERROR: Could not find a slot/token using --serial, or --token\");\n    } else if (counter > 1) {\n        FAIL(\"ERROR: Found multiple matching slots/tokens.\");\n    }\n",
                    "rendered": {
                      "text": "    aws_mem_release(s_pkcs11_tester.allocator, p_slot_list);\n\n    if (counter == 0) {\n        FAIL(\"ERROR: Could not find a slot/token using --serial, or --token\");\n    } else if (counter > 1) {\n        FAIL(\"ERROR: Found multiple matching slots/tokens.\");\n    }\n",
                      "markdown": "`    aws_mem_release(s_pkcs11_tester.allocator, p_slot_list);\n\n    if (counter == 0) {\n        FAIL(\"ERROR: Could not find a slot/token using --serial, or --token\");\n    } else if (counter > 1) {\n        FAIL(\"ERROR: Found multiple matching slots/tokens.\");\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 39,
                  "endLine": 331,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n    add_test_case(pkcs11_sign_rsa_sha224)\n    add_test_case(pkcs11_sign_rsa_sha256)\n",
                    "rendered": {
                      "text": "    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n    add_test_case(pkcs11_sign_rsa_sha224)\n    add_test_case(pkcs11_sign_rsa_sha256)\n",
                      "markdown": "`    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n    add_test_case(pkcs11_sign_rsa_sha224)\n    add_test_case(pkcs11_sign_rsa_sha256)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 30,
                  "endLine": 330,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n    add_test_case(pkcs11_sign_rsa_sha224)\n",
                    "rendered": {
                      "text": "    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n    add_test_case(pkcs11_sign_rsa_sha224)\n",
                      "markdown": "`    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n    add_test_case(pkcs11_sign_rsa_sha224)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 30,
                  "endLine": 329,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    add_test_case(pkcs11_lib_behavior_omit_initialize)\n    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n",
                    "rendered": {
                      "text": "    add_test_case(pkcs11_lib_behavior_omit_initialize)\n    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n",
                      "markdown": "`    add_test_case(pkcs11_lib_behavior_omit_initialize)\n    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n    add_test_case(pkcs11_sign_rsa_sha1)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 30,
                  "endLine": 328,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    add_test_case(pkcs11_lib_behavior_default)\n    add_test_case(pkcs11_lib_behavior_omit_initialize)\n    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n",
                    "rendered": {
                      "text": "    add_test_case(pkcs11_lib_behavior_default)\n    add_test_case(pkcs11_lib_behavior_omit_initialize)\n    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n",
                      "markdown": "`    add_test_case(pkcs11_lib_behavior_default)\n    add_test_case(pkcs11_lib_behavior_omit_initialize)\n    add_test_case(pkcs11_lib_behavior_strict_initialize_finalize)\n    add_test_case(pkcs11_find_private_key)\n    add_test_case(pkcs11_find_private_key_for_different_rsa_types)\n    add_test_case(pkcs11_find_private_key_for_ec)\n    add_test_case(pkcs11_find_multiple_private_key)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 23,
                  "endLine": 116,
                  "endColumn": 34,
                  "snippet": {
                    "text": "add_test_case(test_pem_cert_chain_parse)\nadd_test_case(test_pem_cert_parse_from_file)\nadd_test_case(test_pem_cert_parse_from_file_crlf)\nadd_test_case(test_pem_private_key_parse_from_file)\nadd_test_case(test_pem_cert_chain_comments_and_whitespace)\nadd_test_case(test_pem_invalid_parse)\nadd_test_case(test_pem_valid_data_invalid_parse)\n",
                    "rendered": {
                      "text": "add_test_case(test_pem_cert_chain_parse)\nadd_test_case(test_pem_cert_parse_from_file)\nadd_test_case(test_pem_cert_parse_from_file_crlf)\nadd_test_case(test_pem_private_key_parse_from_file)\nadd_test_case(test_pem_cert_chain_comments_and_whitespace)\nadd_test_case(test_pem_invalid_parse)\nadd_test_case(test_pem_valid_data_invalid_parse)\n",
                      "markdown": "`add_test_case(test_pem_cert_chain_parse)\nadd_test_case(test_pem_cert_parse_from_file)\nadd_test_case(test_pem_cert_parse_from_file_crlf)\nadd_test_case(test_pem_private_key_parse_from_file)\nadd_test_case(test_pem_cert_chain_comments_and_whitespace)\nadd_test_case(test_pem_invalid_parse)\nadd_test_case(test_pem_valid_data_invalid_parse)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/tests/CMakeLists.txt"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 23,
                  "endLine": 112,
                  "endColumn": 34,
                  "snippet": {
                    "text": "add_test_case(test_resolver_low_frequency_starvation)\n\nadd_test_case(test_pem_single_cert_parse)\nadd_test_case(test_pem_private_key_parse)\nadd_test_case(test_pem_cert_chain_parse)\nadd_test_case(test_pem_cert_parse_from_file)\nadd_test_case(test_pem_cert_parse_from_file_crlf)\n",
                    "rendered": {
                      "text": "add_test_case(test_resolver_low_frequency_starvation)\n\nadd_test_case(test_pem_single_cert_parse)\nadd_test_case(test_pem_private_key_parse)\nadd_test_case(test_pem_cert_chain_parse)\nadd_test_case(test_pem_cert_parse_from_file)\nadd_test_case(test_pem_cert_parse_from_file_crlf)\n",
                      "markdown": "`add_test_case(test_resolver_low_frequency_starvation)\n\nadd_test_case(test_pem_single_cert_parse)\nadd_test_case(test_pem_private_key_parse)\nadd_test_case(test_pem_cert_chain_parse)\nadd_test_case(test_pem_cert_parse_from_file)\nadd_test_case(test_pem_cert_parse_from_file_crlf)\n`"
                    }
                  },
                  "sourceLanguage": "plaintext"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 10,
                  "endLine": 31,
                  "endColumn": 19,
                  "snippet": {
                    "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`        What actually happened?\n        \n        Please include full errors, uncaught exceptions, stack traces, and relevant logs.\n        If service responses are relevant, please include wire logs.\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/ISSUE_TEMPLATE/bug-report.yml"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                    "rendered": {
                      "text": "    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n",
                      "markdown": "`    attributes:\n      label: Expected Behavior\n      description: |\n        What did you expect to happen?\n    validations:\n      required: true\n  - type: textarea\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 40,
                  "endLine": 138,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')\"\n        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --target windows-${{ matrix.arch }} --compiler msvc-14\n\n  windows-shared-libs:\n    runs-on: windows-2022 # latest\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "endLine": 218,
                  "snippet": {
                    "text": "          architecture: x86-64\n          version: '7.4'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          architecture: x86-64\n          version: '7.4'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          architecture: x86-64\n          version: '7.4'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 16,
                  "endLine": 199,
                  "snippet": {
                    "text": "          architecture: x86-64\n          version: '14.0'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          architecture: x86-64\n          version: '14.0'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          architecture: x86-64\n          version: '14.0'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 11,
                  "endLine": 221,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n",
                    "rendered": {
                      "text": "          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n",
                      "markdown": "`          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "endLine": 218,
                  "snippet": {
                    "text": "          architecture: x86-64\n          version: '7.4'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          architecture: x86-64\n          version: '7.4'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          architecture: x86-64\n          version: '7.4'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg_add py3-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 11,
                  "endLine": 202,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  openbsd:\n",
                    "rendered": {
                      "text": "          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  openbsd:\n",
                      "markdown": "`          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n            ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  openbsd:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 16,
                  "endLine": 199,
                  "snippet": {
                    "text": "          architecture: x86-64\n          version: '14.0'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                    "rendered": {
                      "text": "          architecture: x86-64\n          version: '14.0'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n",
                      "markdown": "`          architecture: x86-64\n          version: '14.0'\n          cpu_count: 4\n          shell: bash\n          run: |\n            sudo pkg install -y python3 net/py-urllib3\n            python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n            chmod a+x builder\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 7,
                  "endLine": 183,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  freebsd:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  freebsd:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  freebsd:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 7,
                  "endLine": 174,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-debug:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-debug:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "endLine": 165,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n",
                    "rendered": {
                      "text": "    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n",
                      "markdown": "`    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        python3 -c \"from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')\"\n        chmod a+x builder\n        ./builder build -p ${{ env.PACKAGE_NAME }}\n\n  macos-x64:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 48,
                  "endLine": 130,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                    "rendered": {
                      "text": "        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n",
                      "markdown": "`        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  windows-vc14:\n    runs-on: windows-2019 # windows-2019 is last env with Visual Studio 2015 (v14.0)\n    strategy:\n      matrix:\n        arch: [x86, x64]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 122,
                  "endLine": 110,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 16,
                  "endLine": 110,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build downstream -p ${{ env.PACKAGE_NAME }}\n\n  windows:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 120,
                  "endLine": 99,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  # Test downstream repos.\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 14,
                  "endLine": 99,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  # Test downstream repos.\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  # Test downstream repos.\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBUILD_SHARED_LIBS=ON\n\n  # Test downstream repos.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 122,
                  "endLine": 90,
                  "endColumn": 129,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 16,
                  "endLine": 90,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                    "rendered": {
                      "text": "      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n",
                      "markdown": "`      # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n      - name: Build ${{ env.PACKAGE_NAME }}\n        run: |\n          aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n          ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=clang-11 --cmake-extra=-DENABLE_SANITIZERS=ON --cmake-extra=-DSANITIZERS=\"${{ matrix.sanitizers }}\"\n\n  linux-shared-libs:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 120,
                  "endLine": 77,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  clang-sanitizers:\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 14,
                  "endLine": 77,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  clang-sanitizers:\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  clang-sanitizers:\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --config Debug\n\n  clang-sanitizers:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 120,
                  "endLine": 69,
                  "endColumn": 127,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  linux-debug:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  linux-debug:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  linux-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 14,
                  "endLine": 69,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  linux-debug:\n",
                    "rendered": {
                      "text": "        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  linux-debug:\n",
                      "markdown": "`        # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ env.LINUX_BASE_IMAGE }} build -p ${{ env.PACKAGE_NAME }} --compiler=${{ matrix.compiler }}\n\n  linux-debug:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 120,
                  "endLine": 46,
                  "endColumn": 127,
                  "snippet": {
                    "text": "       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  linux-compiler-compat:\n",
                      "markdown": "`       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 14,
                  "endLine": 46,
                  "endColumn": 18,
                  "snippet": {
                    "text": "       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  linux-compiler-compat:\n",
                    "rendered": {
                      "text": "       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  linux-compiler-compat:\n",
                      "markdown": "`       # We can't use the `uses: docker://image` version yet, GitHub lacks authentication for actions -> packages\n    - name: Build ${{ env.PACKAGE_NAME }} + consumers\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-al2-x64 build -p ${{ env.PACKAGE_NAME }} --cmake-extra=-DBYO_CRYPTO=ON\n\n  linux-compiler-compat:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 120,
                  "endLine": 37,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-byo-crypto:\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-byo-crypto:\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/ci.yml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 14,
                  "endLine": 37,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-byo-crypto:\n",
                    "rendered": {
                      "text": "    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-byo-crypto:\n",
                      "markdown": "`    steps:\n    - name: Build ${{ env.PACKAGE_NAME }}\n      run: |\n        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh\n        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}\n\n  linux-byo-crypto:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/.github/workflows/proof-alarm.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 28,
                  "endLine": 30,
                  "endColumn": 36,
                  "snippet": {
                    "text": "          echo \"The VCC proofs are based on a snapshot of epoll_event_loop.c.\n                This push updates this file so the proofs must be rechecked to ensure they remain valid.\n                Please contact Nathan Chong.\n                You can also update md5sum value by running `md5sum source/linux/epoll_event_loop.c` if the changes are trivial.\"\n",
                    "rendered": {
                      "text": "          echo \"The VCC proofs are based on a snapshot of epoll_event_loop.c.\n                This push updates this file so the proofs must be rechecked to ensure they remain valid.\n                Please contact Nathan Chong.\n                You can also update md5sum value by running `md5sum source/linux/epoll_event_loop.c` if the changes are trivial.\"\n",
                      "markdown": "`          echo \"The VCC proofs are based on a snapshot of epoll_event_loop.c.\n                This push updates this file so the proofs must be rechecked to ensure they remain valid.\n                Please contact Nathan Chong.\n                You can also update md5sum value by running `md5sum source/linux/epoll_event_loop.c` if the changes are trivial.\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/PKCS11.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 7,
                  "endLine": 34,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        directories.tokendir = /usr/local/var/lib/softhsm/tokens/\n        ```\n\n2)  Set env vars like so:\n    ```\n    TEST_PKCS11_LIB = <path to libsofthsm2.so>\n    TEST_PKCS11_TOKEN_DIR = /usr/local/var/lib/softhsm/tokens/\n",
                    "rendered": {
                      "text": "        directories.tokendir = /usr/local/var/lib/softhsm/tokens/\n        ```\n\n2)  Set env vars like so:\n    ```\n    TEST_PKCS11_LIB = <path to libsofthsm2.so>\n    TEST_PKCS11_TOKEN_DIR = /usr/local/var/lib/softhsm/tokens/\n",
                      "markdown": "`        directories.tokendir = /usr/local/var/lib/softhsm/tokens/\n        ```\n\n2)  Set env vars like so:\n    ```\n    TEST_PKCS11_LIB = <path to libsofthsm2.so>\n    TEST_PKCS11_TOKEN_DIR = /usr/local/var/lib/softhsm/tokens/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/PKCS11.md"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n\n    Check that it's working:\n",
                    "rendered": {
                      "text": "## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n\n    Check that it's working:\n",
                      "markdown": "`## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n\n    Check that it's working:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/PKCS11.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 76,
                  "endLine": 17,
                  "endColumn": 85,
                  "snippet": {
                    "text": "\n\n## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n",
                    "rendered": {
                      "text": "\n\n## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n",
                      "markdown": "`\n\n## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/PKCS11.md"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 70,
                  "endLine": 17,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n\n## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n",
                    "rendered": {
                      "text": "\n\n## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n",
                      "markdown": "`\n\n## The suggested way to set up your machine\n1)  Install [SoftHSM2](https://www.opendnssec.org/softhsm/) via brew / apt / apt-get / yum:\n    ```\n    > apt install softhsm\n    ```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/format-check.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                    "rendered": {
                      "text": "if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n",
                      "markdown": "`if args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\nprint(f\"{Path.cwd()}$ {list2cmdline(cmd)}\")\nif run(cmd).returncode:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/format-check.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "endLine": 41,
                  "endColumn": 8,
                  "snippet": {
                    "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                    "rendered": {
                      "text": "cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n",
                      "markdown": "`cmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\nelse:\n    cmd += ['--Werror', '--dry-run']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/format-check.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 76,
                  "endLine": 38,
                  "endColumn": 4,
                  "snippet": {
                    "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                    "rendered": {
                      "text": "filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n",
                      "markdown": "`filepaths_file.close()\n\n# use pipx to run clang-format from PyPI\n# this is a simple way to run the same clang-format version regardless of OS\ncmd = ['pipx', 'run', f'clang-format=={CLANG_FORMAT_VERSION}',\n       f'--files={filepaths_file.name}']\nif args.inplace_edit:\n    cmd += ['-i']\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/format-check.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 21,
                  "endLine": 26,
                  "endColumn": 29,
                  "snippet": {
                    "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                    "rendered": {
                      "text": "filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n",
                      "markdown": "`filepaths_file = NamedTemporaryFile(delete=False)\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for filename in filenames:\n        # our regexes expect filepath to use forward slash\n        filepath = Path(dirpath, filename).as_posix()\n        if not INCLUDE_REGEX.match(filepath):\n            continue\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 221,
                  "endLine": 44,
                  "endColumn": 225,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 7,
                  "endLine": 44,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-io/issues), or [recently closed](https://github.com/awslabs/aws-c-io/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                    "rendered": {
                      "text": "\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-io/issues), or [recently closed](https://github.com/awslabs/aws-c-io/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n",
                      "markdown": "`\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/aws-c-io/issues), or [recently closed](https://github.com/awslabs/aws-c-io/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 48,
                  "endLine": 44,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                    "rendered": {
                      "text": "\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n",
                      "markdown": "`\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any ['help wanted'](https://github.com/awslabs/aws-c-io/labels/help%20wanted) issues is a great place to start.\n\n\n## Code of Conduct\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/aws-c-io.zip/CONTRIBUTING.md"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 77,
                  "endLine": 28,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                    "rendered": {
                      "text": "\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n",
                      "markdown": "`\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}