{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/samples/samax.c"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 102,
                  "endLine": 87,
                  "endColumn": 106,
                  "snippet": {
                    "text": "  clEnqueueReadBuffer(queue, device_output, CL_TRUE, 0, 1*sizeof(unsigned int), host_output, 0, NULL, NULL);\n\n  // Example completed. See \"clblast_c.h\" for status codes (0 -> success).\n  printf(\"Completed iSAMAX with status %d: array of %zu values with staircases from 0..9 repeated, max at index %u with value %.0lf\\n\",\n         status, n, host_output[0], host_input[host_output[0]]);\n\n  // Clean-up\n",
                    "rendered": {
                      "text": "  clEnqueueReadBuffer(queue, device_output, CL_TRUE, 0, 1*sizeof(unsigned int), host_output, 0, NULL, NULL);\n\n  // Example completed. See \"clblast_c.h\" for status codes (0 -> success).\n  printf(\"Completed iSAMAX with status %d: array of %zu values with staircases from 0..9 repeated, max at index %u with value %.0lf\\n\",\n         status, n, host_output[0], host_input[host_output[0]]);\n\n  // Clean-up\n",
                      "markdown": "`  clEnqueueReadBuffer(queue, device_output, CL_TRUE, 0, 1*sizeof(unsigned int), host_output, 0, NULL, NULL);\n\n  // Example completed. See \"clblast_c.h\" for status codes (0 -> success).\n  printf(\"Completed iSAMAX with status %d: array of %zu values with staircases from 0..9 repeated, max at index %u with value %.0lf\\n\",\n         status, n, host_output[0], host_input[host_output[0]]);\n\n  // Clean-up\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/samples/haxpy.c"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 24,
                  "endLine": 96,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n  // Prints the first output value\n  if (status == 0) {\n    printf(\"Output value at index 0: b[0] = %.3lf\\n\", HalfToFloat(host_b[0]));\n  }\n\n  // Clean-up\n",
                    "rendered": {
                      "text": "\n  // Prints the first output value\n  if (status == 0) {\n    printf(\"Output value at index 0: b[0] = %.3lf\\n\", HalfToFloat(host_b[0]));\n  }\n\n  // Clean-up\n",
                      "markdown": "`\n  // Prints the first output value\n  if (status == 0) {\n    printf(\"Output value at index 0: b[0] = %.3lf\\n\", HalfToFloat(host_b[0]));\n  }\n\n  // Clean-up\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/samples/haxpy.c"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 22,
                  "endLine": 67,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  cl_half* host_b = (cl_half*)malloc(sizeof(cl_half)*n);\n  for (size_t i=0; i<n; ++i) { host_a[i] = FloatToHalf(2.2f); }\n  for (size_t i=0; i<n; ++i) { host_b[i] = FloatToHalf(0.4f); }\n  printf(\"Input values at index 0: alpha * a[0] + b[0] == %.3lf * %.3lf + %.3lf\\n\",\n         HalfToFloat(alpha), HalfToFloat(host_a[0]), HalfToFloat(host_b[0]));\n\n  // Copy the matrices to the device\n",
                    "rendered": {
                      "text": "  cl_half* host_b = (cl_half*)malloc(sizeof(cl_half)*n);\n  for (size_t i=0; i<n; ++i) { host_a[i] = FloatToHalf(2.2f); }\n  for (size_t i=0; i<n; ++i) { host_b[i] = FloatToHalf(0.4f); }\n  printf(\"Input values at index 0: alpha * a[0] + b[0] == %.3lf * %.3lf + %.3lf\\n\",\n         HalfToFloat(alpha), HalfToFloat(host_a[0]), HalfToFloat(host_b[0]));\n\n  // Copy the matrices to the device\n",
                      "markdown": "`  cl_half* host_b = (cl_half*)malloc(sizeof(cl_half)*n);\n  for (size_t i=0; i<n; ++i) { host_a[i] = FloatToHalf(2.2f); }\n  for (size_t i=0; i<n; ++i) { host_b[i] = FloatToHalf(0.4f); }\n  printf(\"Input values at index 0: alpha * a[0] + b[0] == %.3lf * %.3lf + %.3lf\\n\",\n         HalfToFloat(alpha), HalfToFloat(host_a[0]), HalfToFloat(host_b[0]));\n\n  // Copy the matrices to the device\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/samples/cache.c"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 18,
                  "endLine": 125,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  // Retrieves the execution time\n  clock_t diff = clock() - start;\n  double time_ms = diff * 1000.0f / (double)CLOCKS_PER_SEC;\n\n  // Routine completed. See \"clblast_c.h\" for status codes (0 -> success).\n  printf(\"Completed routine with status %d in %.3lf ms\\n\", status, time_ms);\n",
                    "rendered": {
                      "text": "\n  // Retrieves the execution time\n  clock_t diff = clock() - start;\n  double time_ms = diff * 1000.0f / (double)CLOCKS_PER_SEC;\n\n  // Routine completed. See \"clblast_c.h\" for status codes (0 -> success).\n  printf(\"Completed routine with status %d in %.3lf ms\\n\", status, time_ms);\n",
                      "markdown": "`\n  // Retrieves the execution time\n  clock_t diff = clock() - start;\n  double time_ms = diff * 1000.0f / (double)CLOCKS_PER_SEC;\n\n  // Routine completed. See \"clblast_c.h\" for status codes (0 -> success).\n  printf(\"Completed routine with status %d in %.3lf ms\\n\", status, time_ms);\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/samples/cache.c"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 9,
                  "endLine": 124,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  }\n\n  // Retrieves the execution time\n  clock_t diff = clock() - start;\n  double time_ms = diff * 1000.0f / (double)CLOCKS_PER_SEC;\n\n  // Routine completed. See \"clblast_c.h\" for status codes (0 -> success).\n",
                    "rendered": {
                      "text": "  }\n\n  // Retrieves the execution time\n  clock_t diff = clock() - start;\n  double time_ms = diff * 1000.0f / (double)CLOCKS_PER_SEC;\n\n  // Routine completed. See \"clblast_c.h\" for status codes (0 -> success).\n",
                      "markdown": "`  }\n\n  // Retrieves the execution time\n  clock_t diff = clock() - start;\n  double time_ms = diff * 1000.0f / (double)CLOCKS_PER_SEC;\n\n  // Routine completed. See \"clblast_c.h\" for status codes (0 -> success).\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/faq.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 160,
                  "endLine": 42,
                  "endColumn": 164,
                  "snippet": {
                    "text": ", and pass that to [GEMM](../include/clblast.h#L525). That way you are in control and can make sure it is only allocated once for example.\n\n* Make sure no temporary buffer is required. Thus, make sure the buffer size is already a multiple of the amount of work done per work-group, e.g. 32, 64 or 128 at most depending on the tuned values for your device (you can query them if wanted). Then also make sure they are pre-transposed as needed. The [query-temp-buffer-size function](../include/clblast.h#L691) and its implementation can help you figure out if you are there yet.\n\n\nThe tuners occasionally re",
                    "rendered": {
                      "text": ", and pass that to [GEMM](../include/clblast.h#L525). That way you are in control and can make sure it is only allocated once for example.\n\n* Make sure no temporary buffer is required. Thus, make sure the buffer size is already a multiple of the amount of work done per work-group, e.g. 32, 64 or 128 at most depending on the tuned values for your device (you can query them if wanted). Then also make sure they are pre-transposed as needed. The [query-temp-buffer-size function](../include/clblast.h#L691) and its implementation can help you figure out if you are there yet.\n\n\nThe tuners occasionally re",
                      "markdown": "`, and pass that to [GEMM](../include/clblast.h#L525). That way you are in control and can make sure it is only allocated once for example.\n\n* Make sure no temporary buffer is required. Thus, make sure the buffer size is already a multiple of the amount of work done per work-group, e.g. 32, 64 or 128 at most depending on the tuned values for your device (you can query them if wanted). Then also make sure they are pre-transposed as needed. The [query-temp-buffer-size function](../include/clblast.h#L691) and its implementation can help you figure out if you are there yet.\n\n\nThe tuners occasionally re`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/faq.md"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 164,
                  "endLine": 40,
                  "endColumn": 173,
                  "snippet": {
                    "text": "her. Example [here in one of the tests](../test/routines/level3/xgemm.hpp#L73). This might affect the performance of the GEMM routine.\n\n* [Query the required buffer size](../include/clblast.h#L691), allocate the buffer yourself, and pass that to [GEMM](../include/clblast.h#L525). That way you are in control and can make sure it is only allocated once for example.\n\n* Make sure no temporary buffer is required. Thus, make sure the buffer size is already a multiple of the amount of work done per work-group, e.g. 32, 64 or 128 at most depending on the tuned values for your device (you can query them if want",
                    "rendered": {
                      "text": "her. Example [here in one of the tests](../test/routines/level3/xgemm.hpp#L73). This might affect the performance of the GEMM routine.\n\n* [Query the required buffer size](../include/clblast.h#L691), allocate the buffer yourself, and pass that to [GEMM](../include/clblast.h#L525). That way you are in control and can make sure it is only allocated once for example.\n\n* Make sure no temporary buffer is required. Thus, make sure the buffer size is already a multiple of the amount of work done per work-group, e.g. 32, 64 or 128 at most depending on the tuned values for your device (you can query them if want",
                      "markdown": "`her. Example [here in one of the tests](../test/routines/level3/xgemm.hpp#L73). This might affect the performance of the GEMM routine.\n\n* [Query the required buffer size](../include/clblast.h#L691), allocate the buffer yourself, and pass that to [GEMM](../include/clblast.h#L525). That way you are in control and can make sure it is only allocated once for example.\n\n* Make sure no temporary buffer is required. Thus, make sure the buffer size is already a multiple of the amount of work done per work-group, e.g. 32, 64 or 128 at most depending on the tuned values for your device (you can query them if want`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/faq.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 27,
                  "endLine": 15,
                  "endColumn": 33,
                  "snippet": {
                    "text": "o be multiples of 32), which the other kernels make sure are satisfied. The main kernel is often faster than the generic kernel of the direct approach, but the cost of pre-processing and post-processing kernels can sometimes be high for small sizes or particular devices.\n\nThe GEMM routine tuner will find out from which m/n/k sizes onwards the indirect approach is favorable over the direct approach. Typically the direct approach is faster for small matrices.\n\n\nWhat is the difference between the GEMMK=0 and GEMMK=1 kernels?\n-------------\n\nFor the indirect GEMM kernel (see above) there are basically tw",
                    "rendered": {
                      "text": "o be multiples of 32), which the other kernels make sure are satisfied. The main kernel is often faster than the generic kernel of the direct approach, but the cost of pre-processing and post-processing kernels can sometimes be high for small sizes or particular devices.\n\nThe GEMM routine tuner will find out from which m/n/k sizes onwards the indirect approach is favorable over the direct approach. Typically the direct approach is faster for small matrices.\n\n\nWhat is the difference between the GEMMK=0 and GEMMK=1 kernels?\n-------------\n\nFor the indirect GEMM kernel (see above) there are basically tw",
                      "markdown": "`o be multiples of 32), which the other kernels make sure are satisfied. The main kernel is often faster than the generic kernel of the direct approach, but the cost of pre-processing and post-processing kernels can sometimes be high for small sizes or particular devices.\n\nThe GEMM routine tuner will find out from which m/n/k sizes onwards the indirect approach is favorable over the direct approach. Typically the direct approach is faster for small matrices.\n\n\nWhat is the difference between the GEMMK=0 and GEMMK=1 kernels?\n-------------\n\nFor the indirect GEMM kernel (see above) there are basically tw`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/installation.md"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 8,
                  "endLine": 49,
                  "snippet": {
                    "text": "\nFor OS X / macOS, CLBlast is available through [Homebrew](https://github.com/Homebrew/homebrew-core/blob/master/Formula/clblast.rb). It can be installed as follows:\n\n    brew update\n    brew install clblast\n\nFor Windows, binaries are provided in a .zip file on Github as part of the [CLBlast release page](https://github.com/CNugteren/CLBlast/releases).\n\n",
                    "rendered": {
                      "text": "\nFor OS X / macOS, CLBlast is available through [Homebrew](https://github.com/Homebrew/homebrew-core/blob/master/Formula/clblast.rb). It can be installed as follows:\n\n    brew update\n    brew install clblast\n\nFor Windows, binaries are provided in a .zip file on Github as part of the [CLBlast release page](https://github.com/CNugteren/CLBlast/releases).\n\n",
                      "markdown": "`\nFor OS X / macOS, CLBlast is available through [Homebrew](https://github.com/Homebrew/homebrew-core/blob/master/Formula/clblast.rb). It can be installed as follows:\n\n    brew update\n    brew install clblast\n\nFor Windows, binaries are provided in a .zip file on Github as part of the [CLBlast release page](https://github.com/CNugteren/CLBlast/releases).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/installation.md"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 8,
                  "endLine": 113,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nFinally, a third option is to use the [Collective Knowledge framework](https://github.com/ctuning/ck) in combination with the NDK, e.g. as follows:\n\n    sudo pip install ck\n    ck pull repo:ck-math\n    ck install package:lib-clblast-master-universal --target_os=android21-arm64\n\n",
                    "rendered": {
                      "text": "\nFinally, a third option is to use the [Collective Knowledge framework](https://github.com/ctuning/ck) in combination with the NDK, e.g. as follows:\n\n    sudo pip install ck\n    ck pull repo:ck-math\n    ck install package:lib-clblast-master-universal --target_os=android21-arm64\n\n",
                      "markdown": "`\nFinally, a third option is to use the [Collective Knowledge framework](https://github.com/ctuning/ck) in combination with the NDK, e.g. as follows:\n\n    sudo pip install ck\n    ck pull repo:ck-math\n    ck install package:lib-clblast-master-universal --target_os=android21-arm64\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/installation.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 134,
                  "endLine": 99,
                  "endColumn": 140,
                  "snippet": {
                    "text": "\nFirst of all, you can use Google's recommended route of installing Android Studio with the NDK, and then use the JNI to interface to the CLBlast library. For this, we refer to the official Android Studio documentation and the online tutorials.\n\nAlternatively, you can cross-compile the library and the test/client/tuner executables directly. To do so, first install the NDK, then find your vendor's OpenCL library (e.g. in `/system/vendor/lib`), get OpenCL headers from the Khronos registry, and invoke CMake as follows:\n\n    cmake .. \\\n     -DCMAKE_SYSTEM_NAME=Android \\\n",
                    "rendered": {
                      "text": "\nFirst of all, you can use Google's recommended route of installing Android Studio with the NDK, and then use the JNI to interface to the CLBlast library. For this, we refer to the official Android Studio documentation and the online tutorials.\n\nAlternatively, you can cross-compile the library and the test/client/tuner executables directly. To do so, first install the NDK, then find your vendor's OpenCL library (e.g. in `/system/vendor/lib`), get OpenCL headers from the Khronos registry, and invoke CMake as follows:\n\n    cmake .. \\\n     -DCMAKE_SYSTEM_NAME=Android \\\n",
                      "markdown": "`\nFirst of all, you can use Google's recommended route of installing Android Studio with the NDK, and then use the JNI to interface to the CLBlast library. For this, we refer to the official Android Studio documentation and the online tutorials.\n\nAlternatively, you can cross-compile the library and the test/client/tuner executables directly. To do so, first install the NDK, then find your vendor's OpenCL library (e.g. in `/system/vendor/lib`), get OpenCL headers from the Khronos registry, and invoke CMake as follows:\n\n    cmake .. \\\n     -DCMAKE_SYSTEM_NAME=Android \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/installation.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 8,
                  "endLine": 38,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\nCLBlast is in Ubuntu 21.04 (Hirsute Hippo) and Debian 11 (Bullseye) and later, and can be installed with:\n\n    sudo apt install libclblast-dev\n\nThis may not be the latest version of CLBlast. The latest should be available in [Debian unstable](https://tracker.debian.org/pkg/clblast), or can be built from source as described below.\n\n",
                    "rendered": {
                      "text": "\nCLBlast is in Ubuntu 21.04 (Hirsute Hippo) and Debian 11 (Bullseye) and later, and can be installed with:\n\n    sudo apt install libclblast-dev\n\nThis may not be the latest version of CLBlast. The latest should be available in [Debian unstable](https://tracker.debian.org/pkg/clblast), or can be built from source as described below.\n\n",
                      "markdown": "`\nCLBlast is in Ubuntu 21.04 (Hirsute Hippo) and Debian 11 (Bullseye) and later, and can be installed with:\n\n    sudo apt install libclblast-dev\n\nThis may not be the latest version of CLBlast. The latest should be available in [Debian unstable](https://tracker.debian.org/pkg/clblast), or can be built from source as described below.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/utilities/timing.hpp"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 28,
                  "endLine": 59,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                                const size_t num_runs, Queue& queue,\n                                const std::vector<Buffer<T>>& buffers, F const &routine) {\n  auto timings = std::vector<Timing>();\n  printf(\"|  value |         time |\\n\");\n  printf(\"x--------x--------------x\\n\");\n  for (auto value = from; value < to; value += step) {\n    printf(\"| %6zu |\", value);\n",
                    "rendered": {
                      "text": "                                const size_t num_runs, Queue& queue,\n                                const std::vector<Buffer<T>>& buffers, F const &routine) {\n  auto timings = std::vector<Timing>();\n  printf(\"|  value |         time |\\n\");\n  printf(\"x--------x--------------x\\n\");\n  for (auto value = from; value < to; value += step) {\n    printf(\"| %6zu |\", value);\n",
                      "markdown": "`                                const size_t num_runs, Queue& queue,\n                                const std::vector<Buffer<T>>& buffers, F const &routine) {\n  auto timings = std::vector<Timing>();\n  printf(\"|  value |         time |\\n\");\n  printf(\"x--------x--------------x\\n\");\n  for (auto value = from; value < to; value += step) {\n    printf(\"| %6zu |\", value);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/README.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 7,
                  "endLine": 46,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* Create the environment variable `CLBLAST_ROOT` that holds the path to the CLBLast root directory.\n* Define the `cmake` variables `CMAKE_PREFIX_PATH` or the `CLBLAST_ROOT` variable that point to the CLBlast root directory, as: \n\n        pip install . -C skbuild.cmake.args=\"-DCMAKE_PREFIX_PATH=/root/path/to/clblast\"\n\n* Create the environment variable `CLBlast_DIR` that holds the path to the directory where either of the `CLBlastConfig.cmake` or `clblast-config.cmake` files reside.\n\n",
                    "rendered": {
                      "text": "* Create the environment variable `CLBLAST_ROOT` that holds the path to the CLBLast root directory.\n* Define the `cmake` variables `CMAKE_PREFIX_PATH` or the `CLBLAST_ROOT` variable that point to the CLBlast root directory, as: \n\n        pip install . -C skbuild.cmake.args=\"-DCMAKE_PREFIX_PATH=/root/path/to/clblast\"\n\n* Create the environment variable `CLBlast_DIR` that holds the path to the directory where either of the `CLBlastConfig.cmake` or `clblast-config.cmake` files reside.\n\n",
                      "markdown": "`* Create the environment variable `CLBLAST_ROOT` that holds the path to the CLBLast root directory.\n* Define the `cmake` variables `CMAKE_PREFIX_PATH` or the `CLBLAST_ROOT` variable that point to the CLBlast root directory, as: \n\n        pip install . -C skbuild.cmake.args=\"-DCMAKE_PREFIX_PATH=/root/path/to/clblast\"\n\n* Create the environment variable `CLBlast_DIR` that holds the path to the directory where either of the `CLBlastConfig.cmake` or `clblast-config.cmake` files reside.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/README.md"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 3,
                  "endLine": 34,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nAnd then compile the bindings from this location using pip:\n\n    pip install .\n\n\nDetecting CLBlast\n",
                    "rendered": {
                      "text": "\nAnd then compile the bindings from this location using pip:\n\n    pip install .\n\n\nDetecting CLBlast\n",
                      "markdown": "`\nAnd then compile the bindings from this location using pip:\n\n    pip install .\n\n\nDetecting CLBlast\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "endLine": 30,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nFor developers, install CLBlast and [cython](https://cython.org/) (e.g. in a Python3 virtualenv):\n\n    pip install Cython\n\nAnd then compile the bindings from this location using pip:\n\n",
                    "rendered": {
                      "text": "\nFor developers, install CLBlast and [cython](https://cython.org/) (e.g. in a Python3 virtualenv):\n\n    pip install Cython\n\nAnd then compile the bindings from this location using pip:\n\n",
                      "markdown": "`\nFor developers, install CLBlast and [cython](https://cython.org/) (e.g. in a Python3 virtualenv):\n\n    pip install Cython\n\nAnd then compile the bindings from this location using pip:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/README.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 24,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nAfter installing OpenCL and CLBlast, simply use pip to install PyCLBlast, e.g.:\n\n    pip install --user pyclblast\n\nTo start using the library, browse the [CLBlast](https://github.com/CNugteren/CLBlast) documentation or check out the PyCLBlast samples provided in the `samples` subfolder.\n\n",
                    "rendered": {
                      "text": "\nAfter installing OpenCL and CLBlast, simply use pip to install PyCLBlast, e.g.:\n\n    pip install --user pyclblast\n\nTo start using the library, browse the [CLBlast](https://github.com/CNugteren/CLBlast) documentation or check out the PyCLBlast samples provided in the `samples` subfolder.\n\n",
                      "markdown": "`\nAfter installing OpenCL and CLBlast, simply use pip to install PyCLBlast, e.g.:\n\n    pip install --user pyclblast\n\nTo start using the library, browse the [CLBlast](https://github.com/CNugteren/CLBlast) documentation or check out the PyCLBlast samples provided in the `samples` subfolder.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 47,
                  "endLine": 22,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Getting started\n-------------\n\nAfter installing OpenCL and CLBlast, simply use pip to install PyCLBlast, e.g.:\n\n    pip install --user pyclblast\n\n",
                    "rendered": {
                      "text": "Getting started\n-------------\n\nAfter installing OpenCL and CLBlast, simply use pip to install PyCLBlast, e.g.:\n\n    pip install --user pyclblast\n\n",
                      "markdown": "`Getting started\n-------------\n\nAfter installing OpenCL and CLBlast, simply use pip to install PyCLBlast, e.g.:\n\n    pip install --user pyclblast\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level3/invert_diagonal_blocks_part1.opencl"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 3,
                  "endLine": 38,
                  "endColumn": 7,
                  "snippet": {
                    "text": "//  \n//  At this level, inner block is current_size=16, with one 4 x 4 work-group per inner block. Each\n//  submatrix Aij and Bij is current_size x current_size. The submatrix dimension is multiplied by 2\n//  at each level, so the next level is current_size*2 = 32. A 'page' is the next bigger block,\n//  here current_size*2=32,\n//                 [ B11   0  ]\n//  which contains [ B21  B22 ].\n",
                    "rendered": {
                      "text": "//  \n//  At this level, inner block is current_size=16, with one 4 x 4 work-group per inner block. Each\n//  submatrix Aij and Bij is current_size x current_size. The submatrix dimension is multiplied by 2\n//  at each level, so the next level is current_size*2 = 32. A 'page' is the next bigger block,\n//  here current_size*2=32,\n//                 [ B11   0  ]\n//  which contains [ B21  B22 ].\n",
                      "markdown": "`//  \n//  At this level, inner block is current_size=16, with one 4 x 4 work-group per inner block. Each\n//  submatrix Aij and Bij is current_size x current_size. The submatrix dimension is multiplied by 2\n//  at each level, so the next level is current_size*2 = 32. A 'page' is the next bigger block,\n//  here current_size*2=32,\n//                 [ B11   0  ]\n//  which contains [ B21  B22 ].\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level3/invert_diagonal_blocks_part1.opencl"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 3,
                  "endLine": 36,
                  "endColumn": 7,
                  "snippet": {
                    "text": "//  part 1:  B21 =  A21 * B11,\n//  part 2:  B21 = -B22 * B21.\n//  \n//  At this level, inner block is current_size=16, with one 4 x 4 work-group per inner block. Each\n//  submatrix Aij and Bij is current_size x current_size. The submatrix dimension is multiplied by 2\n//  at each level, so the next level is current_size*2 = 32. A 'page' is the next bigger block,\n//  here current_size*2=32,\n",
                    "rendered": {
                      "text": "//  part 1:  B21 =  A21 * B11,\n//  part 2:  B21 = -B22 * B21.\n//  \n//  At this level, inner block is current_size=16, with one 4 x 4 work-group per inner block. Each\n//  submatrix Aij and Bij is current_size x current_size. The submatrix dimension is multiplied by 2\n//  at each level, so the next level is current_size*2 = 32. A 'page' is the next bigger block,\n//  here current_size*2=32,\n",
                      "markdown": "`//  part 1:  B21 =  A21 * B11,\n//  part 2:  B21 = -B22 * B21.\n//  \n//  At this level, inner block is current_size=16, with one 4 x 4 work-group per inner block. Each\n//  submatrix Aij and Bij is current_size x current_size. The submatrix dimension is multiplied by 2\n//  at each level, so the next level is current_size*2 = 32. A 'page' is the next bigger block,\n//  here current_size*2=32,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/api_common.cpp"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 53,
                  "endLine": 156,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n    // Retrieves the current database values to verify whether the new ones are complete\n    auto in_cache = false;\n    auto current_database = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device, precision, kernel_name}, &in_cache);\n    if (!in_cache) {\n      log_debug(\"Searching database for kernel '\" + kernel_name + \"'\");\n      current_database = Database(device_cpp, kernel_name, precision, {});\n",
                    "rendered": {
                      "text": "\n    // Retrieves the current database values to verify whether the new ones are complete\n    auto in_cache = false;\n    auto current_database = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device, precision, kernel_name}, &in_cache);\n    if (!in_cache) {\n      log_debug(\"Searching database for kernel '\" + kernel_name + \"'\");\n      current_database = Database(device_cpp, kernel_name, precision, {});\n",
                      "markdown": "`\n    // Retrieves the current database values to verify whether the new ones are complete\n    auto in_cache = false;\n    auto current_database = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device, precision, kernel_name}, &in_cache);\n    if (!in_cache) {\n      log_debug(\"Searching database for kernel '\" + kernel_name + \"'\");\n      current_database = Database(device_cpp, kernel_name, precision, {});\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/api_common.cpp"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 45,
                  "endLine": 128,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    // Retrieves the database values\n    auto in_cache = false;\n    auto database = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device, precision, kernel_name}, &in_cache);\n    if (!in_cache) {\n      log_debug(\"Searching database for kernel '\" + kernel_name + \"'\");\n      database = Database(device_cpp, kernel_name, precision, {});\n",
                    "rendered": {
                      "text": "\n    // Retrieves the database values\n    auto in_cache = false;\n    auto database = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device, precision, kernel_name}, &in_cache);\n    if (!in_cache) {\n      log_debug(\"Searching database for kernel '\" + kernel_name + \"'\");\n      database = Database(device_cpp, kernel_name, precision, {});\n",
                      "markdown": "`\n    // Retrieves the database values\n    auto in_cache = false;\n    auto database = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device, precision, kernel_name}, &in_cache);\n    if (!in_cache) {\n      log_debug(\"Searching database for kernel '\" + kernel_name + \"'\");\n      database = Database(device_cpp, kernel_name, precision, {});\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 83,
                  "endLine": 54,
                  "endColumn": 87,
                  "snippet": {
                    "text": "    result = \"\"\n    if routine.implemented and routine.plain_name() and routine.level in [\"1\", \"2a\", \"2b\", \"3\", \"x\"]:\n        if routine.level == \"x\" and routine.batched == 0:\n            return result # level-X routines that are non-batched are not supported at the moment\n        indent = \"    \"\n\n        result += SEPARATOR + NL\n",
                    "rendered": {
                      "text": "    result = \"\"\n    if routine.implemented and routine.plain_name() and routine.level in [\"1\", \"2a\", \"2b\", \"3\", \"x\"]:\n        if routine.level == \"x\" and routine.batched == 0:\n            return result # level-X routines that are non-batched are not supported at the moment\n        indent = \"    \"\n\n        result += SEPARATOR + NL\n",
                      "markdown": "`    result = \"\"\n    if routine.implemented and routine.plain_name() and routine.level in [\"1\", \"2a\", \"2b\", \"3\", \"x\"]:\n        if routine.level == \"x\" and routine.batched == 0:\n            return result # level-X routines that are non-batched are not supported at the moment\n        indent = \"    \"\n\n        result += SEPARATOR + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 17,
                  "endLine": 195,
                  "snippet": {
                    "text": "        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n",
                    "rendered": {
                      "text": "        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n",
                      "markdown": "`        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 77,
                  "endLine": 194,
                  "snippet": {
                    "text": "\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n",
                    "rendered": {
                      "text": "\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n",
                      "markdown": "`\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 150,
                  "endLine": 193,
                  "snippet": {
                    "text": "            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n",
                    "rendered": {
                      "text": "            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n",
                      "markdown": "`            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 56,
                  "endLine": 192,
                  "snippet": {
                    "text": "                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n",
                    "rendered": {
                      "text": "                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n",
                      "markdown": "`                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n        result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 21,
                  "endLine": 190,
                  "snippet": {
                    "text": "        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n",
                    "rendered": {
                      "text": "        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n",
                      "markdown": "`        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n        result += indent + \"return cl.Event.from_int_ptr(<ptrdiff_t>event)\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 67,
                  "endLine": 189,
                  "snippet": {
                    "text": "        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n",
                    "rendered": {
                      "text": "        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n",
                      "markdown": "`        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n                result += indent + \"PyMem_Free(\" + array + \"s_c)\" + NL\n            result += NL\n\n        result += indent + \"if err != CLBlastSuccess:\" + NL\n        result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: %s\\\" % get_status_message(err))\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "endLine": 184,
                  "snippet": {
                    "text": "\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n",
                    "rendered": {
                      "text": "\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n",
                      "markdown": "`\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n            for array in [b + \"_offset\" for b in buffers] + routine.scalars:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 108,
                  "endLine": 183,
                  "snippet": {
                    "text": "                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n",
                    "rendered": {
                      "text": "                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n",
                      "markdown": "`                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n        if routine.batched == 1:  # batched but not strided-batched\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 36,
                  "endLine": 182,
                  "snippet": {
                    "text": "                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n",
                    "rendered": {
                      "text": "                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n",
                      "markdown": "`                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n        result += NL\n\n        # Cleaning up\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 89,
                  "endLine": 179,
                  "snippet": {
                    "text": "                    argument_names.append(\"batch_count\")\n                result += indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                result += indent + indent + \"err = CLBlast\" + flavour.name + routine.plain_name()\n                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n",
                    "rendered": {
                      "text": "                    argument_names.append(\"batch_count\")\n                result += indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                result += indent + indent + \"err = CLBlast\" + flavour.name + routine.plain_name()\n                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n",
                      "markdown": "`                    argument_names.append(\"batch_count\")\n                result += indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                result += indent + indent + \"err = CLBlast\" + flavour.name + routine.plain_name()\n                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n        result += indent + \"else:\" + NL\n        result += indent + indent + \"raise ValueError(\\\"PyCLBlast: Unrecognized data-type '%s'\\\" % dtype)\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 94,
                  "endLine": 177,
                  "snippet": {
                    "text": "                                      for x in routine.arguments()]\n                if routine.batched > 0:\n                    argument_names.append(\"batch_count\")\n                result += indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                result += indent + indent + \"err = CLBlast\" + flavour.name + routine.plain_name()\n                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n",
                    "rendered": {
                      "text": "                                      for x in routine.arguments()]\n                if routine.batched > 0:\n                    argument_names.append(\"batch_count\")\n                result += indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                result += indent + indent + \"err = CLBlast\" + flavour.name + routine.plain_name()\n                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n",
                      "markdown": "`                                      for x in routine.arguments()]\n                if routine.batched > 0:\n                    argument_names.append(\"batch_count\")\n                result += indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                result += indent + indent + \"err = CLBlast\" + flavour.name + routine.plain_name()\n                result += \"(\" + \", \".join(argument_names) + \", &command_queue, &event)\" + NL\n                if_prefix = \"el\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 57,
                  "endLine": 156,
                  "snippet": {
                    "text": "                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                np_dtype = to_np_dtype(flavour)\n",
                    "rendered": {
                      "text": "                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                np_dtype = to_np_dtype(flavour)\n",
                      "markdown": "`                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                np_dtype = to_np_dtype(flavour)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 22,
                  "endLine": 155,
                  "snippet": {
                    "text": "            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n",
                    "rendered": {
                      "text": "            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n",
                      "markdown": "`            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 114,
                  "endLine": 153,
                  "snippet": {
                    "text": "            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n",
                    "rendered": {
                      "text": "            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n",
                      "markdown": "`            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n        result += indent + \"cdef CLBlastStatusCode err\" + NL\n        if_prefix = \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 114,
                  "endLine": 151,
                  "snippet": {
                    "text": "            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n",
                    "rendered": {
                      "text": "            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n",
                      "markdown": "`            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n\n        result += \"\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 97,
                  "endLine": 149,
                  "snippet": {
                    "text": "            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n",
                    "rendered": {
                      "text": "            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n",
                      "markdown": "`            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n            if option == \"diagonal\":\n                result += indent + \"diagonal = CLBlastDiagonalUnit if unit_diagonal else CLBlastDiagonalNonUnit\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 110,
                  "endLine": 147,
                  "snippet": {
                    "text": "            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n",
                    "rendered": {
                      "text": "            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n",
                      "markdown": "`            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n            if option == \"triangle\":\n                result += indent + \"triangle = CLBlastTriangleLower if lower_triangle else CLBlastTriangleUpper\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 108,
                  "endLine": 145,
                  "snippet": {
                    "text": "            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n",
                    "rendered": {
                      "text": "            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n",
                      "markdown": "`            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n            if option == \"side\":\n                result += indent + \"side = CLBlastSideRight if right_side else CLBlastSideLeft\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 108,
                  "endLine": 143,
                  "snippet": {
                    "text": "\n        for option in routine.options:\n            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n",
                    "rendered": {
                      "text": "\n        for option in routine.options:\n            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n",
                      "markdown": "`\n        for option in routine.options:\n            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n            if option == \"b_transpose\":\n                result += indent + \"b_transpose = CLBlastTransposeYes if b_transp else CLBlastTransposeNo\" + NL\n            if option == \"ab_transpose\":\n                result += indent + \"ab_transpose = CLBlastTransposeYes if ab_transp else CLBlastTransposeNo\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 57,
                  "endLine": 139,
                  "snippet": {
                    "text": "        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n        for option in routine.options:\n            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n",
                    "rendered": {
                      "text": "        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n        for option in routine.options:\n            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n",
                      "markdown": "`        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n        for option in routine.options:\n            if option == \"a_transpose\":\n                result += indent + \"a_transpose = CLBlastTransposeYes if a_transp else CLBlastTransposeNo\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 111,
                  "endLine": 138,
                  "snippet": {
                    "text": "            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n        for option in routine.options:\n            if option == \"a_transpose\":\n",
                    "rendered": {
                      "text": "            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n        for option in routine.options:\n            if option == \"a_transpose\":\n",
                      "markdown": "`            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n        for option in routine.options:\n            if option == \"a_transpose\":\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 17,
                  "endLine": 136,
                  "snippet": {
                    "text": "        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n",
                    "rendered": {
                      "text": "        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n",
                      "markdown": "`        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 116,
                  "endLine": 135,
                  "snippet": {
                    "text": "\n        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n",
                    "rendered": {
                      "text": "\n        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n",
                      "markdown": "`\n        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n        result += NL\n\n        result += indent + \"cdef cl_command_queue command_queue = <cl_command_queue><ptrdiff_t>queue.int_ptr\" + NL\n        result += indent + \"cdef cl_event event = NULL\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 21,
                  "endLine": 131,
                  "snippet": {
                    "text": "                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n            result += NL\n\n        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n",
                    "rendered": {
                      "text": "                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n            result += NL\n\n        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n",
                      "markdown": "`                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n            result += NL\n\n        # Buffer transformation\n        for buf in buffers:\n            result += indent + \"cdef cl_mem \" + buf + \"_buffer = <cl_mem><ptrdiff_t>\" + buf + \".base_data.int_ptr\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 136,
                  "endLine": 128,
                  "snippet": {
                    "text": "                        np_dtype = to_np_dtype(flavour)\n                        result += indent + indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                        scalar_converted = scalar_cython_conversion(scalar + \"s[i]\", flavour)\n                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n            result += NL\n\n",
                    "rendered": {
                      "text": "                        np_dtype = to_np_dtype(flavour)\n                        result += indent + indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                        scalar_converted = scalar_cython_conversion(scalar + \"s[i]\", flavour)\n                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n            result += NL\n\n",
                      "markdown": "`                        np_dtype = to_np_dtype(flavour)\n                        result += indent + indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                        scalar_converted = scalar_cython_conversion(scalar + \"s[i]\", flavour)\n                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n            result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 111,
                  "endLine": 126,
                  "snippet": {
                    "text": "                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                        np_dtype = to_np_dtype(flavour)\n                        result += indent + indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                        scalar_converted = scalar_cython_conversion(scalar + \"s[i]\", flavour)\n                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n",
                    "rendered": {
                      "text": "                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                        np_dtype = to_np_dtype(flavour)\n                        result += indent + indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                        scalar_converted = scalar_cython_conversion(scalar + \"s[i]\", flavour)\n                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n",
                      "markdown": "`                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                        np_dtype = to_np_dtype(flavour)\n                        result += indent + indent + if_prefix + \"if dtype == np.dtype(\\\"\" + np_dtype + \"\\\"):\" + NL\n                        scalar_converted = scalar_cython_conversion(scalar + \"s[i]\", flavour)\n                        result += indent + indent + indent + \"(<\" + cl_type(flavour) + \"*>\" + scalar + \"s_c)[i] = \" + scalar_converted + NL\n                        if_prefix = \"el\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 67,
                  "endLine": 121,
                  "snippet": {
                    "text": "                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                        np_dtype = to_np_dtype(flavour)\n",
                    "rendered": {
                      "text": "                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                        np_dtype = to_np_dtype(flavour)\n",
                      "markdown": "`                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                        np_dtype = to_np_dtype(flavour)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 132,
                  "endLine": 120,
                  "snippet": {
                    "text": "                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n",
                    "rendered": {
                      "text": "                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n",
                      "markdown": "`                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for flavour in routine.flavours:\n                    if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 97,
                  "endLine": 118,
                  "snippet": {
                    "text": "               result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for",
                    "rendered": {
                      "text": "               result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for",
                      "markdown": "`               result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                if_prefix = \"\"\n                for`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 67,
                  "endLine": 117,
                  "snippet": {
                    "text": "    result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                resu",
                    "rendered": {
                      "text": "    result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                resu",
                      "markdown": "`    result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n                resu`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 129,
                  "endLine": 116,
                  "snippet": {
                    "text": "\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n",
                    "rendered": {
                      "text": "\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n",
                      "markdown": "`\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n                result += indent + indent + \"\" + buf + \"_offsets_c[i] = \" + buf + \"_offsets[i]\" + NL\n            for scalar in routine.scalars:\n                result += indent + \"cdef void *\" + scalar + \"s_c = <void *> PyMem_Malloc(batch_count * sizeof(dtype_size[dtype]))\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 21,
                  "endLine": 112,
                  "snippet": {
                    "text": "NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n             ",
                    "rendered": {
                      "text": "NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n             ",
                      "markdown": "`NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(size_t))\" + NL\n                result += indent + \"for i in range(batch_count):\" + NL\n             `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 70,
                  "endLine": 111,
                  "snippet": {
                    "text": "            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n",
                    "rendered": {
                      "text": "            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n",
                      "markdown": "`            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 198,
                  "endLine": 110,
                  "snippet": {
                    "text": "ars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(",
                    "rendered": {
                      "text": "ars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(",
                      "markdown": "`ars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n            # Batched list to pointer conversions\n            for buf in buffers:\n                result += indent + \"cdef size_t *\" + buf + \"_offsets_c = <size_t *> PyMem_Malloc(batch_count * sizeof(`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 93,
                  "endLine": 109,
                  "snippet": {
                    "text": "        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n",
                    "rendered": {
                      "text": "        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n",
                      "markdown": "`        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n            result += indent + \"if \" + \" != \".join([\"len(\" + l + \")\" for l in lists]) + \":\" + NL\n            result += indent + indent + \"raise RuntimeError(\\\"PyCLBlast: 'CLBlastX\" + routine.plain_name() + \"' failed: length of batch-sized arguments \" + \", \".join(lists) + \" should be equal\\\")\" + NL\n            result += indent + \"batch_count = len(\" + lists[0] + \")\" + NL\n            result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 104,
                  "snippet": {
                    "text": "            else:\n                result += indent + \"check_matrix(\"\n            result += buf + \", \\\"\" + buf + \"\\\")\" + NL\n        result += NL\n\n        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n",
                    "rendered": {
                      "text": "            else:\n                result += indent + \"check_matrix(\"\n            result += buf + \", \\\"\" + buf + \"\\\")\" + NL\n        result += NL\n\n        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n",
                      "markdown": "`            else:\n                result += indent + \"check_matrix(\"\n            result += buf + \", \\\"\" + buf + \"\\\")\" + NL\n        result += NL\n\n        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n            lists = [b + \"_offsets\" for b in buffers] + [s + \"s\" for s in routine.scalars]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 50,
                  "endLine": 103,
                  "snippet": {
                    "text": "                result += indent + \"check_vector(\"\n            else:\n                result += indent + \"check_matrix(\"\n            result += buf + \", \\\"\" + buf + \"\\\")\" + NL\n        result += NL\n\n        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n",
                    "rendered": {
                      "text": "                result += indent + \"check_vector(\"\n            else:\n                result += indent + \"check_matrix(\"\n            result += buf + \", \\\"\" + buf + \"\\\")\" + NL\n        result += NL\n\n        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n",
                      "markdown": "`                result += indent + \"check_vector(\"\n            else:\n                result += indent + \"check_matrix(\"\n            result += buf + \", \\\"\" + buf + \"\\\")\" + NL\n        result += NL\n\n        # Batched checks\n        if routine.batched == 1:  # batched but not strided-batched\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 80,
                  "endLine": 97,
                  "snippet": {
                    "text": "        result += \"[\" + \", \".join(['\"%s\"' % d for d in np_dtypes]) + \"])\" + NL\n        if int_buff:\n            result += indent + \"check_dtype([\" + \", \".join(int_buff) + \"], \"\n            result += \"[\" + \", \".join(['\"uint16\", \"uint32\", \"uint64\"']) + \"])\" + NL\n        for buf in buffers:\n            if buf in routine.buffers_vector():\n                result += indent + \"check_vector(\"\n            else:\n",
                    "rendered": {
                      "text": "        result += \"[\" + \", \".join(['\"%s\"' % d for d in np_dtypes]) + \"])\" + NL\n        if int_buff:\n            result += indent + \"check_dtype([\" + \", \".join(int_buff) + \"], \"\n            result += \"[\" + \", \".join(['\"uint16\", \"uint32\", \"uint64\"']) + \"])\" + NL\n        for buf in buffers:\n            if buf in routine.buffers_vector():\n                result += indent + \"check_vector(\"\n            else:\n",
                      "markdown": "`        result += \"[\" + \", \".join(['\"%s\"' % d for d in np_dtypes]) + \"])\" + NL\n        if int_buff:\n            result += indent + \"check_dtype([\" + \", \".join(int_buff) + \"], \"\n            result += \"[\" + \", \".join(['\"uint16\", \"uint32\", \"uint64\"']) + \"])\" + NL\n        for buf in buffers:\n            if buf in routine.buffers_vector():\n                result += indent + \"check_vector(\"\n            else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 75,
                  "endLine": 94,
                  "snippet": {
                    "text": "            else:\n                other_buff.append(buf)\n        result += indent + \"dtype = check_dtype([\" + \", \".join(other_buff) + \"], \"\n        result += \"[\" + \", \".join(['\"%s\"' % d for d in np_dtypes]) + \"])\" + NL\n        if int_buff:\n            result += indent + \"check_dtype([\" + \", \".join(int_buff) + \"], \"\n            result += \"[\" + \", \".join(['\"uint16\", \"uint32\", \"uint64\"']) + \"])\" + NL\n        for buf in buffers:\n",
                    "rendered": {
                      "text": "            else:\n                other_buff.append(buf)\n        result += indent + \"dtype = check_dtype([\" + \", \".join(other_buff) + \"], \"\n        result += \"[\" + \", \".join(['\"%s\"' % d for d in np_dtypes]) + \"])\" + NL\n        if int_buff:\n            result += indent + \"check_dtype([\" + \", \".join(int_buff) + \"], \"\n            result += \"[\" + \", \".join(['\"uint16\", \"uint32\", \"uint64\"']) + \"])\" + NL\n        for buf in buffers:\n",
                      "markdown": "`            else:\n                other_buff.append(buf)\n        result += indent + \"dtype = check_dtype([\" + \", \".join(other_buff) + \"], \"\n        result += \"[\" + \", \".join(['\"%s\"' % d for d in np_dtypes]) + \"])\" + NL\n        if int_buff:\n            result += indent + \"check_dtype([\" + \", \".join(int_buff) + \"], \"\n            result += \"[\" + \", \".join(['\"uint16\", \"uint32\", \"uint64\"']) + \"])\" + NL\n        for buf in buffers:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 83,
                  "snippet": {
                    "text": "        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n        int_buff = []\n        other_buff = []\n",
                    "rendered": {
                      "text": "        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n        int_buff = []\n        other_buff = []\n",
                      "markdown": "`        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n        int_buff = []\n        other_buff = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 37,
                  "endLine": 82,
                  "snippet": {
                    "text": "        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n        int_buff = []\n",
                    "rendered": {
                      "text": "        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n        int_buff = []\n",
                      "markdown": "`        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n        int_buff = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 84,
                  "endLine": 81,
                  "snippet": {
                    "text": "\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n",
                    "rendered": {
                      "text": "\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n",
                      "markdown": "`\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n        # Data types and checks\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 37,
                  "endLine": 80,
                  "snippet": {
                    "text": "        result += \", \".join(routine.arguments_python()) + \"):\" + NL\n\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n",
                    "rendered": {
                      "text": "        result += \", \".join(routine.arguments_python()) + \"):\" + NL\n\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n",
                      "markdown": "`        result += \", \".join(routine.arguments_python()) + \"):\" + NL\n\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 64,
                  "endLine": 77,
                  "snippet": {
                    "text": "        # Function definition\n        buffers = routine.inputs[:] + routine.outputs[:]\n        result += \"def \" + routine.plain_name() + \"(queue, \"\n        result += \", \".join(routine.arguments_python()) + \"):\" + NL\n\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n",
                    "rendered": {
                      "text": "        # Function definition\n        buffers = routine.inputs[:] + routine.outputs[:]\n        result += \"def \" + routine.plain_name() + \"(queue, \"\n        result += \", \".join(routine.arguments_python()) + \"):\" + NL\n\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n",
                      "markdown": "`        # Function definition\n        buffers = routine.inputs[:] + routine.outputs[:]\n        result += \"def \" + routine.plain_name() + \"(queue, \"\n        result += \", \".join(routine.arguments_python()) + \"):\" + NL\n\n        # Documentation\n        result += indent + \"\\\"\\\"\\\"\" + NL\n        result += indent + \"x\" + routine.upper_name() + \": \" + routine.description + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 22,
                  "endLine": 72,
                  "snippet": {
                    "text": "                result += \", \".join(routine.arguments_def_c(flavour)) + \",\"\n                result += \"cl_command_queue* queue, cl_event* event)\" + NL\n                np_dtypes.append(to_np_dtype(flavour))\n        result += \"\" + NL\n\n        # Function definition\n        buffers = routine.inputs[:] + routine.outputs[:]\n        result += \"def \" + routine.plain_name() + \"(queue, \"\n",
                    "rendered": {
                      "text": "                result += \", \".join(routine.arguments_def_c(flavour)) + \",\"\n                result += \"cl_command_queue* queue, cl_event* event)\" + NL\n                np_dtypes.append(to_np_dtype(flavour))\n        result += \"\" + NL\n\n        # Function definition\n        buffers = routine.inputs[:] + routine.outputs[:]\n        result += \"def \" + routine.plain_name() + \"(queue, \"\n",
                      "markdown": "`                result += \", \".join(routine.arguments_def_c(flavour)) + \",\"\n                result += \"cl_command_queue* queue, cl_event* event)\" + NL\n                np_dtypes.append(to_np_dtype(flavour))\n        result += \"\" + NL\n\n        # Function definition\n        buffers = routine.inputs[:] + routine.outputs[:]\n        result += \"def \" + routine.plain_name() + \"(queue, \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 71,
                  "endLine": 70,
                  "snippet": {
                    "text": "            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                result += indent + \"CLBlastStatusCode CLBlast\" + flavour.name + routine.plain_name() + \"(\"\n                result += \", \".join(routine.arguments_def_c(flavour)) + \",\"\n                result += \"cl_command_queue* queue, cl_event* event)\" + NL\n                np_dtypes.append(to_np_dtype(flavour))\n        result += \"\" + NL\n\n        # Function definition\n",
                    "rendered": {
                      "text": "            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                result += indent + \"CLBlastStatusCode CLBlast\" + flavour.name + routine.plain_name() + \"(\"\n                result += \", \".join(routine.arguments_def_c(flavour)) + \",\"\n                result += \"cl_command_queue* queue, cl_event* event)\" + NL\n                np_dtypes.append(to_np_dtype(flavour))\n        result += \"\" + NL\n\n        # Function definition\n",
                      "markdown": "`            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                result += indent + \"CLBlastStatusCode CLBlast\" + flavour.name + routine.plain_name() + \"(\"\n                result += \", \".join(routine.arguments_def_c(flavour)) + \",\"\n                result += \"cl_command_queue* queue, cl_event* event)\" + NL\n                np_dtypes.append(to_np_dtype(flavour))\n        result += \"\" + NL\n\n        # Function definition\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 55,
                  "endLine": 64,
                  "snippet": {
                    "text": "        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n        np_dtypes = []\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                result += indent + \"CLBlastStatusCode CLBlast\" + flavour.name + routine.plain_name() + \"(\"\n",
                    "rendered": {
                      "text": "        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n        np_dtypes = []\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                result += indent + \"CLBlastStatusCode CLBlast\" + flavour.name + routine.plain_name() + \"(\"\n",
                      "markdown": "`        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n        np_dtypes = []\n        for flavour in routine.flavours:\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\", \"H\"]:\n                result += indent + \"CLBlastStatusCode CLBlast\" + flavour.name + routine.plain_name() + \"(\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 61,
                  "snippet": {
                    "text": "        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n        np_dtypes = []\n",
                    "rendered": {
                      "text": "        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n        np_dtypes = []\n",
                      "markdown": "`        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n        np_dtypes = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 29,
                  "endLine": 60,
                  "snippet": {
                    "text": "\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n",
                    "rendered": {
                      "text": "\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n",
                      "markdown": "`\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n        result += \"cdef extern from \\\"clblast_c.h\\\":\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 77,
                  "endLine": 59,
                  "snippet": {
                    "text": "        indent = \"    \"\n\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n",
                    "rendered": {
                      "text": "        indent = \"    \"\n\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n",
                      "markdown": "`        indent = \"    \"\n\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n        # Reference C definition\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 29,
                  "endLine": 58,
                  "snippet": {
                    "text": "            return result # level-X routines that are non-batched are not supported at the moment\n        indent = \"    \"\n\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n",
                    "rendered": {
                      "text": "            return result # level-X routines that are non-batched are not supported at the moment\n        indent = \"    \"\n\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n",
                      "markdown": "`            return result # level-X routines that are non-batched are not supported at the moment\n        indent = \"    \"\n\n        result += SEPARATOR + NL\n        result += \"# \" + routine.description + \": \" + routine.short_names() + NL\n        result += SEPARATOR + NL\n        result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/pyclblast.py"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 11,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\nimport os\n\n\nNL = '\\n'\nSEPARATOR = \"####################################################################################################\"\n\n\n",
                    "rendered": {
                      "text": "\nimport os\n\n\nNL = '\\n'\nSEPARATOR = \"####################################################################################################\"\n\n\n",
                      "markdown": "`\nimport os\n\n\nNL = '\\n'\nSEPARATOR = \"####################################################################################################\"\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3664,
                  "startColumn": 43,
                  "endLine": 3664,
                  "endColumn": 51,
                  "snippet": {
                    "text": "StatusCode PUBLIC_API TuneXgemv(cl_command_queue* queue, const size_t m, const size_t n,\n                                const double fraction, std::unordered_map<std::string,size_t> &parameters);\n\n// Tunes the \"Xger\" kernel, used for matrix update level-2 routines such as XGER, XHER, and XSYR2\ntemplate <typename T>\nStatusCode PUBLIC_API TuneXger(cl_command_queue* queue, const size_t m, const size_t n,\n                               const double fraction, std::unordered_map<std::string,size_t> &parameters);\n",
                    "rendered": {
                      "text": "StatusCode PUBLIC_API TuneXgemv(cl_command_queue* queue, const size_t m, const size_t n,\n                                const double fraction, std::unordered_map<std::string,size_t> &parameters);\n\n// Tunes the \"Xger\" kernel, used for matrix update level-2 routines such as XGER, XHER, and XSYR2\ntemplate <typename T>\nStatusCode PUBLIC_API TuneXger(cl_command_queue* queue, const size_t m, const size_t n,\n                               const double fraction, std::unordered_map<std::string,size_t> &parameters);\n",
                      "markdown": "`StatusCode PUBLIC_API TuneXgemv(cl_command_queue* queue, const size_t m, const size_t n,\n                                const double fraction, std::unordered_map<std::string,size_t> &parameters);\n\n// Tunes the \"Xger\" kernel, used for matrix update level-2 routines such as XGER, XHER, and XSYR2\ntemplate <typename T>\nStatusCode PUBLIC_API TuneXger(cl_command_queue* queue, const size_t m, const size_t n,\n                               const double fraction, std::unordered_map<std::string,size_t> &parameters);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3477,
                  "startColumn": 29,
                  "endLine": 3477,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3476,
                  "startColumn": 198,
                  "endLine": 3476,
                  "endColumn": 202,
                  "snippet": {
                    "text": "Requirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3476,
                  "startColumn": 159,
                  "endLine": 3476,
                  "endColumn": 163,
                  "snippet": {
                    "text": "Requirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3475,
                  "startColumn": 198,
                  "endLine": 3475,
                  "endColumn": 202,
                  "snippet": {
                    "text": "\nRequirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3475,
                  "startColumn": 159,
                  "endLine": 3475,
                  "endColumn": 163,
                  "snippet": {
                    "text": "\nRequirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for GEMMSTRIDEDBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3375,
                  "startColumn": 29,
                  "endLine": 3375,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3374,
                  "startColumn": 198,
                  "endLine": 3374,
                  "endColumn": 202,
                  "snippet": {
                    "text": "Requirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3374,
                  "startColumn": 159,
                  "endLine": 3374,
                  "endColumn": 163,
                  "snippet": {
                    "text": "Requirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3373,
                  "startColumn": 198,
                  "endLine": 3373,
                  "endColumn": 202,
                  "snippet": {
                    "text": "\nRequirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3373,
                  "startColumn": 159,
                  "endLine": 3373,
                  "endColumn": 163,
                  "snippet": {
                    "text": "\nRequirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for GEMMBATCHED:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3011,
                  "startColumn": 29,
                  "endLine": 3011,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Requirements for OMATCOPY:\n\n* The value of `a_ld` must be at least `m`.\n* The value of `b_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "Requirements for OMATCOPY:\n\n* The value of `a_ld` must be at least `m`.\n* The value of `b_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`Requirements for OMATCOPY:\n\n* The value of `a_ld` must be at least `m`.\n* The value of `b_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3010,
                  "startColumn": 29,
                  "endLine": 3010,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for OMATCOPY:\n\n* The value of `a_ld` must be at least `m`.\n* The value of `b_ld` must be at least `n`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for OMATCOPY:\n\n* The value of `a_ld` must be at least `m`.\n* The value of `b_ld` must be at least `n`.\n\n\n",
                      "markdown": "`\nRequirements for OMATCOPY:\n\n* The value of `a_ld` must be at least `m`.\n* The value of `b_ld` must be at least `n`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2798,
                  "startColumn": 29,
                  "endLine": 2798,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Requirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "Requirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`Requirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2797,
                  "startColumn": 86,
                  "endLine": 2797,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\nRequirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n",
                      "markdown": "`\nRequirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2797,
                  "startColumn": 47,
                  "endLine": 2797,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nRequirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n",
                      "markdown": "`\nRequirements for TRMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2722,
                  "startColumn": 29,
                  "endLine": 2722,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2721,
                  "startColumn": 194,
                  "endLine": 2721,
                  "endColumn": 198,
                  "snippet": {
                    "text": "Requirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                      "markdown": "`Requirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2721,
                  "startColumn": 155,
                  "endLine": 2721,
                  "endColumn": 159,
                  "snippet": {
                    "text": "Requirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                      "markdown": "`Requirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2720,
                  "startColumn": 194,
                  "endLine": 2720,
                  "endColumn": 198,
                  "snippet": {
                    "text": "\nRequirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                      "markdown": "`\nRequirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2720,
                  "startColumn": 155,
                  "endLine": 2720,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\nRequirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                      "markdown": "`\nRequirements for HER2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2659,
                  "startColumn": 15,
                  "endLine": 2659,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\n\nxHER2K: Rank-2K update of a hermitian matrix\n-------------\n\nSame operation as xSYR2K, but _C_ is an Hermitian matrix instead.\n",
                    "rendered": {
                      "text": "\n\n\nxHER2K: Rank-2K update of a hermitian matrix\n-------------\n\nSame operation as xSYR2K, but _C_ is an Hermitian matrix instead.\n",
                      "markdown": "`\n\n\nxHER2K: Rank-2K update of a hermitian matrix\n-------------\n\nSame operation as xSYR2K, but _C_ is an Hermitian matrix instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2655,
                  "startColumn": 29,
                  "endLine": 2655,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2654,
                  "startColumn": 194,
                  "endLine": 2654,
                  "endColumn": 198,
                  "snippet": {
                    "text": "Requirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                      "markdown": "`Requirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2654,
                  "startColumn": 155,
                  "endLine": 2654,
                  "endColumn": 159,
                  "snippet": {
                    "text": "Requirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n",
                      "markdown": "`Requirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2653,
                  "startColumn": 194,
                  "endLine": 2653,
                  "endColumn": 198,
                  "snippet": {
                    "text": "\nRequirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                      "markdown": "`\nRequirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2653,
                  "startColumn": 155,
                  "endLine": 2653,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\nRequirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n",
                      "markdown": "`\nRequirements for SYR2K:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\n* The value of `c_ld` must be at least `n`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2568,
                  "startColumn": 15,
                  "endLine": 2568,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\n\nxSYR2K: Rank-2K update of a symmetric matrix\n-------------\n\nPerforms the matrix product _C = alpha * A * B^T + alpha * B * A^T + beta * C_ or _C = alpha * A^T * B + alpha * B^T * A + beta * C_, in which _A_ and _B_ are general matrices and _A^T_ and _B^T_ are their transposed versions, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\n",
                    "rendered": {
                      "text": "\n\n\nxSYR2K: Rank-2K update of a symmetric matrix\n-------------\n\nPerforms the matrix product _C = alpha * A * B^T + alpha * B * A^T + beta * C_ or _C = alpha * A^T * B + alpha * B^T * A + beta * C_, in which _A_ and _B_ are general matrices and _A^T_ and _B^T_ are their transposed versions, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\n",
                      "markdown": "`\n\n\nxSYR2K: Rank-2K update of a symmetric matrix\n-------------\n\nPerforms the matrix product _C = alpha * A * B^T + alpha * B * A^T + beta * C_ or _C = alpha * A^T * B + alpha * B^T * A + beta * C_, in which _A_ and _B_ are general matrices and _A^T_ and _B^T_ are their transposed versions, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2564,
                  "startColumn": 29,
                  "endLine": 2564,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Requirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "Requirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`Requirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2563,
                  "startColumn": 194,
                  "endLine": 2563,
                  "endColumn": 198,
                  "snippet": {
                    "text": "\nRequirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`\nRequirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2563,
                  "startColumn": 155,
                  "endLine": 2563,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\nRequirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`\nRequirements for HERK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2508,
                  "startColumn": 13,
                  "endLine": 2508,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\n\nxHERK: Rank-K update of a hermitian matrix\n-------------\n\nSame operation as xSYRK, but _C_ is an Hermitian matrix instead.\n",
                    "rendered": {
                      "text": "\n\n\nxHERK: Rank-K update of a hermitian matrix\n-------------\n\nSame operation as xSYRK, but _C_ is an Hermitian matrix instead.\n",
                      "markdown": "`\n\n\nxHERK: Rank-K update of a hermitian matrix\n-------------\n\nSame operation as xSYRK, but _C_ is an Hermitian matrix instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2504,
                  "startColumn": 29,
                  "endLine": 2504,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Requirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "Requirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`Requirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2503,
                  "startColumn": 194,
                  "endLine": 2503,
                  "endColumn": 198,
                  "snippet": {
                    "text": "\nRequirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`\nRequirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2503,
                  "startColumn": 155,
                  "endLine": 2503,
                  "endColumn": 159,
                  "snippet": {
                    "text": "\nRequirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`\nRequirements for SYRK:\n\n* When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2427,
                  "startColumn": 13,
                  "endLine": 2427,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\n\nxSYRK: Rank-K update of a symmetric matrix\n-------------\n\nPerforms the matrix product _C = alpha * A * A^T + beta * C_ or _C = alpha * A^T * A + beta * C_, in which _A_ is a general matrix and _A^T_ is its transpose, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\n",
                    "rendered": {
                      "text": "\n\n\nxSYRK: Rank-K update of a symmetric matrix\n-------------\n\nPerforms the matrix product _C = alpha * A * A^T + beta * C_ or _C = alpha * A^T * A + beta * C_, in which _A_ is a general matrix and _A^T_ is its transpose, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\n",
                      "markdown": "`\n\n\nxSYRK: Rank-K update of a symmetric matrix\n-------------\n\nPerforms the matrix product _C = alpha * A * A^T + beta * C_ or _C = alpha * A^T * A + beta * C_, in which _A_ is a general matrix and _A^T_ is its transpose, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2423,
                  "startColumn": 29,
                  "endLine": 2423,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2422,
                  "startColumn": 29,
                  "endLine": 2422,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Requirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2421,
                  "startColumn": 86,
                  "endLine": 2421,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\nRequirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2421,
                  "startColumn": 47,
                  "endLine": 2421,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nRequirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for HEMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2356,
                  "startColumn": 29,
                  "endLine": 2356,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2355,
                  "startColumn": 29,
                  "endLine": 2355,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Requirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2354,
                  "startColumn": 86,
                  "endLine": 2354,
                  "endColumn": 90,
                  "snippet": {
                    "text": "\nRequirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2354,
                  "startColumn": 47,
                  "endLine": 2354,
                  "endColumn": 51,
                  "snippet": {
                    "text": "\nRequirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for SYMM:\n\n* When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\n* The value of `b_ld` must be at least `m`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2265,
                  "startColumn": 29,
                  "endLine": 2265,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2264,
                  "startColumn": 198,
                  "endLine": 2264,
                  "endColumn": 202,
                  "snippet": {
                    "text": "Requirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2264,
                  "startColumn": 159,
                  "endLine": 2264,
                  "endColumn": 163,
                  "snippet": {
                    "text": "Requirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                    "rendered": {
                      "text": "Requirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n",
                      "markdown": "`Requirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2263,
                  "startColumn": 198,
                  "endLine": 2263,
                  "endColumn": 202,
                  "snippet": {
                    "text": "\nRequirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2263,
                  "startColumn": 159,
                  "endLine": 2263,
                  "endColumn": 163,
                  "snippet": {
                    "text": "\nRequirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n",
                      "markdown": "`\nRequirements for GEMM:\n\n* When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\n* When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\n* The value of `c_ld` must be at least `m`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2115,
                  "startColumn": 37,
                  "endLine": 2116,
                  "snippet": {
                    "text": "\n\n\nxSPR2: Symmetric packed rank-2 matrix update\n-------------\n\nSame operation as xSPR2, but matrix _A_ is a symmetric packed matrix instead and represented as _AP_.\n\n",
                    "rendered": {
                      "text": "\n\n\nxSPR2: Symmetric packed rank-2 matrix update\n-------------\n\nSame operation as xSPR2, but matrix _A_ is a symmetric packed matrix instead and represented as _AP_.\n\n",
                      "markdown": "`\n\n\nxSPR2: Symmetric packed rank-2 matrix update\n-------------\n\nSame operation as xSPR2, but matrix _A_ is a symmetric packed matrix instead and represented as _AP_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2111,
                  "startColumn": 29,
                  "endLine": 2111,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for SYR2:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYR2:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for SYR2:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 2049,
                  "startColumn": 30,
                  "endLine": 2050,
                  "snippet": {
                    "text": "\n\n\nxSYR2: Symmetric rank-2 matrix update\n-------------\n\nSame operation as xHER2, but matrix _A_ is a symmetric matrix instead.\n\n",
                    "rendered": {
                      "text": "\n\n\nxSYR2: Symmetric rank-2 matrix update\n-------------\n\nSame operation as xHER2, but matrix _A_ is a symmetric matrix instead.\n\n",
                      "markdown": "`\n\n\nxSYR2: Symmetric rank-2 matrix update\n-------------\n\nSame operation as xHER2, but matrix _A_ is a symmetric matrix instead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1995,
                  "startColumn": 36,
                  "endLine": 1996,
                  "snippet": {
                    "text": "\n\n\nxSPR: Symmetric packed rank-1 matrix update\n-------------\n\nSame operation as xSPR, but matrix _A_ is a symmetric packed matrix instead and represented as _AP_.\n\n",
                    "rendered": {
                      "text": "\n\n\nxSPR: Symmetric packed rank-1 matrix update\n-------------\n\nSame operation as xSPR, but matrix _A_ is a symmetric packed matrix instead and represented as _AP_.\n\n",
                      "markdown": "`\n\n\nxSPR: Symmetric packed rank-1 matrix update\n-------------\n\nSame operation as xSPR, but matrix _A_ is a symmetric packed matrix instead and represented as _AP_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1991,
                  "startColumn": 29,
                  "endLine": 1991,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for SYR:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYR:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for SYR:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1936,
                  "startColumn": 29,
                  "endLine": 1937,
                  "snippet": {
                    "text": "\n\n\nxSYR: Symmetric rank-1 matrix update\n-------------\n\nSame operation as xHER, but matrix A is a symmetric matrix instead.\n\n",
                    "rendered": {
                      "text": "\n\n\nxSYR: Symmetric rank-1 matrix update\n-------------\n\nSame operation as xHER, but matrix A is a symmetric matrix instead.\n\n",
                      "markdown": "`\n\n\nxSYR: Symmetric rank-1 matrix update\n-------------\n\nSame operation as xHER, but matrix A is a symmetric matrix instead.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1882,
                  "startColumn": 37,
                  "endLine": 1883,
                  "snippet": {
                    "text": "\n\n\nxHPR2: Hermitian packed rank-2 matrix update\n-------------\n\nSame operation as xHER2, but matrix _A_ is an Hermitian packed matrix instead and represented as _AP_.\n\n",
                    "rendered": {
                      "text": "\n\n\nxHPR2: Hermitian packed rank-2 matrix update\n-------------\n\nSame operation as xHER2, but matrix _A_ is an Hermitian packed matrix instead and represented as _AP_.\n\n",
                      "markdown": "`\n\n\nxHPR2: Hermitian packed rank-2 matrix update\n-------------\n\nSame operation as xHER2, but matrix _A_ is an Hermitian packed matrix instead and represented as _AP_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1878,
                  "startColumn": 29,
                  "endLine": 1878,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for HER2:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for HER2:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for HER2:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1823,
                  "startColumn": 30,
                  "endLine": 1824,
                  "snippet": {
                    "text": "\n\n\nxHER2: Hermitian rank-2 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * y^T + conj(alpha) * y * x^T + A_, in which _x_ is an input vector and _x^T_ its transpose, _y_ is an input vector and _y^T_ its transpose, _A_ is the triangular Hermetian matrix to be updated, _alpha_ is a scalar value and _conj(alpha)_ its complex conjugate.\n\n",
                    "rendered": {
                      "text": "\n\n\nxHER2: Hermitian rank-2 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * y^T + conj(alpha) * y * x^T + A_, in which _x_ is an input vector and _x^T_ its transpose, _y_ is an input vector and _y^T_ its transpose, _A_ is the triangular Hermetian matrix to be updated, _alpha_ is a scalar value and _conj(alpha)_ its complex conjugate.\n\n",
                      "markdown": "`\n\n\nxHER2: Hermitian rank-2 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * y^T + conj(alpha) * y * x^T + A_, in which _x_ is an input vector and _x^T_ its transpose, _y_ is an input vector and _y^T_ its transpose, _A_ is the triangular Hermetian matrix to be updated, _alpha_ is a scalar value and _conj(alpha)_ its complex conjugate.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1775,
                  "startColumn": 36,
                  "endLine": 1776,
                  "snippet": {
                    "text": "\n\n\nxHPR: Hermitian packed rank-1 matrix update\n-------------\n\nSame operation as xHER, but matrix _A_ is an Hermitian packed matrix instead and represented as _AP_.\n\n",
                    "rendered": {
                      "text": "\n\n\nxHPR: Hermitian packed rank-1 matrix update\n-------------\n\nSame operation as xHER, but matrix _A_ is an Hermitian packed matrix instead and represented as _AP_.\n\n",
                      "markdown": "`\n\n\nxHPR: Hermitian packed rank-1 matrix update\n-------------\n\nSame operation as xHER, but matrix _A_ is an Hermitian packed matrix instead and represented as _AP_.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1771,
                  "startColumn": 29,
                  "endLine": 1771,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for HER:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for HER:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for HER:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1722,
                  "startColumn": 29,
                  "endLine": 1723,
                  "snippet": {
                    "text": "\n\n\nxHER: Hermitian rank-1 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * x^T + A_, in which x is an input vector, x^T is the transpose of this vector, _A_ is the triangular Hermetian matrix to be updated, and alpha is a scalar value.\n\n",
                    "rendered": {
                      "text": "\n\n\nxHER: Hermitian rank-1 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * x^T + A_, in which x is an input vector, x^T is the transpose of this vector, _A_ is the triangular Hermetian matrix to be updated, and alpha is a scalar value.\n\n",
                      "markdown": "`\n\n\nxHER: Hermitian rank-1 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * x^T + A_, in which x is an input vector, x^T is the transpose of this vector, _A_ is the triangular Hermetian matrix to be updated, and alpha is a scalar value.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1718,
                  "startColumn": 29,
                  "endLine": 1718,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for GERC:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for GERC:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\nRequirements for GERC:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1666,
                  "startColumn": 32,
                  "endLine": 1666,
                  "endColumn": 40,
                  "snippet": {
                    "text": "xGERC: General rank-1 complex conjugated matrix update\n-------------\n\nSame operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\n\nC++ API:\n```\n",
                    "rendered": {
                      "text": "xGERC: General rank-1 complex conjugated matrix update\n-------------\n\nSame operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\n\nC++ API:\n```\n",
                      "markdown": "`xGERC: General rank-1 complex conjugated matrix update\n-------------\n\nSame operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\n\nC++ API:\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1663,
                  "startColumn": 47,
                  "endLine": 1664,
                  "snippet": {
                    "text": "\n\n\nxGERC: General rank-1 complex conjugated matrix update\n-------------\n\nSame operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\n\n",
                    "rendered": {
                      "text": "\n\n\nxGERC: General rank-1 complex conjugated matrix update\n-------------\n\nSame operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\n\n",
                      "markdown": "`\n\n\nxGERC: General rank-1 complex conjugated matrix update\n-------------\n\nSame operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 29,
                  "endLine": 1659,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for GERU:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for GERU:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\nRequirements for GERU:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1604,
                  "startColumn": 36,
                  "endLine": 1605,
                  "snippet": {
                    "text": "\n\n\nxGERU: General rank-1 complex matrix update\n-------------\n\nSame operation as xGER, but with complex data-types.\n\n",
                    "rendered": {
                      "text": "\n\n\nxGERU: General rank-1 complex matrix update\n-------------\n\nSame operation as xGER, but with complex data-types.\n\n",
                      "markdown": "`\n\n\nxGERU: General rank-1 complex matrix update\n-------------\n\nSame operation as xGER, but with complex data-types.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1600,
                  "startColumn": 29,
                  "endLine": 1600,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for GER:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for GER:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\nRequirements for GER:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 27,
                  "endLine": 1539,
                  "snippet": {
                    "text": "\n\n\nxGER: General rank-1 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * y^T + A_, in which _x_ is an input vector, _y^T_ is the transpose of the input vector _y_, _A_ is the matrix to be updated, and _alpha_ is a scalar value.\n\n",
                    "rendered": {
                      "text": "\n\n\nxGER: General rank-1 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * y^T + A_, in which _x_ is an input vector, _y^T_ is the transpose of the input vector _y_, _A_ is the matrix to be updated, and _alpha_ is a scalar value.\n\n",
                      "markdown": "`\n\n\nxGER: General rank-1 matrix update\n-------------\n\nPerforms the operation _A = alpha * x * y^T + A_, in which _x_ is an input vector, _y^T_ is the transpose of the input vector _y_, _A_ is the matrix to be updated, and _alpha_ is a scalar value.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1416,
                  "startColumn": 29,
                  "endLine": 1416,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for TBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for TBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n",
                      "markdown": "`\nRequirements for TBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1349,
                  "startColumn": 29,
                  "endLine": 1349,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for TRMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for TRMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for TRMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1217,
                  "startColumn": 29,
                  "endLine": 1217,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for SBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for SBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n",
                      "markdown": "`\nRequirements for SBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1145,
                  "startColumn": 29,
                  "endLine": 1145,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for SYMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for SYMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for SYMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 29,
                  "endLine": 1016,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for HBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for HBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n",
                      "markdown": "`\nRequirements for HBMV:\n\n* The value of `a_ld` must be at least `k + 1`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 29,
                  "endLine": 952,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for HEMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for HEMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n",
                      "markdown": "`\nRequirements for HEMV:\n\n* The value of `a_ld` must be at least `n`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 29,
                  "endLine": 889,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for GBMV:\n\n* The value of `a_ld` must be at least `kl + ku + 1`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for GBMV:\n\n* The value of `a_ld` must be at least `kl + ku + 1`.\n\n\n\n",
                      "markdown": "`\nRequirements for GBMV:\n\n* The value of `a_ld` must be at least `kl + ku + 1`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 29,
                  "endLine": 799,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nRequirements for GEMV:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                    "rendered": {
                      "text": "\nRequirements for GEMV:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n",
                      "markdown": "`\nRequirements for GEMV:\n\n* The value of `a_ld` must be at least `m`.\n\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3617,
                  "startColumn": 354,
                  "endLine": 3617,
                  "endColumn": 360,
                  "snippet": {
                    "text": "ic device-precision-kernel combination. The next time the target routine is called it will be re-compiled and use the new parameters. All further times (until `OverrideParameters` is called again) it will load the kernel from the cache and thus continue to use the new parameters. Note that the first time after calling `OverrideParameters` a performance drop can be observable due to the re-compilation of the kernel. See [tuning.md](tuning.md) for more details on which kernel names and parameters are valid.\n\nC++ API:\n```\nStatusCode OverrideParameters(const cl_device_id device, const std::string &kerne",
                    "rendered": {
                      "text": "ic device-precision-kernel combination. The next time the target routine is called it will be re-compiled and use the new parameters. All further times (until `OverrideParameters` is called again) it will load the kernel from the cache and thus continue to use the new parameters. Note that the first time after calling `OverrideParameters` a performance drop can be observable due to the re-compilation of the kernel. See [tuning.md](tuning.md) for more details on which kernel names and parameters are valid.\n\nC++ API:\n```\nStatusCode OverrideParameters(const cl_device_id device, const std::string &kerne",
                      "markdown": "`ic device-precision-kernel combination. The next time the target routine is called it will be re-compiled and use the new parameters. All further times (until `OverrideParameters` is called again) it will load the kernel from the cache and thus continue to use the new parameters. Note that the first time after calling `OverrideParameters` a performance drop can be observable due to the re-compilation of the kernel. See [tuning.md](tuning.md) for more details on which kernel names and parameters are valid.\n\nC++ API:\n```\nStatusCode OverrideParameters(const cl_device_id device, const std::string &kerne`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3617,
                  "startColumn": 102,
                  "endLine": 3617,
                  "endColumn": 108,
                  "snippet": {
                    "text": "dered map of strings to integers. This will be filled with the current tuning parameters for a specific kernel.\n\n\n\nOverrideParameters: Override tuning parameters (auxiliary function)\n-------------\n\nThis function overrides tuning parameters for a specific device-precision-kernel combination. The next time the target routine is called it will be re-compiled and use the new parameters. All further times (until `OverrideParameters` is called again) it will load the kernel from the cache and thus continue to use the new parameters. Note that the first time after calling `OverrideParameters` a performance",
                    "rendered": {
                      "text": "dered map of strings to integers. This will be filled with the current tuning parameters for a specific kernel.\n\n\n\nOverrideParameters: Override tuning parameters (auxiliary function)\n-------------\n\nThis function overrides tuning parameters for a specific device-precision-kernel combination. The next time the target routine is called it will be re-compiled and use the new parameters. All further times (until `OverrideParameters` is called again) it will load the kernel from the cache and thus continue to use the new parameters. Note that the first time after calling `OverrideParameters` a performance",
                      "markdown": "`dered map of strings to integers. This will be filled with the current tuning parameters for a specific kernel.\n\n\n\nOverrideParameters: Override tuning parameters (auxiliary function)\n-------------\n\nThis function overrides tuning parameters for a specific device-precision-kernel combination. The next time the target routine is called it will be re-compiled and use the new parameters. All further times (until `OverrideParameters` is called again) it will load the kernel from the cache and thus continue to use the new parameters. Note that the first time after calling `OverrideParameters` a performance`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/api.md"
                },
                "region": {
                  "startLine": 3085,
                  "startColumn": 119,
                  "endLine": 3085,
                  "endColumn": 124,
                  "snippet": {
                    "text": "xCOL2IM: Col2im function (non-BLAS function)\n-------------\n\nPerforms the col2im algorithm, in which _col_ is the input matrix and _im_ is the output matrix. Accumulates results on top of the existing values in the _im_ buffer.\n\nC++ API:\n```\n",
                    "rendered": {
                      "text": "xCOL2IM: Col2im function (non-BLAS function)\n-------------\n\nPerforms the col2im algorithm, in which _col_ is the input matrix and _im_ is the output matrix. Accumulates results on top of the existing values in the _im_ buffer.\n\nC++ API:\n```\n",
                      "markdown": "`xCOL2IM: Col2im function (non-BLAS function)\n-------------\n\nPerforms the col2im algorithm, in which _col_ is the input matrix and _im_ is the output matrix. Accumulates results on top of the existing values in the _im_ buffer.\n\nC++ API:\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/tuning.md"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 328,
                  "endLine": 303,
                  "endColumn": 332,
                  "snippet": {
                    "text": "supply your tuning parameters programmatically through the CLBlast API. This is especially useful if you tune for specific non-standard arguments (e.g. a rectangular or a very small matrix). To do so, you can call the `OverrideParameters` function which will set new parameters for a specific kernel. At the first next call of the target routine, CLBlast will compile a new binary and use it together with the new parameters from then on. Until `OverrideParameters` is called again of course. This is the API:\n\n    StatusCode PUBLIC_API OverrideParameters(const cl_device_id device, const std::string &ke",
                    "rendered": {
                      "text": "supply your tuning parameters programmatically through the CLBlast API. This is especially useful if you tune for specific non-standard arguments (e.g. a rectangular or a very small matrix). To do so, you can call the `OverrideParameters` function which will set new parameters for a specific kernel. At the first next call of the target routine, CLBlast will compile a new binary and use it together with the new parameters from then on. Until `OverrideParameters` is called again of course. This is the API:\n\n    StatusCode PUBLIC_API OverrideParameters(const cl_device_id device, const std::string &ke",
                      "markdown": "`supply your tuning parameters programmatically through the CLBlast API. This is especially useful if you tune for specific non-standard arguments (e.g. a rectangular or a very small matrix). To do so, you can call the `OverrideParameters` function which will set new parameters for a specific kernel. At the first next call of the target routine, CLBlast will compile a new binary and use it together with the new parameters from then on. Until `OverrideParameters` is called again of course. This is the API:\n\n    StatusCode PUBLIC_API OverrideParameters(const cl_device_id device, const std::string &ke`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/tuning.md"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 41,
                  "endLine": 300,
                  "endColumn": 45,
                  "snippet": {
                    "text": "ogress. Running the regular tuner binaries should give an idea of the amount of configurations to explore for a particular device, thus giving an indication of a good value for the `fraction` argument (see the [API documentation](api.md) for more details).\n\n\nInspecting and changing tuning parameters at run-time\n-------------\n\nAlternatively, you can also supply your tuning parameters programmatically through the CLBlast API. This is especially useful if you tune for specific non-standard arguments (e.g. a rectangular or a very small matrix). To do so, you can call the `OverrideParameters` function ",
                    "rendered": {
                      "text": "ogress. Running the regular tuner binaries should give an idea of the amount of configurations to explore for a particular device, thus giving an indication of a good value for the `fraction` argument (see the [API documentation](api.md) for more details).\n\n\nInspecting and changing tuning parameters at run-time\n-------------\n\nAlternatively, you can also supply your tuning parameters programmatically through the CLBlast API. This is especially useful if you tune for specific non-standard arguments (e.g. a rectangular or a very small matrix). To do so, you can call the `OverrideParameters` function ",
                      "markdown": "`ogress. Running the regular tuner binaries should give an idea of the amount of configurations to explore for a particular device, thus giving an indication of a good value for the `fraction` argument (see the [API documentation](api.md) for more details).\n\n\nInspecting and changing tuning parameters at run-time\n-------------\n\nAlternatively, you can also supply your tuning parameters programmatically through the CLBlast API. This is especially useful if you tune for specific non-standard arguments (e.g. a rectangular or a very small matrix). To do so, you can call the `OverrideParameters` function `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/tuning.md"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 2,
                  "endLine": 345,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Which kernels are used for which routines?\n-------------\n\nTo find out which tuners to run for which routines, you can use the table below. The kernel names correspond to the tuner binaries, the tuner API, and to the arguments for `OverrideParameters` and `RetrieveParameters`.\n\n| Routines                                                                 | Kernel(s) / Tuner(s)            |\n| -------------------------------------------------------------------------|---------------------------------|\n",
                    "rendered": {
                      "text": "Which kernels are used for which routines?\n-------------\n\nTo find out which tuners to run for which routines, you can use the table below. The kernel names correspond to the tuner binaries, the tuner API, and to the arguments for `OverrideParameters` and `RetrieveParameters`.\n\n| Routines                                                                 | Kernel(s) / Tuner(s)            |\n| -------------------------------------------------------------------------|---------------------------------|\n",
                      "markdown": "`Which kernels are used for which routines?\n-------------\n\nTo find out which tuners to run for which routines, you can use the table below. The kernel names correspond to the tuner binaries, the tuner API, and to the arguments for `OverrideParameters` and `RetrieveParameters`.\n\n| Routines                                                                 | Kernel(s) / Tuner(s)            |\n| -------------------------------------------------------------------------|---------------------------------|\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/tuning.md"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 236,
                  "endLine": 279,
                  "endColumn": 244,
                  "snippet": {
                    "text": "e_xtrsv -precision 16\n\n\nUsing the tuning results\n-------------\n\nThe tuners output a JSON-file with the results. The best results need to be added to `src/database/kernels/xxxxx.hpp` in the appropriate section. However, this can be done automatically based on the JSON-data using a Python (2.7 or 3.x) script in `scripts/database/database.py`. If you want the found parameters to be included in future releases of CLBlast, please attach the JSON files [to the corresponding issue](https://github.com/CNugteren/CLBlast/issues/1) on GitHub or [email the main author](http://www.cedricnugteren.nl).\n\nIn summary, ",
                    "rendered": {
                      "text": "e_xtrsv -precision 16\n\n\nUsing the tuning results\n-------------\n\nThe tuners output a JSON-file with the results. The best results need to be added to `src/database/kernels/xxxxx.hpp` in the appropriate section. However, this can be done automatically based on the JSON-data using a Python (2.7 or 3.x) script in `scripts/database/database.py`. If you want the found parameters to be included in future releases of CLBlast, please attach the JSON files [to the corresponding issue](https://github.com/CNugteren/CLBlast/issues/1) on GitHub or [email the main author](http://www.cedricnugteren.nl).\n\nIn summary, ",
                      "markdown": "`e_xtrsv -precision 16\n\n\nUsing the tuning results\n-------------\n\nThe tuners output a JSON-file with the results. The best results need to be added to `src/database/kernels/xxxxx.hpp` in the appropriate section. However, this can be done automatically based on the JSON-data using a Python (2.7 or 3.x) script in `scripts/database/database.py`. If you want the found parameters to be included in future releases of CLBlast, please attach the JSON files [to the corresponding issue](https://github.com/CNugteren/CLBlast/issues/1) on GitHub or [email the main author](http://www.cedricnugteren.nl).\n\nIn summary, `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/bindings.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 362,
                  "endLine": 10,
                  "endColumn": 366,
                  "snippet": {
                    "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                    "rendered": {
                      "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                      "markdown": "`Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/bindings.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 312,
                  "endLine": 10,
                  "endColumn": 316,
                  "snippet": {
                    "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                    "rendered": {
                      "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                      "markdown": "`Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/bindings.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 93,
                  "endLine": 10,
                  "endColumn": 97,
                  "snippet": {
                    "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                    "rendered": {
                      "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                      "markdown": "`Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/bindings.md"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 76,
                  "endLine": 26,
                  "endColumn": 81,
                  "snippet": {
                    "text": "Java: JOCLBlast (3rd party)\n-------------\n\nJOCLBlast is a 3rd party project providing bindings for Java. It is built on top of JOCL. Details can be found on the [JOCLBlast Github project page](https://github.com/gpu/JOCLBlast).\n\n\nNim: nim-CLBlast (3rd party)\n",
                    "rendered": {
                      "text": "Java: JOCLBlast (3rd party)\n-------------\n\nJOCLBlast is a 3rd party project providing bindings for Java. It is built on top of JOCL. Details can be found on the [JOCLBlast Github project page](https://github.com/gpu/JOCLBlast).\n\n\nNim: nim-CLBlast (3rd party)\n",
                      "markdown": "`Java: JOCLBlast (3rd party)\n-------------\n\nJOCLBlast is a 3rd party project providing bindings for Java. It is built on top of JOCL. Details can be found on the [JOCLBlast Github project page](https://github.com/gpu/JOCLBlast).\n\n\nNim: nim-CLBlast (3rd party)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/bindings.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 385,
                  "endLine": 10,
                  "endColumn": 391,
                  "snippet": {
                    "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                    "rendered": {
                      "text": "Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n",
                      "markdown": "`Plain C: Netlib BLAS API\n-------------\n\nCLBlast provides a Netlib CBLAS C API. This is however not recommended for performance, since at every call it will copy all buffers to and from the OpenCL device. Especially for level 1 and level 2 BLAS functions performance will be impacted severely. However, it can be useful if you don't want to touch OpenCL at all. Providing the `-DNETLIB=ON` flag to CMake at CLBlast compilation time will compile the Netlib API. Then, it can be used by including the corresponding header:\n\n    #include <clblast_netlib_c.h>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/test/correctness/testblas.cpp"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 54,
                  "endLine": 213,
                  "endColumn": 58,
                  "snippet": {
                    "text": "          if (l2error >= kErrorMarginL2) { errors++; }\n          if (verbose_) {\n            if (get_id2_(args) == 1) { std::cout << std::endl << \"   Error at index \" << id1 << \": \"; }\n            else { std::cout << std::endl << \"   Error at \" << id1 << \",\" << id2 << \": \"; }\n            std::cout << \" \" << ToString(result1[index]) << \" (reference) versus \";\n            std::cout << \" \" << ToString(result2[index]) << \" (CLBlast)\";\n            if (l2error < kErrorMarginL2) {\n",
                    "rendered": {
                      "text": "          if (l2error >= kErrorMarginL2) { errors++; }\n          if (verbose_) {\n            if (get_id2_(args) == 1) { std::cout << std::endl << \"   Error at index \" << id1 << \": \"; }\n            else { std::cout << std::endl << \"   Error at \" << id1 << \",\" << id2 << \": \"; }\n            std::cout << \" \" << ToString(result1[index]) << \" (reference) versus \";\n            std::cout << \" \" << ToString(result2[index]) << \" (CLBlast)\";\n            if (l2error < kErrorMarginL2) {\n",
                      "markdown": "`          if (l2error >= kErrorMarginL2) { errors++; }\n          if (verbose_) {\n            if (get_id2_(args) == 1) { std::cout << std::endl << \"   Error at index \" << id1 << \": \"; }\n            else { std::cout << std::endl << \"   Error at \" << id1 << \",\" << id2 << \": \"; }\n            std::cout << \" \" << ToString(result1[index]) << \" (reference) versus \";\n            std::cout << \" \" << ToString(result2[index]) << \" (CLBlast)\";\n            if (l2error < kErrorMarginL2) {\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/test/correctness/testblas.cpp"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 74,
                  "endLine": 212,
                  "endColumn": 78,
                  "snippet": {
                    "text": "        if (!TestSimilarity(result1[index], result2[index])) {\n          if (l2error >= kErrorMarginL2) { errors++; }\n          if (verbose_) {\n            if (get_id2_(args) == 1) { std::cout << std::endl << \"   Error at index \" << id1 << \": \"; }\n            else { std::cout << std::endl << \"   Error at \" << id1 << \",\" << id2 << \": \"; }\n            std::cout << \" \" << ToString(result1[index]) << \" (reference) versus \";\n            std::cout << \" \" << ToString(result2[index]) << \" (CLBlast)\";\n",
                    "rendered": {
                      "text": "        if (!TestSimilarity(result1[index], result2[index])) {\n          if (l2error >= kErrorMarginL2) { errors++; }\n          if (verbose_) {\n            if (get_id2_(args) == 1) { std::cout << std::endl << \"   Error at index \" << id1 << \": \"; }\n            else { std::cout << std::endl << \"   Error at \" << id1 << \",\" << id2 << \": \"; }\n            std::cout << \" \" << ToString(result1[index]) << \" (reference) versus \";\n            std::cout << \" \" << ToString(result2[index]) << \" (CLBlast)\";\n",
                      "markdown": "`        if (!TestSimilarity(result1[index], result2[index])) {\n          if (l2error >= kErrorMarginL2) { errors++; }\n          if (verbose_) {\n            if (get_id2_(args) == 1) { std::cout << std::endl << \"   Error at index \" << id1 << \": \"; }\n            else { std::cout << std::endl << \"   Error at \" << id1 << \",\" << id2 << \": \"; }\n            std::cout << \" \" << ToString(result1[index]) << \" (reference) versus \";\n            std::cout << \" \" << ToString(result2[index]) << \" (CLBlast)\";\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/routine.hpp"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 49,
                  "endLine": 45,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n      // Queries the cache to see whether or not the kernel parameter database is already there\n      bool has_db;\n      db(kernel_name) = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device(), precision, kernel_name},\n                                                       &has_db);\n      if (has_db) { continue; }\n\n",
                    "rendered": {
                      "text": "\n      // Queries the cache to see whether or not the kernel parameter database is already there\n      bool has_db;\n      db(kernel_name) = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device(), precision, kernel_name},\n                                                       &has_db);\n      if (has_db) { continue; }\n\n",
                      "markdown": "`\n      // Queries the cache to see whether or not the kernel parameter database is already there\n      bool has_db;\n      db(kernel_name) = DatabaseCache::Instance().Get(DatabaseKeyRef{platform_id, device(), precision, kernel_name},\n                                                       &has_db);\n      if (has_db) { continue; }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/routine.hpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 14,
                  "endLine": 32,
                  "endColumn": 18,
                  "snippet": {
                    "text": "namespace clblast {\n// =================================================================================================\n\n// See comment at top of file for a description of the class\nclass Routine {\n public:\n\n",
                    "rendered": {
                      "text": "namespace clblast {\n// =================================================================================================\n\n// See comment at top of file for a description of the class\nclass Routine {\n public:\n\n",
                      "markdown": "`namespace clblast {\n// =================================================================================================\n\n// See comment at top of file for a description of the class\nclass Routine {\n public:\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/routine.hpp"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 22,
                  "snippet": {
                    "text": "namespace clblast {\n// =================================================================================================\n\n// See comment at top of file for a description of the class\nclass Routine {\n public:\n\n",
                    "rendered": {
                      "text": "namespace clblast {\n// =================================================================================================\n\n// See comment at top of file for a description of the class\nclass Routine {\n public:\n\n",
                      "markdown": "`namespace clblast {\n// =================================================================================================\n\n// See comment at top of file for a description of the class\nclass Routine {\n public:\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/clblast.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 48,
                  "endLine": 175,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                f.write(get_cpp_header_namespace())\n                f.write(get_cpp_precision(family_name, precision))\n\n                # In case there is nothing found at all (e.g. 16-bit): continue as if this was a\n                #  precision of 32 but with the defaults only\n                if len(precision_database) == 0:\n                    print(\"[database] No results found for %s:%s, retrieving defaults from %s:32\" %\n",
                    "rendered": {
                      "text": "                f.write(get_cpp_header_namespace())\n                f.write(get_cpp_precision(family_name, precision))\n\n                # In case there is nothing found at all (e.g. 16-bit): continue as if this was a\n                #  precision of 32 but with the defaults only\n                if len(precision_database) == 0:\n                    print(\"[database] No results found for %s:%s, retrieving defaults from %s:32\" %\n",
                      "markdown": "`                f.write(get_cpp_header_namespace())\n                f.write(get_cpp_precision(family_name, precision))\n\n                # In case there is nothing found at all (e.g. 16-bit): continue as if this was a\n                #  precision of 32 but with the defaults only\n                if len(precision_database) == 0:\n                    print(\"[database] No results found for %s:%s, retrieving defaults from %s:32\" %\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/bests.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 41,
                  "endLine": 55,
                  "snippet": {
                    "text": "        performance_sum = sum([r[\"relative_time\"] for r in common_results if r[\"parameters\"] == parameters])\n        performance_sums.append(performance_sum)\n\n    # Retrieves the entry with the lowest time\n    best_index = argmin(performance_sums)\n    best_performance = performance_sums[best_index]\n    best_parameters = common_parameters[best_index]\n\n",
                    "rendered": {
                      "text": "        performance_sum = sum([r[\"relative_time\"] for r in common_results if r[\"parameters\"] == parameters])\n        performance_sums.append(performance_sum)\n\n    # Retrieves the entry with the lowest time\n    best_index = argmin(performance_sums)\n    best_performance = performance_sums[best_index]\n    best_parameters = common_parameters[best_index]\n\n",
                      "markdown": "`        performance_sum = sum([r[\"relative_time\"] for r in common_results if r[\"parameters\"] == parameters])\n        performance_sums.append(performance_sum)\n\n    # Retrieves the entry with the lowest time\n    best_index = argmin(performance_sums)\n    best_performance = performance_sums[best_index]\n    best_parameters = common_parameters[best_index]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/bests.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 64,
                  "endLine": 42,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n\ndef get_relative_bests(name, common_results, common_parameters, verbose=False):\n    \"\"\"Retrieves the parameters with the relative best execution time over different devices\"\"\"\n\n    # Helper function\n    def argmin(iterable):\n",
                    "rendered": {
                      "text": "\n\ndef get_relative_bests(name, common_results, common_parameters, verbose=False):\n    \"\"\"Retrieves the parameters with the relative best execution time over different devices\"\"\"\n\n    # Helper function\n    def argmin(iterable):\n",
                      "markdown": "`\n\ndef get_relative_bests(name, common_results, common_parameters, verbose=False):\n    \"\"\"Retrieves the parameters with the relative best execution time over different devices\"\"\"\n\n    # Helper function\n    def argmin(iterable):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/bests.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 9,
                  "endLine": 26,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        if section_best[\"clblast_device_architecture\"] == \"\" and section_best[\"clblast_device_vendor\"] in clblast.VENDORS_WITH_ARCHITECTURE:\n            section_best[\"clblast_device_architecture\"] = clblast.DEVICE_ARCHITECTURE_DEFAULT\n\n        # Find the best result\n        parameters_best = None\n        time_best = sys.float_info.max\n        for result in section[\"results\"]:\n",
                    "rendered": {
                      "text": "        if section_best[\"clblast_device_architecture\"] == \"\" and section_best[\"clblast_device_vendor\"] in clblast.VENDORS_WITH_ARCHITECTURE:\n            section_best[\"clblast_device_architecture\"] = clblast.DEVICE_ARCHITECTURE_DEFAULT\n\n        # Find the best result\n        parameters_best = None\n        time_best = sys.float_info.max\n        for result in section[\"results\"]:\n",
                      "markdown": "`        if section_best[\"clblast_device_architecture\"] == \"\" and section_best[\"clblast_device_vendor\"] in clblast.VENDORS_WITH_ARCHITECTURE:\n            section_best[\"clblast_device_architecture\"] = clblast.DEVICE_ARCHITECTURE_DEFAULT\n\n        # Find the best result\n        parameters_best = None\n        time_best = sys.float_info.max\n        for result in section[\"results\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/routine.cpp"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 39,
                  "endLine": 96,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  const auto device_name = GetDeviceName(device_);\n  const auto platform_id = device_.PlatformID();\n  bool has_binary;\n  auto binary = BinaryCache::Instance().Get(BinaryKeyRef{platform_id,  precision_, routine_info, device_name },\n                                            &has_binary);\n  if (has_binary) {\n    program_ = std::make_shared<Program>(device_, context_, binary);\n",
                    "rendered": {
                      "text": "  const auto device_name = GetDeviceName(device_);\n  const auto platform_id = device_.PlatformID();\n  bool has_binary;\n  auto binary = BinaryCache::Instance().Get(BinaryKeyRef{platform_id,  precision_, routine_info, device_name },\n                                            &has_binary);\n  if (has_binary) {\n    program_ = std::make_shared<Program>(device_, context_, binary);\n",
                      "markdown": "`  const auto device_name = GetDeviceName(device_);\n  const auto platform_id = device_.PlatformID();\n  bool has_binary;\n  auto binary = BinaryCache::Instance().Get(BinaryKeyRef{platform_id,  precision_, routine_info, device_name },\n                                            &has_binary);\n  if (has_binary) {\n    program_ = std::make_shared<Program>(device_, context_, binary);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/routine.cpp"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 37,
                  "endLine": 80,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n  // Queries the cache to see whether or not the program (context-specific) is already there\n  bool has_program;\n  program_ = ProgramCache::Instance().Get(ProgramKeyRef{ context_(), device_(), precision_, routine_info },\n                                          &has_program);\n  if (has_program) { return; }\n\n",
                    "rendered": {
                      "text": "\n  // Queries the cache to see whether or not the program (context-specific) is already there\n  bool has_program;\n  program_ = ProgramCache::Instance().Get(ProgramKeyRef{ context_(), device_(), precision_, routine_info },\n                                          &has_program);\n  if (has_program) { return; }\n\n",
                      "markdown": "`\n  // Queries the cache to see whether or not the program (context-specific) is already there\n  bool has_program;\n  program_ = ProgramCache::Instance().Get(ProgramKeyRef{ context_(), device_(), precision_, routine_info },\n                                          &has_program);\n  if (has_program) { return; }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/routine.cpp"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  // Sets the build options from an environmental variable (if set)\n  auto options = std::vector<std::string>();\n  const auto environment_variable = std::getenv(\"CLBLAST_BUILD_OPTIONS\");\n  if (environment_variable != nullptr) {\n    options.push_back(std::string(environment_variable));\n  }\n",
                    "rendered": {
                      "text": "\n  // Sets the build options from an environmental variable (if set)\n  auto options = std::vector<std::string>();\n  const auto environment_variable = std::getenv(\"CLBLAST_BUILD_OPTIONS\");\n  if (environment_variable != nullptr) {\n    options.push_back(std::string(environment_variable));\n  }\n",
                      "markdown": "`\n  // Sets the build options from an environmental variable (if set)\n  auto options = std::vector<std::string>();\n  const auto environment_variable = std::getenv(\"CLBLAST_BUILD_OPTIONS\");\n  if (environment_variable != nullptr) {\n    options.push_back(std::string(environment_variable));\n  }\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 49,
                  "endLine": 562,
                  "endColumn": 54,
                  "snippet": {
                    "text": "          delete m;\n      }),\n      access_(access) {\n    if (size > 0) { CheckError(cuMemAlloc(buffer_.get(), size*sizeof(T))); }\n  }\n\n  // As above, but now with read/write access as a default\n",
                    "rendered": {
                      "text": "          delete m;\n      }),\n      access_(access) {\n    if (size > 0) { CheckError(cuMemAlloc(buffer_.get(), size*sizeof(T))); }\n  }\n\n  // As above, but now with read/write access as a default\n",
                      "markdown": "`          delete m;\n      }),\n      access_(access) {\n    if (size > 0) { CheckError(cuMemAlloc(buffer_.get(), size*sizeof(T))); }\n  }\n\n  // As above, but now with read/write access as a default\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 37,
                  "endLine": 516,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  explicit BufferHost(const Context &, const size_t size):\n      buffer_(new void*, [](void** m) { CheckError(cuMemFreeHost(*m)); delete m; }),\n      size_(size) {\n    CheckError(cuMemAllocHost(buffer_.get(), size*sizeof(T)));\n  }\n\n  // Retrieves the actual allocated size in bytes\n",
                    "rendered": {
                      "text": "  explicit BufferHost(const Context &, const size_t size):\n      buffer_(new void*, [](void** m) { CheckError(cuMemFreeHost(*m)); delete m; }),\n      size_(size) {\n    CheckError(cuMemAllocHost(buffer_.get(), size*sizeof(T)));\n  }\n\n  // Retrieves the actual allocated size in bytes\n",
                      "markdown": "`  explicit BufferHost(const Context &, const size_t size):\n      buffer_(new void*, [](void** m) { CheckError(cuMemFreeHost(*m)); delete m; }),\n      size_(size) {\n    CheckError(cuMemAllocHost(buffer_.get(), size*sizeof(T)));\n  }\n\n  // Retrieves the actual allocated size in bytes\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 36,
                  "endLine": 481,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      }),\n      context_(context),\n      device_(device) {\n    CheckError(cuStreamCreate(queue_.get(), CU_STREAM_NON_BLOCKING));\n  }\n\n  // Synchronizes the queue and optionally also an event\n",
                    "rendered": {
                      "text": "      }),\n      context_(context),\n      device_(device) {\n    CheckError(cuStreamCreate(queue_.get(), CU_STREAM_NON_BLOCKING));\n  }\n\n  // Synchronizes the queue and optionally also an event\n",
                      "markdown": "`      }),\n      context_(context),\n      device_(device) {\n    CheckError(cuStreamCreate(queue_.get(), CU_STREAM_NON_BLOCKING));\n  }\n\n  // Synchronizes the queue and optionally also an event\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 47,
                  "endLine": 403,
                  "endColumn": 52,
                  "snippet": {
                    "text": "      source_(std::move(source)),\n      from_binary_(false) {\n    const auto source_ptr = &source_[0];\n    CheckErrorNVRTC(nvrtcCreateProgram(program_.get(), source_ptr, nullptr, 0, nullptr, nullptr));\n  }\n\n  // PTX-based constructor\n",
                    "rendered": {
                      "text": "      source_(std::move(source)),\n      from_binary_(false) {\n    const auto source_ptr = &source_[0];\n    CheckErrorNVRTC(nvrtcCreateProgram(program_.get(), source_ptr, nullptr, 0, nullptr, nullptr));\n  }\n\n  // PTX-based constructor\n",
                      "markdown": "`      source_(std::move(source)),\n      from_binary_(false) {\n    const auto source_ptr = &source_[0];\n    CheckErrorNVRTC(nvrtcCreateProgram(program_.get(), source_ptr, nullptr, 0, nullptr, nullptr));\n  }\n\n  // PTX-based constructor\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 35,
                  "endLine": 372,
                  "endColumn": 40,
                  "snippet": {
                    "text": "          if (*c) { CheckErrorDtor(cuCtxDestroy(*c)); }\n          delete c;\n      }) {\n    CheckError(cuCtxCreate(context_.get(), 0, device()));\n  }\n\n  // Accessor to the private data-member\n",
                    "rendered": {
                      "text": "          if (*c) { CheckErrorDtor(cuCtxDestroy(*c)); }\n          delete c;\n      }) {\n    CheckError(cuCtxCreate(context_.get(), 0, device()));\n  }\n\n  // Accessor to the private data-member\n",
                      "markdown": "`          if (*c) { CheckErrorDtor(cuCtxDestroy(*c)); }\n          delete c;\n      }) {\n    CheckError(cuCtxCreate(context_.get(), 0, device()));\n  }\n\n  // Accessor to the private data-member\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 33,
                  "endLine": 146,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      start_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }),\n      end_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }) {\n    CheckError(cuEventCreate(start_.get(), CU_EVENT_DEFAULT));\n    CheckError(cuEventCreate(end_.get(), CU_EVENT_DEFAULT));\n  }\n\n  // Waits for completion of this event (not implemented for CUDA)\n",
                    "rendered": {
                      "text": "      start_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }),\n      end_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }) {\n    CheckError(cuEventCreate(start_.get(), CU_EVENT_DEFAULT));\n    CheckError(cuEventCreate(end_.get(), CU_EVENT_DEFAULT));\n  }\n\n  // Waits for completion of this event (not implemented for CUDA)\n",
                      "markdown": "`      start_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }),\n      end_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }) {\n    CheckError(cuEventCreate(start_.get(), CU_EVENT_DEFAULT));\n    CheckError(cuEventCreate(end_.get(), CU_EVENT_DEFAULT));\n  }\n\n  // Waits for completion of this event (not implemented for CUDA)\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 35,
                  "endLine": 145,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  explicit Event():\n      start_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }),\n      end_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }) {\n    CheckError(cuEventCreate(start_.get(), CU_EVENT_DEFAULT));\n    CheckError(cuEventCreate(end_.get(), CU_EVENT_DEFAULT));\n  }\n\n",
                    "rendered": {
                      "text": "  explicit Event():\n      start_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }),\n      end_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }) {\n    CheckError(cuEventCreate(start_.get(), CU_EVENT_DEFAULT));\n    CheckError(cuEventCreate(end_.get(), CU_EVENT_DEFAULT));\n  }\n\n",
                      "markdown": "`  explicit Event():\n      start_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }),\n      end_(new CUevent, [](CUevent* e) { CheckErrorDtor(cuEventDestroy(*e)); delete e; }) {\n    CheckError(cuEventCreate(start_.get(), CU_EVENT_DEFAULT));\n    CheckError(cuEventCreate(end_.get(), CU_EVENT_DEFAULT));\n  }\n\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 39,
                  "endLine": 25,
                  "snippet": {
                    "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//  http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/cupp11.hpp"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 26,
                  "endLine": 152,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  // Waits for completion of this event (not implemented for CUDA)\n  void WaitForCompletion() const { }   // not needed due to cuStreamSynchronize call after each kernel launch\n\n  // Retrieves the elapsed time of the last recorded event\n  float GetElapsedTime() const {\n    auto result = 0.0f;\n    cuEventElapsedTime(&result, *start_, *end_);\n",
                    "rendered": {
                      "text": "  // Waits for completion of this event (not implemented for CUDA)\n  void WaitForCompletion() const { }   // not needed due to cuStreamSynchronize call after each kernel launch\n\n  // Retrieves the elapsed time of the last recorded event\n  float GetElapsedTime() const {\n    auto result = 0.0f;\n    cuEventElapsedTime(&result, *start_, *end_);\n",
                      "markdown": "`  // Waits for completion of this event (not implemented for CUDA)\n  void WaitForCompletion() const { }   // not needed due to cuStreamSynchronize call after each kernel launch\n\n  // Retrieves the elapsed time of the last recorded event\n  float GetElapsedTime() const {\n    auto result = 0.0f;\n    cuEventElapsedTime(&result, *start_, *end_);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindCBLAS.cmake"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 29,
                  "endLine": 68,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    message(STATUS \"Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT\")\nendif()\nif(NOT CBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT\")\nendif()\n\n# Determines whether or not BLAS was found\n",
                    "rendered": {
                      "text": "    message(STATUS \"Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT\")\nendif()\nif(NOT CBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT\")\nendif()\n\n# Determines whether or not BLAS was found\n",
                      "markdown": "`    message(STATUS \"Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT\")\nendif()\nif(NOT CBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT\")\nendif()\n\n# Determines whether or not BLAS was found\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindCBLAS.cmake"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "endLine": 65,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n# Notification messages\nif(NOT CBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT\")\nendif()\nif(NOT CBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT\")\n",
                    "rendered": {
                      "text": "\n# Notification messages\nif(NOT CBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT\")\nendif()\nif(NOT CBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT\")\n",
                      "markdown": "`\n# Notification messages\nif(NOT CBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT\")\nendif()\nif(NOT CBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindcuBLAS.cmake"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 29,
                  "endLine": 75,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\nendif()\nif(NOT CUBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find cuBLAS library, install it or set CUDA_ROOT\")\nendif()\n\n# Determines whether or not cuBLAS was found\n",
                    "rendered": {
                      "text": "    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\nendif()\nif(NOT CUBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find cuBLAS library, install it or set CUDA_ROOT\")\nendif()\n\n# Determines whether or not cuBLAS was found\n",
                      "markdown": "`    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\nendif()\nif(NOT CUBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find cuBLAS library, install it or set CUDA_ROOT\")\nendif()\n\n# Determines whether or not cuBLAS was found\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindcuBLAS.cmake"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 29,
                  "endLine": 72,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    message(STATUS \"Could NOT find 'cuBLAS.h', install CUDA/cuBLAS or set CUDA_ROOT\")\nendif()\nif(NOT CUDA_LIBRARIES)\n    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\nendif()\nif(NOT CUBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find cuBLAS library, install it or set CUDA_ROOT\")\n",
                    "rendered": {
                      "text": "    message(STATUS \"Could NOT find 'cuBLAS.h', install CUDA/cuBLAS or set CUDA_ROOT\")\nendif()\nif(NOT CUDA_LIBRARIES)\n    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\nendif()\nif(NOT CUBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find cuBLAS library, install it or set CUDA_ROOT\")\n",
                      "markdown": "`    message(STATUS \"Could NOT find 'cuBLAS.h', install CUDA/cuBLAS or set CUDA_ROOT\")\nendif()\nif(NOT CUDA_LIBRARIES)\n    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\nendif()\nif(NOT CUBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find cuBLAS library, install it or set CUDA_ROOT\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindcuBLAS.cmake"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 29,
                  "endLine": 69,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n# Notification messages\nif(NOT CUBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'cuBLAS.h', install CUDA/cuBLAS or set CUDA_ROOT\")\nendif()\nif(NOT CUDA_LIBRARIES)\n    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\n",
                    "rendered": {
                      "text": "\n# Notification messages\nif(NOT CUBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'cuBLAS.h', install CUDA/cuBLAS or set CUDA_ROOT\")\nendif()\nif(NOT CUDA_LIBRARIES)\n    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\n",
                      "markdown": "`\n# Notification messages\nif(NOT CUBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'cuBLAS.h', install CUDA/cuBLAS or set CUDA_ROOT\")\nendif()\nif(NOT CUDA_LIBRARIES)\n    message(STATUS \"Could NOT find CUDA library, install it or set CUDA_ROOT\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindclBLAS.cmake"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 29,
                  "endLine": 61,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    message(STATUS \"Could NOT find 'clBLAS.h', install clBLAS or set CLBLAS_ROOT\")\nendif()\nif(NOT CLBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find clBLAS library, install it or set CLBLAS_ROOT\")\nendif()\n\n# Determines whether or not clBLAS was found\n",
                    "rendered": {
                      "text": "    message(STATUS \"Could NOT find 'clBLAS.h', install clBLAS or set CLBLAS_ROOT\")\nendif()\nif(NOT CLBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find clBLAS library, install it or set CLBLAS_ROOT\")\nendif()\n\n# Determines whether or not clBLAS was found\n",
                      "markdown": "`    message(STATUS \"Could NOT find 'clBLAS.h', install clBLAS or set CLBLAS_ROOT\")\nendif()\nif(NOT CLBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find clBLAS library, install it or set CLBLAS_ROOT\")\nendif()\n\n# Determines whether or not clBLAS was found\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindclBLAS.cmake"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 29,
                  "endLine": 58,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n# Notification messages\nif(NOT CLBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'clBLAS.h', install clBLAS or set CLBLAS_ROOT\")\nendif()\nif(NOT CLBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find clBLAS library, install it or set CLBLAS_ROOT\")\n",
                    "rendered": {
                      "text": "\n# Notification messages\nif(NOT CLBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'clBLAS.h', install clBLAS or set CLBLAS_ROOT\")\nendif()\nif(NOT CLBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find clBLAS library, install it or set CLBLAS_ROOT\")\n",
                      "markdown": "`\n# Notification messages\nif(NOT CLBLAS_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'clBLAS.h', install clBLAS or set CLBLAS_ROOT\")\nendif()\nif(NOT CLBLAS_LIBRARIES)\n    message(STATUS \"Could NOT find clBLAS library, install it or set CLBLAS_ROOT\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindOpenCL.cmake"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# Sets the possible install locations\nset(OPENCL_HINTS\n  ${OPENCL_ROOT}\n  $ENV{OPENCL_ROOT}\n  $ENV{OCL_ROOT}\n  $ENV{AMDAPPSDKROOT}\n  $ENV{CUDA_PATH}\n",
                    "rendered": {
                      "text": "# Sets the possible install locations\nset(OPENCL_HINTS\n  ${OPENCL_ROOT}\n  $ENV{OPENCL_ROOT}\n  $ENV{OCL_ROOT}\n  $ENV{AMDAPPSDKROOT}\n  $ENV{CUDA_PATH}\n",
                      "markdown": "`# Sets the possible install locations\nset(OPENCL_HINTS\n  ${OPENCL_ROOT}\n  $ENV{OPENCL_ROOT}\n  $ENV{OCL_ROOT}\n  $ENV{AMDAPPSDKROOT}\n  $ENV{CUDA_PATH}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindOpenCL.cmake"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 35,
                  "endLine": 19,
                  "endColumn": 76,
                  "snippet": {
                    "text": "#\n# In case OpenCL is not installed in the default directory, set the OPENCL_ROOT variable to point to\n# the root of OpenCL, such that 'OpenCL/cl.h' or 'CL/cl.h' can be found in $OPENCL_ROOT/include.\n# This can either be done using an environmental variable (e.g. export OPENCL_ROOT=/path/to/opencl)\n# or using a CMake variable (e.g. cmake -DOPENCL_ROOT=/path/to/opencl ..).\n#\n# ==================================================================================================\n",
                    "rendered": {
                      "text": "#\n# In case OpenCL is not installed in the default directory, set the OPENCL_ROOT variable to point to\n# the root of OpenCL, such that 'OpenCL/cl.h' or 'CL/cl.h' can be found in $OPENCL_ROOT/include.\n# This can either be done using an environmental variable (e.g. export OPENCL_ROOT=/path/to/opencl)\n# or using a CMake variable (e.g. cmake -DOPENCL_ROOT=/path/to/opencl ..).\n#\n# ==================================================================================================\n",
                      "markdown": "`#\n# In case OpenCL is not installed in the default directory, set the OPENCL_ROOT variable to point to\n# the root of OpenCL, such that 'OpenCL/cl.h' or 'CL/cl.h' can be found in $OPENCL_ROOT/include.\n# This can either be done using an environmental variable (e.g. export OPENCL_ROOT=/path/to/opencl)\n# or using a CMake variable (e.g. cmake -DOPENCL_ROOT=/path/to/opencl ..).\n#\n# ==================================================================================================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindOpenCL.cmake"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 29,
                  "endLine": 71,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    message(STATUS \"Could NOT find 'OpenCL/cl.h' or 'CL/cl.h', install OpenCL or set OPENCL_ROOT\")\nendif()\nif(NOT OPENCL_LIBRARIES)\n    message(STATUS \"Could NOT find OpenCL library, install it or set OPENCL_ROOT\")\nendif()\n\n# Determines whether or not OpenCL was found\n",
                    "rendered": {
                      "text": "    message(STATUS \"Could NOT find 'OpenCL/cl.h' or 'CL/cl.h', install OpenCL or set OPENCL_ROOT\")\nendif()\nif(NOT OPENCL_LIBRARIES)\n    message(STATUS \"Could NOT find OpenCL library, install it or set OPENCL_ROOT\")\nendif()\n\n# Determines whether or not OpenCL was found\n",
                      "markdown": "`    message(STATUS \"Could NOT find 'OpenCL/cl.h' or 'CL/cl.h', install OpenCL or set OPENCL_ROOT\")\nendif()\nif(NOT OPENCL_LIBRARIES)\n    message(STATUS \"Could NOT find OpenCL library, install it or set OPENCL_ROOT\")\nendif()\n\n# Determines whether or not OpenCL was found\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindOpenCL.cmake"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 29,
                  "endLine": 68,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n# Notification messages\nif(NOT OPENCL_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'OpenCL/cl.h' or 'CL/cl.h', install OpenCL or set OPENCL_ROOT\")\nendif()\nif(NOT OPENCL_LIBRARIES)\n    message(STATUS \"Could NOT find OpenCL library, install it or set OPENCL_ROOT\")\n",
                    "rendered": {
                      "text": "\n# Notification messages\nif(NOT OPENCL_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'OpenCL/cl.h' or 'CL/cl.h', install OpenCL or set OPENCL_ROOT\")\nendif()\nif(NOT OPENCL_LIBRARIES)\n    message(STATUS \"Could NOT find OpenCL library, install it or set OPENCL_ROOT\")\n",
                      "markdown": "`\n# Notification messages\nif(NOT OPENCL_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'OpenCL/cl.h' or 'CL/cl.h', install OpenCL or set OPENCL_ROOT\")\nendif()\nif(NOT OPENCL_LIBRARIES)\n    message(STATUS \"Could NOT find OpenCL library, install it or set OPENCL_ROOT\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindMKL.cmake"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 29,
                  "endLine": 70,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    message(STATUS \"Could NOT find 'mkl_cblas.h', install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\nif(NOT MKL_LIBRARIES)\n    message(STATUS \"Could NOT find the Intel MKL BLAS library, install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\n\n# Determines whether or not MKL was found\n",
                    "rendered": {
                      "text": "    message(STATUS \"Could NOT find 'mkl_cblas.h', install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\nif(NOT MKL_LIBRARIES)\n    message(STATUS \"Could NOT find the Intel MKL BLAS library, install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\n\n# Determines whether or not MKL was found\n",
                      "markdown": "`    message(STATUS \"Could NOT find 'mkl_cblas.h', install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\nif(NOT MKL_LIBRARIES)\n    message(STATUS \"Could NOT find the Intel MKL BLAS library, install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\n\n# Determines whether or not MKL was found\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/cmake/Modules/FindMKL.cmake"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 29,
                  "endLine": 67,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n# Notification messages\nif(NOT MKL_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'mkl_cblas.h', install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\nif(NOT MKL_LIBRARIES)\n    message(STATUS \"Could NOT find the Intel MKL BLAS library, install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\n",
                    "rendered": {
                      "text": "\n# Notification messages\nif(NOT MKL_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'mkl_cblas.h', install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\nif(NOT MKL_LIBRARIES)\n    message(STATUS \"Could NOT find the Intel MKL BLAS library, install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\n",
                      "markdown": "`\n# Notification messages\nif(NOT MKL_INCLUDE_DIRS)\n    message(STATUS \"Could NOT find 'mkl_cblas.h', install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\nendif()\nif(NOT MKL_LIBRARIES)\n    message(STATUS \"Could NOT find the Intel MKL BLAS library, install it or set MKLROOT and CMPLR_ROOT or source setvars.sh or setvars.bat\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 143,
                  "endLine": 83,
                  "endColumn": 170,
                  "snippet": {
                    "text": "    - name: Run CMake\n      run: |\n        mkdir \"${{env.RELEASE_NAME}}\"\n        cmake -S . -B build  -G \"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release -DTESTS=OFF -DCLIENTS=OFF -DSAMPLES=ON -DCMAKE_INSTALL_PREFIX=\"${{env.RELEASE_NAME}}\" -DOPENCL_ROOT=C:/vcpkg/packages/opencl_x64-windows\n\n    - name: Compile the code\n      run: cmake --build build --config Release\n",
                    "rendered": {
                      "text": "    - name: Run CMake\n      run: |\n        mkdir \"${{env.RELEASE_NAME}}\"\n        cmake -S . -B build  -G \"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release -DTESTS=OFF -DCLIENTS=OFF -DSAMPLES=ON -DCMAKE_INSTALL_PREFIX=\"${{env.RELEASE_NAME}}\" -DOPENCL_ROOT=C:/vcpkg/packages/opencl_x64-windows\n\n    - name: Compile the code\n      run: cmake --build build --config Release\n",
                      "markdown": "`    - name: Run CMake\n      run: |\n        mkdir \"${{env.RELEASE_NAME}}\"\n        cmake -S . -B build  -G \"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release -DTESTS=OFF -DCLIENTS=OFF -DSAMPLES=ON -DCMAKE_INSTALL_PREFIX=\"${{env.RELEASE_NAME}}\" -DOPENCL_ROOT=C:/vcpkg/packages/opencl_x64-windows\n\n    - name: Compile the code\n      run: cmake --build build --config Release\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 20,
                  "endLine": 33,
                  "snippet": {
                    "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n    - name: Run CMake\n",
                    "rendered": {
                      "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n    - name: Run CMake\n",
                      "markdown": "`\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n    - name: Run CMake\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 7,
                  "endLine": 49,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    - name: Package the code\n      run: |\n        cmake --build build --target install\n        tar -cvzf ${{env.RELEASE_NAME}}.tar.gz ${{env.RELEASE_NAME}}\n\n    - name: Upload the release\n      uses: actions/upload-artifact@v3\n",
                    "rendered": {
                      "text": "    - name: Package the code\n      run: |\n        cmake --build build --target install\n        tar -cvzf ${{env.RELEASE_NAME}}.tar.gz ${{env.RELEASE_NAME}}\n\n    - name: Upload the release\n      uses: actions/upload-artifact@v3\n",
                      "markdown": "`    - name: Package the code\n      run: |\n        cmake --build build --target install\n        tar -cvzf ${{env.RELEASE_NAME}}.tar.gz ${{env.RELEASE_NAME}}\n\n    - name: Upload the release\n      uses: actions/upload-artifact@v3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 12,
                  "endLine": 33,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n    - name: Run CMake\n",
                    "rendered": {
                      "text": "    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n    - name: Run CMake\n",
                      "markdown": "`    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n    - name: Run CMake\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/release.yml"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "endLine": 32,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n",
                    "rendered": {
                      "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n",
                      "markdown": "`\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ocl-icd-opencl-dev opencl-c-headers --no-install-recommends\n      if: ${{ matrix.config.name == 'linux' }}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 19,
                  "endLine": 426,
                  "snippet": {
                    "text": "            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n",
                    "rendered": {
                      "text": "            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n",
                      "markdown": "`            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 68,
                  "endLine": 425,
                  "snippet": {
                    "text": "            result += flavour.test_template(extra_template_argument)\n            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n",
                    "rendered": {
                      "text": "            result += flavour.test_template(extra_template_argument)\n            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n",
                      "markdown": "`            result += flavour.test_template(extra_template_argument)\n            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 108,
                  "endLine": 423,
                  "snippet": {
                    "text": "        for flavour in routine.flavours:\n            result += \"  errors += clblast::RunTests<clblast::TestX\" + routine.plain_name()\n            result += flavour.test_template(extra_template_argument)\n            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n",
                    "rendered": {
                      "text": "        for flavour in routine.flavours:\n            result += \"  errors += clblast::RunTests<clblast::TestX\" + routine.plain_name()\n            result += flavour.test_template(extra_template_argument)\n            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n",
                      "markdown": "`        for flavour in routine.flavours:\n            result += \"  errors += clblast::RunTests<clblast::TestX\" + routine.plain_name()\n            result += flavour.test_template(extra_template_argument)\n            result += \">(argc, argv, \" + not_first + \", \\\"\" + flavour.name + routine.upper_name() + \"\\\");\" + NL\n            not_first = \"true\"\n    result += \"  if (errors > 0) { return 1; } else { return 0; }\" + NL\n    result += \"}\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 44,
                  "endLine": 416,
                  "snippet": {
                    "text": "    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n    for extra_template_argument in extra_template_arguments:\n        for flavour in routine.flavours:\n",
                    "rendered": {
                      "text": "    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n    for extra_template_argument in extra_template_arguments:\n        for flavour in routine.flavours:\n",
                      "markdown": "`    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n    for extra_template_argument in extra_template_arguments:\n        for flavour in routine.flavours:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 52,
                  "endLine": 415,
                  "snippet": {
                    "text": "    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n    for extra_template_argument in extra_template_arguments:\n",
                    "rendered": {
                      "text": "    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n    for extra_template_argument in extra_template_arguments:\n",
                      "markdown": "`    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n    for extra_template_argument in extra_template_arguments:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 69,
                  "endLine": 414,
                  "snippet": {
                    "text": "    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n",
                    "rendered": {
                      "text": "    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n",
                      "markdown": "`    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n    extra_template_arguments = [\"1, \", \"2, \"] if routine.name == \"gemm\" and routine.batched == 0 else [\"\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 113,
                  "endLine": 413,
                  "snippet": {
                    "text": "    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n",
                    "rendered": {
                      "text": "    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n",
                      "markdown": "`    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n    not_first = \"false\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 108,
                  "endLine": 412,
                  "endColumn": 112,
                  "snippet": {
                    "text": "    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n",
                    "rendered": {
                      "text": "    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n",
                      "markdown": "`    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 60,
                  "endLine": 412,
                  "snippet": {
                    "text": "def correctness_test(routine, level_string):\n    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n",
                    "rendered": {
                      "text": "def correctness_test(routine, level_string):\n    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n",
                      "markdown": "`def correctness_test(routine, level_string):\n    \"\"\"Generates the body of a correctness test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/correctness/testblas.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  auto errors = size_t{0};\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 19,
                  "endLine": 405,
                  "snippet": {
                    "text": "            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n\ndef correctness_test(routine, level_string):\n",
                    "rendered": {
                      "text": "            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n\ndef correctness_test(routine, level_string):\n",
                      "markdown": "`            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n\ndef correctness_test(routine, level_string):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 29,
                  "endLine": 404,
                  "snippet": {
                    "text": "        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n\n",
                      "markdown": "`        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 21,
                  "endLine": 403,
                  "snippet": {
                    "text": "                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n",
                    "rendered": {
                      "text": "                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n",
                      "markdown": "`                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 84,
                  "endLine": 402,
                  "snippet": {
                    "text": "                result += \">(argc, argv); break;\" + NL\n                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n",
                    "rendered": {
                      "text": "                result += \">(argc, argv); break;\" + NL\n                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n",
                      "markdown": "`                result += \">(argc, argv); break;\" + NL\n                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n    result += \"  return 0;\" + NL\n    result += \"}\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 51,
                  "endLine": 399,
                  "snippet": {
                    "text": "                extra_template_argument = \"0, \" if routine.name == \"gemm\" and routine.batched == 0 else \"\"\n                result += NL + \"      clblast::RunClient<clblast::TestX\" + routine.plain_name()\n                result += flavour.test_template(extra_template_argument)\n                result += \">(argc, argv); break;\" + NL\n                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n",
                    "rendered": {
                      "text": "                extra_template_argument = \"0, \" if routine.name == \"gemm\" and routine.batched == 0 else \"\"\n                result += NL + \"      clblast::RunClient<clblast::TestX\" + routine.plain_name()\n                result += flavour.test_template(extra_template_argument)\n                result += \">(argc, argv); break;\" + NL\n                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n",
                      "markdown": "`                extra_template_argument = \"0, \" if routine.name == \"gemm\" and routine.batched == 0 else \"\"\n                result += NL + \"      clblast::RunClient<clblast::TestX\" + routine.plain_name()\n                result += flavour.test_template(extra_template_argument)\n                result += \">(argc, argv); break;\" + NL\n                found = True\n        if not found:\n            result += \" throw std::runtime_error(\\\"Unsupported precision mode\\\");\" + NL\n    result += \"  }\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 25,
                  "endLine": 396,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        for flavour in routine.flavours:\n            if flavour.precision_name == precision:\n                extra_template_argument = \"0, \" if routine.name == \"gemm\" and routine.batched == 0 else \"\"\n                result += NL + \"      clblast::RunClient<clblast::TestX\" + routine.plain_name()\n                result += flavour.test_template(extra_template_argument)\n                result += \">(argc, argv); break;\" + NL\n                found = True\n",
                    "rendered": {
                      "text": "        for flavour in routine.flavours:\n            if flavour.precision_name == precision:\n                extra_template_argument = \"0, \" if routine.name == \"gemm\" and routine.batched == 0 else \"\"\n                result += NL + \"      clblast::RunClient<clblast::TestX\" + routine.plain_name()\n                result += flavour.test_template(extra_template_argument)\n                result += \">(argc, argv); break;\" + NL\n                found = True\n",
                      "markdown": "`        for flavour in routine.flavours:\n            if flavour.precision_name == precision:\n                extra_template_argument = \"0, \" if routine.name == \"gemm\" and routine.batched == 0 else \"\"\n                result += NL + \"      clblast::RunClient<clblast::TestX\" + routine.plain_name()\n                result += flavour.test_template(extra_template_argument)\n                result += \">(argc, argv); break;\" + NL\n                found = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 108,
                  "endLine": 390,
                  "snippet": {
                    "text": "    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n    for precision in [\"H\", \"S\", \"D\", \"C\", \"Z\"]:\n        result += \"    case clblast::Precision::k\" + convert.precision_to_full_name(precision) + \":\"\n        found = False\n        for flavour in routine.flavours:\n",
                    "rendered": {
                      "text": "    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n    for precision in [\"H\", \"S\", \"D\", \"C\", \"Z\"]:\n        result += \"    case clblast::Precision::k\" + convert.precision_to_full_name(precision) + \":\"\n        found = False\n        for flavour in routine.flavours:\n",
                      "markdown": "`    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n    for precision in [\"H\", \"S\", \"D\", \"C\", \"Z\"]:\n        result += \"    case clblast::Precision::k\" + convert.precision_to_full_name(precision) + \":\"\n        found = False\n        for flavour in routine.flavours:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 101,
                  "endLine": 388,
                  "snippet": {
                    "text": "+ level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n    for precision in [\"H\", \"S\", \"D\", \"C\", \"Z\"]:\n        result += \"    case clblast::Precision::k\" + conver",
                    "rendered": {
                      "text": "+ level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n    for precision in [\"H\", \"S\", \"D\", \"C\", \"Z\"]:\n        result += \"    case clblast::Precision::k\" + conver",
                      "markdown": "`+ level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n    for precision in [\"H\", \"S\", \"D\", \"C\", \"Z\"]:\n        result += \"    case clblast::Precision::k\" + conver`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 52,
                  "endLine": 387,
                  "snippet": {
                    "text": "result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n  ",
                    "rendered": {
                      "text": "result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n  ",
                      "markdown": "`result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line_args, clblast::Precision::k\" + default + \")) {\" + NL\n  `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 69,
                  "endLine": 386,
                  "snippet": {
                    "text": "ance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line",
                    "rendered": {
                      "text": "ance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line",
                      "markdown": "`ance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n    result += \"  switch(clblast::GetPrecision(command_line`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 113,
                  "endLine": 385,
                  "snippet": {
                    "text": "    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n",
                    "rendered": {
                      "text": "    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n",
                      "markdown": "`    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n    default = convert.precision_to_full_name(routine.flavours[0].precision_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 108,
                  "endLine": 384,
                  "endColumn": 112,
                  "snippet": {
                    "text": "    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n",
                    "rendered": {
                      "text": "    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n",
                      "markdown": "`    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 58,
                  "endLine": 384,
                  "snippet": {
                    "text": "def performance_test(routine, level_string):\n    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n",
                    "rendered": {
                      "text": "def performance_test(routine, level_string):\n    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n",
                      "markdown": "`def performance_test(routine, level_string):\n    \"\"\"Generates the body of a performance test for a specific routine\"\"\"\n    result = \"\"\n    result += \"#include \\\"test/performance/client.hpp\\\"\" + NL\n    result += \"#include \\\"test/routines/level\" + level_string + \"/x\" + routine.lowercase_name() + \".hpp\\\"\" + NL + NL\n    result += \"// Main function (not within the clblast namespace)\" + NL\n    result += \"int main(int argc, char *argv[]) {\" + NL\n    result += \"  const auto command_line_args = clblast::RetrieveCommandLineArguments(argc, argv);\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 32,
                  "endLine": 377,
                  "snippet": {
                    "text": "            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\ndef performance_test(routine, level_string):\n",
                    "rendered": {
                      "text": "            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\ndef performance_test(routine, level_string):\n",
                      "markdown": "`            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\ndef performance_test(routine, level_string):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 21,
                  "endLine": 376,
                  "endColumn": 25,
                  "snippet": {
                    "text": "            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\n",
                      "markdown": "`            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 111,
                  "endLine": 373,
                  "snippet": {
                    "text": "\n            #     # Convert back to half\n            #     for buf in routine.outputs:\n            #         result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis, queues[0]);\" + NL\n            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n",
                    "rendered": {
                      "text": "\n            #     # Convert back to half\n            #     for buf in routine.outputs:\n            #         result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis, queues[0]);\" + NL\n            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n",
                      "markdown": "`\n            #     # Convert back to half\n            #     for buf in routine.outputs:\n            #         result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis, queues[0]);\" + NL\n            #     result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 58,
                  "endLine": 368,
                  "snippet": {
                    "text": "            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n            #     # Convert back to half\n            #     for buf in routine.outputs:\n",
                    "rendered": {
                      "text": "            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n            #     # Convert back to half\n            #     for buf in routine.outputs:\n",
                      "markdown": "`            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n            #     # Convert back to half\n            #     for buf in routine.outputs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 100,
                  "endLine": 367,
                  "snippet": {
                    "text": "\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n            #     # Convert back to half\n",
                    "rendered": {
                      "text": "\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n            #     # Convert back to half\n",
                      "markdown": "`\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n            #     # Convert back to half\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 34,
                  "endLine": 366,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n",
                    "rendered": {
                      "text": "\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n",
                      "markdown": "`\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n            #     result += \"  cudaDeviceSynchronize();\" + NL\n            #     result += \"  return status;\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 117,
                  "endLine": 363,
                  "snippet": {
                    "text": "\n            #     # Convert to float (note: also integer buffers are stored as half/float)\n            #     for buf in routine.inputs + routine.outputs:\n            #         result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n",
                    "rendered": {
                      "text": "\n            #     # Convert to float (note: also integer buffers are stored as half/float)\n            #     for buf in routine.inputs + routine.outputs:\n            #         result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n",
                      "markdown": "`\n            #     # Convert to float (note: also integer buffers are stored as half/float)\n            #     for buf in routine.inputs + routine.outputs:\n            #         result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n\n            #     # Call the float routine\n            #     result += \"  return cublasX\" + routine.name + \"(handle,\"\n            #     result += (\",\" + NL + indent).join([a for a in routine.arguments_half()]) + \");\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 56,
                  "endLine": 353,
                  "snippet": {
                    "text": "                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n            # There is no cuBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n",
                    "rendered": {
                      "text": "                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n            # There is no cuBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n",
                      "markdown": "`                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n            # There is no cuBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 83,
                  "endLine": 352,
                  "snippet": {
                    "text": "\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n            # There is no cuBLAS available, forward the call to one of the available functions\n",
                    "rendered": {
                      "text": "\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n            # There is no cuBLAS available, forward the call to one of the available functions\n",
                      "markdown": "`\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n            # There is no cuBLAS available, forward the call to one of the available functions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 32,
                  "endLine": 351,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n",
                    "rendered": {
                      "text": "\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n",
                      "markdown": "`\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n                result += \"  return status;\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 86,
                  "endLine": 348,
                  "snippet": {
                    "text": "precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n     ",
                    "rendered": {
                      "text": "precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n     ",
                      "markdown": "`precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n                result += (\",\" + NL + indent).join([a for a in arguments]) + \");\" + NL\n                result += \"  cudaDeviceSynchronize();\" + NL\n     `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 86,
                  "endLine": 347,
                  "snippet": {
                    "text": "                    if flavour.is_complex(scalar):\n                        cuda_complex = \"cuDoubleComplex\" if flavour.precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n",
                    "rendered": {
                      "text": "                    if flavour.is_complex(scalar):\n                        cuda_complex = \"cuDoubleComplex\" if flavour.precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n",
                      "markdown": "`                    if flavour.is_complex(scalar):\n                        cuda_complex = \"cuDoubleComplex\" if flavour.precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n                result += \"  auto status = cublas\" + flavour.name_cublas() + routine.name + \"(handle, \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 81,
                  "endLine": 346,
                  "snippet": {
                    "text": "                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n                        cuda_complex = \"cuDoubleComplex\" if flavour.precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n",
                    "rendered": {
                      "text": "                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n                        cuda_complex = \"cuDoubleComplex\" if flavour.precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n",
                      "markdown": "`                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n                        cuda_complex = \"cuDoubleComplex\" if flavour.precision_name == \"Z\" else \"cuComplex\"\n                        result += \"  \" + cuda_complex + \" \" + scalar + \"_cuda;\" + NL\n                        result += \"  \" + scalar + \"_cuda.x = \" + scalar + \".real();\" + NL\n                        result += \"  \" + scalar + \"_cuda.y = \" + scalar + \".imag();\" + NL\n\n                # Calls the cuBLAS routine\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 108,
                  "endLine": 340,
                  "snippet": {
                    "text": "\n                # Handles row-major\n                if routine.has_layout():\n                    result += \"  if (layout == Layout::kRowMajor) { return CUBLAS_STATUS_NOT_SUPPORTED; }\" + NL\n\n                # Complex scalars\n                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n",
                    "rendered": {
                      "text": "\n                # Handles row-major\n                if routine.has_layout():\n                    result += \"  if (layout == Layout::kRowMajor) { return CUBLAS_STATUS_NOT_SUPPORTED; }\" + NL\n\n                # Complex scalars\n                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n",
                      "markdown": "`\n                # Handles row-major\n                if routine.has_layout():\n                    result += \"  if (layout == Layout::kRowMajor) { return CUBLAS_STATUS_NOT_SUPPORTED; }\" + NL\n\n                # Complex scalars\n                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 88,
                  "endLine": 331,
                  "snippet": {
                    "text": "        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n\n            # There is a version available in cuBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (24 + routine.length())\n",
                    "rendered": {
                      "text": "        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n\n            # There is a version available in cuBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (24 + routine.length())\n",
                      "markdown": "`        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n\n            # There is a version available in cuBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (24 + routine.length())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 95,
                  "endLine": 329,
                  "snippet": {
                    "text": "    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n\n            # There is a version available in cuBLAS\n",
                    "rendered": {
                      "text": "    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n\n            # There is a version available in cuBLAS\n",
                      "markdown": "`    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n\n            # There is a version available in cuBLAS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 93,
                  "endLine": 327,
                  "snippet": {
                    "text": "    \"\"\"The wrapper to the reference cuBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n",
                    "rendered": {
                      "text": "    \"\"\"The wrapper to the reference cuBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n",
                      "markdown": "`    \"\"\"The wrapper to the reference cuBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cublas(flavour, False, 23) + \" {\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 17,
                  "endLine": 326,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    \"\"\"The wrapper to the reference cuBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n",
                    "rendered": {
                      "text": "    \"\"\"The wrapper to the reference cuBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n",
                      "markdown": "`    \"\"\"The wrapper to the reference cuBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the cuBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_cublas(routine.template, True, 23) + \";\" + NL\n        for flavour in routine.flavours:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 27,
                  "endLine": 319,
                  "snippet": {
                    "text": "                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis);\" + NL\n\n            # Complete\n            result += \"}\" + NL\n    return result\n\n\ndef wrapper_cublas(routine):\n",
                    "rendered": {
                      "text": "                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis);\" + NL\n\n            # Complete\n            result += \"}\" + NL\n    return result\n\n\ndef wrapper_cublas(routine):\n",
                      "markdown": "`                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis);\" + NL\n\n            # Complete\n            result += \"}\" + NL\n    return result\n\n\ndef wrapper_cublas(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 102,
                  "endLine": 316,
                  "snippet": {
                    "text": "                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis);\" + NL\n\n            # Complete\n            result += \"}\" + NL\n    return result\n",
                    "rendered": {
                      "text": "                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis);\" + NL\n\n            # Complete\n            result += \"}\" + NL\n    return result\n",
                      "markdown": "`                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis);\" + NL\n\n            # Complete\n            result += \"}\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 32,
                  "endLine": 311,
                  "snippet": {
                    "text": "                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \");\" + NL\n\n                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n",
                    "rendered": {
                      "text": "                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \");\" + NL\n\n                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n",
                      "markdown": "`                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \");\" + NL\n\n                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 32,
                  "endLine": 309,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \");\" + NL\n\n                # Convert back to half\n",
                    "rendered": {
                      "text": "\n                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \");\" + NL\n\n                # Convert back to half\n",
                      "markdown": "`\n                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \");\" + NL\n\n                # Convert back to half\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 89,
                  "endLine": 306,
                  "snippet": {
                    "text": "                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n",
                    "rendered": {
                      "text": "                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n",
                      "markdown": "`                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n                result += \"  cblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 108,
                  "endLine": 304,
                  "snippet": {
                    "text": "                # Convert to float (note: also integer buffers are stored as half/float)\n                for buf in routine.inputs + routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n",
                    "rendered": {
                      "text": "                # Convert to float (note: also integer buffers are stored as half/float)\n                for buf in routine.inputs + routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n",
                      "markdown": "`                # Convert to float (note: also integer buffers are stored as half/float)\n                for buf in routine.inputs + routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 82,
                  "endLine": 295,
                  "snippet": {
                    "text": "\n                result += \"  \" + assignment + \"cblas_\" + flavour.name.lower() + routine.name + postfix + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += extra_argument + end_of_line + \")\" + postpostfix + \";\" + NL\n\n            # There is no CBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n                indent = \" \" * (9 + routine.length())\n",
                    "rendered": {
                      "text": "\n                result += \"  \" + assignment + \"cblas_\" + flavour.name.lower() + routine.name + postfix + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += extra_argument + end_of_line + \")\" + postpostfix + \";\" + NL\n\n            # There is no CBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n                indent = \" \" * (9 + routine.length())\n",
                      "markdown": "`\n                result += \"  \" + assignment + \"cblas_\" + flavour.name.lower() + routine.name + postfix + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += extra_argument + end_of_line + \")\" + postpostfix + \";\" + NL\n\n            # There is no CBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n                indent = \" \" * (9 + routine.length())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 32,
                  "endLine": 293,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                            indent += \" \" * len(assignment)\n\n                result += \"  \" + assignment + \"cblas_\" + flavour.name.lower() + routine.name + postfix + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += extra_argument + end_of_line + \")\" + postpostfix + \";\" + NL\n\n            # There is no CBLAS available, forward the call to one of the available functions\n",
                    "rendered": {
                      "text": "                            indent += \" \" * len(assignment)\n\n                result += \"  \" + assignment + \"cblas_\" + flavour.name.lower() + routine.name + postfix + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += extra_argument + end_of_line + \")\" + postpostfix + \";\" + NL\n\n            # There is no CBLAS available, forward the call to one of the available functions\n",
                      "markdown": "`                            indent += \" \" * len(assignment)\n\n                result += \"  \" + assignment + \"cblas_\" + flavour.name.lower() + routine.name + postfix + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += extra_argument + end_of_line + \")\" + postpostfix + \";\" + NL\n\n            # There is no CBLAS available, forward the call to one of the available functions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 51,
                  "endLine": 280,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                        if flavour in [datatype.C, datatype.Z]:\n                            postfix += \"_sub\"\n                            indent += \"    \"\n                            extra_argument += \",\" + NL + indent\n                            extra_argument += \"reinterpret_cast<return_pointer_\" + flavour.buffer_type[:-1] + \">\"\n                            extra_argument += \"(&\" + output_buffer + \"_buffer[\" + output_buffer + \"_offset])\"\n                        else:\n",
                    "rendered": {
                      "text": "                        if flavour in [datatype.C, datatype.Z]:\n                            postfix += \"_sub\"\n                            indent += \"    \"\n                            extra_argument += \",\" + NL + indent\n                            extra_argument += \"reinterpret_cast<return_pointer_\" + flavour.buffer_type[:-1] + \">\"\n                            extra_argument += \"(&\" + output_buffer + \"_buffer[\" + output_buffer + \"_offset])\"\n                        else:\n",
                      "markdown": "`                        if flavour in [datatype.C, datatype.Z]:\n                            postfix += \"_sub\"\n                            indent += \"    \"\n                            extra_argument += \",\" + NL + indent\n                            extra_argument += \"reinterpret_cast<return_pointer_\" + flavour.buffer_type[:-1] + \">\"\n                            extra_argument += \"(&\" + output_buffer + \"_buffer[\" + output_buffer + \"_offset])\"\n                        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 85,
                  "endLine": 269,
                  "snippet": {
                    "text": "                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n                        result += \"  const auto \" + scalar + \"_array = std::vector<\" + flavour.buffer_type[:-1] + \">\"\n                        result += \"{\" + scalar + \".real(), \" + scalar + \".imag()};\" + NL\n\n                # Special case for scalar outputs\n                assignment = \"\"\n                postfix, postpostfix = \"\", \"\"\n",
                    "rendered": {
                      "text": "                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n                        result += \"  const auto \" + scalar + \"_array = std::vector<\" + flavour.buffer_type[:-1] + \">\"\n                        result += \"{\" + scalar + \".real(), \" + scalar + \".imag()};\" + NL\n\n                # Special case for scalar outputs\n                assignment = \"\"\n                postfix, postpostfix = \"\", \"\"\n",
                      "markdown": "`                for scalar in routine.scalars:\n                    if flavour.is_complex(scalar):\n                        result += \"  const auto \" + scalar + \"_array = std::vector<\" + flavour.buffer_type[:-1] + \">\"\n                        result += \"{\" + scalar + \".real(), \" + scalar + \".imag()};\" + NL\n\n                # Special case for scalar outputs\n                assignment = \"\"\n                postfix, postpostfix = \"\", \"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 80,
                  "endLine": 258,
                  "snippet": {
                    "text": "    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n            # There is a version available in CBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (10 + routine.length())\n",
                    "rendered": {
                      "text": "    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n            # There is a version available in CBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (10 + routine.length())\n",
                      "markdown": "`    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n            # There is a version available in CBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (10 + routine.length())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 98,
                  "endLine": 256,
                  "snippet": {
                    "text": "    \"\"\"The wrapper to the reference CBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n            # There is a version available in CBLAS\n",
                    "rendered": {
                      "text": "    \"\"\"The wrapper to the reference CBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n            # There is a version available in CBLAS\n",
                      "markdown": "`    \"\"\"The wrapper to the reference CBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n            # There is a version available in CBLAS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "endLine": 255,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    \"\"\"The wrapper to the reference CBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n",
                    "rendered": {
                      "text": "    \"\"\"The wrapper to the reference CBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n",
                      "markdown": "`    \"\"\"The wrapper to the reference CBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the Netlib BLAS calls for %s\" % routine.short_names_tested() + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_cblas(flavour, 12) + \" {\" + NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 32,
                  "endLine": 248,
                  "snippet": {
                    "text": "                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\ndef wrapper_cblas(routine):\n",
                    "rendered": {
                      "text": "                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\ndef wrapper_cblas(routine):\n",
                      "markdown": "`                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\ndef wrapper_cblas(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 21,
                  "endLine": 247,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\n",
                      "markdown": "`                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 113,
                  "endLine": 244,
                  "snippet": {
                    "text": "                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis, queues[0]);\" + NL\n                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n",
                    "rendered": {
                      "text": "                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis, queues[0]);\" + NL\n                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n",
                      "markdown": "`                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  FloatToHalfBuffer(\" + buf + \"_buffer, \" + buf + \"_buffer_bis, queues[0]);\" + NL\n                result += \"  return status;\"\n\n            # Complete\n            result += NL + \"}\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 25,
                  "endLine": 239,
                  "snippet": {
                    "text": "                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n",
                    "rendered": {
                      "text": "                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n",
                      "markdown": "`                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n                # Convert back to half\n                for buf in routine.outputs:\n                    if buf not in routine.index_buffers():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 31,
                  "endLine": 237,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n                # Convert back to half\n",
                    "rendered": {
                      "text": "                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n                # Convert back to half\n",
                      "markdown": "`                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n                # Convert back to half\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 32,
                  "endLine": 236,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n",
                    "rendered": {
                      "text": "\n                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n",
                      "markdown": "`\n                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n                result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 89,
                  "endLine": 233,
                  "snippet": {
                    "text": "                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n",
                    "rendered": {
                      "text": "                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n",
                      "markdown": "`                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n                result += \"  auto status = clblasX\" + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in routine.arguments_half()])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 119,
                  "endLine": 231,
                  "snippet": {
                    "text": "                # Convert to float (note: also integer buffers are stored as half/float)\n                for buf in routine.inputs + routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n",
                    "rendered": {
                      "text": "                # Convert to float (note: also integer buffers are stored as half/float)\n                for buf in routine.inputs + routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n",
                      "markdown": "`                # Convert to float (note: also integer buffers are stored as half/float)\n                for buf in routine.inputs + routine.outputs:\n                    if buf not in routine.index_buffers():\n                        result += \"  auto \" + buf + \"_buffer_bis = HalfToFloatBuffer(\" + buf + \"_buffer, queues[0]);\" + NL\n                    else:\n                        result += \"  auto \" + buf + \"_buffer_bis = \" + buf + \"_buffer;\" + NL\n\n                # Call the float routine\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 31,
                  "endLine": 221,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n\n            # There is no clBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n",
                    "rendered": {
                      "text": "                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n\n            # There is no clBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n",
                      "markdown": "`                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n\n            # There is no clBLAS available, forward the call to one of the available functions\n            else:  # Half-precision\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 32,
                  "endLine": 220,
                  "endColumn": 36,
                  "snippet": {
                    "text": "                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n\n            # There is no clBLAS available, forward the call to one of the available functions\n",
                    "rendered": {
                      "text": "                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n\n            # There is no clBLAS available, forward the call to one of the available functions\n",
                      "markdown": "`                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_events, events);\"\n\n            # There is no clBLAS available, forward the call to one of the available functions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 69,
                  "endLine": 218,
                  "snippet": {
                    "text": "                  result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_ev",
                    "rendered": {
                      "text": "                  result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_ev",
                      "markdown": "`                  result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n                result += (\",\" + NL + indent).join([a for a in arguments])\n                result += \",\" + NL + indent + \"num_queues, queues, num_wait_events, wait_ev`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 70,
                  "endLine": 216,
                  "snippet": {
                    "text": "                arguments = routine.arguments_wrapper_clblas(flavour)\n                if routine.scratch:\n                    result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n",
                    "rendered": {
                      "text": "                arguments = routine.arguments_wrapper_clblas(flavour)\n                if routine.scratch:\n                    result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n",
                      "markdown": "`                arguments = routine.arguments_wrapper_clblas(flavour)\n                if routine.scratch:\n                    result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n                result += \"  return clblas\" + flavour.name + routine.name + \"(\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 66,
                  "endLine": 215,
                  "snippet": {
                    "text": "                indent = \" \" * (17 + routine.length())\n                arguments = routine.arguments_wrapper_clblas(flavour)\n                if routine.scratch:\n                    result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n",
                    "rendered": {
                      "text": "                indent = \" \" * (17 + routine.length())\n                arguments = routine.arguments_wrapper_clblas(flavour)\n                if routine.scratch:\n                    result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n",
                      "markdown": "`                indent = \" \" * (17 + routine.length())\n                arguments = routine.arguments_wrapper_clblas(flavour)\n                if routine.scratch:\n                    result += \"  auto queue = Queue(queues[0]);\" + NL\n                    result += \"  auto context = queue.GetContext();\" + NL\n                    result += \"  auto scratch_buffer = Buffer<\" + flavour.template + \">\"\n                    result += \"(context, \" + routine.scratch + \");\" + NL\n                    arguments += [\"scratch_buffer()\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 88,
                  "endLine": 208,
                  "snippet": {
                    "text": "        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n\n            # There is a version available in clBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (17 + routine.length())\n",
                    "rendered": {
                      "text": "        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n\n            # There is a version available in clBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (17 + routine.length())\n",
                      "markdown": "`        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n\n            # There is a version available in clBLAS\n            if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n                indent = \" \" * (17 + routine.length())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 95,
                  "endLine": 206,
                  "snippet": {
                    "text": "    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n\n            # There is a version available in clBLAS\n",
                    "rendered": {
                      "text": "    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n\n            # There is a version available in clBLAS\n",
                      "markdown": "`    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n\n            # There is a version available in clBLAS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 93,
                  "endLine": 204,
                  "snippet": {
                    "text": "    \"\"\"The wrapper to the reference clBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n",
                    "rendered": {
                      "text": "    \"\"\"The wrapper to the reference clBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n",
                      "markdown": "`    \"\"\"The wrapper to the reference clBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n            result += routine.routine_header_wrapper_clblas(flavour, False, 21) + \" {\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 17,
                  "endLine": 203,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    \"\"\"The wrapper to the reference clBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n",
                    "rendered": {
                      "text": "    \"\"\"The wrapper to the reference clBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n",
                      "markdown": "`    \"\"\"The wrapper to the reference clBLAS routines (for performance/correctness testing)\"\"\"\n    result = \"\"\n    if routine.has_tests:\n        result += NL + \"// Forwards the clBLAS calls for %s\" % routine.short_names_tested() + NL\n        if routine.no_scalars():\n            result += routine.routine_header_wrapper_clblas(routine.template, True, 21) + \";\" + NL\n        for flavour in routine.flavours:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 27,
                  "endLine": 196,
                  "snippet": {
                    "text": "                        if name not in routine.index_buffers():\n                            result += \".real()\"\n                    result += \";\" + NL\n            result += \"}\" + NL\n    return result\n\n\ndef wrapper_clblas(routine):\n",
                    "rendered": {
                      "text": "                        if name not in routine.index_buffers():\n                            result += \".real()\"\n                    result += \";\" + NL\n            result += \"}\" + NL\n    return result\n\n\ndef wrapper_clblas(routine):\n",
                      "markdown": "`                        if name not in routine.index_buffers():\n                            result += \".real()\"\n                    result += \";\" + NL\n            result += \"}\" + NL\n    return result\n\n\ndef wrapper_clblas(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 35,
                  "endLine": 195,
                  "snippet": {
                    "text": "                    if flavour.buffer_type in [\"float2\", \"double2\"]:\n                        if name not in routine.index_buffers():\n                            result += \".real()\"\n                    result += \";\" + NL\n            result += \"}\" + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "                    if flavour.buffer_type in [\"float2\", \"double2\"]:\n                        if name not in routine.index_buffers():\n                            result += \".real()\"\n                    result += \";\" + NL\n            result += \"}\" + NL\n    return result\n\n\n",
                      "markdown": "`                    if flavour.buffer_type in [\"float2\", \"double2\"]:\n                        if name not in routine.index_buffers():\n                            result += \".real()\"\n                    result += \";\" + NL\n            result += \"}\" + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 73,
                  "endLine": 188,
                  "snippet": {
                    "text": "                    result += \"  \" + buffer_type + \" \" + name + \"[\" + name + \"_size];\" + NL\n            for name in routine.outputs:\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.read_buffer(name, buffer_type) + NL\n            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n                    result += \"  return \" + name + \"[0]\"\n                    if flavour.buffer_type in [\"float2\", \"double2\"]:\n",
                    "rendered": {
                      "text": "                    result += \"  \" + buffer_type + \" \" + name + \"[\" + name + \"_size];\" + NL\n            for name in routine.outputs:\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.read_buffer(name, buffer_type) + NL\n            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n                    result += \"  return \" + name + \"[0]\"\n                    if flavour.buffer_type in [\"float2\", \"double2\"]:\n",
                      "markdown": "`                    result += \"  \" + buffer_type + \" \" + name + \"[\" + name + \"_size];\" + NL\n            for name in routine.outputs:\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.read_buffer(name, buffer_type) + NL\n            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n                    result += \"  return \" + name + \"[0]\"\n                    if flavour.buffer_type in [\"float2\", \"double2\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 88,
                  "endLine": 185,
                  "snippet": {
                    "text": "            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n                    buffer_type = routine.get_buffer_type(name, flavour)\n                    result += \"  \" + buffer_type + \" \" + name + \"[\" + name + \"_size];\" + NL\n            for name in routine.outputs:\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.read_buffer(name, buffer_type) + NL\n            for name in routine.outputs:\n",
                    "rendered": {
                      "text": "            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n                    buffer_type = routine.get_buffer_type(name, flavour)\n                    result += \"  \" + buffer_type + \" \" + name + \"[\" + name + \"_size];\" + NL\n            for name in routine.outputs:\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.read_buffer(name, buffer_type) + NL\n            for name in routine.outputs:\n",
                      "markdown": "`            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n                    buffer_type = routine.get_buffer_type(name, flavour)\n                    result += \"  \" + buffer_type + \" \" + name + \"[\" + name + \"_size];\" + NL\n            for name in routine.outputs:\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.read_buffer(name, buffer_type) + NL\n            for name in routine.outputs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 29,
                  "endLine": 179,
                  "snippet": {
                    "text": "            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n",
                    "rendered": {
                      "text": "            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n",
                      "markdown": "`            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n            for name in routine.outputs:\n                if name in routine.scalar_buffers_first() and routine.name not in routine.routines_scalar_no_return():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 117,
                  "endLine": 178,
                  "snippet": {
                    "text": "\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n            for name in routine.outputs:\n",
                    "rendered": {
                      "text": "\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n            for name in routine.outputs:\n",
                      "markdown": "`\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n            for name in routine.outputs:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 69,
                  "endLine": 177,
                  "snippet": {
                    "text": "            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n",
                    "rendered": {
                      "text": "            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n",
                      "markdown": "`            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n            result += \"  }\" + NL\n\n            # Copy back and clean-up\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 57,
                  "endLine": 174,
                  "snippet": {
                    "text": "            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n",
                    "rendered": {
                      "text": "            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n",
                      "markdown": "`            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n            result += \"    throw std::runtime_error(\\\"CLBlast returned with error code \\\" + clblast::ToString(s));\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 27,
                  "endLine": 173,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n",
                    "rendered": {
                      "text": "            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n",
                      "markdown": "`            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n            result += \"  if (s != clblast::StatusCode::kSuccess) {\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 28,
                  "endLine": 172,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n",
                    "rendered": {
                      "text": "            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n",
                      "markdown": "`            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n            # Error handling\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 52,
                  "endLine": 171,
                  "snippet": {
                    "text": "                    result += \"  \" + routine.write_buffer(name, prefix + buffer_type) + NL\n\n            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n",
                    "rendered": {
                      "text": "                    result += \"  \" + routine.write_buffer(name, prefix + buffer_type) + NL\n\n            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n",
                      "markdown": "`                    result += \"  \" + routine.write_buffer(name, prefix + buffer_type) + NL\n\n            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n            result += (\",\" + NL + indent).join([a for a in routine.arguments_netlib(flavour, indent)])\n            result += \",\" + NL + indent + \"&queue_cl);\" + NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 87,
                  "endLine": 168,
                  "snippet": {
                    "text": "                if name not in routine.scalar_buffers_first():\n                    prefix = \"\" if name in routine.outputs else \"const \"\n                    buffer_type = routine.get_buffer_type(name, flavour)\n                    result += \"  \" + routine.write_buffer(name, prefix + buffer_type) + NL\n\n            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n",
                    "rendered": {
                      "text": "                if name not in routine.scalar_buffers_first():\n                    prefix = \"\" if name in routine.outputs else \"const \"\n                    buffer_type = routine.get_buffer_type(name, flavour)\n                    result += \"  \" + routine.write_buffer(name, prefix + buffer_type) + NL\n\n            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n",
                      "markdown": "`                if name not in routine.scalar_buffers_first():\n                    prefix = \"\" if name in routine.outputs else \"const \"\n                    buffer_type = routine.get_buffer_type(name, flavour)\n                    result += \"  \" + routine.write_buffer(name, prefix + buffer_type) + NL\n\n            # The function call\n            result += \"  auto queue_cl = queue();\" + NL\n            result += \"  auto s = clblast::\" + routine.name.capitalize() + template + \"(\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 112,
                  "endLine": 163,
                  "snippet": {
                    "text": "                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n                    result += \"  \" + buffer_type + \" \" + name + \"_vec[1]; \" + name + \"_vec[0] = \" + name + \";\" + NL\n            for name in routine.inputs + routine.outputs:\n                if name not in routine.scalar_buffers_first():\n                    prefix = \"\" if name in routine.outputs else \"const \"\n                    buffer_type = routine.get_buffer_type(name, flavour)\n",
                    "rendered": {
                      "text": "                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n                    result += \"  \" + buffer_type + \" \" + name + \"_vec[1]; \" + name + \"_vec[0] = \" + name + \";\" + NL\n            for name in routine.inputs + routine.outputs:\n                if name not in routine.scalar_buffers_first():\n                    prefix = \"\" if name in routine.outputs else \"const \"\n                    buffer_type = routine.get_buffer_type(name, flavour)\n",
                      "markdown": "`                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n                    result += \"  \" + buffer_type + \" \" + name + \"_vec[1]; \" + name + \"_vec[0] = \" + name + \";\" + NL\n            for name in routine.inputs + routine.outputs:\n                if name not in routine.scalar_buffers_first():\n                    prefix = \"\" if name in routine.outputs else \"const \"\n                    buffer_type = routine.get_buffer_type(name, flavour)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 75,
                  "endLine": 161,
                  "snippet": {
                    "text": "              result += \"  \" + routine.set_size(name, routine.buffer_sizes[i]) + NL\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n                    result += \"  \" + buffer_type + \" \" + name + \"_vec[1]; \" + name + \"_vec[0] = \" + name + \";\" + NL\n            for name in routine.inputs + routine.outputs:\n                if name not in routine.scalar_buffers_",
                    "rendered": {
                      "text": "              result += \"  \" + routine.set_size(name, routine.buffer_sizes[i]) + NL\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n                    result += \"  \" + buffer_type + \" \" + name + \"_vec[1]; \" + name + \"_vec[0] = \" + name + \";\" + NL\n            for name in routine.inputs + routine.outputs:\n                if name not in routine.scalar_buffers_",
                      "markdown": "`              result += \"  \" + routine.set_size(name, routine.buffer_sizes[i]) + NL\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n                    result += \"  \" + buffer_type + \" \" + name + \"_vec[1]; \" + name + \"_vec[0] = \" + name + \";\" + NL\n            for name in routine.inputs + routine.outputs:\n                if name not in routine.scalar_buffers_`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 82,
                  "endLine": 158,
                  "snippet": {
                    "text": "\n            # Copy data structures to the device\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                result += \"  \" + routine.set_size(name, routine.buffer_sizes[i]) + NL\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n",
                    "rendered": {
                      "text": "\n            # Copy data structures to the device\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                result += \"  \" + routine.set_size(name, routine.buffer_sizes[i]) + NL\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n",
                      "markdown": "`\n            # Copy data structures to the device\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                result += \"  \" + routine.set_size(name, routine.buffer_sizes[i]) + NL\n            for i, name in enumerate(routine.inputs + routine.outputs):\n                buffer_type = routine.get_buffer_type(name, flavour)\n                result += \"  \" + routine.create_buffer(name, buffer_type) + NL\n                if name in routine.scalar_buffers_second_non_pointer():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 40,
                  "endLine": 153,
                  "endColumn": 44,
                  "snippet": {
                    "text": "            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n\n            # Copy data structures to the device\n            for i, name in enumerate(routine.inputs + routine.outputs):\n",
                    "rendered": {
                      "text": "            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n\n            # Copy data structures to the device\n            for i, name in enumerate(routine.inputs + routine.outputs):\n",
                      "markdown": "`            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n\n            # Copy data structures to the device\n            for i, name in enumerate(routine.inputs + routine.outputs):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 73,
                  "endLine": 151,
                  "snippet": {
                    "text": "            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n\n",
                    "rendered": {
                      "text": "            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n\n",
                      "markdown": "`            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 84,
                  "endLine": 150,
                  "snippet": {
                    "text": "\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n",
                    "rendered": {
                      "text": "\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n",
                      "markdown": "`\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n            result += \"\".join(\"  \" + s + NL for s in routine.scalar_create_cpp(flavour))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 71,
                  "endLine": 149,
                  "snippet": {
                    "text": "            result += routine.routine_header_netlib(flavour, 9, \"\") + \" {\" + NL\n\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n",
                    "rendered": {
                      "text": "            result += routine.routine_header_netlib(flavour, 9, \"\") + \" {\" + NL\n\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n",
                      "markdown": "`            result += routine.routine_header_netlib(flavour, 9, \"\") + \" {\" + NL\n\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n            result += \"  auto queue = clblast::Queue(context, device);\" + NL\n\n            # Set alpha and beta\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 76,
                  "endLine": 146,
                  "snippet": {
                    "text": "            template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n            name_postfix = \"_sub\" if routine.name in routine.routines_scalar_no_return() else \"\"\n            indent = \" \" * (21 + routine.length() + len(template))\n            result += routine.routine_header_netlib(flavour, 9, \"\") + \" {\" + NL\n\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n",
                    "rendered": {
                      "text": "            template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n            name_postfix = \"_sub\" if routine.name in routine.routines_scalar_no_return() else \"\"\n            indent = \" \" * (21 + routine.length() + len(template))\n            result += routine.routine_header_netlib(flavour, 9, \"\") + \" {\" + NL\n\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n",
                      "markdown": "`            template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n            name_postfix = \"_sub\" if routine.name in routine.routines_scalar_no_return() else \"\"\n            indent = \" \" * (21 + routine.length() + len(template))\n            result += routine.routine_header_netlib(flavour, 9, \"\") + \" {\" + NL\n\n            # Initialize OpenCL\n            result += \"  OPTIONAL_STATIC auto device = get_device();\" + NL\n            result += \"  OPTIONAL_STATIC auto context = clblast::Context(device);\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 48,
                  "endLine": 138,
                  "snippet": {
                    "text": "\ndef clblast_netlib_c_cc(routine):\n    \"\"\"The Netlib CBLAS API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n\n        # There is a version available in CBLAS\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n",
                    "rendered": {
                      "text": "\ndef clblast_netlib_c_cc(routine):\n    \"\"\"The Netlib CBLAS API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n\n        # There is a version available in CBLAS\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n",
                      "markdown": "`\ndef clblast_netlib_c_cc(routine):\n    \"\"\"The Netlib CBLAS API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n\n        # There is a version available in CBLAS\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 12,
                  "endLine": 137,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\ndef clblast_netlib_c_cc(routine):\n    \"\"\"The Netlib CBLAS API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n\n        # There is a version available in CBLAS\n",
                    "rendered": {
                      "text": "\ndef clblast_netlib_c_cc(routine):\n    \"\"\"The Netlib CBLAS API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n\n        # There is a version available in CBLAS\n",
                      "markdown": "`\ndef clblast_netlib_c_cc(routine):\n    \"\"\"The Netlib CBLAS API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n\n        # There is a version available in CBLAS\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 87,
                  "endLine": 132,
                  "snippet": {
                    "text": "    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n\ndef clblast_netlib_c_cc(routine):\n",
                    "rendered": {
                      "text": "    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n\ndef clblast_netlib_c_cc(routine):\n",
                      "markdown": "`    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n\ndef clblast_netlib_c_cc(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 78,
                  "endLine": 129,
                  "snippet": {
                    "text": "\ndef clblast_netlib_c_h(routine):\n    \"\"\"The Netlib CBLAS API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n    return result\n",
                    "rendered": {
                      "text": "\ndef clblast_netlib_c_h(routine):\n    \"\"\"The Netlib CBLAS API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n    return result\n",
                      "markdown": "`\ndef clblast_netlib_c_h(routine):\n    \"\"\"The Netlib CBLAS API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 12,
                  "endLine": 128,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\ndef clblast_netlib_c_h(routine):\n    \"\"\"The Netlib CBLAS API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n",
                    "rendered": {
                      "text": "\ndef clblast_netlib_c_h(routine):\n    \"\"\"The Netlib CBLAS API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n",
                      "markdown": "`\ndef clblast_netlib_c_h(routine):\n    \"\"\"The Netlib CBLAS API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        if flavour.precision_name in [\"S\", \"D\", \"C\", \"Z\"]:\n            result += routine.routine_header_netlib(flavour, 20, \" PUBLIC_API\") + \";\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 23,
                  "endLine": 123,
                  "snippet": {
                    "text": "        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n\ndef clblast_netlib_c_h(routine):\n",
                    "rendered": {
                      "text": "        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n\ndef clblast_netlib_c_h(routine):\n",
                      "markdown": "`        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n\ndef clblast_netlib_c_h(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 114,
                  "endLine": 122,
                  "snippet": {
                    "text": "        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n\n",
                      "markdown": "`        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 28,
                  "endLine": 121,
                  "snippet": {
                    "text": "        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n",
                    "rendered": {
                      "text": "        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n",
                      "markdown": "`        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 55,
                  "endLine": 120,
                  "snippet": {
                    "text": "        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n",
                    "rendered": {
                      "text": "        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n",
                      "markdown": "`        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 23,
                  "endLine": 119,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n",
                    "rendered": {
                      "text": "        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n",
                      "markdown": "`        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n        result += \"}\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 24,
                  "endLine": 118,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n",
                    "rendered": {
                      "text": "        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n",
                      "markdown": "`        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n        result += \"  } catch (...) { return static_cast<CLBlastStatusCode>(clblast::DispatchExceptionForC()); }\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 64,
                  "endLine": 117,
                  "snippet": {
                    "text": "        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n",
                    "rendered": {
                      "text": "        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n",
                      "markdown": "`        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n        result += \"    );\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 29,
                  "endLine": 116,
                  "snippet": {
                    "text": "        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n",
                    "rendered": {
                      "text": "        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n",
                      "markdown": "`        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n        result += \",\" + NL + indent + \"queue, event)\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 94,
                  "endLine": 115,
                  "snippet": {
                    "text": "        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n",
                    "rendered": {
                      "text": "        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n",
                      "markdown": "`        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n        result += \"      clblast::\" + routine.capitalized_name() + template + \"(\"\n        result += (\",\" + NL + indent).join([a for a in routine.arguments_cast(flavour, indent)])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 68,
                  "endLine": 113,
                  "snippet": {
                    "text": "    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n",
                    "rendered": {
                      "text": "    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n",
                      "markdown": "`    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n        if routine.batched == 1:\n            result += \"  \" + (NL + \"  \").join(routine.batched_transform_to_complex(flavour)) + NL\n        result += \"  try {\" + NL\n        result += \"    return static_cast<CLBlastStatusCode>(\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 48,
                  "endLine": 109,
                  "snippet": {
                    "text": "\ndef clblast_c_cc(routine):\n    \"\"\"The C API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n",
                    "rendered": {
                      "text": "\ndef clblast_c_cc(routine):\n    \"\"\"The C API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n",
                      "markdown": "`\ndef clblast_c_cc(routine):\n    \"\"\"The C API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n        result += routine.routine_header_c(flavour, 27, \"\") + \" {\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 12,
                  "endLine": 108,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\ndef clblast_c_cc(routine):\n    \"\"\"The C API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n",
                    "rendered": {
                      "text": "\ndef clblast_c_cc(routine):\n    \"\"\"The C API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n",
                      "markdown": "`\ndef clblast_c_cc(routine):\n    \"\"\"The C API implementation (.cpp)\"\"\"\n    result = NL + \"// \" + routine.name.upper() + NL\n    for flavour in routine.flavours:\n        template = \"<\" + flavour.template + \">\" if routine.no_scalars() else \"\"\n        indent = \" \" * (16 + routine.length() + len(template))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 78,
                  "endLine": 103,
                  "snippet": {
                    "text": "    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n\ndef clblast_c_cc(routine):\n",
                    "rendered": {
                      "text": "    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n\ndef clblast_c_cc(routine):\n",
                      "markdown": "`    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n\ndef clblast_c_cc(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 78,
                  "endLine": 101,
                  "snippet": {
                    "text": "\ndef clblast_c_h(routine):\n    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n",
                    "rendered": {
                      "text": "\ndef clblast_c_h(routine):\n    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n",
                      "markdown": "`\ndef clblast_c_h(routine):\n    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 12,
                  "endLine": 100,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\ndef clblast_c_h(routine):\n    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n",
                    "rendered": {
                      "text": "\ndef clblast_c_h(routine):\n    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n",
                      "markdown": "`\ndef clblast_c_h(routine):\n    \"\"\"The C API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 38, \" PUBLIC_API\") + \";\" + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 24,
                  "endLine": 95,
                  "snippet": {
                    "text": "            result += \"cl_command_queue*, cl_event*\"\n            if routine.temp_buffer:\n                result += \", cl_mem\"\n        result += \");\" + NL\n    return result\n\n\ndef clblast_c_h(routine):\n",
                    "rendered": {
                      "text": "            result += \"cl_command_queue*, cl_event*\"\n            if routine.temp_buffer:\n                result += \", cl_mem\"\n        result += \");\" + NL\n    return result\n\n\ndef clblast_c_h(routine):\n",
                      "markdown": "`            result += \"cl_command_queue*, cl_event*\"\n            if routine.temp_buffer:\n                result += \", cl_mem\"\n        result += \");\" + NL\n    return result\n\n\ndef clblast_c_h(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 23,
                  "endLine": 85,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        if cuda:\n            arguments = [a.replace(\"cl_mem\", \"CUdeviceptr\") for a in arguments]\n        result += (\",\" + NL + indent2).join([a for a in arguments])\n        result += \",\" + NL + indent2\n        if cuda:\n            result += \"const CUcontext, const CUdevice\"\n            if routine.temp_buffer:\n",
                    "rendered": {
                      "text": "        if cuda:\n            arguments = [a.replace(\"cl_mem\", \"CUdeviceptr\") for a in arguments]\n        result += (\",\" + NL + indent2).join([a for a in arguments])\n        result += \",\" + NL + indent2\n        if cuda:\n            result += \"const CUcontext, const CUdevice\"\n            if routine.temp_buffer:\n",
                      "markdown": "`        if cuda:\n            arguments = [a.replace(\"cl_mem\", \"CUdeviceptr\") for a in arguments]\n        result += (\",\" + NL + indent2).join([a for a in arguments])\n        result += \",\" + NL + indent2\n        if cuda:\n            result += \"const CUcontext, const CUdevice\"\n            if routine.temp_buffer:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 24,
                  "endLine": 84,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        arguments = routine.arguments_type(flavour)\n        if cuda:\n            arguments = [a.replace(\"cl_mem\", \"CUdeviceptr\") for a in arguments]\n        result += (\",\" + NL + indent2).join([a for a in arguments])\n        result += \",\" + NL + indent2\n        if cuda:\n            result += \"const CUcontext, const CUdevice\"\n",
                    "rendered": {
                      "text": "        arguments = routine.arguments_type(flavour)\n        if cuda:\n            arguments = [a.replace(\"cl_mem\", \"CUdeviceptr\") for a in arguments]\n        result += (\",\" + NL + indent2).join([a for a in arguments])\n        result += \",\" + NL + indent2\n        if cuda:\n            result += \"const CUcontext, const CUdevice\"\n",
                      "markdown": "`        arguments = routine.arguments_type(flavour)\n        if cuda:\n            arguments = [a.replace(\"cl_mem\", \"CUdeviceptr\") for a in arguments]\n        result += (\",\" + NL + indent2).join([a for a in arguments])\n        result += \",\" + NL + indent2\n        if cuda:\n            result += \"const CUcontext, const CUdevice\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 19,
                  "endLine": 78,
                  "snippet": {
                    "text": "    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n        result += \"template StatusCode PUBLIC_API \" + routine.capitalized_name() + \"<\" + flavour.template + \">(\"\n        arguments = routine.arguments_type(flavour)\n",
                    "rendered": {
                      "text": "    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n        result += \"template StatusCode PUBLIC_API \" + routine.capitalized_name() + \"<\" + flavour.template + \">(\"\n        arguments = routine.arguments_type(flavour)\n",
                      "markdown": "`    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n        result += \"template StatusCode PUBLIC_API \" + routine.capitalized_name() + \"<\" + flavour.template + \">(\"\n        arguments = routine.arguments_type(flavour)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 59,
                  "endLine": 77,
                  "snippet": {
                    "text": "        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n        result += \"template StatusCode PUBLIC_API \" + routine.capitalized_name() + \"<\" + flavour.template + \">(\"\n",
                    "rendered": {
                      "text": "        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n        result += \"template StatusCode PUBLIC_API \" + routine.capitalized_name() + \"<\" + flavour.template + \">(\"\n",
                      "markdown": "`        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n        result += \"template StatusCode PUBLIC_API \" + routine.capitalized_name() + \"<\" + flavour.template + \">(\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 68,
                  "endLine": 76,
                  "snippet": {
                    "text": "        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n",
                    "rendered": {
                      "text": "        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n",
                      "markdown": "`        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n    for flavour in routine.flavours:\n        indent2 = \" \" * (34 + routine.length() + len(flavour.template))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 69,
                  "endLine": 74,
                  "snippet": {
                    "text": "            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n",
                    "rendered": {
                      "text": "            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n",
                      "markdown": "`            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n    result += \"}\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 54,
                  "endLine": 73,
                  "snippet": {
                    "text": "        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n",
                    "rendered": {
                      "text": "        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n",
                      "markdown": "`        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n        result += \"  return StatusCode::kNotImplemented;\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 24,
                  "endLine": 72,
                  "snippet": {
                    "text": "        result += (\",\" + NL + indent1).join([a for a in routine.arguments_clcudaapi()])\n        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n",
                    "rendered": {
                      "text": "        result += (\",\" + NL + indent1).join([a for a in routine.arguments_clcudaapi()])\n        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n",
                      "markdown": "`        result += (\",\" + NL + indent1).join([a for a in routine.arguments_clcudaapi()])\n        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n        result += \"    return StatusCode::kSuccess;\" + NL\n        result += \"  } catch (...) { return DispatchException(); }\" + NL\n    else:\n        result += routine.routine_header_type_cpp(12, cuda) + \" {\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 24,
                  "endLine": 68,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            result += \"    const auto temp_buffer_provided = temp_buffer != \" + null + \";\\n\"\n            result += \"    auto temp_buffer_cpp = temp_buffer_provided ? Buffer<T>(temp_buffer) : Buffer<T>(\" + null + \");\\n\"\n        result += \"    routine.Do\" + routine.capitalized_name() + \"(\"\n        result += (\",\" + NL + indent1).join([a for a in routine.arguments_clcudaapi()])\n        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n",
                    "rendered": {
                      "text": "            result += \"    const auto temp_buffer_provided = temp_buffer != \" + null + \";\\n\"\n            result += \"    auto temp_buffer_cpp = temp_buffer_provided ? Buffer<T>(temp_buffer) : Buffer<T>(\" + null + \");\\n\"\n        result += \"    routine.Do\" + routine.capitalized_name() + \"(\"\n        result += (\",\" + NL + indent1).join([a for a in routine.arguments_clcudaapi()])\n        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n",
                      "markdown": "`            result += \"    const auto temp_buffer_provided = temp_buffer != \" + null + \";\\n\"\n            result += \"    auto temp_buffer_cpp = temp_buffer_provided ? Buffer<T>(temp_buffer) : Buffer<T>(\" + null + \");\\n\"\n        result += \"    routine.Do\" + routine.capitalized_name() + \"(\"\n        result += (\",\" + NL + indent1).join([a for a in routine.arguments_clcudaapi()])\n        if routine.temp_buffer:\n            result += \",\\n\" + indent1 + \"temp_buffer_cpp, temp_buffer_provided\"\n        result += \");\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 87,
                  "endLine": 63,
                  "snippet": {
                    "text": "        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n        if routine.temp_buffer:\n            null = \"0\" if cuda else \"nullptr\"\n            result += \"    const auto temp_buffer_provided = temp_buffer != \" + null + \";\\n\"\n            result += \"    auto temp_buffer_cpp = temp_buffer_provided ? Buffer<T>(temp_buffer) : Buffer<T>(\" + null + \");\\n\"\n",
                    "rendered": {
                      "text": "        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n        if routine.temp_buffer:\n            null = \"0\" if cuda else \"nullptr\"\n            result += \"    const auto temp_buffer_provided = temp_buffer != \" + null + \";\\n\"\n            result += \"    auto temp_buffer_cpp = temp_buffer_provided ? Buffer<T>(temp_buffer) : Buffer<T>(\" + null + \");\\n\"\n",
                      "markdown": "`        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n        if routine.temp_buffer:\n            null = \"0\" if cuda else \"nullptr\"\n            result += \"    const auto temp_buffer_provided = temp_buffer != \" + null + \";\\n\"\n            result += \"    auto temp_buffer_cpp = temp_buffer_provided ? Buffer<T>(temp_buffer) : Buffer<T>(\" + null + \");\\n\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 132,
                  "endLine": 61,
                  "snippet": {
                    "text": "        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n        if routine.temp_buffer:\n            null = \"0\" if cuda else \"nullptr\"\n",
                    "rendered": {
                      "text": "        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n        if routine.temp_buffer:\n            null = \"0\" if cuda else \"nullptr\"\n",
                      "markdown": "`        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n        if routine.temp_buffer:\n            null = \"0\" if cuda else \"nullptr\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 61,
                  "endLine": 59,
                  "snippet": {
                    "text": "            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n",
                    "rendered": {
                      "text": "            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n",
                      "markdown": "`            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n        if routine.batched == 1:\n            result += \"    \" + (NL + \"    \").join(routine.batched_transform_to_cpp()) + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 78,
                  "endLine": 57,
                  "snippet": {
                    "text": "        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n",
                    "rendered": {
                      "text": "        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n",
                      "markdown": "`        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n        result += \"    auto routine = X\" + routine.plain_name() + \"<\" + routine.template.template + \">(queue_cpp, \" + event + \");\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 69,
                  "endLine": 56,
                  "snippet": {
                    "text": "        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n",
                    "rendered": {
                      "text": "        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n",
                      "markdown": "`        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n        event = \"nullptr\" if cuda else \"event\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 72,
                  "endLine": 55,
                  "snippet": {
                    "text": "        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n",
                    "rendered": {
                      "text": "        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n",
                      "markdown": "`        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n        else:\n            result += \"    auto queue_cpp = Queue(*queue);\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 29,
                  "endLine": 53,
                  "snippet": {
                    "text": "    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n",
                    "rendered": {
                      "text": "    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n",
                      "markdown": "`    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n            result += \"    auto queue_cpp = Queue(context_cpp, device_cpp);\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 88,
                  "endLine": 52,
                  "snippet": {
                    "text": "    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n",
                    "rendered": {
                      "text": "    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n",
                      "markdown": "`    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n            result += \"    const auto context_cpp = Context(context);\" + NL\n            result += \"    const auto device_cpp = Device(device);\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 78,
                  "endLine": 50,
                  "snippet": {
                    "text": "def clblast_cc(routine, cuda=False):\n    \"\"\"The C++ API implementation (.cpp)\"\"\"\n    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n",
                    "rendered": {
                      "text": "def clblast_cc(routine, cuda=False):\n    \"\"\"The C++ API implementation (.cpp)\"\"\"\n    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n",
                      "markdown": "`def clblast_cc(routine, cuda=False):\n    \"\"\"The C++ API implementation (.cpp)\"\"\"\n    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n        if cuda:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 12,
                  "endLine": 49,
                  "endColumn": 16,
                  "snippet": {
                    "text": "def clblast_cc(routine, cuda=False):\n    \"\"\"The C++ API implementation (.cpp)\"\"\"\n    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n",
                    "rendered": {
                      "text": "def clblast_cc(routine, cuda=False):\n    \"\"\"The C++ API implementation (.cpp)\"\"\"\n    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n",
                      "markdown": "`def clblast_cc(routine, cuda=False):\n    \"\"\"The C++ API implementation (.cpp)\"\"\"\n    indent1 = \" \" * (15 + routine.length())\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    if routine.implemented:\n        result += routine.routine_header_cpp(12, \"\", cuda, implementation=True) + \" {\" + NL\n        result += \"  try {\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 72,
                  "endLine": 43,
                  "snippet": {
                    "text": "def clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n\ndef clblast_cc(routine, cuda=False):\n",
                    "rendered": {
                      "text": "def clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n\ndef clblast_cc(routine, cuda=False):\n",
                      "markdown": "`def clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n\ndef clblast_cc(routine, cuda=False):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 78,
                  "endLine": 42,
                  "snippet": {
                    "text": "\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n\n",
                      "markdown": "`\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 12,
                  "endLine": 41,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n",
                    "rendered": {
                      "text": "\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n",
                      "markdown": "`\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n    result = NL + \"// \" + routine.description + \": \" + routine.short_names() + NL\n    result += routine.routine_header_cpp(12, \" = nullptr\", cuda) + \";\" + NL\n    return result\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 37,
                  "snippet": {
                    "text": "// Author(s):\n//   Cedric Nugteren <www.cedricnugteren.nl>\n//\n\"\"\" + SEPARATOR + NL\n\n\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n",
                    "rendered": {
                      "text": "// Author(s):\n//   Cedric Nugteren <www.cedricnugteren.nl>\n//\n\"\"\" + SEPARATOR + NL\n\n\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n",
                      "markdown": "`// Author(s):\n//   Cedric Nugteren <www.cedricnugteren.nl>\n//\n\"\"\" + SEPARATOR + NL\n\n\ndef clblast_h(routine, cuda=False):\n    \"\"\"The C++ API header (.h)\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n// width of 100 characters per line.\n",
                    "rendered": {
                      "text": "\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n// width of 100 characters per line.\n",
                      "markdown": "`\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n// width of 100 characters per line.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 25,
                  "endLine": 28,
                  "snippet": {
                    "text": "LEVEL_NAMES = [\"1\", \"2\", \"3\", \"x\"]\n\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n// width of 100 characters per line.\n",
                    "rendered": {
                      "text": "LEVEL_NAMES = [\"1\", \"2\", \"3\", \"x\"]\n\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n// width of 100 characters per line.\n",
                      "markdown": "`LEVEL_NAMES = [\"1\", \"2\", \"3\", \"x\"]\n\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n// width of 100 characters per line.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 12,
                  "snippet": {
                    "text": "LEVEL_NAMES = [\"1\", \"2\", \"3\", \"x\"]\n\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n",
                    "rendered": {
                      "text": "LEVEL_NAMES = [\"1\", \"2\", \"3\", \"x\"]\n\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n",
                      "markdown": "`LEVEL_NAMES = [\"1\", \"2\", \"3\", \"x\"]\n\n# Main header/footer for source files\nFOOTER = NL + SEPARATOR + NL\nHEADER = NL + SEPARATOR + \"\"\"\n// This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This\n// project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 66,
                  "endLine": 20,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n",
                    "rendered": {
                      "text": "    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n",
                      "markdown": "`    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n",
                    "rendered": {
                      "text": "    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n",
                      "markdown": "`    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "endLine": 20,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n",
                    "rendered": {
                      "text": "    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n",
                      "markdown": "`    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n# Names of the level sub-folders\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 70,
                  "endLine": 19,
                  "endColumn": 74,
                  "snippet": {
                    "text": "LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n",
                    "rendered": {
                      "text": "LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n",
                      "markdown": "`LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 20,
                  "endLine": 19,
                  "endColumn": 24,
                  "snippet": {
                    "text": "LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n",
                    "rendered": {
                      "text": "LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n",
                      "markdown": "`LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "endLine": 19,
                  "endColumn": 7,
                  "snippet": {
                    "text": "LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n",
                    "rendered": {
                      "text": "LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n",
                      "markdown": "`LEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 70,
                  "endLine": 18,
                  "endColumn": 74,
                  "snippet": {
                    "text": "# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n",
                    "rendered": {
                      "text": "# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n",
                      "markdown": "`# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 20,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n",
                    "rendered": {
                      "text": "# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n",
                      "markdown": "`# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 3,
                  "endLine": 18,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n",
                    "rendered": {
                      "text": "# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n",
                      "markdown": "`# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 70,
                  "endLine": 17,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n",
                    "rendered": {
                      "text": "\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n",
                      "markdown": "`\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 20,
                  "endLine": 17,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n",
                    "rendered": {
                      "text": "\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n",
                      "markdown": "`\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n",
                    "rendered": {
                      "text": "\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n",
                      "markdown": "`\n# Separators for the BLAS levels\nLEVEL_SEPARATORS = [\n    NL + SEPARATOR + NL + \"// BLAS level-1 (vector-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-2 (matrix-vector) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// BLAS level-3 (matrix-matrix) routines\" + NL + SEPARATOR,\n    NL + SEPARATOR + NL + \"// Extra non-BLAS routines (level-X)\" + NL + SEPARATOR\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/cpp.py"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 12,
                  "endColumn": 3,
                  "snippet": {
                    "text": "import generator.datatype as datatype\nimport generator.convert as convert\n\n\nNL = \"\\n\"\nSEPARATOR = \"// =================================================================================================\"\n\n# Separators for the BLAS levels\n",
                    "rendered": {
                      "text": "import generator.datatype as datatype\nimport generator.convert as convert\n\n\nNL = \"\\n\"\nSEPARATOR = \"// =================================================================================================\"\n\n# Separators for the BLAS levels\n",
                      "markdown": "`import generator.datatype as datatype\nimport generator.convert as convert\n\n\nNL = \"\\n\"\nSEPARATOR = \"// =================================================================================================\"\n\n# Separators for the BLAS levels\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 63,
                  "endLine": 189,
                  "endColumn": 72,
                  "snippet": {
                    "text": "Version 0.10.0\n- Updated to version 8.0 of the CLCudaAPI C++11 OpenCL header\n- Changed the enums in the C API to avoid potential name clashes with external code\n- Added a Netlib CBLAS compatible API (not recommended for full control over performance)\n- Greatly improved the way exceptions are handled in the library (thanks to 'intelfx')\n- Improved performance of GEMM kernels for small sizes by using a direct single-kernel implementation\n- Fixed a bug in the tests and samples related to waiting for an invalid event\n",
                    "rendered": {
                      "text": "Version 0.10.0\n- Updated to version 8.0 of the CLCudaAPI C++11 OpenCL header\n- Changed the enums in the C API to avoid potential name clashes with external code\n- Added a Netlib CBLAS compatible API (not recommended for full control over performance)\n- Greatly improved the way exceptions are handled in the library (thanks to 'intelfx')\n- Improved performance of GEMM kernels for small sizes by using a direct single-kernel implementation\n- Fixed a bug in the tests and samples related to waiting for an invalid event\n",
                      "markdown": "`Version 0.10.0\n- Updated to version 8.0 of the CLCudaAPI C++11 OpenCL header\n- Changed the enums in the C API to avoid potential name clashes with external code\n- Added a Netlib CBLAS compatible API (not recommended for full control over performance)\n- Greatly improved the way exceptions are handled in the library (thanks to 'intelfx')\n- Improved performance of GEMM kernels for small sizes by using a direct single-kernel implementation\n- Fixed a bug in the tests and samples related to waiting for an invalid event\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 78,
                  "endLine": 170,
                  "endColumn": 82,
                  "snippet": {
                    "text": "- Fixed a bug having to re-create the binary even if it was in the cache\n- Fixed a bug when using offsets in the direct version of the GEMM kernels\n- Fixed a missing cl_khr_fp64 when running double-precision on Intel CPUs\n- Fixed tests on Apple's CPU OpenCL implementation; still not fast but correct at least\n- Fixed bugs in the half-precision routines HTBMV/HTPMV/HTRMV/HSYR2K/HTRMM\n- Tests now also exit with an error code when OpenCL errors or compilation errors occur\n- Tests now also check for the L2 error in case of half-precision\n",
                    "rendered": {
                      "text": "- Fixed a bug having to re-create the binary even if it was in the cache\n- Fixed a bug when using offsets in the direct version of the GEMM kernels\n- Fixed a missing cl_khr_fp64 when running double-precision on Intel CPUs\n- Fixed tests on Apple's CPU OpenCL implementation; still not fast but correct at least\n- Fixed bugs in the half-precision routines HTBMV/HTPMV/HTRMV/HSYR2K/HTRMM\n- Tests now also exit with an error code when OpenCL errors or compilation errors occur\n- Tests now also check for the L2 error in case of half-precision\n",
                      "markdown": "`- Fixed a bug having to re-create the binary even if it was in the cache\n- Fixed a bug when using offsets in the direct version of the GEMM kernels\n- Fixed a missing cl_khr_fp64 when running double-precision on Intel CPUs\n- Fixed tests on Apple's CPU OpenCL implementation; still not fast but correct at least\n- Fixed bugs in the half-precision routines HTBMV/HTPMV/HTRMV/HSYR2K/HTRMM\n- Tests now also exit with an error code when OpenCL errors or compilation errors occur\n- Tests now also check for the L2 error in case of half-precision\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 38,
                  "endLine": 158,
                  "endColumn": 42,
                  "snippet": {
                    "text": "- Fixed a bug in the direct version of the GEMM kernel\n- Fixed several warnings for MSVC and Clang\n- Added support for Mesa Clover and AMD's ROCm by making the inline keyword optional in kernels\n- Performance reports are now external at https://cnugteren.github.io/clblast\n- Greatly improved compilation time of database.cpp\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n",
                    "rendered": {
                      "text": "- Fixed a bug in the direct version of the GEMM kernel\n- Fixed several warnings for MSVC and Clang\n- Added support for Mesa Clover and AMD's ROCm by making the inline keyword optional in kernels\n- Performance reports are now external at https://cnugteren.github.io/clblast\n- Greatly improved compilation time of database.cpp\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n",
                      "markdown": "`- Fixed a bug in the direct version of the GEMM kernel\n- Fixed several warnings for MSVC and Clang\n- Added support for Mesa Clover and AMD's ROCm by making the inline keyword optional in kernels\n- Performance reports are now external at https://cnugteren.github.io/clblast\n- Greatly improved compilation time of database.cpp\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 1,
                  "endLine": 46,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- Fix a correctness issue with DGEMM on SM 7.5 Turing GPUs\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see doc/tuning.md)\n- Update cl.hpp to the new opencl.hpp header in the samples\n- Changed the complex sum routine to return the complex sum instead of the absolute complex sum.\n\nVersion 1.5.2\n",
                    "rendered": {
                      "text": "- Fix a correctness issue with DGEMM on SM 7.5 Turing GPUs\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see doc/tuning.md)\n- Update cl.hpp to the new opencl.hpp header in the samples\n- Changed the complex sum routine to return the complex sum instead of the absolute complex sum.\n\nVersion 1.5.2\n",
                      "markdown": "`- Fix a correctness issue with DGEMM on SM 7.5 Turing GPUs\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see doc/tuning.md)\n- Update cl.hpp to the new opencl.hpp header in the samples\n- Changed the complex sum routine to return the complex sum instead of the absolute complex sum.\n\nVersion 1.5.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 21,
                  "endLine": 278,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nVersion 0.5.0\n- Improved structure and performance of level-2 routines (xSYMV/xHEMV)\n- Reduced compilation time of level-3 OpenCL kernels\n- Added level-1 routines:\n  * SSWAP/DSWAP/CSWAP/ZSWAP\n  * SSCAL/DSCAL/CSCAL/ZSCAL\n",
                    "rendered": {
                      "text": "\nVersion 0.5.0\n- Improved structure and performance of level-2 routines (xSYMV/xHEMV)\n- Reduced compilation time of level-3 OpenCL kernels\n- Added level-1 routines:\n  * SSWAP/DSWAP/CSWAP/ZSWAP\n  * SSCAL/DSCAL/CSCAL/ZSCAL\n",
                      "markdown": "`\nVersion 0.5.0\n- Improved structure and performance of level-2 routines (xSYMV/xHEMV)\n- Reduced compilation time of level-3 OpenCL kernels\n- Added level-1 routines:\n  * SSWAP/DSWAP/CSWAP/ZSWAP\n  * SSCAL/DSCAL/CSCAL/ZSCAL\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 47,
                  "endLine": 243,
                  "endColumn": 52,
                  "snippet": {
                    "text": "Version 0.7.0\n- Added exports to be able to create a DLL on Windows (thanks to Marco Hutter)\n- Made the library thread-safe\n- Performance and correctness tests can now (on top of clBLAS) be performed against CPU BLAS libraries\n- Fixed the use of events within the library\n- Changed the enum parameters to match the raw values of the cblas standard\n- Fixed the cache of previously compiled binaries and added a function to fill or clear it\n",
                    "rendered": {
                      "text": "Version 0.7.0\n- Added exports to be able to create a DLL on Windows (thanks to Marco Hutter)\n- Made the library thread-safe\n- Performance and correctness tests can now (on top of clBLAS) be performed against CPU BLAS libraries\n- Fixed the use of events within the library\n- Changed the enum parameters to match the raw values of the cblas standard\n- Fixed the cache of previously compiled binaries and added a function to fill or clear it\n",
                      "markdown": "`Version 0.7.0\n- Added exports to be able to create a DLL on Windows (thanks to Marco Hutter)\n- Made the library thread-safe\n- Performance and correctness tests can now (on top of clBLAS) be performed against CPU BLAS libraries\n- Fixed the use of events within the library\n- Changed the enum parameters to match the raw values of the cblas standard\n- Fixed the cache of previously compiled binaries and added a function to fill or clear it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 60,
                  "endLine": 196,
                  "endColumn": 65,
                  "snippet": {
                    "text": "- Fixed a bug in the SYRK/SYR2K/HERK/HER2K routines that would occur with specific tuning parameters\n- Fixed a bug in the TRMM routine that would overwrite input data before consuming everything\n- Added support for compilation under Visual Studio 2013 (MSVC++ 12.0)\n- Added an option to set OpenCL compiler options through the env variable CLBLAST_BUILD_OPTIONS\n- Added an option to run tuned kernels multiple times to average execution times\n- Added an option to build a static version of the library\n- Made it possible to use the command-line environmental vars everywhere and without re-running CMake\n",
                    "rendered": {
                      "text": "- Fixed a bug in the SYRK/SYR2K/HERK/HER2K routines that would occur with specific tuning parameters\n- Fixed a bug in the TRMM routine that would overwrite input data before consuming everything\n- Added support for compilation under Visual Studio 2013 (MSVC++ 12.0)\n- Added an option to set OpenCL compiler options through the env variable CLBLAST_BUILD_OPTIONS\n- Added an option to run tuned kernels multiple times to average execution times\n- Added an option to build a static version of the library\n- Made it possible to use the command-line environmental vars everywhere and without re-running CMake\n",
                      "markdown": "`- Fixed a bug in the SYRK/SYR2K/HERK/HER2K routines that would occur with specific tuning parameters\n- Fixed a bug in the TRMM routine that would overwrite input data before consuming everything\n- Added support for compilation under Visual Studio 2013 (MSVC++ 12.0)\n- Added an option to set OpenCL compiler options through the env variable CLBLAST_BUILD_OPTIONS\n- Added an option to run tuned kernels multiple times to average execution times\n- Added an option to build a static version of the library\n- Made it possible to use the command-line environmental vars everywhere and without re-running CMake\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 30,
                  "endLine": 159,
                  "endColumn": 36,
                  "snippet": {
                    "text": "- Fixed several warnings for MSVC and Clang\n- Added support for Mesa Clover and AMD's ROCm by making the inline keyword optional in kernels\n- Performance reports are now external at https://cnugteren.github.io/clblast\n- Greatly improved compilation time of database.cpp\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n- Added non-BLAS level-1 routines:\n",
                    "rendered": {
                      "text": "- Fixed several warnings for MSVC and Clang\n- Added support for Mesa Clover and AMD's ROCm by making the inline keyword optional in kernels\n- Performance reports are now external at https://cnugteren.github.io/clblast\n- Greatly improved compilation time of database.cpp\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n- Added non-BLAS level-1 routines:\n",
                      "markdown": "`- Fixed several warnings for MSVC and Clang\n- Added support for Mesa Clover and AMD's ROCm by making the inline keyword optional in kernels\n- Performance reports are now external at https://cnugteren.github.io/clblast\n- Greatly improved compilation time of database.cpp\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n- Added non-BLAS level-1 routines:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 30,
                  "endLine": 142,
                  "endColumn": 36,
                  "snippet": {
                    "text": "- The tuners can now distinguish between different AMD GPU board names of the same architecture\n- The tuners can now use particle-swarm optimisation to search more efficiently (thanks to 'mcian')\n- Improved performance for small problems on NVIDIA hardware by caching the device name\n- Further improved compilation time of database.cpp\n- Added a small diagnostics helper executable\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n",
                    "rendered": {
                      "text": "- The tuners can now distinguish between different AMD GPU board names of the same architecture\n- The tuners can now use particle-swarm optimisation to search more efficiently (thanks to 'mcian')\n- Improved performance for small problems on NVIDIA hardware by caching the device name\n- Further improved compilation time of database.cpp\n- Added a small diagnostics helper executable\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n",
                      "markdown": "`- The tuners can now distinguish between different AMD GPU board names of the same architecture\n- The tuners can now use particle-swarm optimisation to search more efficiently (thanks to 'mcian')\n- Improved performance for small problems on NVIDIA hardware by caching the device name\n- Further improved compilation time of database.cpp\n- Added a small diagnostics helper executable\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 22,
                  "endLine": 114,
                  "endColumn": 28,
                  "snippet": {
                    "text": "- Added first tuners for the TRSV (block size) and TRSM (invert kernel) routines\n- Added an optional argument to the GEMM routine to provide a pre-allocated temporary buffer\n- Fixed an issue with a crashing/hanging AMD APP compiler with the TRSM routine (invert kernel)\n- Improved compilation time by splitting the tuning database into multiple compilation units\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n- Added the RetrieveParameters function to the API to be able to inspect the tuning parameters\n",
                    "rendered": {
                      "text": "- Added first tuners for the TRSV (block size) and TRSM (invert kernel) routines\n- Added an optional argument to the GEMM routine to provide a pre-allocated temporary buffer\n- Fixed an issue with a crashing/hanging AMD APP compiler with the TRSM routine (invert kernel)\n- Improved compilation time by splitting the tuning database into multiple compilation units\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n- Added the RetrieveParameters function to the API to be able to inspect the tuning parameters\n",
                      "markdown": "`- Added first tuners for the TRSV (block size) and TRSM (invert kernel) routines\n- Added an optional argument to the GEMM routine to provide a pre-allocated temporary buffer\n- Fixed an issue with a crashing/hanging AMD APP compiler with the TRSM routine (invert kernel)\n- Improved compilation time by splitting the tuning database into multiple compilation units\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see README)\n- Added the RetrieveParameters function to the API to be able to inspect the tuning parameters\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 45,
                  "endLine": 53,
                  "endColumn": 53,
                  "snippet": {
                    "text": "- Changed XAMAX/XAMIN to more likely return first rather than last min/max index, updated API docs\n- Added batched routines to pyclblast\n- Added CLBLAST_VERSION_MAJOR/MINOR/PATCH defines in headers to store version numbering\n- Several small improvements to the benchmark script (thanks to 'baryluk')\n- Fixed a bug in the caching when using a context with multiple devices\n- Fixed a bug in the tuners related to global workgroup size not being a multiple of the local\n- Various minor fixes and enhancements\n",
                    "rendered": {
                      "text": "- Changed XAMAX/XAMIN to more likely return first rather than last min/max index, updated API docs\n- Added batched routines to pyclblast\n- Added CLBLAST_VERSION_MAJOR/MINOR/PATCH defines in headers to store version numbering\n- Several small improvements to the benchmark script (thanks to 'baryluk')\n- Fixed a bug in the caching when using a context with multiple devices\n- Fixed a bug in the tuners related to global workgroup size not being a multiple of the local\n- Various minor fixes and enhancements\n",
                      "markdown": "`- Changed XAMAX/XAMIN to more likely return first rather than last min/max index, updated API docs\n- Added batched routines to pyclblast\n- Added CLBLAST_VERSION_MAJOR/MINOR/PATCH defines in headers to store version numbering\n- Several small improvements to the benchmark script (thanks to 'baryluk')\n- Fixed a bug in the caching when using a context with multiple devices\n- Fixed a bug in the tuners related to global workgroup size not being a multiple of the local\n- Various minor fixes and enhancements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 37,
                  "snippet": {
                    "text": "- Fixed a bug that caused tests to not properly do integer-output testing (for XAMAX/XAMIN)\n- Fixes a minor issue with the expected input buffer size in the TRMV/TBMV/TPMV/TRSV routines\n- Fixes an issue with crashes on Android related to calling clReleaseProgram\n- Fixes two small issues in the plotting script\n- Fixed a documentation bug in the 'ld' requirements\n- Enabled Github Actions CI builds for testing and releasing\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see doc/tuning.md)\n",
                    "rendered": {
                      "text": "- Fixed a bug that caused tests to not properly do integer-output testing (for XAMAX/XAMIN)\n- Fixes a minor issue with the expected input buffer size in the TRMV/TBMV/TPMV/TRSV routines\n- Fixes an issue with crashes on Android related to calling clReleaseProgram\n- Fixes two small issues in the plotting script\n- Fixed a documentation bug in the 'ld' requirements\n- Enabled Github Actions CI builds for testing and releasing\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see doc/tuning.md)\n",
                      "markdown": "`- Fixed a bug that caused tests to not properly do integer-output testing (for XAMAX/XAMIN)\n- Fixes a minor issue with the expected input buffer size in the TRMV/TBMV/TPMV/TRSV routines\n- Fixes an issue with crashes on Android related to calling clReleaseProgram\n- Fixes two small issues in the plotting script\n- Fixed a documentation bug in the 'ld' requirements\n- Enabled Github Actions CI builds for testing and releasing\n- Various minor fixes and enhancements\n- Added tuned parameters for various devices (see doc/tuning.md)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/CHANGELOG"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 11,
                  "endLine": 17,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  * Amax/amin, max/min routines accept unsigned integer buffers for index\n  * Switch to pyproject.toml file for installing Python bindings\n  * Build Python bindings using Cmake, adding Windows support\n- Generator script now always use LF endings, independent of the platform\n- Added tuned parameters for many devices (see doc/tuning.md)\n\nVersion 1.6.1\n",
                    "rendered": {
                      "text": "  * Amax/amin, max/min routines accept unsigned integer buffers for index\n  * Switch to pyproject.toml file for installing Python bindings\n  * Build Python bindings using Cmake, adding Windows support\n- Generator script now always use LF endings, independent of the platform\n- Added tuned parameters for many devices (see doc/tuning.md)\n\nVersion 1.6.1\n",
                      "markdown": "`  * Amax/amin, max/min routines accept unsigned integer buffers for index\n  * Switch to pyproject.toml file for installing Python bindings\n  * Build Python bindings using Cmake, adding Windows support\n- Generator script now always use LF endings, independent of the platform\n- Added tuned parameters for many devices (see doc/tuning.md)\n\nVersion 1.6.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 431,
                  "endLine": 147,
                  "endColumn": 435,
                  "snippet": {
                    "text": "on-demand website](http://on-demand.gputechconf.com/gtc/2017/video/s7280-nugteren-clblast.mp4) (poor audio quality however) and a full slide-set is also available [as PDF](http://on-demand.gputechconf.com/gtc/2017/presentation/s7280-cedric-nugteren-clblast.pdf). An updated version was also presented at IWOCL in May 2018. The slide set can be found [here as PDF](https://cnugteren.github.io/downloads/CLBlastIWOCL18.pdf).\n* More in-depth information and experimental results are also available in a scientific paper titled [CLBlast: A Tuned OpenCL BLAS Library](https://arxiv.org/abs/1705.05249) (v1 May",
                    "rendered": {
                      "text": "on-demand website](http://on-demand.gputechconf.com/gtc/2017/video/s7280-nugteren-clblast.mp4) (poor audio quality however) and a full slide-set is also available [as PDF](http://on-demand.gputechconf.com/gtc/2017/presentation/s7280-cedric-nugteren-clblast.pdf). An updated version was also presented at IWOCL in May 2018. The slide set can be found [here as PDF](https://cnugteren.github.io/downloads/CLBlastIWOCL18.pdf).\n* More in-depth information and experimental results are also available in a scientific paper titled [CLBlast: A Tuned OpenCL BLAS Library](https://arxiv.org/abs/1705.05249) (v1 May",
                      "markdown": "`on-demand website](http://on-demand.gputechconf.com/gtc/2017/video/s7280-nugteren-clblast.mp4) (poor audio quality however) and a full slide-set is also available [as PDF](http://on-demand.gputechconf.com/gtc/2017/presentation/s7280-cedric-nugteren-clblast.pdf). An updated version was also presented at IWOCL in May 2018. The slide set can be found [here as PDF](https://cnugteren.github.io/downloads/CLBlastIWOCL18.pdf).\n* More in-depth information and experimental results are also available in a scientific paper titled [CLBlast: A Tuned OpenCL BLAS Library](https://arxiv.org/abs/1705.05249) (v1 May`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 47,
                  "endLine": 147,
                  "endColumn": 51,
                  "snippet": {
                    "text": "eren/CLBlast/branches) and [AppVeyor](https://ci.appveyor.com/project/CNugteren/clblast) for free automated build tests for open-source projects\n\n\nMore information\n-------------\n\nFurther information on CLBlast is available through the following links:\n\n* A 20-minute presentation of CLBlast was given at the GPU Technology Conference in May 2017. A recording is available on the [GTC on-demand website](http://on-demand.gputechconf.com/gtc/2017/video/s7280-nugteren-clblast.mp4) (poor audio quality however) and a full slide-set is also available [as PDF](http://on-demand.gputechconf.com/gtc/2017/presen",
                    "rendered": {
                      "text": "eren/CLBlast/branches) and [AppVeyor](https://ci.appveyor.com/project/CNugteren/clblast) for free automated build tests for open-source projects\n\n\nMore information\n-------------\n\nFurther information on CLBlast is available through the following links:\n\n* A 20-minute presentation of CLBlast was given at the GPU Technology Conference in May 2017. A recording is available on the [GTC on-demand website](http://on-demand.gputechconf.com/gtc/2017/video/s7280-nugteren-clblast.mp4) (poor audio quality however) and a full slide-set is also available [as PDF](http://on-demand.gputechconf.com/gtc/2017/presen",
                      "markdown": "`eren/CLBlast/branches) and [AppVeyor](https://ci.appveyor.com/project/CNugteren/clblast) for free automated build tests for open-source projects\n\n\nMore information\n-------------\n\nFurther information on CLBlast is available through the following links:\n\n* A 20-minute presentation of CLBlast was given at the GPU Technology Conference in May 2017. A recording is available on the [GTC on-demand website](http://on-demand.gputechconf.com/gtc/2017/video/s7280-nugteren-clblast.mp4) (poor audio quality however) and a full slide-set is also available [as PDF](http://on-demand.gputechconf.com/gtc/2017/presen`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/README.md"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 21,
                  "endLine": 136,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\nHardware/software for this project was contributed by:\n\n* [HPC research group at the University of Bristol](http://uob-hpc.github.io/zoo/) for access to their GPU zoo\n* [ArrayFire](http://arrayfire.org) for settings up and supporting Buildbot correctness tests on multiple platforms\n* [JetBrains](https://www.jetbrains.com/clion/) for supply a free CLion IDE license for CLBlast developers\n* [Travis CI](https://travis-ci.org/CNugteren/CLBlast/branches) and [AppVeyor](https://ci.appveyor.com/project/CNugteren/clblast) for free automated build tests for open-source projects\n",
                    "rendered": {
                      "text": "\nHardware/software for this project was contributed by:\n\n* [HPC research group at the University of Bristol](http://uob-hpc.github.io/zoo/) for access to their GPU zoo\n* [ArrayFire](http://arrayfire.org) for settings up and supporting Buildbot correctness tests on multiple platforms\n* [JetBrains](https://www.jetbrains.com/clion/) for supply a free CLion IDE license for CLBlast developers\n* [Travis CI](https://travis-ci.org/CNugteren/CLBlast/branches) and [AppVeyor](https://ci.appveyor.com/project/CNugteren/clblast) for free automated build tests for open-source projects\n",
                      "markdown": "`\nHardware/software for this project was contributed by:\n\n* [HPC research group at the University of Bristol](http://uob-hpc.github.io/zoo/) for access to their GPU zoo\n* [ArrayFire](http://arrayfire.org) for settings up and supporting Buildbot correctness tests on multiple platforms\n* [JetBrains](https://www.jetbrains.com/clion/) for supply a free CLion IDE license for CLBlast developers\n* [Travis CI](https://travis-ci.org/CNugteren/CLBlast/branches) and [AppVeyor](https://ci.appveyor.com/project/CNugteren/clblast) for free automated build tests for open-source projects\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/README.md"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 125,
                  "endLine": 63,
                  "endColumn": 134,
                  "snippet": {
                    "text": "\nDetailed instructions for various platforms can be found are [here](doc/installation.md).\n\nLike clBLAS and cuBLAS, CLBlast also requires OpenCL device buffers as arguments to its routines. This means you'll have full control over the OpenCL buffers and the host-device memory transfers. CLBlast's API is designed to resemble clBLAS's C API as much as possible, requiring little integration effort in case clBLAS was previously used. Using CLBlast starts by including the C++ header:\n\n    #include <clblast.h>\n\n",
                    "rendered": {
                      "text": "\nDetailed instructions for various platforms can be found are [here](doc/installation.md).\n\nLike clBLAS and cuBLAS, CLBlast also requires OpenCL device buffers as arguments to its routines. This means you'll have full control over the OpenCL buffers and the host-device memory transfers. CLBlast's API is designed to resemble clBLAS's C API as much as possible, requiring little integration effort in case clBLAS was previously used. Using CLBlast starts by including the C++ header:\n\n    #include <clblast.h>\n\n",
                      "markdown": "`\nDetailed instructions for various platforms can be found are [here](doc/installation.md).\n\nLike clBLAS and cuBLAS, CLBlast also requires OpenCL device buffers as arguments to its routines. This means you'll have full control over the OpenCL buffers and the host-device memory transfers. CLBlast's API is designed to resemble clBLAS's C API as much as possible, requiring little integration effort in case clBLAS was previously used. Using CLBlast starts by including the C++ header:\n\n    #include <clblast.h>\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/README.md"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 133,
                  "endLine": 159,
                  "endColumn": 139,
                  "snippet": {
                    "text": "Support us\n-------------\n\nThis project started in March 2015 as an evenings and weekends free-time project next to a full-time job for Cedric Nugteren. You can find contact information on the [website of the main author](http://cnugteren.github.io).\n",
                    "rendered": {
                      "text": "Support us\n-------------\n\nThis project started in March 2015 as an evenings and weekends free-time project next to a full-time job for Cedric Nugteren. You can find contact information on the [website of the main author](http://cnugteren.github.io).\n",
                      "markdown": "`Support us\n-------------\n\nThis project started in March 2015 as an evenings and weekends free-time project next to a full-time job for Cedric Nugteren. You can find contact information on the [website of the main author](http://cnugteren.github.io).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/routines.md"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 652,
                  "endLine": 105,
                  "endColumn": 656,
                  "snippet": {
                    "text": "rmance of e.g. level-3 routines such as GEMM. Devices which can benefit from this are among others Intel GPUs, ARM Mali GPUs, and NVIDIA's latest Pascal GPUs. Half-precision is in particular interest for the deep-learning community, in which convolutional neural networks can be processed much faster at a minor accuracy loss.\n\nSince there is no half-precision data-type in C or C++, OpenCL provides the `cl_half` type for the host device. Unfortunately, internally this translates to a 16-bits integer, so computations on the host using this data-type should be avoided. For convenience, CLBlast provide",
                    "rendered": {
                      "text": "rmance of e.g. level-3 routines such as GEMM. Devices which can benefit from this are among others Intel GPUs, ARM Mali GPUs, and NVIDIA's latest Pascal GPUs. Half-precision is in particular interest for the deep-learning community, in which convolutional neural networks can be processed much faster at a minor accuracy loss.\n\nSince there is no half-precision data-type in C or C++, OpenCL provides the `cl_half` type for the host device. Unfortunately, internally this translates to a 16-bits integer, so computations on the host using this data-type should be avoided. For convenience, CLBlast provide",
                      "markdown": "`rmance of e.g. level-3 routines such as GEMM. Devices which can benefit from this are among others Intel GPUs, ARM Mali GPUs, and NVIDIA's latest Pascal GPUs. Half-precision is in particular interest for the deep-learning community, in which convolutional neural networks can be processed much faster at a minor accuracy loss.\n\nSince there is no half-precision data-type in C or C++, OpenCL provides the `cl_half` type for the host device. Unfortunately, internally this translates to a 16-bits integer, so computations on the host using this data-type should be avoided. For convenience, CLBlast provide`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/routines.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 232,
                  "endLine": 24,
                  "endColumn": 236,
                  "snippet": {
                    "text": "Supported routines\n-------------\n\nCLBlast supports almost all the Netlib BLAS routines plus a couple of extra non-BLAS routines. The supported BLAS routines are marked with '✔' in the following tables. Routines marked with '-' do not exist: they are not part of BLAS at all.\n\n| Level-1  | S | D | C | Z | H |\n| ---------|---|---|---|---|---|\n",
                    "rendered": {
                      "text": "Supported routines\n-------------\n\nCLBlast supports almost all the Netlib BLAS routines plus a couple of extra non-BLAS routines. The supported BLAS routines are marked with '✔' in the following tables. Routines marked with '-' do not exist: they are not part of BLAS at all.\n\n| Level-1  | S | D | C | Z | H |\n| ---------|---|---|---|---|---|\n",
                      "markdown": "`Supported routines\n-------------\n\nCLBlast supports almost all the Netlib BLAS routines plus a couple of extra non-BLAS routines. The supported BLAS routines are marked with '✔' in the following tables. Routines marked with '-' do not exist: they are not part of BLAS at all.\n\n| Level-1  | S | D | C | Z | H |\n| ---------|---|---|---|---|---|\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/benchmarking.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 208,
                  "endLine": 24,
                  "endColumn": 214,
                  "snippet": {
                    "text": "\n    python ../scripts/benchmark/benchmark.py --platform 0 --device 1 --benchmark gemm\n\nNote that the CLBlast library provides pre-tuned parameter-values for some devices only: if your device is not among these, then out-of-the-box performance might be poor. See the [tuning README](tuning.md) to find out how to tune for your device.\n\nIn case performance is still sub-optimal or something else is wrong, CLBlast can be build in verbose mode for (performance) debugging by specifying `-DVERBOSE=ON` to CMake.\n",
                    "rendered": {
                      "text": "\n    python ../scripts/benchmark/benchmark.py --platform 0 --device 1 --benchmark gemm\n\nNote that the CLBlast library provides pre-tuned parameter-values for some devices only: if your device is not among these, then out-of-the-box performance might be poor. See the [tuning README](tuning.md) to find out how to tune for your device.\n\nIn case performance is still sub-optimal or something else is wrong, CLBlast can be build in verbose mode for (performance) debugging by specifying `-DVERBOSE=ON` to CMake.\n",
                      "markdown": "`\n    python ../scripts/benchmark/benchmark.py --platform 0 --device 1 --benchmark gemm\n\nNote that the CLBlast library provides pre-tuned parameter-values for some devices only: if your device is not among these, then out-of-the-box performance might be poor. See the [tuning README](tuning.md) to find out how to tune for your device.\n\nIn case performance is still sub-optimal or something else is wrong, CLBlast can be build in verbose mode for (performance) debugging by specifying `-DVERBOSE=ON` to CMake.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/doc/benchmarking.md"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 70,
                  "endLine": 20,
                  "endColumn": 76,
                  "snippet": {
                    "text": " a head-to-head performance test against optionally clBLAS and/or a CPU BLAS library. You can use the command-line options `-clblas 1`, `-cblas 1`, or `-cublas 1` to select a library to test against.\n\n\nBenchmarking\n-------------\n\nOn [the CLBlast website](https://cnugteren.github.io/clblast) you will find performance results for various devices. Performance is compared in this case against a tuned version of the clBLAS library and optionally also against cuBLAS. Such graphs can be generated automatically on your own device as well. First, compile CLBlast with the clients enabled (see above). Then, ma",
                    "rendered": {
                      "text": " a head-to-head performance test against optionally clBLAS and/or a CPU BLAS library. You can use the command-line options `-clblas 1`, `-cblas 1`, or `-cublas 1` to select a library to test against.\n\n\nBenchmarking\n-------------\n\nOn [the CLBlast website](https://cnugteren.github.io/clblast) you will find performance results for various devices. Performance is compared in this case against a tuned version of the clBLAS library and optionally also against cuBLAS. Such graphs can be generated automatically on your own device as well. First, compile CLBlast with the clients enabled (see above). Then, ma",
                      "markdown": "` a head-to-head performance test against optionally clBLAS and/or a CPU BLAS library. You can use the command-line options `-clblas 1`, `-cblas 1`, or `-cublas 1` to select a library to test against.\n\n\nBenchmarking\n-------------\n\nOn [the CLBlast website](https://cnugteren.github.io/clblast) you will find performance results for various devices. Performance is compared in this case against a tuned version of the clBLAS library and optionally also against cuBLAS. Such graphs can be generated automatically on your own device as well. First, compile CLBlast with the clients enabled (see above). Then, ma`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/samples/sgemm.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 35,
                  "endLine": 38,
                  "endColumn": 40,
                  "snippet": {
                    "text": "print(\"# Example level-3 operation: GEMM\")\npyclblast.gemm(queue, m, n, k, cla, clb, clc, a_ld=k, b_ld=n, c_ld=n)\nqueue.finish()\nprint(\"# Matrix C result: %s\" % clc.get())\nprint(\"# Expected result: %s\" % (np.dot(a, b)))\n",
                    "rendered": {
                      "text": "print(\"# Example level-3 operation: GEMM\")\npyclblast.gemm(queue, m, n, k, cla, clb, clc, a_ld=k, b_ld=n, c_ld=n)\nqueue.finish()\nprint(\"# Matrix C result: %s\" % clc.get())\nprint(\"# Expected result: %s\" % (np.dot(a, b)))\n",
                      "markdown": "`print(\"# Example level-3 operation: GEMM\")\npyclblast.gemm(queue, m, n, k, cla, clb, clc, a_ld=k, b_ld=n, c_ld=n)\nqueue.finish()\nprint(\"# Matrix C result: %s\" % clc.get())\nprint(\"# Expected result: %s\" % (np.dot(a, b)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/samples/override_parameters.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 30,
                  "endLine": 42,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        params[\"MWG\"] = mwg\n        pyclblast.override_parameters(ctx.devices[0], 'Xgemm', 32, params)\n        pyclblast.gemm(queue, m, n, k, cla, clb, clc, a_ld=k, b_ld=n, c_ld=n)\n        assert np.allclose(clc.get(), a.dot(b)), \"uh-oh, xgemm isn't behaving correctly\"\n",
                    "rendered": {
                      "text": "        params[\"MWG\"] = mwg\n        pyclblast.override_parameters(ctx.devices[0], 'Xgemm', 32, params)\n        pyclblast.gemm(queue, m, n, k, cla, clb, clc, a_ld=k, b_ld=n, c_ld=n)\n        assert np.allclose(clc.get(), a.dot(b)), \"uh-oh, xgemm isn't behaving correctly\"\n",
                      "markdown": "`        params[\"MWG\"] = mwg\n        pyclblast.override_parameters(ctx.devices[0], 'Xgemm', 32, params)\n        pyclblast.gemm(queue, m, n, k, cla, clb, clc, a_ld=k, b_ld=n, c_ld=n)\n        assert np.allclose(clc.get(), a.dot(b)), \"uh-oh, xgemm isn't behaving correctly\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/samples/saxpybatched.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 48,
                  "endLine": 43,
                  "endColumn": 53,
                  "snippet": {
                    "text": "pyclblast.axpyBatched(queue, n, clx, cly, alphas, x_offsets, y_offsets)\nqueue.finish()\n\nprint(\"# Full result for vector y: %s\" % str(cly.get()))\nfor i in range(batch_count):\n\tresult = alphas[i] * x[x_offsets[i]:x_offsets[i] + n] + y[y_offsets[i]:y_offsets[i] + n]\n\tprint(\"# Expected result batch #%d: %s\" % (i, str(result)))\n",
                    "rendered": {
                      "text": "pyclblast.axpyBatched(queue, n, clx, cly, alphas, x_offsets, y_offsets)\nqueue.finish()\n\nprint(\"# Full result for vector y: %s\" % str(cly.get()))\nfor i in range(batch_count):\n\tresult = alphas[i] * x[x_offsets[i]:x_offsets[i] + n] + y[y_offsets[i]:y_offsets[i] + n]\n\tprint(\"# Expected result batch #%d: %s\" % (i, str(result)))\n",
                      "markdown": "`pyclblast.axpyBatched(queue, n, clx, cly, alphas, x_offsets, y_offsets)\nqueue.finish()\n\nprint(\"# Full result for vector y: %s\" % str(cly.get()))\nfor i in range(batch_count):\n\tresult = alphas[i] * x[x_offsets[i]:x_offsets[i] + n] + y[y_offsets[i]:y_offsets[i] + n]\n\tprint(\"# Expected result batch #%d: %s\" % (i, str(result)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/samples/haxpy.py"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "print(\"# Example level-1 operation: AXPY\")\npyclblast.axpy(queue, n, clx, cly, alpha=alpha_fp16)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * x + y))\n",
                    "rendered": {
                      "text": "print(\"# Example level-1 operation: AXPY\")\npyclblast.axpy(queue, n, clx, cly, alpha=alpha_fp16)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * x + y))\n",
                      "markdown": "`print(\"# Example level-1 operation: AXPY\")\npyclblast.axpy(queue, n, clx, cly, alpha=alpha_fp16)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * x + y))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/samples/sgemv.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 39,
                  "endLine": 40,
                  "endColumn": 44,
                  "snippet": {
                    "text": "print(\"# Example level-2 operation: GEMV\")\npyclblast.gemv(queue, m, n, cla, clx, cly, a_ld=n, alpha=alpha, beta=beta)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * np.dot(a, x) + beta * y))\n",
                    "rendered": {
                      "text": "print(\"# Example level-2 operation: GEMV\")\npyclblast.gemv(queue, m, n, cla, clx, cly, a_ld=n, alpha=alpha, beta=beta)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * np.dot(a, x) + beta * y))\n",
                      "markdown": "`print(\"# Example level-2 operation: GEMV\")\npyclblast.gemv(queue, m, n, cla, clx, cly, a_ld=n, alpha=alpha, beta=beta)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * np.dot(a, x) + beta * y))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/samples/saxpy.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 39,
                  "endLine": 36,
                  "endColumn": 44,
                  "snippet": {
                    "text": "print(\"# Example level-1 operation: AXPY\")\npyclblast.axpy(queue, n, clx, cly, alpha=alpha)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * x + y))\n",
                    "rendered": {
                      "text": "print(\"# Example level-1 operation: AXPY\")\npyclblast.axpy(queue, n, clx, cly, alpha=alpha)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * x + y))\n",
                      "markdown": "`print(\"# Example level-1 operation: AXPY\")\npyclblast.axpy(queue, n, clx, cly, alpha=alpha)\nqueue.finish()\nprint(\"# Result for vector y: %s\" % cly.get())\nprint(\"# Expected result:     %s\" % (alpha * x + y))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/test/test_pyclblast.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 45,
                  "endLine": 76,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                                pyclblast.gemm(queue, m, n, k, d[0], d[1], d[2],\n                                               a_ld=k, b_ld=n, c_ld=n, alpha=alpha, beta=beta)\n                                queue.finish()\n                                result = d[2].get()\n                                reference = alpha * np.dot(h[0], h[1]) + beta * h[2]\n                                for i in range(m):\n                                    for j in range(n):\n",
                    "rendered": {
                      "text": "                                pyclblast.gemm(queue, m, n, k, d[0], d[1], d[2],\n                                               a_ld=k, b_ld=n, c_ld=n, alpha=alpha, beta=beta)\n                                queue.finish()\n                                result = d[2].get()\n                                reference = alpha * np.dot(h[0], h[1]) + beta * h[2]\n                                for i in range(m):\n                                    for j in range(n):\n",
                      "markdown": "`                                pyclblast.gemm(queue, m, n, k, d[0], d[1], d[2],\n                                               a_ld=k, b_ld=n, c_ld=n, alpha=alpha, beta=beta)\n                                queue.finish()\n                                result = d[2].get()\n                                reference = alpha * np.dot(h[0], h[1]) + beta * h[2]\n                                for i in range(m):\n                                    for j in range(n):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/test/test_pyclblast.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 41,
                  "endLine": 60,
                  "endColumn": 46,
                  "snippet": {
                    "text": "                            pyclblast.gemv(queue, m, n, d[0], d[1], d[2],\n                                           a_ld=n, alpha=alpha, beta=beta)\n                            queue.finish()\n                            result = d[2].get()\n                            reference = alpha * np.dot(h[0], h[1]) + beta * h[2]\n                            for i in range(m):\n                                self.assertAlmostEqual(reference[i], result[i], places=3)\n",
                    "rendered": {
                      "text": "                            pyclblast.gemv(queue, m, n, d[0], d[1], d[2],\n                                           a_ld=n, alpha=alpha, beta=beta)\n                            queue.finish()\n                            result = d[2].get()\n                            reference = alpha * np.dot(h[0], h[1]) + beta * h[2]\n                            for i in range(m):\n                                self.assertAlmostEqual(reference[i], result[i], places=3)\n",
                      "markdown": "`                            pyclblast.gemv(queue, m, n, d[0], d[1], d[2],\n                                           a_ld=n, alpha=alpha, beta=beta)\n                            queue.finish()\n                            result = d[2].get()\n                            reference = alpha * np.dot(h[0], h[1]) + beta * h[2]\n                            for i in range(m):\n                                self.assertAlmostEqual(reference[i], result[i], places=3)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/test/test_pyclblast.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 33,
                  "endLine": 45,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                    queue, h, d = self.setup([(n,), (n,)], dtype=dtype)\n                    pyclblast.axpy(queue, n, d[0], d[1], alpha=alpha)\n                    queue.finish()\n                    result = d[1].get()\n                    reference = alpha * h[0] + h[1]\n                    for i in range(n):\n                        self.assertAlmostEqual(reference[i], result[i], places=3)\n",
                    "rendered": {
                      "text": "                    queue, h, d = self.setup([(n,), (n,)], dtype=dtype)\n                    pyclblast.axpy(queue, n, d[0], d[1], alpha=alpha)\n                    queue.finish()\n                    result = d[1].get()\n                    reference = alpha * h[0] + h[1]\n                    for i in range(n):\n                        self.assertAlmostEqual(reference[i], result[i], places=3)\n",
                      "markdown": "`                    queue, h, d = self.setup([(n,), (n,)], dtype=dtype)\n                    pyclblast.axpy(queue, n, d[0], d[1], alpha=alpha)\n                    queue.finish()\n                    result = d[1].get()\n                    reference = alpha * h[0] + h[1]\n                    for i in range(n):\n                        self.assertAlmostEqual(reference[i], result[i], places=3)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2156,
                  "startColumn": 19,
                  "endLine": 2156,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef her2k(queue, n, k, a, b, c, a_ld, b_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, ab_transp = False, a_offset = 0, b_offset = 0, c_offset = 0):\n    \"\"\"\n    xHER2K: Rank-2K update of a hermitian matrix\n    \"\"\"\n\n    dtype = check_dtype([a, b, c], [\"complex64\", \"complex128\"])\n",
                    "rendered": {
                      "text": "\ndef her2k(queue, n, k, a, b, c, a_ld, b_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, ab_transp = False, a_offset = 0, b_offset = 0, c_offset = 0):\n    \"\"\"\n    xHER2K: Rank-2K update of a hermitian matrix\n    \"\"\"\n\n    dtype = check_dtype([a, b, c], [\"complex64\", \"complex128\"])\n",
                      "markdown": "`\ndef her2k(queue, n, k, a, b, c, a_ld, b_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, ab_transp = False, a_offset = 0, b_offset = 0, c_offset = 0):\n    \"\"\"\n    xHER2K: Rank-2K update of a hermitian matrix\n    \"\"\"\n\n    dtype = check_dtype([a, b, c], [\"complex64\", \"complex128\"])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2147,
                  "startColumn": 9,
                  "endLine": 2147,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-2K update of a hermitian matrix: CHER2K/ZHER2K\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                    "rendered": {
                      "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-2K update of a hermitian matrix: CHER2K/ZHER2K\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                      "markdown": "`    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-2K update of a hermitian matrix: CHER2K/ZHER2K\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2111,
                  "startColumn": 19,
                  "endLine": 2111,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\ndef syr2k(queue, n, k, a, b, c, a_ld, b_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, ab_transp = False, a_offset = 0, b_offset = 0, c_offset = 0):\n    \"\"\"\n    xSYR2K: Rank-2K update of a symmetric matrix\n    \"\"\"\n\n    dtype = check_dtype([a, b, c], [\"float32\", \"float64\", \"complex64\", \"complex128\", \"float16\"])\n",
                    "rendered": {
                      "text": "\ndef syr2k(queue, n, k, a, b, c, a_ld, b_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, ab_transp = False, a_offset = 0, b_offset = 0, c_offset = 0):\n    \"\"\"\n    xSYR2K: Rank-2K update of a symmetric matrix\n    \"\"\"\n\n    dtype = check_dtype([a, b, c], [\"float32\", \"float64\", \"complex64\", \"complex128\", \"float16\"])\n",
                      "markdown": "`\ndef syr2k(queue, n, k, a, b, c, a_ld, b_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, ab_transp = False, a_offset = 0, b_offset = 0, c_offset = 0):\n    \"\"\"\n    xSYR2K: Rank-2K update of a symmetric matrix\n    \"\"\"\n\n    dtype = check_dtype([a, b, c], [\"float32\", \"float64\", \"complex64\", \"complex128\", \"float16\"])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2099,
                  "startColumn": 9,
                  "endLine": 2099,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-2K update of a symmetric matrix: SSYR2K/DSYR2K/CSYR2K/ZSYR2K/HSYR2K\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                    "rendered": {
                      "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-2K update of a symmetric matrix: SSYR2K/DSYR2K/CSYR2K/ZSYR2K/HSYR2K\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                      "markdown": "`    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-2K update of a symmetric matrix: SSYR2K/DSYR2K/CSYR2K/ZSYR2K/HSYR2K\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2071,
                  "startColumn": 17,
                  "endLine": 2071,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\ndef herk(queue, n, k, a, c, a_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, a_transp = False, a_offset = 0, c_offset = 0):\n    \"\"\"\n    xHERK: Rank-K update of a hermitian matrix\n    \"\"\"\n\n    dtype = check_dtype([a, c], [\"complex64\", \"complex128\"])\n",
                    "rendered": {
                      "text": "\ndef herk(queue, n, k, a, c, a_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, a_transp = False, a_offset = 0, c_offset = 0):\n    \"\"\"\n    xHERK: Rank-K update of a hermitian matrix\n    \"\"\"\n\n    dtype = check_dtype([a, c], [\"complex64\", \"complex128\"])\n",
                      "markdown": "`\ndef herk(queue, n, k, a, c, a_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, a_transp = False, a_offset = 0, c_offset = 0):\n    \"\"\"\n    xHERK: Rank-K update of a hermitian matrix\n    \"\"\"\n\n    dtype = check_dtype([a, c], [\"complex64\", \"complex128\"])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2062,
                  "startColumn": 8,
                  "endLine": 2062,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-K update of a hermitian matrix: CHERK/ZHERK\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                    "rendered": {
                      "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-K update of a hermitian matrix: CHERK/ZHERK\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                      "markdown": "`    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-K update of a hermitian matrix: CHERK/ZHERK\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2028,
                  "startColumn": 17,
                  "endLine": 2028,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\ndef syrk(queue, n, k, a, c, a_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, a_transp = False, a_offset = 0, c_offset = 0):\n    \"\"\"\n    xSYRK: Rank-K update of a symmetric matrix\n    \"\"\"\n\n    dtype = check_dtype([a, c], [\"float32\", \"float64\", \"complex64\", \"complex128\", \"float16\"])\n",
                    "rendered": {
                      "text": "\ndef syrk(queue, n, k, a, c, a_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, a_transp = False, a_offset = 0, c_offset = 0):\n    \"\"\"\n    xSYRK: Rank-K update of a symmetric matrix\n    \"\"\"\n\n    dtype = check_dtype([a, c], [\"float32\", \"float64\", \"complex64\", \"complex128\", \"float16\"])\n",
                      "markdown": "`\ndef syrk(queue, n, k, a, c, a_ld, c_ld, alpha = 1.0, beta = 0.0, lower_triangle = False, a_transp = False, a_offset = 0, c_offset = 0):\n    \"\"\"\n    xSYRK: Rank-K update of a symmetric matrix\n    \"\"\"\n\n    dtype = check_dtype([a, c], [\"float32\", \"float64\", \"complex64\", \"complex128\", \"float16\"])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 2016,
                  "startColumn": 8,
                  "endLine": 2016,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-K update of a symmetric matrix: SSYRK/DSYRK/CSYRK/ZSYRK/HSYRK\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                    "rendered": {
                      "text": "    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-K update of a symmetric matrix: SSYRK/DSYRK/CSYRK/ZSYRK/HSYRK\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n",
                      "markdown": "`    return cl.Event.from_int_ptr(<ptrdiff_t>event)\n\n####################################################################################################\n# Rank-K update of a symmetric matrix: SSYRK/DSYRK/CSYRK/ZSYRK/HSYRK\n####################################################################################################\n\ncdef extern from \"clblast_c.h\":\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1850,
                  "startColumn": 41,
                  "endLine": 1851,
                  "snippet": {
                    "text": "\ndef spr2(queue, n, x, y, ap, ap_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, ap_offset = 0):\n    \"\"\"\n    xSPR2: Symmetric packed rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, ap], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef spr2(queue, n, x, y, ap, ap_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, ap_offset = 0):\n    \"\"\"\n    xSPR2: Symmetric packed rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, ap], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef spr2(queue, n, x, y, ap, ap_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, ap_offset = 0):\n    \"\"\"\n    xSPR2: Symmetric packed rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, ap], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1809,
                  "startColumn": 34,
                  "endLine": 1810,
                  "snippet": {
                    "text": "\ndef syr2(queue, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xSYR2: Symmetric rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef syr2(queue, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xSYR2: Symmetric rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef syr2(queue, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xSYR2: Symmetric rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1770,
                  "startColumn": 40,
                  "endLine": 1771,
                  "snippet": {
                    "text": "\ndef spr(queue, n, x, ap, ap_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, ap_offset = 0):\n    \"\"\"\n    xSPR: Symmetric packed rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, ap], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef spr(queue, n, x, ap, ap_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, ap_offset = 0):\n    \"\"\"\n    xSPR: Symmetric packed rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, ap], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef spr(queue, n, x, ap, ap_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, ap_offset = 0):\n    \"\"\"\n    xSPR: Symmetric packed rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, ap], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1731,
                  "startColumn": 33,
                  "endLine": 1732,
                  "snippet": {
                    "text": "\ndef syr(queue, n, x, a, a_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, a_offset = 0):\n    \"\"\"\n    xSYR: Symmetric rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef syr(queue, n, x, a, a_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, a_offset = 0):\n    \"\"\"\n    xSYR: Symmetric rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef syr(queue, n, x, a, a_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, a_offset = 0):\n    \"\"\"\n    xSYR: Symmetric rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1692,
                  "startColumn": 41,
                  "endLine": 1693,
                  "snippet": {
                    "text": "\ndef hpr2(queue, n, x, y, ap, ap_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, ap_offset = 0):\n    \"\"\"\n    xHPR2: Hermitian packed rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, ap], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef hpr2(queue, n, x, y, ap, ap_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, ap_offset = 0):\n    \"\"\"\n    xHPR2: Hermitian packed rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, ap], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef hpr2(queue, n, x, y, ap, ap_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, ap_offset = 0):\n    \"\"\"\n    xHPR2: Hermitian packed rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, ap], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1654,
                  "startColumn": 34,
                  "endLine": 1655,
                  "snippet": {
                    "text": "\ndef her2(queue, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xHER2: Hermitian rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef her2(queue, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xHER2: Hermitian rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef her2(queue, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xHER2: Hermitian rank-2 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1618,
                  "startColumn": 40,
                  "endLine": 1619,
                  "snippet": {
                    "text": "\ndef hpr(queue, n, x, ap, ap_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, ap_offset = 0):\n    \"\"\"\n    xHPR: Hermitian packed rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, ap], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef hpr(queue, n, x, ap, ap_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, ap_offset = 0):\n    \"\"\"\n    xHPR: Hermitian packed rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, ap], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef hpr(queue, n, x, ap, ap_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, ap_offset = 0):\n    \"\"\"\n    xHPR: Hermitian packed rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, ap], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1582,
                  "startColumn": 33,
                  "endLine": 1583,
                  "snippet": {
                    "text": "\ndef her(queue, n, x, a, a_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, a_offset = 0):\n    \"\"\"\n    xHER: Hermitian rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef her(queue, n, x, a, a_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, a_offset = 0):\n    \"\"\"\n    xHER: Hermitian rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef her(queue, n, x, a, a_ld, x_inc = 1, alpha = 1.0, lower_triangle = False, x_offset = 0, a_offset = 0):\n    \"\"\"\n    xHER: Hermitian rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1545,
                  "startColumn": 51,
                  "endLine": 1546,
                  "snippet": {
                    "text": "\ndef gerc(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGERC: General rank-1 complex conjugated matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef gerc(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGERC: General rank-1 complex conjugated matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef gerc(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGERC: General rank-1 complex conjugated matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1508,
                  "startColumn": 40,
                  "endLine": 1509,
                  "snippet": {
                    "text": "\ndef geru(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGERU: General rank-1 complex matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef geru(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGERU: General rank-1 complex matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef geru(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGERU: General rank-1 complex matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"complex64\", \"complex128\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/pyclblast/src/pyclblast.pyx"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 31,
                  "endLine": 1470,
                  "snippet": {
                    "text": "\ndef ger(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGER: General rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                    "rendered": {
                      "text": "\ndef ger(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGER: General rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n",
                      "markdown": "`\ndef ger(queue, m, n, x, y, a, a_ld, x_inc = 1, y_inc = 1, alpha = 1.0, x_offset = 0, y_offset = 0, a_offset = 0):\n    \"\"\"\n    xGER: General rank-1 matrix update\n    \"\"\"\n\n    dtype = check_dtype([x, y, a], [\"float32\", \"float64\", \"float16\"])\n    check_vector(x, \"x\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/xger.opencl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 39,
                  "endLine": 20,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n// =================================================================================================\n\n// Regular version of the rank-1 matrix update kernel (GER, GERU, GERC)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n",
                    "rendered": {
                      "text": "\n// =================================================================================================\n\n// Regular version of the rank-1 matrix update kernel (GER, GERU, GERC)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n",
                      "markdown": "`\n// =================================================================================================\n\n// Regular version of the rank-1 matrix update kernel (GER, GERU, GERC)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/xher.opencl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 41,
                  "endLine": 20,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n// =================================================================================================\n\n// Symmetric version of the rank-1 matrix update kernel (HER, HPR, SYR, SPR)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n",
                    "rendered": {
                      "text": "\n// =================================================================================================\n\n// Symmetric version of the rank-1 matrix update kernel (HER, HPR, SYR, SPR)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n",
                      "markdown": "`\n// =================================================================================================\n\n// Symmetric version of the rank-1 matrix update kernel (HER, HPR, SYR, SPR)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/xgemv.opencl"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 35,
                  "endLine": 241,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    SetToZero(acc1[_w]);\n  }\n\n  // Divides the work in a main and tail section\n  const int n_tail = n % WGS1;\n  const int n_floor = n - n_tail;\n\n",
                    "rendered": {
                      "text": "    SetToZero(acc1[_w]);\n  }\n\n  // Divides the work in a main and tail section\n  const int n_tail = n % WGS1;\n  const int n_floor = n - n_tail;\n\n",
                      "markdown": "`    SetToZero(acc1[_w]);\n  }\n\n  // Divides the work in a main and tail section\n  const int n_tail = n % WGS1;\n  const int n_floor = n - n_tail;\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/xher2.opencl"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 41,
                  "endLine": 20,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n// =================================================================================================\n\n// Symmetric version of the rank-2 matrix update kernel (HER2, HPR2, SYR2, SPR2)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n",
                    "rendered": {
                      "text": "\n// =================================================================================================\n\n// Symmetric version of the rank-2 matrix update kernel (HER2, HPR2, SYR2, SPR2)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n",
                      "markdown": "`\n// =================================================================================================\n\n// Symmetric version of the rank-2 matrix update kernel (HER2, HPR2, SYR2, SPR2)\n#if RELAX_WORKGROUP_SIZE == 1\n  __kernel\n#else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/level2.opencl"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 29,
                  "endLine": 103,
                  "snippet": {
                    "text": "  }\n}\n\n// Performs the rank-2 matrix update\nINLINE_FUNC void MatrixUpdate2(const int id1, const int id2, const int max1, const int max2,\n                               __global real* agm, const int a_offset, const int a_ld,\n                               const real alpha1, const real xvalue, const real yvalue,\n                               const real alpha2, const real xtvalue, const real ytvalue,\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Performs the rank-2 matrix update\nINLINE_FUNC void MatrixUpdate2(const int id1, const int id2, const int max1, const int max2,\n                               __global real* agm, const int a_offset, const int a_ld,\n                               const real alpha1, const real xvalue, const real yvalue,\n                               const real alpha2, const real xtvalue, const real ytvalue,\n",
                      "markdown": "`  }\n}\n\n// Performs the rank-2 matrix update\nINLINE_FUNC void MatrixUpdate2(const int id1, const int id2, const int max1, const int max2,\n                               __global real* agm, const int a_offset, const int a_ld,\n                               const real alpha1, const real xvalue, const real yvalue,\n                               const real alpha2, const real xtvalue, const real ytvalue,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/level2.opencl"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 29,
                  "endLine": 56,
                  "snippet": {
                    "text": "  }\n}\n\n// Performs the rank-1 matrix update\nINLINE_FUNC void MatrixUpdate(const int id1, const int id2, const int max1, const int max2,\n                              __global real* agm, const int a_offset, const int a_ld,\n                              const real alpha, const real xvalue, const real yvalue,\n                              const int is_upper) {\n",
                    "rendered": {
                      "text": "  }\n}\n\n// Performs the rank-1 matrix update\nINLINE_FUNC void MatrixUpdate(const int id1, const int id2, const int max1, const int max2,\n                              __global real* agm, const int a_offset, const int a_ld,\n                              const real alpha, const real xvalue, const real yvalue,\n                              const int is_upper) {\n",
                      "markdown": "`  }\n}\n\n// Performs the rank-1 matrix update\nINLINE_FUNC void MatrixUpdate(const int id1, const int id2, const int max1, const int max2,\n                              __global real* agm, const int a_offset, const int a_ld,\n                              const real alpha, const real xvalue, const real yvalue,\n                              const int is_upper) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/kernels/level2/level2.opencl"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 49,
                  "endLine": 10,
                  "endColumn": 57,
                  "snippet": {
                    "text": "// Author(s):\n//   Cedric Nugteren <www.cedricnugteren.nl>\n//\n// This file contains common functions for matrix update kernels (Xger, Xher).\n//\n// =================================================================================================\n\n",
                    "rendered": {
                      "text": "// Author(s):\n//   Cedric Nugteren <www.cedricnugteren.nl>\n//\n// This file contains common functions for matrix update kernels (Xger, Xher).\n//\n// =================================================================================================\n\n",
                      "markdown": "`// Author(s):\n//   Cedric Nugteren <www.cedricnugteren.nl>\n//\n// This file contains common functions for matrix update kernels (Xger, Xher).\n//\n// =================================================================================================\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/tuning/tuning_api.cpp"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 20,
                  "endLine": 353,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      for (const auto id : settings.outputs) {\n        device_buffers[id].Read(queue, buffer_sizes[id], result_buffers[id]);\n        for (auto index = size_t{0}; index<buffer_sizes[id]; ++index) {\n          const auto diff = SquaredDifference(result_buffers[id][index], reference_buffers[id][index]);\n          l2_error += diff;\n        }\n        l2_error /= static_cast<double>(buffer_sizes[id]);\n",
                    "rendered": {
                      "text": "      for (const auto id : settings.outputs) {\n        device_buffers[id].Read(queue, buffer_sizes[id], result_buffers[id]);\n        for (auto index = size_t{0}; index<buffer_sizes[id]; ++index) {\n          const auto diff = SquaredDifference(result_buffers[id][index], reference_buffers[id][index]);\n          l2_error += diff;\n        }\n        l2_error /= static_cast<double>(buffer_sizes[id]);\n",
                      "markdown": "`      for (const auto id : settings.outputs) {\n        device_buffers[id].Read(queue, buffer_sizes[id], result_buffers[id]);\n        for (auto index = size_t{0}; index<buffer_sizes[id]; ++index) {\n          const auto diff = SquaredDifference(result_buffers[id][index], reference_buffers[id][index]);\n          l2_error += diff;\n        }\n        l2_error /= static_cast<double>(buffer_sizes[id]);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/tuning/tuning.cpp"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 20,
                  "endLine": 332,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      for (const auto id : settings.outputs) {\n        device_buffers[id].Read(queue, buffer_sizes[id], result_buffers[id]);\n        for (auto index = size_t{0}; index<buffer_sizes[id]; ++index) {\n          const auto diff = SquaredDifference(result_buffers[id][index], reference_buffers[id][index]);\n          l2_error += diff;\n        }\n        l2_error /= static_cast<double>(buffer_sizes[id]);\n",
                    "rendered": {
                      "text": "      for (const auto id : settings.outputs) {\n        device_buffers[id].Read(queue, buffer_sizes[id], result_buffers[id]);\n        for (auto index = size_t{0}; index<buffer_sizes[id]; ++index) {\n          const auto diff = SquaredDifference(result_buffers[id][index], reference_buffers[id][index]);\n          l2_error += diff;\n        }\n        l2_error /= static_cast<double>(buffer_sizes[id]);\n",
                      "markdown": "`      for (const auto id : settings.outputs) {\n        device_buffers[id].Read(queue, buffer_sizes[id], result_buffers[id]);\n        for (auto index = size_t{0}; index<buffer_sizes[id]; ++index) {\n          const auto diff = SquaredDifference(result_buffers[id][index], reference_buffers[id][index]);\n          l2_error += diff;\n        }\n        l2_error /= static_cast<double>(buffer_sizes[id]);\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/src/tuning/tuning.cpp"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 78,
                  "endLine": 207,
                  "endColumn": 84,
                  "snippet": {
                    "text": "  printf(\"\\n\");\n  printf(\"|   ID | total |\");\n  for (auto i = size_t{0}; i < settings.parameters.size() - 1; ++i) { printf(\"     \"); }\n  printf(\"param |      local      |      global     |       compiles |         time | %6s |            status |\\n\", settings.performance_unit.c_str());\n  print_separator(settings.parameters.size());\n\n  // First runs a reference example to compare against\n",
                    "rendered": {
                      "text": "  printf(\"\\n\");\n  printf(\"|   ID | total |\");\n  for (auto i = size_t{0}; i < settings.parameters.size() - 1; ++i) { printf(\"     \"); }\n  printf(\"param |      local      |      global     |       compiles |         time | %6s |            status |\\n\", settings.performance_unit.c_str());\n  print_separator(settings.parameters.size());\n\n  // First runs a reference example to compare against\n",
                      "markdown": "`  printf(\"\\n\");\n  printf(\"|   ID | total |\");\n  for (auto i = size_t{0}; i < settings.parameters.size() - 1; ++i) { printf(\"     \"); }\n  printf(\"param |      local      |      global     |       compiles |         time | %6s |            status |\\n\", settings.performance_unit.c_str());\n  print_separator(settings.parameters.size());\n\n  // First runs a reference example to compare against\n`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/build_and_test.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 20,
                  "endLine": 25,
                  "snippet": {
                    "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n    - name: Install requirements for macOS\n",
                    "rendered": {
                      "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n    - name: Install requirements for macOS\n",
                      "markdown": "`\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n    - name: Install requirements for macOS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/build_and_test.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 12,
                  "endLine": 25,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n    - name: Install requirements for macOS\n",
                    "rendered": {
                      "text": "    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n    - name: Install requirements for macOS\n",
                      "markdown": "`    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n    - name: Install requirements for macOS\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.github/workflows/build_and_test.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 12,
                  "endLine": 24,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n",
                    "rendered": {
                      "text": "\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n",
                      "markdown": "`\n    - name: Install requirements for Ubuntu\n      run: |\n        sudo apt-get update\n        sudo apt-get install -yq ninja-build ocl-icd-opencl-dev opencl-c-headers libopenblas-dev --no-install-recommends\n      if: ${{ matrix.config.os == 'ubuntu-latest' }}\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/defaults.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 95,
                  "endLine": 207,
                  "endColumn": 99,
                  "snippet": {
                    "text": "        # Fall back method in case there are no shared entries at all across devices\n        if num_devices_common == 1:\n            if enable_warning:\n                print(\"[database] Warning: No common kernels for: \" + str(group_identifier) + \" at all\")\n            smallest_best_parameters = get_smallest_best_parameters(group)\n            if verbose:\n                print(\"[database] \" + str(group_identifier))\n",
                    "rendered": {
                      "text": "        # Fall back method in case there are no shared entries at all across devices\n        if num_devices_common == 1:\n            if enable_warning:\n                print(\"[database] Warning: No common kernels for: \" + str(group_identifier) + \" at all\")\n            smallest_best_parameters = get_smallest_best_parameters(group)\n            if verbose:\n                print(\"[database] \" + str(group_identifier))\n",
                      "markdown": "`        # Fall back method in case there are no shared entries at all across devices\n        if num_devices_common == 1:\n            if enable_warning:\n                print(\"[database] Warning: No common kernels for: \" + str(group_identifier) + \" at all\")\n            smallest_best_parameters = get_smallest_best_parameters(group)\n            if verbose:\n                print(\"[database] \" + str(group_identifier))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/defaults.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 62,
                  "endLine": 204,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                parameters_count[str(parameters)] += 1\n        num_devices_common = max(parameters_count.values())\n\n        # Fall back method in case there are no shared entries at all across devices\n        if num_devices_common == 1:\n            if enable_warning:\n                print(\"[database] Warning: No common kernels for: \" + str(group_identifier) + \" at all\")\n",
                    "rendered": {
                      "text": "                parameters_count[str(parameters)] += 1\n        num_devices_common = max(parameters_count.values())\n\n        # Fall back method in case there are no shared entries at all across devices\n        if num_devices_common == 1:\n            if enable_warning:\n                print(\"[database] Warning: No common kernels for: \" + str(group_identifier) + \" at all\")\n",
                      "markdown": "`                parameters_count[str(parameters)] += 1\n        num_devices_common = max(parameters_count.values())\n\n        # Fall back method in case there are no shared entries at all across devices\n        if num_devices_common == 1:\n            if enable_warning:\n                print(\"[database] Warning: No common kernels for: \" + str(group_identifier) + \" at all\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/defaults.py"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 69,
                  "endLine": 192,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        section_parameters = get_parameter_names(group[i])\n        common_parameters = [p for p in section_parameters if p in common_parameters]  # Intersection of the parameters\n\n    # Fall back to another method in case there are no shared entries at all across devices\n    if len(common_parameters) == 0:\n        if verbose:\n            print(\"[database] No common kernels for: \" + str(group_identifier) + \" across all %d devices \" % num_devices)\n",
                    "rendered": {
                      "text": "        section_parameters = get_parameter_names(group[i])\n        common_parameters = [p for p in section_parameters if p in common_parameters]  # Intersection of the parameters\n\n    # Fall back to another method in case there are no shared entries at all across devices\n    if len(common_parameters) == 0:\n        if verbose:\n            print(\"[database] No common kernels for: \" + str(group_identifier) + \" across all %d devices \" % num_devices)\n",
                      "markdown": "`        section_parameters = get_parameter_names(group[i])\n        common_parameters = [p for p in section_parameters if p in common_parameters]  # Intersection of the parameters\n\n    # Fall back to another method in case there are no shared entries at all across devices\n    if len(common_parameters) == 0:\n        if verbose:\n            print(\"[database] No common kernels for: \" + str(group_identifier) + \" across all %d devices \" % num_devices)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/defaults.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 5,
                  "endLine": 149,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    # Counts the number of devices in this group\n    assert len(group) > 0\n\n    # Find the smallest values of the parameters\n    min_parameters = {}\n    for section in group:\n        assert len(section[\"results\"]) > 0\n",
                    "rendered": {
                      "text": "    # Counts the number of devices in this group\n    assert len(group) > 0\n\n    # Find the smallest values of the parameters\n    min_parameters = {}\n    for section in group:\n        assert len(section[\"results\"]) > 0\n",
                      "markdown": "`    # Counts the number of devices in this group\n    assert len(group) > 0\n\n    # Find the smallest values of the parameters\n    min_parameters = {}\n    for section in group:\n        assert len(section[\"results\"]) > 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/database/database/db.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 66,
                  "endLine": 59,
                  "snippet": {
                    "text": "        # Verify whether the results match\n        equal = new_result[\"parameters\"] == old_result[\"parameters\"]\n\n        # They match: keep only the one with the minimum execution time\n        if equal:\n            old_result[\"time\"] = min(old_result[\"time\"], new_result[\"time\"])\n            return old_results\n\n",
                    "rendered": {
                      "text": "        # Verify whether the results match\n        equal = new_result[\"parameters\"] == old_result[\"parameters\"]\n\n        # They match: keep only the one with the minimum execution time\n        if equal:\n            old_result[\"time\"] = min(old_result[\"time\"], new_result[\"time\"])\n            return old_results\n\n",
                      "markdown": "`        # Verify whether the results match\n        equal = new_result[\"parameters\"] == old_result[\"parameters\"]\n\n        # They match: keep only the one with the minimum execution time\n        if equal:\n            old_result[\"time\"] = min(old_result[\"time\"], new_result[\"time\"])\n            return old_results\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 18,
                  "endLine": 57,
                  "snippet": {
                    "text": "        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n",
                    "rendered": {
                      "text": "        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n",
                      "markdown": "`        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n",
                    "rendered": {
                      "text": "        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n",
                      "markdown": "`        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 54,
                  "snippet": {
                    "text": "        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n",
                    "rendered": {
                      "text": "        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n",
                      "markdown": "`        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n    # Routine footer\n    result += NL + NL\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 42,
                  "endLine": 53,
                  "snippet": {
                    "text": "    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n    # Routine footer\n    result += NL + NL\n",
                    "rendered": {
                      "text": "    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n    # Routine footer\n    result += NL + NL\n",
                      "markdown": "`    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n    # Routine footer\n    result += NL + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 73,
                  "endLine": 51,
                  "snippet": {
                    "text": "\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n",
                    "rendered": {
                      "text": "\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n",
                      "markdown": "`\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 68,
                  "endLine": 50,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n",
                    "rendered": {
                      "text": "\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n",
                      "markdown": "`\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n        for requirement in routine.requirements_doc():\n            result += \"* \" + requirement + NL\n        result += NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 52,
                  "endLine": 47,
                  "snippet": {
                    "text": "    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n",
                    "rendered": {
                      "text": "    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n",
                      "markdown": "`    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n        result += \"Requirements for \" + routine.upper_name() + \":\" + NL + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 47,
                  "endLine": 46,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n",
                    "rendered": {
                      "text": "    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n",
                      "markdown": "`    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n    # Routine requirements\n    if len(routine.requirements_doc()) > 0:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 116,
                  "endLine": 44,
                  "snippet": {
                    "text": "    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n",
                    "rendered": {
                      "text": "    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n",
                      "markdown": "`    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n    result += \"This is an optional argument.\" + NL + NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 35,
                  "endLine": 42,
                  "snippet": {
                    "text": "    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n",
                    "rendered": {
                      "text": "    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n",
                      "markdown": "`    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n    result += \"* `cl_event* event`: \"\n    result += \"Pointer to an OpenCL event to be able to wait for completion of the routine's OpenCL kernel(s). \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 65,
                  "endLine": 40,
                  "snippet": {
                    "text": "    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n",
                    "rendered": {
                      "text": "    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n",
                      "markdown": "`    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n    result += \"Pointer to an OpenCL command queue associated with a context and device to execute the routine on.\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 60,
                  "endLine": 39,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n",
                    "rendered": {
                      "text": "    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n",
                      "markdown": "`    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n        result += \"* \" + argument + NL\n    result += \"* `cl_command_queue* queue`: \"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 26,
                  "endLine": 37,
                  "snippet": {
                    "text": "    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n",
                    "rendered": {
                      "text": "    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n",
                      "markdown": "`    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n    for argument in routine.arguments_doc():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 21,
                  "endLine": 36,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n",
                    "rendered": {
                      "text": "    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n",
                      "markdown": "`    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 61,
                  "endLine": 36,
                  "snippet": {
                    "text": "    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n",
                    "rendered": {
                      "text": "    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n",
                      "markdown": "`    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n    # Routine arguments\n    result += \"Arguments to \" + routine.upper_name() + \":\" + NL + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 21,
                  "endLine": 34,
                  "snippet": {
                    "text": "    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n",
                    "rendered": {
                      "text": "    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n",
                      "markdown": "`    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 24,
                  "endLine": 33,
                  "snippet": {
                    "text": "    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n",
                    "rendered": {
                      "text": "    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n",
                      "markdown": "`    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n    result += \"```\" + NL + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n",
                    "rendered": {
                      "text": "    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n",
                      "markdown": "`    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n        result += routine.routine_header_c(flavour, 27, \"\") + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 21,
                  "endLine": 31,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n",
                    "rendered": {
                      "text": "    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n",
                      "markdown": "`    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 50,
                  "endLine": 31,
                  "snippet": {
                    "text": "    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n",
                    "rendered": {
                      "text": "    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n",
                      "markdown": "`    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n    for flavour in routine.flavours:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 21,
                  "endLine": 30,
                  "snippet": {
                    "text": "\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n",
                    "rendered": {
                      "text": "\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n",
                      "markdown": "`\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n    result += \"```\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 26,
                  "endLine": 29,
                  "snippet": {
                    "text": "    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n",
                    "rendered": {
                      "text": "    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n",
                      "markdown": "`    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n    result += routine.routine_header_cpp(12, \"\") + NL\n    result += \"```\" + NL + NL\n    result += \"C API:\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 36,
                  "endLine": 26,
                  "snippet": {
                    "text": "    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n",
                    "rendered": {
                      "text": "    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n",
                      "markdown": "`    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n    result += \"```\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 31,
                  "endLine": 25,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n",
                    "rendered": {
                      "text": "    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n",
                      "markdown": "`    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 36,
                  "endLine": 25,
                  "snippet": {
                    "text": "\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n",
                    "rendered": {
                      "text": "\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n",
                      "markdown": "`\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n    result += \"C++ API:\" + NL\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 31,
                  "endLine": 24,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n",
                    "rendered": {
                      "text": "\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n",
                      "markdown": "`\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 71,
                  "endLine": 24,
                  "snippet": {
                    "text": "    result = \"\"\n\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n",
                    "rendered": {
                      "text": "    result = \"\"\n\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n",
                      "markdown": "`    result = \"\"\n\n    # Routine header\n    result += \"x\" + routine.upper_name() + \": \" + routine.description + NL\n    result += \"-------------\" + NL + NL\n    result += routine.details + NL + NL\n\n    # Routine API\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 44,
                  "endLine": 15,
                  "snippet": {
                    "text": "def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\ndef generate(routine):\n",
                    "rendered": {
                      "text": "def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\ndef generate(routine):\n",
                      "markdown": "`def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\ndef generate(routine):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 39,
                  "endLine": 14,
                  "endColumn": 43,
                  "snippet": {
                    "text": "def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n",
                      "markdown": "`def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 34,
                  "endLine": 14,
                  "endColumn": 38,
                  "snippet": {
                    "text": "def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n",
                      "markdown": "`def header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 39,
                  "endLine": 14,
                  "snippet": {
                    "text": "\ndef header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n",
                    "rendered": {
                      "text": "\ndef header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n",
                      "markdown": "`\ndef header():\n    \"\"\"Generates the header for the API documentation\"\"\"\n    result = \"CLBlast: API reference\" + NL\n    result += \"================\" + NL + NL + NL\n    return result\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/doc.py"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 8,
                  "endColumn": 3,
                  "snippet": {
                    "text": "#\n# Author(s):\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\nNL = \"\\n\"\n\n\ndef header():\n",
                    "rendered": {
                      "text": "#\n# Author(s):\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\nNL = \"\\n\"\n\n\ndef header():\n",
                      "markdown": "`#\n# Author(s):\n#   Cedric Nugteren <www.cedricnugteren.nl>\n\nNL = \"\\n\"\n\n\ndef header():\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/datatype.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 93,
                  "endLine": 109,
                  "endColumn": 3,
                  "snippet": {
                    "text": " As Z, but with real output\niH = DataType(\"H\", \"iH\", D_HALF, [D_HALF] * 4, D_HALF)  # As H, but with integer output\niS = DataType(\"S\", \"iS\", D_FLOAT, [D_FLOAT] * 4, D_FLOAT)  # As S, but with integer output\niD = DataType(\"D\", \"iD\", D_DOUBLE, [D_DOUBLE] * 4, D_DOUBLE)  # As D, but with integer output\niC = DataType(\"C\", \"iC\", D_FLOAT2, [D_FLOAT2] * 2 + [D_FLOAT2_OPENCL] * 2, D_FLOAT2)  # As C, but with integer output\niZ = DataType(\"Z\", \"iZ\", D_DOUBLE2, [D_DOUBLE2] * 2 + [D_DOUBLE2_OPENCL] * 2, D_DOUBLE2)  # As Z, but with int output\nCss = DataType(\"C\", \"C\", D_FLOAT, [D_FLOAT, D_FLOAT, D_FLOAT, D_FLO",
                    "rendered": {
                      "text": " As Z, but with real output\niH = DataType(\"H\", \"iH\", D_HALF, [D_HALF] * 4, D_HALF)  # As H, but with integer output\niS = DataType(\"S\", \"iS\", D_FLOAT, [D_FLOAT] * 4, D_FLOAT)  # As S, but with integer output\niD = DataType(\"D\", \"iD\", D_DOUBLE, [D_DOUBLE] * 4, D_DOUBLE)  # As D, but with integer output\niC = DataType(\"C\", \"iC\", D_FLOAT2, [D_FLOAT2] * 2 + [D_FLOAT2_OPENCL] * 2, D_FLOAT2)  # As C, but with integer output\niZ = DataType(\"Z\", \"iZ\", D_DOUBLE2, [D_DOUBLE2] * 2 + [D_DOUBLE2_OPENCL] * 2, D_DOUBLE2)  # As Z, but with int output\nCss = DataType(\"C\", \"C\", D_FLOAT, [D_FLOAT, D_FLOAT, D_FLOAT, D_FLO",
                      "markdown": "` As Z, but with real output\niH = DataType(\"H\", \"iH\", D_HALF, [D_HALF] * 4, D_HALF)  # As H, but with integer output\niS = DataType(\"S\", \"iS\", D_FLOAT, [D_FLOAT] * 4, D_FLOAT)  # As S, but with integer output\niD = DataType(\"D\", \"iD\", D_DOUBLE, [D_DOUBLE] * 4, D_DOUBLE)  # As D, but with integer output\niC = DataType(\"C\", \"iC\", D_FLOAT2, [D_FLOAT2] * 2 + [D_FLOAT2_OPENCL] * 2, D_FLOAT2)  # As C, but with integer output\niZ = DataType(\"Z\", \"iZ\", D_DOUBLE2, [D_DOUBLE2] * 2 + [D_DOUBLE2_OPENCL] * 2, D_DOUBLE2)  # As Z, but with int output\nCss = DataType(\"C\", \"C\", D_FLOAT, [D_FLOAT, D_FLOAT, D_FLOAT, D_FLO`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator/datatype.py"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 15,
                  "endLine": 104,
                  "endColumn": 3,
                  "snippet": {
                    "text": "C = DataType(\"C\", \"C\", D_FLOAT2, [D_FLOAT2] * 2 + [D_FLOAT2_OPENCL] * 2, D_FLOAT2)  # single-complex (3232)\nZ = DataType(\"Z\", \"Z\", D_DOUBLE2, [D_DOUBLE2] * 2 + [D_DOUBLE2_OPENCL] * 2, D_DOUBLE2)  # double-complex (6464)\n\n# Special cases\nSc = DataType(\"C\", \"Sc\", D_FLOAT2, [D_FLOAT2] * 4, D_FLOAT2)  # As C, but with real output\nDz = DataType(\"Z\", \"Dz\", D_DOUBLE2, [D_DOUBLE2] * 4, D_DOUBLE2)  # As Z, but with real output\niH = DataType(\"H\", \"iH\", D_HALF, [D_HALF] * 4, D_HALF)  # As H, but with integer output\niS = DataType(\"S\", \"iS\", D_FLOAT, [D_FLOAT] * 4, D_FLOAT)  # As S, but with integer output\n",
                    "rendered": {
                      "text": "C = DataType(\"C\", \"C\", D_FLOAT2, [D_FLOAT2] * 2 + [D_FLOAT2_OPENCL] * 2, D_FLOAT2)  # single-complex (3232)\nZ = DataType(\"Z\", \"Z\", D_DOUBLE2, [D_DOUBLE2] * 2 + [D_DOUBLE2_OPENCL] * 2, D_DOUBLE2)  # double-complex (6464)\n\n# Special cases\nSc = DataType(\"C\", \"Sc\", D_FLOAT2, [D_FLOAT2] * 4, D_FLOAT2)  # As C, but with real output\nDz = DataType(\"Z\", \"Dz\", D_DOUBLE2, [D_DOUBLE2] * 4, D_DOUBLE2)  # As Z, but with real output\niH = DataType(\"H\", \"iH\", D_HALF, [D_HALF] * 4, D_HALF)  # As H, but with integer output\niS = DataType(\"S\", \"iS\", D_FLOAT, [D_FLOAT] * 4, D_FLOAT)  # As S, but with integer output\n",
                      "markdown": "`C = DataType(\"C\", \"C\", D_FLOAT2, [D_FLOAT2] * 2 + [D_FLOAT2_OPENCL] * 2, D_FLOAT2)  # single-complex (3232)\nZ = DataType(\"Z\", \"Z\", D_DOUBLE2, [D_DOUBLE2] * 2 + [D_DOUBLE2_OPENCL] * 2, D_DOUBLE2)  # double-complex (6464)\n\n# Special cases\nSc = DataType(\"C\", \"Sc\", D_FLOAT2, [D_FLOAT2] * 4, D_FLOAT2)  # As C, but with real output\nDz = DataType(\"Z\", \"Dz\", D_DOUBLE2, [D_DOUBLE2] * 4, D_DOUBLE2)  # As Z, but with real output\niH = DataType(\"H\", \"iH\", D_HALF, [D_HALF] * 4, D_HALF)  # As H, but with integer output\niS = DataType(\"S\", \"iS\", D_FLOAT, [D_FLOAT] * 4, D_FLOAT)  # As S, but with integer output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 238,
                  "endLine": 175,
                  "endColumn": 246,
                  "snippet": {
                    "text": " are scalar values.\", [ald_trans_n_k, bld_trans_n_k, cld_n]),\n  Routine(True,  True,  0, False, \"3\", \"her2k\", TU, [Ccs,Zzd],       [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                        [ankab,bnkab,cn],[\"alpha\",\"beta\"], \"\",    \"Rank-2K update of a hermitian matrix\", \"Same operation as xSYR2K, but _C_ is an Hermitian matrix instead.\", [ald_trans_n_k, bld_trans_n_k, cld_n]),\n  Routine(True,  True,  0, False, \"3\", \"trmm\",  T,  [S,D,C,Z,H],     [\"m\",\"n\"],            [\"layout\",\"side\",\"triangle\",\"a_transpose\",\"diagonal\"], [\"a\"],      [\"b\"],   ",
                    "rendered": {
                      "text": " are scalar values.\", [ald_trans_n_k, bld_trans_n_k, cld_n]),\n  Routine(True,  True,  0, False, \"3\", \"her2k\", TU, [Ccs,Zzd],       [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                        [ankab,bnkab,cn],[\"alpha\",\"beta\"], \"\",    \"Rank-2K update of a hermitian matrix\", \"Same operation as xSYR2K, but _C_ is an Hermitian matrix instead.\", [ald_trans_n_k, bld_trans_n_k, cld_n]),\n  Routine(True,  True,  0, False, \"3\", \"trmm\",  T,  [S,D,C,Z,H],     [\"m\",\"n\"],            [\"layout\",\"side\",\"triangle\",\"a_transpose\",\"diagonal\"], [\"a\"],      [\"b\"],   ",
                      "markdown": "` are scalar values.\", [ald_trans_n_k, bld_trans_n_k, cld_n]),\n  Routine(True,  True,  0, False, \"3\", \"her2k\", TU, [Ccs,Zzd],       [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                        [ankab,bnkab,cn],[\"alpha\",\"beta\"], \"\",    \"Rank-2K update of a hermitian matrix\", \"Same operation as xSYR2K, but _C_ is an Hermitian matrix instead.\", [ald_trans_n_k, bld_trans_n_k, cld_n]),\n  Routine(True,  True,  0, False, \"3\", \"trmm\",  T,  [S,D,C,Z,H],     [\"m\",\"n\"],            [\"layout\",\"side\",\"triangle\",\"a_transpose\",\"diagonal\"], [\"a\"],      [\"b\"],   `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 238,
                  "endLine": 174,
                  "endColumn": 246,
                  "snippet": {
                    "text": "C_ is an Hermitian matrix instead.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syr2k\", T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                        [ankab,bnkab,cn],[\"alpha\",\"beta\"], \"\",    \"Rank-2K update of a symmetric matrix\", \"Performs the matrix product _C = alpha * A * B^T + alpha * B * A^T + beta * C_ or _C = alpha * A^T * B + alpha * B^T * A + beta * C_, in which _A_ and _B_ are general matrices and _A^T_ and _B^T_ are their transposed versions, _C_ (_n_ by _n_) is the symmetric matrix to be u",
                    "rendered": {
                      "text": "C_ is an Hermitian matrix instead.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syr2k\", T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                        [ankab,bnkab,cn],[\"alpha\",\"beta\"], \"\",    \"Rank-2K update of a symmetric matrix\", \"Performs the matrix product _C = alpha * A * B^T + alpha * B * A^T + beta * C_ or _C = alpha * A^T * B + alpha * B^T * A + beta * C_, in which _A_ and _B_ are general matrices and _A^T_ and _B^T_ are their transposed versions, _C_ (_n_ by _n_) is the symmetric matrix to be u",
                      "markdown": "`C_ is an Hermitian matrix instead.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syr2k\", T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                        [ankab,bnkab,cn],[\"alpha\",\"beta\"], \"\",    \"Rank-2K update of a symmetric matrix\", \"Performs the matrix product _C = alpha * A * B^T + alpha * B * A^T + beta * C_ or _C = alpha * A^T * B + alpha * B^T * A + beta * C_, in which _A_ and _B_ are general matrices and _A^T_ and _B^T_ are their transposed versions, _C_ (_n_ by _n_) is the symmetric matrix to be u`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 237,
                  "endLine": 173,
                  "endColumn": 245,
                  "snippet": {
                    "text": "lpha_ and _beta_ are scalar values.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"herk\",  Tc, [Css,Zdd],       [\"n\",\"k\"],            [\"layout\",\"triangle\",\"a_transpose\"],                   [\"a\"],      [\"c\"],                        [ank,cn],        [\"alpha\",\"beta\"], \"\",    \"Rank-K update of a hermitian matrix\", \"Same operation as xSYRK, but _C_ is an Hermitian matrix instead.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syr2k\", T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                   ",
                    "rendered": {
                      "text": "lpha_ and _beta_ are scalar values.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"herk\",  Tc, [Css,Zdd],       [\"n\",\"k\"],            [\"layout\",\"triangle\",\"a_transpose\"],                   [\"a\"],      [\"c\"],                        [ank,cn],        [\"alpha\",\"beta\"], \"\",    \"Rank-K update of a hermitian matrix\", \"Same operation as xSYRK, but _C_ is an Hermitian matrix instead.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syr2k\", T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                   ",
                      "markdown": "`lpha_ and _beta_ are scalar values.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"herk\",  Tc, [Css,Zdd],       [\"n\",\"k\"],            [\"layout\",\"triangle\",\"a_transpose\"],                   [\"a\"],      [\"c\"],                        [ank,cn],        [\"alpha\",\"beta\"], \"\",    \"Rank-K update of a hermitian matrix\", \"Same operation as xSYRK, but _C_ is an Hermitian matrix instead.\", [ald_trans_n_k, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syr2k\", T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"ab_transpose\"],                  [\"a\",\"b\"],  [\"c\"],                   `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 237,
                  "endLine": 172,
                  "endColumn": 245,
                  "snippet": {
                    "text": " an Hermitian matrix instead.\", [ald_side_m_n, bld_m, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syrk\",  T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"a_transpose\"],                   [\"a\"],      [\"c\"],                        [ank,cn],        [\"alpha\",\"beta\"], \"\",    \"Rank-K update of a symmetric matrix\", \"Performs the matrix product _C = alpha * A * A^T + beta * C_ or _C = alpha * A^T * A + beta * C_, in which _A_ is a general matrix and _A^T_ is its transpose, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\", [ald_trans_n_k, ",
                    "rendered": {
                      "text": " an Hermitian matrix instead.\", [ald_side_m_n, bld_m, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syrk\",  T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"a_transpose\"],                   [\"a\"],      [\"c\"],                        [ank,cn],        [\"alpha\",\"beta\"], \"\",    \"Rank-K update of a symmetric matrix\", \"Performs the matrix product _C = alpha * A * A^T + beta * C_ or _C = alpha * A^T * A + beta * C_, in which _A_ is a general matrix and _A^T_ is its transpose, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\", [ald_trans_n_k, ",
                      "markdown": "` an Hermitian matrix instead.\", [ald_side_m_n, bld_m, cld_m]),\n  Routine(True,  True,  0, False, \"3\", \"syrk\",  T,  [S,D,C,Z,H],     [\"n\",\"k\"],            [\"layout\",\"triangle\",\"a_transpose\"],                   [\"a\"],      [\"c\"],                        [ank,cn],        [\"alpha\",\"beta\"], \"\",    \"Rank-K update of a symmetric matrix\", \"Performs the matrix product _C = alpha * A * A^T + beta * C_ or _C = alpha * A^T * A + beta * C_, in which _A_ is a general matrix and _A^T_ is its transpose, _C_ (_n_ by _n_) is the symmetric matrix to be updated, and _alpha_ and _beta_ are scalar values.\", [ald_trans_n_k, `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 312,
                  "endLine": 158,
                  "endColumn": 320,
                  "snippet": {
                    "text": "ue,  True,  0, False, \"2b\", \"gerc\",  T,  [C,Z],          [\"m\",\"n\"],           [\"layout\"],                                             [\"x\",\"y\"],  [\"a\"],                        [xm,yn,amn],   [\"alpha\"],        \"\",    \"General rank-1 complex conjugated matrix update\", \"Same operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\", [ald_m]),\n  Routine(True,  True,  0, False, \"2b\", \"her\",   Tc, [Css,Zdd],      [\"n\"],               [\"layout\",\"triangle\"],                                  [\"x\"],      [\"a\"],                        [xn,an],       [\"alpha\"],        \"\",   ",
                    "rendered": {
                      "text": "ue,  True,  0, False, \"2b\", \"gerc\",  T,  [C,Z],          [\"m\",\"n\"],           [\"layout\"],                                             [\"x\",\"y\"],  [\"a\"],                        [xm,yn,amn],   [\"alpha\"],        \"\",    \"General rank-1 complex conjugated matrix update\", \"Same operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\", [ald_m]),\n  Routine(True,  True,  0, False, \"2b\", \"her\",   Tc, [Css,Zdd],      [\"n\"],               [\"layout\",\"triangle\"],                                  [\"x\"],      [\"a\"],                        [xn,an],       [\"alpha\"],        \"\",   ",
                      "markdown": "`ue,  True,  0, False, \"2b\", \"gerc\",  T,  [C,Z],          [\"m\",\"n\"],           [\"layout\"],                                             [\"x\",\"y\"],  [\"a\"],                        [xm,yn,amn],   [\"alpha\"],        \"\",    \"General rank-1 complex conjugated matrix update\", \"Same operation as xGERU, but the update is done based on the complex conjugate of the input vectors.\", [ald_m]),\n  Routine(True,  True,  0, False, \"2b\", \"her\",   Tc, [Css,Zdd],      [\"n\"],               [\"layout\",\"triangle\"],                                  [\"x\"],      [\"a\"],                        [xn,an],       [\"alpha\"],        \"\",   `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 19,
                  "endLine": 156,
                  "snippet": {
                    "text": "ine(False, True,  0, False, \"2a\", \"tpsv\",  T,  [S,D,C,Z],      [\"n\"],               [\"layout\",\"triangle\",\"a_transpose\",\"diagonal\"],         [\"ap\"],     [\"x\"],                        [apn,xn],      [],               \"\",    \"Solves a packed triangular system of equations\", \"\", []),\n  # Level 2: matrix update\n  Routine(True,  True,  0, False, \"2b\", \"ger\",   T,  [S,D,H],        [\"m\",\"n\"],           [\"layout\"],                                             [\"x\",\"y\"],  [\"a\"],                        [xm,yn,amn],   [\"alpha\"],        \"\",    \"General rank-1 matrix update\", \"Performs the operation _A = alpha * x *",
                    "rendered": {
                      "text": "ine(False, True,  0, False, \"2a\", \"tpsv\",  T,  [S,D,C,Z],      [\"n\"],               [\"layout\",\"triangle\",\"a_transpose\",\"diagonal\"],         [\"ap\"],     [\"x\"],                        [apn,xn],      [],               \"\",    \"Solves a packed triangular system of equations\", \"\", []),\n  # Level 2: matrix update\n  Routine(True,  True,  0, False, \"2b\", \"ger\",   T,  [S,D,H],        [\"m\",\"n\"],           [\"layout\"],                                             [\"x\",\"y\"],  [\"a\"],                        [xm,yn,amn],   [\"alpha\"],        \"\",    \"General rank-1 matrix update\", \"Performs the operation _A = alpha * x *",
                      "markdown": "`ine(False, True,  0, False, \"2a\", \"tpsv\",  T,  [S,D,C,Z],      [\"n\"],               [\"layout\",\"triangle\",\"a_transpose\",\"diagonal\"],         [\"ap\"],     [\"x\"],                        [apn,xn],      [],               \"\",    \"Solves a packed triangular system of equations\", \"\", []),\n  # Level 2: matrix update\n  Routine(True,  True,  0, False, \"2b\", \"ger\",   T,  [S,D,H],        [\"m\",\"n\"],           [\"layout\"],                                             [\"x\",\"y\"],  [\"a\"],                        [xm,yn,amn],   [\"alpha\"],        \"\",    \"General rank-1 matrix update\", \"Performs the operation _A = alpha * x *`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 36,
                  "endLine": 70,
                  "endColumn": 40,
                  "snippet": {
                    "text": " = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + multiplier + \" : \" + size_two + \" * \" + multiplier\n    return length\n\n\ndef layout_transpose_condition(prefix",
                    "rendered": {
                      "text": " = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + multiplier + \" : \" + size_two + \" * \" + multiplier\n    return length\n\n\ndef layout_transpose_condition(prefix",
                      "markdown": "` = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + multiplier + \" : \" + size_two + \" * \" + multiplier\n    return length\n\n\ndef layout_transpose_condition(prefix`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 36,
                  "endLine": 69,
                  "endColumn": 40,
                  "snippet": {
                    "text": "therwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + multiplier + \" : \" + size_two + \" * \" + multiplier\n    r",
                    "rendered": {
                      "text": "therwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + multiplier + \" : \" + size_two + \" * \" + multiplier\n    r",
                      "markdown": "`therwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + multiplier + \" : \" + size_two + \" * \" + multiplier\n    r`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 209,
                  "endLine": 68,
                  "endColumn": 213,
                  "snippet": {
                    "text": "ut::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + mult",
                    "rendered": {
                      "text": "ut::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + mult",
                      "markdown": "`ut::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition + \")\" + \" ? \" + size_one + \" * \" + mult`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 170,
                  "endLine": 68,
                  "endColumn": 174,
                  "snippet": {
                    "text": "_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition ",
                    "rendered": {
                      "text": "_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition ",
                      "markdown": "`_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"The value of `c_ld` must be at least `n`.\"\n\n\n# Helper functions to compute vector and matrix sizes\ndef size_helper(condition, size_one, size_two, multiplier):\n    length = \"(\" + condition `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 214,
                  "endLine": 67,
                  "endColumn": 218,
                  "snippet": {
                    "text": " of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"Th",
                    "rendered": {
                      "text": " of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"Th",
                      "markdown": "` of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c_ld` must be at least `m`.\"\ncld_n = \"Th`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 175,
                  "endLine": 67,
                  "endColumn": 179,
                  "snippet": {
                    "text": "st be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c",
                    "rendered": {
                      "text": "st be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c",
                      "markdown": "`st be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `n`, otherwise `b_ld` must be at least `k`.\"\ncld_m = \"The value of `c`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 36,
                  "endLine": 66,
                  "endColumn": 40,
                  "snippet": {
                    "text": " Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && lay",
                    "rendered": {
                      "text": " Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && lay",
                      "markdown": "` Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_trans_n_k = \"When `(transpose == Transpose::kNo && lay`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 36,
                  "endLine": 65,
                  "endColumn": 40,
                  "snippet": {
                    "text": "Major) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_tr",
                    "rendered": {
                      "text": "Major) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_tr",
                      "markdown": "`Major) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least `k`, otherwise `b_ld` must be at least `n`.\"\nbld_tr`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 100,
                  "endLine": 64,
                  "endColumn": 104,
                  "snippet": {
                    "text": "ranspose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least",
                    "rendered": {
                      "text": "ranspose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least",
                      "markdown": "`ranspose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kRowMajor)`, then `b_ld` must be at least`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 61,
                  "endLine": 64,
                  "endColumn": 65,
                  "snippet": {
                    "text": "t least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kR",
                    "rendered": {
                      "text": "t least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kR",
                      "markdown": "`t least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == Layout::kColMajor) || (transpose_b == Transpose::kYes && layout == Layout::kR`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 209,
                  "endLine": 63,
                  "endColumn": 213,
                  "snippet": {
                    "text": "ut::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == ",
                    "rendered": {
                      "text": "ut::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == ",
                      "markdown": "`ut::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(transpose_b == Transpose::kNo && layout == `"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 170,
                  "endLine": 63,
                  "endColumn": 174,
                  "snippet": {
                    "text": "_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(tran",
                    "rendered": {
                      "text": "_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(tran",
                      "markdown": "`_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `n`.\"\nbld_m = \"The value of `b_ld` must be at least `m`.\"\nbld_n = \"The value of `b_ld` must be at least `n`.\"\nbld_transb_k_n = \"When `(tran`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 214,
                  "endLine": 62,
                  "endColumn": 218,
                  "snippet": {
                    "text": "least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be a",
                    "rendered": {
                      "text": "least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be a",
                      "markdown": "`least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `side = Side::kLeft` then `a_ld` must be a`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 175,
                  "endLine": 62,
                  "endColumn": 179,
                  "snippet": {
                    "text": "_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `si",
                    "rendered": {
                      "text": "_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `si",
                      "markdown": "`_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::kNo && layout == Layout::kColMajor) || (transpose == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `n`, otherwise `a_ld` must be at least `k`.\"\nald_side_m_n = \"When `si`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 44,
                  "endLine": 61,
                  "endColumn": 48,
                  "snippet": {
                    "text": "37]\nHEADER_LINES_DOC = 0\nFOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::",
                    "rendered": {
                      "text": "37]\nHEADER_LINES_DOC = 0\nFOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::",
                      "markdown": "`37]\nHEADER_LINES_DOC = 0\nFOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\nald_trans_n_k = \"When `(transpose == Transpose::`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 40,
                  "endLine": 60,
                  "endColumn": 44,
                  "snippet": {
                    "text": ", 341]\nFOOTER_LINES = [98, 57, 112, 275, 6, 6, 6, 9, 2, 41, 56, 37]\nHEADER_LINES_DOC = 0\nFOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be",
                    "rendered": {
                      "text": ", 341]\nFOOTER_LINES = [98, 57, 112, 275, 6, 6, 6, 9, 2, 41, 56, 37]\nHEADER_LINES_DOC = 0\nFOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be",
                      "markdown": "`, 341]\nFOOTER_LINES = [98, 57, 112, 275, 6, 6, 6, 9, 2, 41, 56, 37]\nHEADER_LINES_DOC = 0\nFOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 36,
                  "endLine": 59,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\n",
                    "rendered": {
                      "text": "\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\n",
                      "markdown": "`\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\nald_transa_m_k = \"When `(transpose_a == Transpose::kNo && layout == Layout::kColMajor) || (transpose_a == Transpose::kYes && layout == Layout::kRowMajor)`, then `a_ld` must be at least `m`, otherwise `a_ld` must be at least `k`.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 36,
                  "endLine": 58,
                  "endColumn": 40,
                  "snippet": {
                    "text": "FOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\n",
                    "rendered": {
                      "text": "FOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\n",
                      "markdown": "`FOOTER_LINES_DOC = 232\n\n# Different possibilities for requirements\nald_m = \"The value of `a_ld` must be at least `m`.\"\nald_n = \"The value of `a_ld` must be at least `n`.\"\nald_k_one = \"The value of `a_ld` must be at least `k + 1`.\"\nald_kl_ku_one = \"The value of `a_ld` must be at least `kl + ku + 1`.\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 389,
                  "endLine": 184,
                  "endColumn": 394,
                  "snippet": {
                    "text": "  [\"kernel_mode\"],                                       [\"col\"],    [\"im\"],                       [col,im],        [\"\"],             \"\",    \"Col2im function (non-BLAS function)\", \"Performs the col2im algorithm, in which _col_ is the input matrix and _im_ is the output matrix. Accumulates results on top of the existing values in the _im_ buffer.\", []),\n  Routine(True,  True,  0, False, \"x\", \"convgemm\", T, [S,D,H],       convgemm_constants,   [\"kernel_mode\"],                                       [\"im\",\"kernel\"], [\"result\"],              [imb,kernel,result],[\"\"],          \"\",    \"Batched convolution",
                    "rendered": {
                      "text": "  [\"kernel_mode\"],                                       [\"col\"],    [\"im\"],                       [col,im],        [\"\"],             \"\",    \"Col2im function (non-BLAS function)\", \"Performs the col2im algorithm, in which _col_ is the input matrix and _im_ is the output matrix. Accumulates results on top of the existing values in the _im_ buffer.\", []),\n  Routine(True,  True,  0, False, \"x\", \"convgemm\", T, [S,D,H],       convgemm_constants,   [\"kernel_mode\"],                                       [\"im\",\"kernel\"], [\"result\"],              [imb,kernel,result],[\"\"],          \"\",    \"Batched convolution",
                      "markdown": "`  [\"kernel_mode\"],                                       [\"col\"],    [\"im\"],                       [col,im],        [\"\"],             \"\",    \"Col2im function (non-BLAS function)\", \"Performs the col2im algorithm, in which _col_ is the input matrix and _im_ is the output matrix. Accumulates results on top of the existing values in the _im_ buffer.\", []),\n  Routine(True,  True,  0, False, \"x\", \"convgemm\", T, [S,D,H],       convgemm_constants,   [\"kernel_mode\"],                                       [\"im\",\"kernel\"], [\"result\"],              [imb,kernel,result],[\"\"],          \"\",    \"Batched convolution`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/scripts/generator/generator.py"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Author(s):\n#   Cedric Nugteren <www.cedricnugteren.nl>\n#\n# This script automatically generates the bodies of the following files, creating the full CLBlast API interface and\n# implementation (C, C++, and reference BLAS wrappers):\n#    clblast.h\n#    clblast.cpp\n",
                    "rendered": {
                      "text": "# Author(s):\n#   Cedric Nugteren <www.cedricnugteren.nl>\n#\n# This script automatically generates the bodies of the following files, creating the full CLBlast API interface and\n# implementation (C, C++, and reference BLAS wrappers):\n#    clblast.h\n#    clblast.cpp\n",
                      "markdown": "`# Author(s):\n#   Cedric Nugteren <www.cedricnugteren.nl>\n#\n# This script automatically generates the bodies of the following files, creating the full CLBlast API interface and\n# implementation (C, C++, and reference BLAS wrappers):\n#    clblast.h\n#    clblast.cpp\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 15,
                  "endLine": 19,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# Creates an OpenCL library to link against. Taken from clMathLibraries/clBLAS\ninstall:\n  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n",
                    "rendered": {
                      "text": "# Creates an OpenCL library to link against. Taken from clMathLibraries/clBLAS\ninstall:\n  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n",
                      "markdown": "`# Creates an OpenCL library to link against. Taken from clMathLibraries/clBLAS\ninstall:\n  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 15,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n# Creates an OpenCL library to link against. Taken from clMathLibraries/clBLAS\ninstall:\n  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n",
                    "rendered": {
                      "text": "\n# Creates an OpenCL library to link against. Taken from clMathLibraries/clBLAS\ninstall:\n  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n",
                      "markdown": "`\n# Creates an OpenCL library to link against. Taken from clMathLibraries/clBLAS\ninstall:\n  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 7,
                  "endLine": 59,
                  "endColumn": 11,
                  "snippet": {
                    "text": "after_build:\n  - ps: pushd $env:CLBLAST_BUILD\n  - 7z a CLBlast-1.6.3-Windows-x64.zip .\\install_dir\\*\n  - ps: mv CLBlast-1.6.3-Windows-x64.zip $env:APPVEYOR_BUILD_FOLDER\n\nartifacts:\n  - path: '*.zip'\n",
                    "rendered": {
                      "text": "after_build:\n  - ps: pushd $env:CLBLAST_BUILD\n  - 7z a CLBlast-1.6.3-Windows-x64.zip .\\install_dir\\*\n  - ps: mv CLBlast-1.6.3-Windows-x64.zip $env:APPVEYOR_BUILD_FOLDER\n\nartifacts:\n  - path: '*.zip'\n",
                      "markdown": "`after_build:\n  - ps: pushd $env:CLBLAST_BUILD\n  - 7z a CLBlast-1.6.3-Windows-x64.zip .\\install_dir\\*\n  - ps: mv CLBlast-1.6.3-Windows-x64.zip $env:APPVEYOR_BUILD_FOLDER\n\nartifacts:\n  - path: '*.zip'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 61,
                  "endLine": 42,
                  "endColumn": 67,
                  "snippet": {
                    "text": "  - cmake -G \"NMake Makefiles\" ..\n  - nmake\n  - ps: popd\n  # Rename the inc directory to include, so FindOpencl() will find it\n  - ps: ren inc include\n  - ps: popd\n\n",
                    "rendered": {
                      "text": "  - cmake -G \"NMake Makefiles\" ..\n  - nmake\n  - ps: popd\n  # Rename the inc directory to include, so FindOpencl() will find it\n  - ps: ren inc include\n  - ps: popd\n\n",
                      "markdown": "`  - cmake -G \"NMake Makefiles\" ..\n  - nmake\n  - ps: popd\n  # Rename the inc directory to include, so FindOpencl() will find it\n  - ps: ren inc include\n  - ps: popd\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 80,
                  "endLine": 36,
                  "endColumn": 86,
                  "snippet": {
                    "text": "  - git checkout bf0f43b  # OpenCL 2.1\n  - ps: popd\n  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }\n  # Create the static import lib in a directory called lib, so findopencl() will find it\n  - ps: mkdir lib\n  - ps: pushd lib\n  - cmake -G \"NMake Makefiles\" ..\n",
                    "rendered": {
                      "text": "  - git checkout bf0f43b  # OpenCL 2.1\n  - ps: popd\n  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }\n  # Create the static import lib in a directory called lib, so findopencl() will find it\n  - ps: mkdir lib\n  - ps: pushd lib\n  - cmake -G \"NMake Makefiles\" ..\n",
                      "markdown": "`  - git checkout bf0f43b  # OpenCL 2.1\n  - ps: popd\n  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }\n  # Create the static import lib in a directory called lib, so findopencl() will find it\n  - ps: mkdir lib\n  - ps: pushd lib\n  - cmake -G \"NMake Makefiles\" ..\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "endLine": 33,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n  - git checkout bf0f43b  # OpenCL 2.1\n  - ps: popd\n  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }\n  # Create the static import lib in a directory called lib, so findopencl() will find it\n",
                    "rendered": {
                      "text": "  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n  - git checkout bf0f43b  # OpenCL 2.1\n  - ps: popd\n  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }\n  # Create the static import lib in a directory called lib, so findopencl() will find it\n",
                      "markdown": "`  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n  - git checkout bf0f43b  # OpenCL 2.1\n  - ps: popd\n  # - ps: dir; if( $lastexitcode -eq 0 ){ dir include/CL } else { Write-Output boom }\n  # Create the static import lib in a directory called lib, so findopencl() will find it\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 7,
                  "endLine": 30,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n  - git checkout bf0f43b  # OpenCL 2.1\n",
                    "rendered": {
                      "text": "  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n  - git checkout bf0f43b  # OpenCL 2.1\n",
                      "markdown": "`  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n  - git checkout bf0f43b  # OpenCL 2.1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "endLine": 29,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n",
                    "rendered": {
                      "text": "  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n",
                      "markdown": "`  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n  # Switch to OpenCL 2.1 headers\n  - ps: pushd inc/CL\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 25,
                  "endLine": 27,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n",
                    "rendered": {
                      "text": "  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n",
                      "markdown": "`  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n  - git clone https://github.com/KhronosGroup/OpenCL-Headers.git inc/CL\n  - ps: wget https://raw.githubusercontent.com/KhronosGroup/OpenCL-CLHPP/main/include/CL/opencl.hpp -OutFile inc/CL/cl.hpp\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "endLine": 25,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n",
                    "rendered": {
                      "text": "  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n",
                      "markdown": "`  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n  # The cmake build files expect a directory called inc\n  - ps: mkdir inc/CL\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 3,
                  "endLine": 23,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n",
                    "rendered": {
                      "text": "  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n",
                      "markdown": "`  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n  - ps: mv ./OpenCL-ICD-Loader/* .\n  # This downloads all the opencl header files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/clblast.zip/.appveyor.yml"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 21,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n",
                    "rendered": {
                      "text": "  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n",
                      "markdown": "`  - ps: mkdir $env:OPENCL_ROOT\n  - ps: pushd $env:OPENCL_ROOT\n  # This downloads the source to the Khronos ICD library\n  - git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader.git\n  - ps: pushd OpenCL-ICD-Loader\n  - git checkout cb4acb9  # older version (pre 2.2 support)\n  - ps: popd\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}