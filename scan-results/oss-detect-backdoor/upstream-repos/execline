{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/upgrade.html"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 5,
                  "endLine": 227,
                  "endColumn": 9,
                  "snippet": {
                    "text": " <li> New binary: <a href=\"posix-umask.html\">posix-umask</a>. </li>\n <li> <tt>cd</tt> has been renamed <a href=\"execline-cd.html\">execline-cd</a>. </li>\n <li> <tt>umask</tt> has been renamed <a href=\"execline-umask.html\">execline-umask</a>. </li>\n <li> At installation time, <tt>cd</tt> and <tt>umask</tt> symbolic links are created,\npointing to either the <tt>posix-</tt> or <tt>execline-</tt> -prefixed version of the\ncommands, depending on whether the <tt>--enable-pedantic-posix</tt> option\nwas given or not. </li>\n",
                    "rendered": {
                      "text": " <li> New binary: <a href=\"posix-umask.html\">posix-umask</a>. </li>\n <li> <tt>cd</tt> has been renamed <a href=\"execline-cd.html\">execline-cd</a>. </li>\n <li> <tt>umask</tt> has been renamed <a href=\"execline-umask.html\">execline-umask</a>. </li>\n <li> At installation time, <tt>cd</tt> and <tt>umask</tt> symbolic links are created,\npointing to either the <tt>posix-</tt> or <tt>execline-</tt> -prefixed version of the\ncommands, depending on whether the <tt>--enable-pedantic-posix</tt> option\nwas given or not. </li>\n",
                      "markdown": "` <li> New binary: <a href=\"posix-umask.html\">posix-umask</a>. </li>\n <li> <tt>cd</tt> has been renamed <a href=\"execline-cd.html\">execline-cd</a>. </li>\n <li> <tt>umask</tt> has been renamed <a href=\"execline-umask.html\">execline-umask</a>. </li>\n <li> At installation time, <tt>cd</tt> and <tt>umask</tt> symbolic links are created,\npointing to either the <tt>posix-</tt> or <tt>execline-</tt> -prefixed version of the\ncommands, depending on whether the <tt>--enable-pedantic-posix</tt> option\nwas given or not. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/upgrade.html"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 53,
                  "endLine": 379,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n<ul>\n <li> skalibs dependency bumped to 2.3.6.0 </li>\n <li> New configure option: <tt>--shebangdir</tt> for script creation\nautomation. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": "\n<ul>\n <li> skalibs dependency bumped to 2.3.6.0 </li>\n <li> New configure option: <tt>--shebangdir</tt> for script creation\nautomation. </li>\n</ul>\n\n",
                      "markdown": "`\n<ul>\n <li> skalibs dependency bumped to 2.3.6.0 </li>\n <li> New configure option: <tt>--shebangdir</tt> for script creation\nautomation. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/upgrade.html"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 53,
                  "endLine": 319,
                  "endColumn": 62,
                  "snippet": {
                    "text": " <li> skalibs dependency bumped to 2.4.0.0 </li>\n <li> New <tt>-I</tt> option to <a href=\"backtick.html\">backtick</a>\nand <a href=\"withstdinas.html\">withstdinas</a> </li>\n <li> <a href=\"wait.html\">wait</a> can now be given a timeout </li>\n</ul>\n\n<h2> in 2.1.5.0 </h2>\n",
                    "rendered": {
                      "text": " <li> skalibs dependency bumped to 2.4.0.0 </li>\n <li> New <tt>-I</tt> option to <a href=\"backtick.html\">backtick</a>\nand <a href=\"withstdinas.html\">withstdinas</a> </li>\n <li> <a href=\"wait.html\">wait</a> can now be given a timeout </li>\n</ul>\n\n<h2> in 2.1.5.0 </h2>\n",
                      "markdown": "` <li> skalibs dependency bumped to 2.4.0.0 </li>\n <li> New <tt>-I</tt> option to <a href=\"backtick.html\">backtick</a>\nand <a href=\"withstdinas.html\">withstdinas</a> </li>\n <li> <a href=\"wait.html\">wait</a> can now be given a timeout </li>\n</ul>\n\n<h2> in 2.1.5.0 </h2>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/upgrade.html"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 30,
                  "endLine": 256,
                  "endColumn": 35,
                  "snippet": {
                    "text": " <li> <a href=\"//skarnet.org/software/skalibs/\">skalibs</a>\ndependency bumped to 2.8.0.0. </li>\n <li> New command: <a href=\"envfile.html\">envfile</a>. </li>\n <li> Everything now builds as PIC by default no matter\nthe toolchain's settings. Use the <tt>--disable-all-pic</tt> configure\noption to build executables and static libraries as non-PIC. </li>\n</ul>\n",
                    "rendered": {
                      "text": " <li> <a href=\"//skarnet.org/software/skalibs/\">skalibs</a>\ndependency bumped to 2.8.0.0. </li>\n <li> New command: <a href=\"envfile.html\">envfile</a>. </li>\n <li> Everything now builds as PIC by default no matter\nthe toolchain's settings. Use the <tt>--disable-all-pic</tt> configure\noption to build executables and static libraries as non-PIC. </li>\n</ul>\n",
                      "markdown": "` <li> <a href=\"//skarnet.org/software/skalibs/\">skalibs</a>\ndependency bumped to 2.8.0.0. </li>\n <li> New command: <a href=\"envfile.html\">envfile</a>. </li>\n <li> Everything now builds as PIC by default no matter\nthe toolchain's settings. Use the <tt>--disable-all-pic</tt> configure\noption to build executables and static libraries as non-PIC. </li>\n</ul>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 2,
                  "endLine": 274,
                  "endColumn": 6,
                  "snippet": {
                    "text": " <tt>execlineb</tt> builds and executes a unique\n<em>argv</em> with the script: hence scripts are subject to OS-dependent\nlimitations such as the kernel buffer size for <em>argv</em> and <em>envp</em>\n - at least 64 kB on most systems. This means that <tt>execlineb</tt> cannot\nexecute arbitrarily large scripts. Be careful with deeply nested scripts too:\nwithout the <tt>-p</tt>/<tt>-P</tt>/<tt>-S</tt>/<tt>-s</tt> option, each\nexeclineb invocation uses up some space in the environment.\n",
                    "rendered": {
                      "text": " <tt>execlineb</tt> builds and executes a unique\n<em>argv</em> with the script: hence scripts are subject to OS-dependent\nlimitations such as the kernel buffer size for <em>argv</em> and <em>envp</em>\n - at least 64 kB on most systems. This means that <tt>execlineb</tt> cannot\nexecute arbitrarily large scripts. Be careful with deeply nested scripts too:\nwithout the <tt>-p</tt>/<tt>-P</tt>/<tt>-S</tt>/<tt>-s</tt> option, each\nexeclineb invocation uses up some space in the environment.\n",
                      "markdown": "` <tt>execlineb</tt> builds and executes a unique\n<em>argv</em> with the script: hence scripts are subject to OS-dependent\nlimitations such as the kernel buffer size for <em>argv</em> and <em>envp</em>\n - at least 64 kB on most systems. This means that <tt>execlineb</tt> cannot\nexecute arbitrarily large scripts. Be careful with deeply nested scripts too:\nwithout the <tt>-p</tt>/<tt>-P</tt>/<tt>-S</tt>/<tt>-s</tt> option, each\nexeclineb invocation uses up some space in the environment.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 29,
                  "endLine": 256,
                  "endColumn": 33,
                  "snippet": {
                    "text": "<a href=\"//skarnet.org/software/s6/\">s6</a>'s or \n<a href=\"http://smarden.org/runit/\">runit</a>'s <em>run scripts</em>. </li>\n <li> The <tt>-S&nbsp;<em>nmin</em></tt> option <em>will</em> substitute the\npositional parameters - up to at least <em>nmin</em> - but <em>will not</em>\npush nor set environment\nvariables. <tt>execlineb -S3 -c \"<em>script</em>\"</tt> is equivalent to,\nbut more efficient than, <tt>execlineb -c \"elgetpositionals -P3 emptyenv\n",
                    "rendered": {
                      "text": "<a href=\"//skarnet.org/software/s6/\">s6</a>'s or \n<a href=\"http://smarden.org/runit/\">runit</a>'s <em>run scripts</em>. </li>\n <li> The <tt>-S&nbsp;<em>nmin</em></tt> option <em>will</em> substitute the\npositional parameters - up to at least <em>nmin</em> - but <em>will not</em>\npush nor set environment\nvariables. <tt>execlineb -S3 -c \"<em>script</em>\"</tt> is equivalent to,\nbut more efficient than, <tt>execlineb -c \"elgetpositionals -P3 emptyenv\n",
                      "markdown": "`<a href=\"//skarnet.org/software/s6/\">s6</a>'s or \n<a href=\"http://smarden.org/runit/\">runit</a>'s <em>run scripts</em>. </li>\n <li> The <tt>-S&nbsp;<em>nmin</em></tt> option <em>will</em> substitute the\npositional parameters - up to at least <em>nmin</em> - but <em>will not</em>\npush nor set environment\nvariables. <tt>execlineb -S3 -c \"<em>script</em>\"</tt> is equivalent to,\nbut more efficient than, <tt>execlineb -c \"elgetpositionals -P3 emptyenv\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 18,
                  "endLine": 239,
                  "endColumn": 22,
                  "snippet": {
                    "text": "use them if you're not familiar with the way execlineb uses the\nenvironment to store positional parameters. Alternatively, there's also\nan integrated substitution mechanism that doesn't make use\nof the environment at all.\n</p>\n\n<ul>\n",
                    "rendered": {
                      "text": "use them if you're not familiar with the way execlineb uses the\nenvironment to store positional parameters. Alternatively, there's also\nan integrated substitution mechanism that doesn't make use\nof the environment at all.\n</p>\n\n<ul>\n",
                      "markdown": "`use them if you're not familiar with the way execlineb uses the\nenvironment to store positional parameters. Alternatively, there's also\nan integrated substitution mechanism that doesn't make use\nof the environment at all.\n</p>\n\n<ul>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 74,
                  "endLine": 197,
                  "endColumn": 3,
                  "snippet": {
                    "text": "<a href=\"foreground.html\">foreground</a>, use the <tt>EXECLINE_STRICT</tt>\nenvironment variable: if it is set to 1, they will print a warning message\non stderr if they find their blocks not to be properly quoted. If it is set\nto 2, they will also die. If it is set to 0, or unset, they won't complain\nat all.\n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "<a href=\"foreground.html\">foreground</a>, use the <tt>EXECLINE_STRICT</tt>\nenvironment variable: if it is set to 1, they will print a warning message\non stderr if they find their blocks not to be properly quoted. If it is set\nto 2, they will also die. If it is set to 0, or unset, they won't complain\nat all.\n</p>\n\n<p>\n",
                      "markdown": "`<a href=\"foreground.html\">foreground</a>, use the <tt>EXECLINE_STRICT</tt>\nenvironment variable: if it is set to 1, they will print a warning message\non stderr if they find their blocks not to be properly quoted. If it is set\nto 2, they will also die. If it is set to 0, or unset, they won't complain\nat all.\n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 60,
                  "endLine": 177,
                  "endColumn": 64,
                  "snippet": {
                    "text": "decrements <em>blevel</em>, and is replaced with the empty word.\nQuoted closing braces do not have that behaviour. </li>\n <li> If <tt>execlineb</tt> finds that braces are unmatched (i.e.\n<em>blevel</em> goes below 0 during the parsing, or is not 0 at the end\nof the script), it exits 100 with an error message. </li>\n <li> <tt>execlineb</tt> automatically quotes\n<a href=\"el_semicolon.html\">blocks</a>. Which means that every time it\n",
                    "rendered": {
                      "text": "decrements <em>blevel</em>, and is replaced with the empty word.\nQuoted closing braces do not have that behaviour. </li>\n <li> If <tt>execlineb</tt> finds that braces are unmatched (i.e.\n<em>blevel</em> goes below 0 during the parsing, or is not 0 at the end\nof the script), it exits 100 with an error message. </li>\n <li> <tt>execlineb</tt> automatically quotes\n<a href=\"el_semicolon.html\">blocks</a>. Which means that every time it\n",
                      "markdown": "`decrements <em>blevel</em>, and is replaced with the empty word.\nQuoted closing braces do not have that behaviour. </li>\n <li> If <tt>execlineb</tt> finds that braces are unmatched (i.e.\n<em>blevel</em> goes below 0 during the parsing, or is not 0 at the end\nof the script), it exits 100 with an error message. </li>\n <li> <tt>execlineb</tt> automatically quotes\n<a href=\"el_semicolon.html\">blocks</a>. Which means that every time it\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 71,
                  "endLine": 155,
                  "snippet": {
                    "text": " <li> Any character can be escaped in unquoted strings by prepending\nit with a backslash. It works the same way in quoted strings, except\nfor the special sequences described above. </li>\n <li> As a special case, an unquoted backslash at the end of a line, or at\nthe end of the input, is ignored. This is to make it easier to copy\nexecline fragments from a shell script. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": " <li> Any character can be escaped in unquoted strings by prepending\nit with a backslash. It works the same way in quoted strings, except\nfor the special sequences described above. </li>\n <li> As a special case, an unquoted backslash at the end of a line, or at\nthe end of the input, is ignored. This is to make it easier to copy\nexecline fragments from a shell script. </li>\n</ul>\n\n",
                      "markdown": "` <li> Any character can be escaped in unquoted strings by prepending\nit with a backslash. It works the same way in quoted strings, except\nfor the special sequences described above. </li>\n <li> As a special case, an unquoted backslash at the end of a line, or at\nthe end of the input, is ignored. This is to make it easier to copy\nexecline fragments from a shell script. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 46,
                  "endLine": 154,
                  "endColumn": 50,
                  "snippet": {
                    "text": " <li> Any character can be escaped in unquoted strings by prepending\nit with a backslash. It works the same way in quoted strings, except\nfor the special sequences described above. </li>\n <li> As a special case, an unquoted backslash at the end of a line, or at\nthe end of the input, is ignored. This is to make it easier to copy\nexecline fragments from a shell script. </li>\n</ul>\n",
                    "rendered": {
                      "text": " <li> Any character can be escaped in unquoted strings by prepending\nit with a backslash. It works the same way in quoted strings, except\nfor the special sequences described above. </li>\n <li> As a special case, an unquoted backslash at the end of a line, or at\nthe end of the input, is ignored. This is to make it easier to copy\nexecline fragments from a shell script. </li>\n</ul>\n",
                      "markdown": "` <li> Any character can be escaped in unquoted strings by prepending\nit with a backslash. It works the same way in quoted strings, except\nfor the special sequences described above. </li>\n <li> As a special case, an unquoted backslash at the end of a line, or at\nthe end of the input, is ignored. This is to make it easier to copy\nexecline fragments from a shell script. </li>\n</ul>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 44,
                  "endLine": 245,
                  "endColumn": 52,
                  "snippet": {
                    "text": "<ul>\n <li> The <tt>-p</tt> option will bypass the\n<a href=\"el_pushenv.html\">push</a> phase: the current frame of positional\nparameters will be <em>overwritten</em>. The script will <em>not</em> be\nreentrant. </li>\n <li> The <tt>-P</tt> option will bypass positional parameter handling\n<em>completely</em>: the environment will not be pushed, and positional\n",
                    "rendered": {
                      "text": "<ul>\n <li> The <tt>-p</tt> option will bypass the\n<a href=\"el_pushenv.html\">push</a> phase: the current frame of positional\nparameters will be <em>overwritten</em>. The script will <em>not</em> be\nreentrant. </li>\n <li> The <tt>-P</tt> option will bypass positional parameter handling\n<em>completely</em>: the environment will not be pushed, and positional\n",
                      "markdown": "`<ul>\n <li> The <tt>-p</tt> option will bypass the\n<a href=\"el_pushenv.html\">push</a> phase: the current frame of positional\nparameters will be <em>overwritten</em>. The script will <em>not</em> be\nreentrant. </li>\n <li> The <tt>-P</tt> option will bypass positional parameter handling\n<em>completely</em>: the environment will not be pushed, and positional\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 43,
                  "endLine": 221,
                  "endColumn": 51,
                  "snippet": {
                    "text": "be substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\nprint a warning message rather than run silently. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 2: the script will exit with an\nerror message. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": "be substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\nprint a warning message rather than run silently. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 2: the script will exit with an\nerror message. </li>\n</ul>\n\n",
                      "markdown": "`be substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\nprint a warning message rather than run silently. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 2: the script will exit with an\nerror message. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 62,
                  "endLine": 219,
                  "endColumn": 70,
                  "snippet": {
                    "text": " <li> If <tt>EXECLINE_STRICT</tt> is 0: the script will run\nsilently, and missing positional parameters, up to <em>nmin</em>, will\nbe substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\nprint a warning message rather than run silently. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 2: the script will exit with an\nerror message. </li>\n",
                    "rendered": {
                      "text": " <li> If <tt>EXECLINE_STRICT</tt> is 0: the script will run\nsilently, and missing positional parameters, up to <em>nmin</em>, will\nbe substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\nprint a warning message rather than run silently. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 2: the script will exit with an\nerror message. </li>\n",
                      "markdown": "` <li> If <tt>EXECLINE_STRICT</tt> is 0: the script will run\nsilently, and missing positional parameters, up to <em>nmin</em>, will\nbe substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\nprint a warning message rather than run silently. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 2: the script will exit with an\nerror message. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 43,
                  "endLine": 216,
                  "endColumn": 51,
                  "snippet": {
                    "text": "</p>\n\n<ul>\n <li> If <tt>EXECLINE_STRICT</tt> is 0: the script will run\nsilently, and missing positional parameters, up to <em>nmin</em>, will\nbe substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\n",
                    "rendered": {
                      "text": "</p>\n\n<ul>\n <li> If <tt>EXECLINE_STRICT</tt> is 0: the script will run\nsilently, and missing positional parameters, up to <em>nmin</em>, will\nbe substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\n",
                      "markdown": "`</p>\n\n<ul>\n <li> If <tt>EXECLINE_STRICT</tt> is 0: the script will run\nsilently, and missing positional parameters, up to <em>nmin</em>, will\nbe substituted with the empty word. </li>\n <li> If <tt>EXECLINE_STRICT</tt> is 1 or unset: same, but the script will\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 17,
                  "endLine": 195,
                  "endColumn": 23,
                  "snippet": {
                    "text": " External execline commands that read blocks, like\n<a href=\"foreground.html\">foreground</a>, use the <tt>EXECLINE_STRICT</tt>\nenvironment variable: if it is set to 1, they will print a warning message\non stderr if they find their blocks not to be properly quoted. If it is set\nto 2, they will also die. If it is set to 0, or unset, they won't complain\nat all.\n</p>\n",
                    "rendered": {
                      "text": " External execline commands that read blocks, like\n<a href=\"foreground.html\">foreground</a>, use the <tt>EXECLINE_STRICT</tt>\nenvironment variable: if it is set to 1, they will print a warning message\non stderr if they find their blocks not to be properly quoted. If it is set\nto 2, they will also die. If it is set to 0, or unset, they won't complain\nat all.\n</p>\n",
                      "markdown": "` External execline commands that read blocks, like\n<a href=\"foreground.html\">foreground</a>, use the <tt>EXECLINE_STRICT</tt>\nenvironment variable: if it is set to 1, they will print a warning message\non stderr if they find their blocks not to be properly quoted. If it is set\nto 2, they will also die. If it is set to 0, or unset, they won't complain\nat all.\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 62,
                  "endLine": 180,
                  "endColumn": 68,
                  "snippet": {
                    "text": "<em>blevel</em> goes below 0 during the parsing, or is not 0 at the end\nof the script), it exits 100 with an error message. </li>\n <li> <tt>execlineb</tt> automatically quotes\n<a href=\"el_semicolon.html\">blocks</a>. Which means that every time it\nfinds a word, it prepends it with <em>blevel</em> spaces. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": "<em>blevel</em> goes below 0 during the parsing, or is not 0 at the end\nof the script), it exits 100 with an error message. </li>\n <li> <tt>execlineb</tt> automatically quotes\n<a href=\"el_semicolon.html\">blocks</a>. Which means that every time it\nfinds a word, it prepends it with <em>blevel</em> spaces. </li>\n</ul>\n\n",
                      "markdown": "`<em>blevel</em> goes below 0 during the parsing, or is not 0 at the end\nof the script), it exits 100 with an error message. </li>\n <li> <tt>execlineb</tt> automatically quotes\n<a href=\"el_semicolon.html\">blocks</a>. Which means that every time it\nfinds a word, it prepends it with <em>blevel</em> spaces. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 13,
                  "endLine": 120,
                  "endColumn": 21,
                  "snippet": {
                    "text": "<h2> Syntax of scripts </h2>\n\n<p>\n An execlineb script is a string that must not contain the null character.\n<tt>execlineb</tt> parses it and divides it into <em>words</em>.\n\n The parser recognizes the following components:\n",
                    "rendered": {
                      "text": "<h2> Syntax of scripts </h2>\n\n<p>\n An execlineb script is a string that must not contain the null character.\n<tt>execlineb</tt> parses it and divides it into <em>words</em>.\n\n The parser recognizes the following components:\n",
                      "markdown": "`<h2> Syntax of scripts </h2>\n\n<p>\n An execlineb script is a string that must not contain the null character.\n<tt>execlineb</tt> parses it and divides it into <em>words</em>.\n\n The parser recognizes the following components:\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 6,
                  "endLine": 80,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  <li> <tt>execlineb</tt> sets the <tt>#</tt> environment variable to\nthe number <em>n</em> of <em>args</em> it is given. </li>\n  <li> It sets the <tt>0</tt> environment variable to the name\nof the script - or to the <tt>execlineb</tt> invocation name\nif the <tt>-c</tt> option is used. </li>\n  <li> It sets the <tt>1</tt>, <tt>2</tt>, ... <tt><em>n</em></tt>\nenvironment variables to the different <em>args</em>. </li>\n",
                    "rendered": {
                      "text": "  <li> <tt>execlineb</tt> sets the <tt>#</tt> environment variable to\nthe number <em>n</em> of <em>args</em> it is given. </li>\n  <li> It sets the <tt>0</tt> environment variable to the name\nof the script - or to the <tt>execlineb</tt> invocation name\nif the <tt>-c</tt> option is used. </li>\n  <li> It sets the <tt>1</tt>, <tt>2</tt>, ... <tt><em>n</em></tt>\nenvironment variables to the different <em>args</em>. </li>\n",
                      "markdown": "`  <li> <tt>execlineb</tt> sets the <tt>#</tt> environment variable to\nthe number <em>n</em> of <em>args</em> it is given. </li>\n  <li> It sets the <tt>0</tt> environment variable to the name\nof the script - or to the <tt>execlineb</tt> invocation name\nif the <tt>-c</tt> option is used. </li>\n  <li> It sets the <tt>1</tt>, <tt>2</tt>, ... <tt><em>n</em></tt>\nenvironment variables to the different <em>args</em>. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execlineb.html"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 45,
                  "endLine": 55,
                  "endColumn": 53,
                  "snippet": {
                    "text": "</p>\n\n<ul>\n <li> <tt>execlineb</tt> reads and parses the script it is given.\nIt exits 100 on a syntax error and 111 on a temporary error.\nIt makes an <em>argv</em>, i.e. a system command line, with the\nparsed script. If the <em>argv</em> is empty, <tt>execlineb</tt>\n",
                    "rendered": {
                      "text": "</p>\n\n<ul>\n <li> <tt>execlineb</tt> reads and parses the script it is given.\nIt exits 100 on a syntax error and 111 on a temporary error.\nIt makes an <em>argv</em>, i.e. a system command line, with the\nparsed script. If the <em>argv</em> is empty, <tt>execlineb</tt>\n",
                      "markdown": "`</p>\n\n<ul>\n <li> <tt>execlineb</tt> reads and parses the script it is given.\nIt exits 100 on a syntax error and 111 on a temporary error.\nIt makes an <em>argv</em>, i.e. a system command line, with the\nparsed script. If the <em>argv</em> is empty, <tt>execlineb</tt>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/elgetopt.html"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38,
                  "endColumn": 45,
                  "snippet": {
                    "text": "environment variables <tt>0</tt>, <tt>1</tt>, ..., <tt><em>n</em></tt>.\nIt exits 100 if it is not the case. </li>\n <li> <tt>elgetopt</tt> <a href=\"el_pushenv.html\">pushes</a>\nenvironment variables starting with <tt>ELGETOPT_</tt>. To get the\nprevious values back, use\n<a href=\"emptyenv.html\"><tt>emptyenv&nbsp;-o</tt></a>. </li>\n <li> <tt>elgetopt</tt> looks into <tt>1</tt>, <tt>2</tt>... for options,\n",
                    "rendered": {
                      "text": "environment variables <tt>0</tt>, <tt>1</tt>, ..., <tt><em>n</em></tt>.\nIt exits 100 if it is not the case. </li>\n <li> <tt>elgetopt</tt> <a href=\"el_pushenv.html\">pushes</a>\nenvironment variables starting with <tt>ELGETOPT_</tt>. To get the\nprevious values back, use\n<a href=\"emptyenv.html\"><tt>emptyenv&nbsp;-o</tt></a>. </li>\n <li> <tt>elgetopt</tt> looks into <tt>1</tt>, <tt>2</tt>... for options,\n",
                      "markdown": "`environment variables <tt>0</tt>, <tt>1</tt>, ..., <tt><em>n</em></tt>.\nIt exits 100 if it is not the case. </li>\n <li> <tt>elgetopt</tt> <a href=\"el_pushenv.html\">pushes</a>\nenvironment variables starting with <tt>ELGETOPT_</tt>. To get the\nprevious values back, use\n<a href=\"emptyenv.html\"><tt>emptyenv&nbsp;-o</tt></a>. </li>\n <li> <tt>elgetopt</tt> looks into <tt>1</tt>, <tt>2</tt>... for options,\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/elgetopt.html"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 34,
                  "endLine": 33,
                  "endColumn": 40,
                  "snippet": {
                    "text": "</pre>\n\n<ul>\n <li> <tt>elgetopt</tt> expects to find a valid number <em>n</em> of\narguments in the <tt>#</tt> environment variable, and <em>n</em>+1\nenvironment variables <tt>0</tt>, <tt>1</tt>, ..., <tt><em>n</em></tt>.\nIt exits 100 if it is not the case. </li>\n",
                    "rendered": {
                      "text": "</pre>\n\n<ul>\n <li> <tt>elgetopt</tt> expects to find a valid number <em>n</em> of\narguments in the <tt>#</tt> environment variable, and <em>n</em>+1\nenvironment variables <tt>0</tt>, <tt>1</tt>, ..., <tt><em>n</em></tt>.\nIt exits 100 if it is not the case. </li>\n",
                      "markdown": "`</pre>\n\n<ul>\n <li> <tt>elgetopt</tt> expects to find a valid number <em>n</em> of\narguments in the <tt>#</tt> environment variable, and <em>n</em>+1\nenvironment variables <tt>0</tt>, <tt>1</tt>, ..., <tt><em>n</em></tt>.\nIt exits 100 if it is not the case. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/case.html"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 19,
                  "endLine": 142,
                  "endColumn": 28,
                  "snippet": {
                    "text": " <li> The options to the <tt>case</tt> command change meanings: instead of\ncontrolling how the <em>regex</em> regular expressions are interpreted by the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/regcomp.html\">regcomp()</a>\nprimitive, they now control how <em>value</em> is matched against the <em>regex</em> patterns\n(which are not regular expressions!) via the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/fnmatch.html\">fnmatch()</a>\nprimitive. Namely:\n",
                    "rendered": {
                      "text": " <li> The options to the <tt>case</tt> command change meanings: instead of\ncontrolling how the <em>regex</em> regular expressions are interpreted by the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/regcomp.html\">regcomp()</a>\nprimitive, they now control how <em>value</em> is matched against the <em>regex</em> patterns\n(which are not regular expressions!) via the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/fnmatch.html\">fnmatch()</a>\nprimitive. Namely:\n",
                      "markdown": "` <li> The options to the <tt>case</tt> command change meanings: instead of\ncontrolling how the <em>regex</em> regular expressions are interpreted by the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/regcomp.html\">regcomp()</a>\nprimitive, they now control how <em>value</em> is matched against the <em>regex</em> patterns\n(which are not regular expressions!) via the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/fnmatch.html\">fnmatch()</a>\nprimitive. Namely:\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline-shell.html"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 32,
                  "endLine": 19,
                  "endColumn": 40,
                  "snippet": {
                    "text": "<a href=\"//skarnet.org/\">skarnet.org</a>\n</p>\n\n<h1> The <tt>execline-shell</tt> script </h1>\n\n<p>\n<tt>execline-shell</tt> executes <tt>$HOME/.execline-shell</tt>\n",
                    "rendered": {
                      "text": "<a href=\"//skarnet.org/\">skarnet.org</a>\n</p>\n\n<h1> The <tt>execline-shell</tt> script </h1>\n\n<p>\n<tt>execline-shell</tt> executes <tt>$HOME/.execline-shell</tt>\n",
                      "markdown": "`<a href=\"//skarnet.org/\">skarnet.org</a>\n</p>\n\n<h1> The <tt>execline-shell</tt> script </h1>\n\n<p>\n<tt>execline-shell</tt> executes <tt>$HOME/.execline-shell</tt>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline-shell.html"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 40,
                  "endLine": 8,
                  "endColumn": 48,
                  "snippet": {
                    "text": " <meta http-equiv=\"Content-Language\" content=\"en\" />\n <title>execline: the execline-shell script</title>\n <meta name=\"Description\" content=\"execline: the execline-shell script\" />\n <meta name=\"Keywords\" content=\"execline script execline-shell\" />\n <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n</head>\n<body>\n",
                    "rendered": {
                      "text": " <meta http-equiv=\"Content-Language\" content=\"en\" />\n <title>execline: the execline-shell script</title>\n <meta name=\"Description\" content=\"execline: the execline-shell script\" />\n <meta name=\"Keywords\" content=\"execline script execline-shell\" />\n <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n</head>\n<body>\n",
                      "markdown": "` <meta http-equiv=\"Content-Language\" content=\"en\" />\n <title>execline: the execline-shell script</title>\n <meta name=\"Description\" content=\"execline: the execline-shell script\" />\n <meta name=\"Keywords\" content=\"execline script execline-shell\" />\n <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n</head>\n<body>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_semicolon.html"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 48,
                  "endLine": 109,
                  "endColumn": 52,
                  "snippet": {
                    "text": "</pre>\n\n<p>\n has very much unwanted results. (Don't try this at home.)\n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "</pre>\n\n<p>\n has very much unwanted results. (Don't try this at home.)\n</p>\n\n<p>\n",
                      "markdown": "`</pre>\n\n<p>\n has very much unwanted results. (Don't try this at home.)\n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_semicolon.html"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 4,
                  "endLine": 116,
                  "endColumn": 10,
                  "snippet": {
                    "text": " You can use the <tt>EXECLINE_STRICT</tt> environment variable to\ncheck proper block quoting. If that variable contains <tt>1</tt>,\ncommands that read blocks will print a warning message every time\nthey find an unquoted argument inside a block. If that variable\ncontains <tt>2</tt> or a bigger integer, commands will print an\nerror message and die on unquoted arguments.\n<br /> You can use <a href=\"execlineb.html\">execlineb</a>'s\n",
                    "rendered": {
                      "text": " You can use the <tt>EXECLINE_STRICT</tt> environment variable to\ncheck proper block quoting. If that variable contains <tt>1</tt>,\ncommands that read blocks will print a warning message every time\nthey find an unquoted argument inside a block. If that variable\ncontains <tt>2</tt> or a bigger integer, commands will print an\nerror message and die on unquoted arguments.\n<br /> You can use <a href=\"execlineb.html\">execlineb</a>'s\n",
                      "markdown": "` You can use the <tt>EXECLINE_STRICT</tt> environment variable to\ncheck proper block quoting. If that variable contains <tt>1</tt>,\ncommands that read blocks will print a warning message every time\nthey find an unquoted argument inside a block. If that variable\ncontains <tt>2</tt> or a bigger integer, commands will print an\nerror message and die on unquoted arguments.\n<br /> You can use <a href=\"execlineb.html\">execlineb</a>'s\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_semicolon.html"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 60,
                  "endLine": 116,
                  "snippet": {
                    "text": "<p>\n You can use the <tt>EXECLINE_STRICT</tt> environment variable to\ncheck proper block quoting. If that variable contains <tt>1</tt>,\ncommands that read blocks will print a warning message every time\nthey find an unquoted argument inside a block. If that variable\ncontains <tt>2</tt> or a bigger integer, commands will print an\nerror message and die on unquoted arguments.\n<br /> You can use <a href=\"execlineb.html\">execlineb</a>'s\n",
                    "rendered": {
                      "text": "<p>\n You can use the <tt>EXECLINE_STRICT</tt> environment variable to\ncheck proper block quoting. If that variable contains <tt>1</tt>,\ncommands that read blocks will print a warning message every time\nthey find an unquoted argument inside a block. If that variable\ncontains <tt>2</tt> or a bigger integer, commands will print an\nerror message and die on unquoted arguments.\n<br /> You can use <a href=\"execlineb.html\">execlineb</a>'s\n",
                      "markdown": "`<p>\n You can use the <tt>EXECLINE_STRICT</tt> environment variable to\ncheck proper block quoting. If that variable contains <tt>1</tt>,\ncommands that read blocks will print a warning message every time\nthey find an unquoted argument inside a block. If that variable\ncontains <tt>2</tt> or a bigger integer, commands will print an\nerror message and die on unquoted arguments.\n<br /> You can use <a href=\"execlineb.html\">execlineb</a>'s\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/eltest.html"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 26,
                  "endLine": 154,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n<p>\n Note that these details are irrelevant to a huge majority of <tt>eltest</tt> use\ncases, because most of the time users only need a simple test\nsuch as <tt>eltest -r ${file}</tt> to check that <tt>$file</tt> is readable, and\nthere's no possible ambiguity. So, don't panic over this.\n</p>\n",
                    "rendered": {
                      "text": "\n<p>\n Note that these details are irrelevant to a huge majority of <tt>eltest</tt> use\ncases, because most of the time users only need a simple test\nsuch as <tt>eltest -r ${file}</tt> to check that <tt>$file</tt> is readable, and\nthere's no possible ambiguity. So, don't panic over this.\n</p>\n",
                      "markdown": "`\n<p>\n Note that these details are irrelevant to a huge majority of <tt>eltest</tt> use\ncases, because most of the time users only need a simple test\nsuch as <tt>eltest -r ${file}</tt> to check that <tt>$file</tt> is readable, and\nthere's no possible ambiguity. So, don't panic over this.\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/eltest.html"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "endLine": 147,
                  "endColumn": 25,
                  "snippet": {
                    "text": "unquoting mechanism, so when using backslashes in an execline or shell script, they\nmust be doubled. You would probably need to type something like <tt>\\\\-n = \\\\-n</tt>.\n </ul> </li>\n <li> So, if your script tests equality between <tt>$a</tt> and <tt>$b</tt>, and there's\na possiblity that the contents of these variables look like <tt>eltest</tt> operators,\nthe proper syntax would be: <tt>eltest \\\\${a} = \\\\${b}</tt>. </li>\n</ul>\n",
                    "rendered": {
                      "text": "unquoting mechanism, so when using backslashes in an execline or shell script, they\nmust be doubled. You would probably need to type something like <tt>\\\\-n = \\\\-n</tt>.\n </ul> </li>\n <li> So, if your script tests equality between <tt>$a</tt> and <tt>$b</tt>, and there's\na possiblity that the contents of these variables look like <tt>eltest</tt> operators,\nthe proper syntax would be: <tt>eltest \\\\${a} = \\\\${b}</tt>. </li>\n</ul>\n",
                      "markdown": "`unquoting mechanism, so when using backslashes in an execline or shell script, they\nmust be doubled. You would probably need to type something like <tt>\\\\-n = \\\\-n</tt>.\n </ul> </li>\n <li> So, if your script tests equality between <tt>$a</tt> and <tt>$b</tt>, and there's\na possiblity that the contents of these variables look like <tt>eltest</tt> operators,\nthe proper syntax would be: <tt>eltest \\\\${a} = \\\\${b}</tt>. </li>\n</ul>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/trap.html"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 49,
                  "endLine": 46,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n<ul>\n <li> <tt>trap</tt> reads a sequence of directives in a\n<a href=\"el_semicolon.html\">block</a>. It expects at least one\ndirective. </li>\n <li> Each directive is a keyword followed by a block. </li>\n <li> The keyword can be the special word <tt>default</tt>, a signal\n",
                    "rendered": {
                      "text": "\n<ul>\n <li> <tt>trap</tt> reads a sequence of directives in a\n<a href=\"el_semicolon.html\">block</a>. It expects at least one\ndirective. </li>\n <li> Each directive is a keyword followed by a block. </li>\n <li> The keyword can be the special word <tt>default</tt>, a signal\n",
                      "markdown": "`\n<ul>\n <li> <tt>trap</tt> reads a sequence of directives in a\n<a href=\"el_semicolon.html\">block</a>. It expects at least one\ndirective. </li>\n <li> Each directive is a keyword followed by a block. </li>\n <li> The keyword can be the special word <tt>default</tt>, a signal\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/shift.html"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 55,
                  "endLine": 54,
                  "endColumn": 59,
                  "snippet": {
                    "text": " <li> It shifts the positional parameters <em>m</em> times: the\nvalue of the <tt><em>m</em>+1</tt> variable becomes the value of the\n<tt>1</tt> variable, <tt><em>m</em>+2</tt> becomes <tt>2</tt> and so on,\nand <tt>#</tt> is set to <em>n</em>-<em>m</em> (floored at zero). </li>\n <li> <tt>shift</tt> then execs into <em>prog...</em>. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": " <li> It shifts the positional parameters <em>m</em> times: the\nvalue of the <tt><em>m</em>+1</tt> variable becomes the value of the\n<tt>1</tt> variable, <tt><em>m</em>+2</tt> becomes <tt>2</tt> and so on,\nand <tt>#</tt> is set to <em>n</em>-<em>m</em> (floored at zero). </li>\n <li> <tt>shift</tt> then execs into <em>prog...</em>. </li>\n</ul>\n\n",
                      "markdown": "` <li> It shifts the positional parameters <em>m</em> times: the\nvalue of the <tt><em>m</em>+1</tt> variable becomes the value of the\n<tt>1</tt> variable, <tt><em>m</em>+2</tt> becomes <tt>2</tt> and so on,\nand <tt>#</tt> is set to <em>n</em>-<em>m</em> (floored at zero). </li>\n <li> <tt>shift</tt> then execs into <em>prog...</em>. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/elglob.html"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 61,
                  "endLine": 66,
                  "endColumn": 65,
                  "snippet": {
                    "text": "matches nothing, it will be substituted as is (verbatim in one word). With\nthis option, if <em>pattern</em> matches nothing, it will be properly\nsubstituted as zero word. </li>\n <li> <tt>-n</tt>&nbsp;: chomp. Don't add an ending delimiter at the end\nof the word. Only valid with the <tt>-d</tt> option, see below. </li>\n <li> <tt>-d&nbsp;<em>delim</em></tt>&nbsp;: do not split the value.\nInstead, make it one word, where the result of the globbing are separated\n",
                    "rendered": {
                      "text": "matches nothing, it will be substituted as is (verbatim in one word). With\nthis option, if <em>pattern</em> matches nothing, it will be properly\nsubstituted as zero word. </li>\n <li> <tt>-n</tt>&nbsp;: chomp. Don't add an ending delimiter at the end\nof the word. Only valid with the <tt>-d</tt> option, see below. </li>\n <li> <tt>-d&nbsp;<em>delim</em></tt>&nbsp;: do not split the value.\nInstead, make it one word, where the result of the globbing are separated\n",
                      "markdown": "`matches nothing, it will be substituted as is (verbatim in one word). With\nthis option, if <em>pattern</em> matches nothing, it will be properly\nsubstituted as zero word. </li>\n <li> <tt>-n</tt>&nbsp;: chomp. Don't add an ending delimiter at the end\nof the word. Only valid with the <tt>-d</tt> option, see below. </li>\n <li> <tt>-d&nbsp;<em>delim</em></tt>&nbsp;: do not split the value.\nInstead, make it one word, where the result of the globbing are separated\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/elglob.html"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 24,
                  "endLine": 51,
                  "endColumn": 30,
                  "snippet": {
                    "text": "a warning message on stderr. </li>\n <li> <tt>-w</tt>&nbsp;: strict. If there is a problem while globbing, die\nimmediately. This is harsh - you probably don't need that option. </li>\n <li> <tt>-s</tt>&nbsp;: sort the matches. By default, the results are\nleft unsorted. </li>\n <li> <tt>-m</tt>&nbsp;: mark. Append a slash to each word that corresponds\nto a directory. </li>\n",
                    "rendered": {
                      "text": "a warning message on stderr. </li>\n <li> <tt>-w</tt>&nbsp;: strict. If there is a problem while globbing, die\nimmediately. This is harsh - you probably don't need that option. </li>\n <li> <tt>-s</tt>&nbsp;: sort the matches. By default, the results are\nleft unsorted. </li>\n <li> <tt>-m</tt>&nbsp;: mark. Append a slash to each word that corresponds\nto a directory. </li>\n",
                      "markdown": "`a warning message on stderr. </li>\n <li> <tt>-w</tt>&nbsp;: strict. If there is a problem while globbing, die\nimmediately. This is harsh - you probably don't need that option. </li>\n <li> <tt>-s</tt>&nbsp;: sort the matches. By default, the results are\nleft unsorted. </li>\n <li> <tt>-m</tt>&nbsp;: mark. Append a slash to each word that corresponds\nto a directory. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 41,
                  "endLine": 99,
                  "endColumn": 50,
                  "snippet": {
                    "text": "</pre>\n </li>\n <li> More complex scripts will include calls to other <tt>execline</tt>\ncommands, which are meant to provide some control over the process state\nand execution flow from inside an <em>argv</em>. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": "</pre>\n </li>\n <li> More complex scripts will include calls to other <tt>execline</tt>\ncommands, which are meant to provide some control over the process state\nand execution flow from inside an <em>argv</em>. </li>\n</ul>\n\n",
                      "markdown": "`</pre>\n </li>\n <li> More complex scripts will include calls to other <tt>execline</tt>\ncommands, which are meant to provide some control over the process state\nand execution flow from inside an <em>argv</em>. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 10,
                  "endLine": 75,
                  "endColumn": 19,
                  "snippet": {
                    "text": "is executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n</p>\n\n<p> <tt>execline</tt> was born. </p>\n",
                    "rendered": {
                      "text": "is executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n</p>\n\n<p> <tt>execline</tt> was born. </p>\n",
                      "markdown": "`is executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n</p>\n\n<p> <tt>execline</tt> was born. </p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 59,
                  "endLine": 49,
                  "snippet": {
                    "text": "<tt>execve()</tt> calls. This state is usually small: most programs\nkeep their information in the filesystem. </li>\n <li> A <em>script</em> is basically a text file whose meaning is a\nsequence of actions, i.e. calls to Unix programs, with some control\nover the execution flow. You need a program to interpret your script.\nTraditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\n",
                    "rendered": {
                      "text": "<tt>execve()</tt> calls. This state is usually small: most programs\nkeep their information in the filesystem. </li>\n <li> A <em>script</em> is basically a text file whose meaning is a\nsequence of actions, i.e. calls to Unix programs, with some control\nover the execution flow. You need a program to interpret your script.\nTraditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\n",
                      "markdown": "`<tt>execve()</tt> calls. This state is usually small: most programs\nkeep their information in the filesystem. </li>\n <li> A <em>script</em> is basically a text file whose meaning is a\nsequence of actions, i.e. calls to Unix programs, with some control\nover the execution flow. You need a program to interpret your script.\nTraditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 9,
                  "endLine": 35,
                  "endColumn": 13,
                  "snippet": {
                    "text": "the command line <em>argv</em>, which specifies the program name and its\narguments, and the environment <em>envp</em>. </li>\n <li> The <em>argv</em> structure makes it easy to read some\narguments at the beginning of <em>argv</em>, perform some action,\nthen <tt>execve()</tt> into the rest of <em>argv</em>. For\ninstance, the <tt>nice</tt> command works that way:\n<pre> nice -10 echo blah </pre> will read <tt>nice</tt> and <tt>-10</tt>\n",
                    "rendered": {
                      "text": "the command line <em>argv</em>, which specifies the program name and its\narguments, and the environment <em>envp</em>. </li>\n <li> The <em>argv</em> structure makes it easy to read some\narguments at the beginning of <em>argv</em>, perform some action,\nthen <tt>execve()</tt> into the rest of <em>argv</em>. For\ninstance, the <tt>nice</tt> command works that way:\n<pre> nice -10 echo blah </pre> will read <tt>nice</tt> and <tt>-10</tt>\n",
                      "markdown": "`the command line <em>argv</em>, which specifies the program name and its\narguments, and the environment <em>envp</em>. </li>\n <li> The <em>argv</em> structure makes it easy to read some\narguments at the beginning of <em>argv</em>, perform some action,\nthen <tt>execve()</tt> into the rest of <em>argv</em>. For\ninstance, the <tt>nice</tt> command works that way:\n<pre> nice -10 echo blah </pre> will read <tt>nice</tt> and <tt>-10</tt>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 25,
                  "snippet": {
                    "text": "</p>\n\n<ul>\n <li> An execline script is valid if it reduces to an\n<em>instruction</em>. </li>\n <li> The empty <em>instruction</em> is the same as the <tt>true</tt>\ncommand: when an execline component must exec into the empty\n",
                    "rendered": {
                      "text": "</p>\n\n<ul>\n <li> An execline script is valid if it reduces to an\n<em>instruction</em>. </li>\n <li> The empty <em>instruction</em> is the same as the <tt>true</tt>\ncommand: when an execline component must exec into the empty\n",
                      "markdown": "`</p>\n\n<ul>\n <li> An execline script is valid if it reduces to an\n<em>instruction</em>. </li>\n <li> The empty <em>instruction</em> is the same as the <tt>true</tt>\ncommand: when an execline component must exec into the empty\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 11,
                  "endLine": 107,
                  "endColumn": 19,
                  "snippet": {
                    "text": "<h2> Grammar of an execline script </h2>\n\n<p>\nAn execline script can be parsed as follows:\n</p>\n\n<pre>\n",
                    "rendered": {
                      "text": "<h2> Grammar of an execline script </h2>\n\n<p>\nAn execline script can be parsed as follows:\n</p>\n\n<pre>\n",
                      "markdown": "`<h2> Grammar of an execline script </h2>\n\n<p>\nAn execline script can be parsed as follows:\n</p>\n\n<pre>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 27,
                  "endLine": 104,
                  "endColumn": 35,
                  "snippet": {
                    "text": "</ul>\n\n<a name=\"grammar\" />\n<h2> Grammar of an execline script </h2>\n\n<p>\nAn execline script can be parsed as follows:\n",
                    "rendered": {
                      "text": "</ul>\n\n<a name=\"grammar\" />\n<h2> Grammar of an execline script </h2>\n\n<p>\nAn execline script can be parsed as follows:\n",
                      "markdown": "`</ul>\n\n<a name=\"grammar\" />\n<h2> Grammar of an execline script </h2>\n\n<p>\nAn execline script can be parsed as follows:\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 5,
                  "snippet": {
                    "text": "will be run just as they are, without the shell overhead.\nHere is what the script could look like:\n<pre>\n#!/command/execlineb -P\nnice -10\necho blah\n</pre>\n </li>\n",
                    "rendered": {
                      "text": "will be run just as they are, without the shell overhead.\nHere is what the script could look like:\n<pre>\n#!/command/execlineb -P\nnice -10\necho blah\n</pre>\n </li>\n",
                      "markdown": "`will be run just as they are, without the shell overhead.\nHere is what the script could look like:\n<pre>\n#!/command/execlineb -P\nnice -10\necho blah\n</pre>\n </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 16,
                  "endLine": 91,
                  "endColumn": 24,
                  "snippet": {
                    "text": "does nothing more. </li>\n <li> Straightforward scripts like <tt>nice -10 echo blah</tt>\nwill be run just as they are, without the shell overhead.\nHere is what the script could look like:\n<pre>\n#!/command/execlineb -P\nnice -10\n",
                    "rendered": {
                      "text": "does nothing more. </li>\n <li> Straightforward scripts like <tt>nice -10 echo blah</tt>\nwill be run just as they are, without the shell overhead.\nHere is what the script could look like:\n<pre>\n#!/command/execlineb -P\nnice -10\n",
                      "markdown": "`does nothing more. </li>\n <li> Straightforward scripts like <tt>nice -10 echo blah</tt>\nwill be run just as they are, without the shell overhead.\nHere is what the script could look like:\n<pre>\n#!/command/execlineb -P\nnice -10\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 47,
                  "endLine": 82,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n<ul>\n <li> <tt>execline</tt> is the first script language to rely\n<em>entirely</em> on chain loading. An execline script is a\nsingle <em>argv</em>, made of a chain of programs designed to\nperform their action then <tt>exec()</tt> into the next one. </li>\n <li> The <a href=\"execlineb.html\">execlineb</a> command is a\n",
                    "rendered": {
                      "text": "\n<ul>\n <li> <tt>execline</tt> is the first script language to rely\n<em>entirely</em> on chain loading. An execline script is a\nsingle <em>argv</em>, made of a chain of programs designed to\nperform their action then <tt>exec()</tt> into the next one. </li>\n <li> The <a href=\"execlineb.html\">execlineb</a> command is a\n",
                      "markdown": "`\n<ul>\n <li> <tt>execline</tt> is the first script language to rely\n<em>entirely</em> on chain loading. An execline script is a\nsingle <em>argv</em>, made of a chain of programs designed to\nperform their action then <tt>exec()</tt> into the next one. </li>\n <li> The <a href=\"execlineb.html\">execlineb</a> command is a\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 36,
                  "endLine": 81,
                  "endColumn": 44,
                  "snippet": {
                    "text": "<p> <tt>execline</tt> was born. </p>\n\n<ul>\n <li> <tt>execline</tt> is the first script language to rely\n<em>entirely</em> on chain loading. An execline script is a\nsingle <em>argv</em>, made of a chain of programs designed to\nperform their action then <tt>exec()</tt> into the next one. </li>\n",
                    "rendered": {
                      "text": "<p> <tt>execline</tt> was born. </p>\n\n<ul>\n <li> <tt>execline</tt> is the first script language to rely\n<em>entirely</em> on chain loading. An execline script is a\nsingle <em>argv</em>, made of a chain of programs designed to\nperform their action then <tt>exec()</tt> into the next one. </li>\n",
                      "markdown": "`<p> <tt>execline</tt> was born. </p>\n\n<ul>\n <li> <tt>execline</tt> is the first script language to rely\n<em>entirely</em> on chain loading. An execline script is a\nsingle <em>argv</em>, made of a chain of programs designed to\nperform their action then <tt>exec()</tt> into the next one. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 31,
                  "endLine": 72,
                  "endColumn": 39,
                  "snippet": {
                    "text": "<p>\n Knowing that, and wanting lightweight and efficient scripts, I\nwondered: \"Why should the interpreter stay in memory while the script\nis executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n",
                    "rendered": {
                      "text": "<p>\n Knowing that, and wanting lightweight and efficient scripts, I\nwondered: \"Why should the interpreter stay in memory while the script\nis executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n",
                      "markdown": "`<p>\n Knowing that, and wanting lightweight and efficient scripts, I\nwondered: \"Why should the interpreter stay in memory while the script\nis executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 62,
                  "endLine": 72,
                  "snippet": {
                    "text": "\n<p>\n Knowing that, and wanting lightweight and efficient scripts, I\nwondered: \"Why should the interpreter stay in memory while the script\nis executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n",
                    "rendered": {
                      "text": "\n<p>\n Knowing that, and wanting lightweight and efficient scripts, I\nwondered: \"Why should the interpreter stay in memory while the script\nis executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n",
                      "markdown": "`\n<p>\n Knowing that, and wanting lightweight and efficient scripts, I\nwondered: \"Why should the interpreter stay in memory while the script\nis executing? Why not parse the script once and for all, put\nit all into one <em>argv</em>, and just execute into that <em>argv</em>,\nrelying on external commands (which will be called from within the\nscript) to control the execution flow?\"\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 7,
                  "endLine": 57,
                  "endColumn": 15,
                  "snippet": {
                    "text": "script is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\nthey are big. Spawning (i.e. <tt>fork()</tt>ing then <tt>exec()</tt>ing)\na shell script takes time, because the shell program itself must be\ninitialized. For simple programs like <tt>nice -10 echo blah</tt>,\na shell is overpowered - we only need a way to make an <em>argv</em>\nfrom the \"<tt>nice -10 echo blah</tt>\" string, and <tt>execve()</tt>\n",
                    "rendered": {
                      "text": "script is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\nthey are big. Spawning (i.e. <tt>fork()</tt>ing then <tt>exec()</tt>ing)\na shell script takes time, because the shell program itself must be\ninitialized. For simple programs like <tt>nice -10 echo blah</tt>,\na shell is overpowered - we only need a way to make an <em>argv</em>\nfrom the \"<tt>nice -10 echo blah</tt>\" string, and <tt>execve()</tt>\n",
                      "markdown": "`script is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\nthey are big. Spawning (i.e. <tt>fork()</tt>ing then <tt>exec()</tt>ing)\na shell script takes time, because the shell program itself must be\ninitialized. For simple programs like <tt>nice -10 echo blah</tt>,\na shell is overpowered - we only need a way to make an <em>argv</em>\nfrom the \"<tt>nice -10 echo blah</tt>\" string, and <tt>execve()</tt>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 65,
                  "endLine": 54,
                  "endColumn": 7,
                  "snippet": {
                    "text": "Traditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\nThat means it must preserve a state, and stay in memory while the\nscript is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\nthey are big. Spawning (i.e. <tt>fork()</tt>ing then <tt>exec()</tt>ing)\na shell script takes time, because the shell program itself must be\n",
                    "rendered": {
                      "text": "Traditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\nThat means it must preserve a state, and stay in memory while the\nscript is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\nthey are big. Spawning (i.e. <tt>fork()</tt>ing then <tt>exec()</tt>ing)\na shell script takes time, because the shell program itself must be\n",
                      "markdown": "`Traditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\nThat means it must preserve a state, and stay in memory while the\nscript is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\nthey are big. Spawning (i.e. <tt>fork()</tt>ing then <tt>exec()</tt>ing)\na shell script takes time, because the shell program itself must be\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 40,
                  "endLine": 52,
                  "endColumn": 48,
                  "snippet": {
                    "text": "over the execution flow. You need a program to interpret your script.\nTraditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\nThat means it must preserve a state, and stay in memory while the\nscript is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\n",
                    "rendered": {
                      "text": "over the execution flow. You need a program to interpret your script.\nTraditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\nThat means it must preserve a state, and stay in memory while the\nscript is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\n",
                      "markdown": "`over the execution flow. You need a program to interpret your script.\nTraditionally, this program is <tt>/bin/sh</tt>: scripts are written\nin the <em>shell</em> language. </li>\n <li> The shell reads and interprets the script command after command.\nThat means it must preserve a state, and stay in memory while the\nscript is running. </li>\n <li> Standard shells have lots of built-in features and commands, so\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 11,
                  "snippet": {
                    "text": "arguments at the beginning of <em>argv</em>, perform some action,\nthen <tt>execve()</tt> into the rest of <em>argv</em>. For\ninstance, the <tt>nice</tt> command works that way:\n<pre> nice -10 echo blah </pre> will read <tt>nice</tt> and <tt>-10</tt>\nfrom the argv, change the process' <em>nice</em> value, then exec into\nthe command <tt>echo blah</tt>. This is called\n<a href=\"https://en.wikipedia.org/wiki/Chain_loading\">chain loading</a>\n",
                    "rendered": {
                      "text": "arguments at the beginning of <em>argv</em>, perform some action,\nthen <tt>execve()</tt> into the rest of <em>argv</em>. For\ninstance, the <tt>nice</tt> command works that way:\n<pre> nice -10 echo blah </pre> will read <tt>nice</tt> and <tt>-10</tt>\nfrom the argv, change the process' <em>nice</em> value, then exec into\nthe command <tt>echo blah</tt>. This is called\n<a href=\"https://en.wikipedia.org/wiki/Chain_loading\">chain loading</a>\n",
                      "markdown": "`arguments at the beginning of <em>argv</em>, perform some action,\nthen <tt>execve()</tt> into the rest of <em>argv</em>. For\ninstance, the <tt>nice</tt> command works that way:\n<pre> nice -10 echo blah </pre> will read <tt>nice</tt> and <tt>-10</tt>\nfrom the argv, change the process' <em>nice</em> value, then exec into\nthe command <tt>echo blah</tt>. This is called\n<a href=\"https://en.wikipedia.org/wiki/Chain_loading\">chain loading</a>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/grammar.html"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 67,
                  "endLine": 8,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: language design and grammar</title>\n    <meta name=\"Description\" content=\"execline: language design and grammar\" />\n    <meta name=\"Keywords\" content=\"execline language design grammar script shell\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                    "rendered": {
                      "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: language design and grammar</title>\n    <meta name=\"Description\" content=\"execline: language design and grammar\" />\n    <meta name=\"Keywords\" content=\"execline language design grammar script shell\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                      "markdown": "`    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: language design and grammar</title>\n    <meta name=\"Description\" content=\"execline: language design and grammar\" />\n    <meta name=\"Keywords\" content=\"execline language design grammar script shell\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/exlsn_main.c"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 65,
                  "endLine": 9,
                  "endColumn": 86,
                  "snippet": {
                    "text": "#include <execline/execline.h>\n#include \"exlsn.h\"\n\nvoid exlsn_main (int argc, char const **argv, char const *const *envp, exls_func *func, char const *usage)\n{\n  exlsn_t info = EXLSN_ZERO ;\n  int r = (*func)(argc, argv, envp, &info) ;\n",
                    "rendered": {
                      "text": "#include <execline/execline.h>\n#include \"exlsn.h\"\n\nvoid exlsn_main (int argc, char const **argv, char const *const *envp, exls_func *func, char const *usage)\n{\n  exlsn_t info = EXLSN_ZERO ;\n  int r = (*func)(argc, argv, envp, &info) ;\n",
                      "markdown": "`#include <execline/execline.h>\n#include \"exlsn.h\"\n\nvoid exlsn_main (int argc, char const **argv, char const *const *envp, exls_func *func, char const *usage)\n{\n  exlsn_t info = EXLSN_ZERO ;\n  int r = (*func)(argc, argv, envp, &info) ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/exlp.c"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 19,
                  "endLine": 54,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    size_t l = uint_fmt(fmt, i) ;\n    fmt[l] = 0 ;\n    if (el_vardupl(fmt, info->vars.s, info->vars.len)) goto err2 ;\n    x = (i <= n) ? env_get2(envp, fmt) : \"\" ;\n    if (!x) goto err2 ;\n    blah.var = info->vars.len ;\n    blah.value = info->values.len ;\n",
                    "rendered": {
                      "text": "    size_t l = uint_fmt(fmt, i) ;\n    fmt[l] = 0 ;\n    if (el_vardupl(fmt, info->vars.s, info->vars.len)) goto err2 ;\n    x = (i <= n) ? env_get2(envp, fmt) : \"\" ;\n    if (!x) goto err2 ;\n    blah.var = info->vars.len ;\n    blah.value = info->values.len ;\n",
                      "markdown": "`    size_t l = uint_fmt(fmt, i) ;\n    fmt[l] = 0 ;\n    if (el_vardupl(fmt, info->vars.s, info->vars.len)) goto err2 ;\n    x = (i <= n) ? env_get2(envp, fmt) : \"\" ;\n    if (!x) goto err2 ;\n    blah.var = info->vars.len ;\n    blah.value = info->values.len ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/exlp.c"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 18,
                  "endLine": 19,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  size_t datbase = genalloc_len(elsubst_t, &info->data) ;\n  size_t poszero ;\n  elsubst_t blah ;\n  char const *x = env_get2(envp, \"#\") ;\n  unsigned int n, ntot, i = 0 ;\n\n  if (!x) return -2 ;\n",
                    "rendered": {
                      "text": "  size_t datbase = genalloc_len(elsubst_t, &info->data) ;\n  size_t poszero ;\n  elsubst_t blah ;\n  char const *x = env_get2(envp, \"#\") ;\n  unsigned int n, ntot, i = 0 ;\n\n  if (!x) return -2 ;\n",
                      "markdown": "`  size_t datbase = genalloc_len(elsubst_t, &info->data) ;\n  size_t poszero ;\n  elsubst_t blah ;\n  char const *x = env_get2(envp, \"#\") ;\n  unsigned int n, ntot, i = 0 ;\n\n  if (!x) return -2 ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/exlp.c"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 51,
                  "endLine": 37,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      if (strict > 1)\n        strerr_dief4x(100, \"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n    }\n  }\n  blah.var = varbase ;\n",
                    "rendered": {
                      "text": "      if (strict > 1)\n        strerr_dief4x(100, \"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n    }\n  }\n  blah.var = varbase ;\n",
                      "markdown": "`      if (strict > 1)\n        strerr_dief4x(100, \"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n    }\n  }\n  blah.var = varbase ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/exlp.c"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 55,
                  "endLine": 35,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      fmta[uint_fmt(fmta, n)] = 0 ;\n      fmtn[uint_fmt(fmtn, nmin)] = 0 ;\n      if (strict > 1)\n        strerr_dief4x(100, \"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n    }\n",
                    "rendered": {
                      "text": "      fmta[uint_fmt(fmta, n)] = 0 ;\n      fmtn[uint_fmt(fmtn, nmin)] = 0 ;\n      if (strict > 1)\n        strerr_dief4x(100, \"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n    }\n",
                      "markdown": "`      fmta[uint_fmt(fmta, n)] = 0 ;\n      fmtn[uint_fmt(fmtn, nmin)] = 0 ;\n      if (strict > 1)\n        strerr_dief4x(100, \"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expected at least \", fmtn, \" but got \", fmta) ;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/emptyenv.html"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 52,
                  "endLine": 36,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n<p>\nBy default, <tt>emptyenv</tt> unsets all environment variables, then\nexecs into <em>prog</em> with its arguments. Options control which\nenvironment variables are unset.\n</p>\n\n",
                    "rendered": {
                      "text": "\n<p>\nBy default, <tt>emptyenv</tt> unsets all environment variables, then\nexecs into <em>prog</em> with its arguments. Options control which\nenvironment variables are unset.\n</p>\n\n",
                      "markdown": "`\n<p>\nBy default, <tt>emptyenv</tt> unsets all environment variables, then\nexecs into <em>prog</em> with its arguments. Options control which\nenvironment variables are unset.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/emptyenv.html"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 6,
                  "endLine": 54,
                  "endColumn": 14,
                  "snippet": {
                    "text": " <li> <tt>-P</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>#</tt>, <tt>0</tt> to <tt>9</tt>, and\n<tt>EXECLINE_</tt>. You might want to do this before executing a final program\nfrom a script launched by <a href=\"execlineb.html\">execlineb</a>. </li>\n</ul>\n\n</body>\n",
                    "rendered": {
                      "text": " <li> <tt>-P</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>#</tt>, <tt>0</tt> to <tt>9</tt>, and\n<tt>EXECLINE_</tt>. You might want to do this before executing a final program\nfrom a script launched by <a href=\"execlineb.html\">execlineb</a>. </li>\n</ul>\n\n</body>\n",
                      "markdown": "` <li> <tt>-P</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>#</tt>, <tt>0</tt> to <tt>9</tt>, and\n<tt>EXECLINE_</tt>. You might want to do this before executing a final program\nfrom a script launched by <a href=\"execlineb.html\">execlineb</a>. </li>\n</ul>\n\n</body>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/emptyenv.html"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 39,
                  "endLine": 49,
                  "endColumn": 47,
                  "snippet": {
                    "text": "any interference with or information leakage to external programs. </li>\n <li> <tt>-o</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>ELGETOPT_</tt>. You might want to do this\nbefore executing a final program from a script that uses\n<a href=\"elgetopt.html\">elgetopt</a>. </li>\n <li> <tt>-P</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>#</tt>, <tt>0</tt> to <tt>9</tt>, and\n",
                    "rendered": {
                      "text": "any interference with or information leakage to external programs. </li>\n <li> <tt>-o</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>ELGETOPT_</tt>. You might want to do this\nbefore executing a final program from a script that uses\n<a href=\"elgetopt.html\">elgetopt</a>. </li>\n <li> <tt>-P</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>#</tt>, <tt>0</tt> to <tt>9</tt>, and\n",
                      "markdown": "`any interference with or information leakage to external programs. </li>\n <li> <tt>-o</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>ELGETOPT_</tt>. You might want to do this\nbefore executing a final program from a script that uses\n<a href=\"elgetopt.html\">elgetopt</a>. </li>\n <li> <tt>-P</tt>&nbsp;: <a href=\"el_pushenv.html#pop\">pop</a> environment\nvariables starting with <tt>#</tt>, <tt>0</tt> to <tt>9</tt>, and\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline-umask.html"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 16,
                  "endLine": 40,
                  "endColumn": 20,
                  "snippet": {
                    "text": "<h2> Notes </h2>\n\n<ul>\n<li> By default, at execline installation time, a <tt>umask</tt>\nsymbolic link is created, pointing to <tt>execline-umask</tt>.\n <li> When execline has been configured with the <tt>--enable-pedantic-posix</tt>\noption, the <tt>umask</tt> symbolic link points to the\n",
                    "rendered": {
                      "text": "<h2> Notes </h2>\n\n<ul>\n<li> By default, at execline installation time, a <tt>umask</tt>\nsymbolic link is created, pointing to <tt>execline-umask</tt>.\n <li> When execline has been configured with the <tt>--enable-pedantic-posix</tt>\noption, the <tt>umask</tt> symbolic link points to the\n",
                      "markdown": "`<h2> Notes </h2>\n\n<ul>\n<li> By default, at execline installation time, a <tt>umask</tt>\nsymbolic link is created, pointing to <tt>execline-umask</tt>.\n <li> When execline has been configured with the <tt>--enable-pedantic-posix</tt>\noption, the <tt>umask</tt> symbolic link points to the\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 38,
                  "snippet": {
                    "text": "displaces the problem: the <tt>env</tt> utility does not\nhave a guaranteed absolute path. <tt>/usr/bin/env</tt> is the usual\nconvention, but not a strong guarantee: it is valid for systems to have\n<tt>/bin/env</tt> instead, for instance.\n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "displaces the problem: the <tt>env</tt> utility does not\nhave a guaranteed absolute path. <tt>/usr/bin/env</tt> is the usual\nconvention, but not a strong guarantee: it is valid for systems to have\n<tt>/bin/env</tt> instead, for instance.\n</p>\n\n<p>\n",
                      "markdown": "`displaces the problem: the <tt>env</tt> utility does not\nhave a guaranteed absolute path. <tt>/usr/bin/env</tt> is the usual\nconvention, but not a strong guarantee: it is valid for systems to have\n<tt>/bin/env</tt> instead, for instance.\n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 16,
                  "endLine": 249,
                  "endColumn": 20,
                  "snippet": {
                    "text": "shell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\ndoing a job, not at implementing a program's logic. </li>\n</ul>\n\n<a name=\"limitations\">\n",
                    "rendered": {
                      "text": "shell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\ndoing a job, not at implementing a program's logic. </li>\n</ul>\n\n<a name=\"limitations\">\n",
                      "markdown": "`shell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\ndoing a job, not at implementing a program's logic. </li>\n</ul>\n\n<a name=\"limitations\">\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 25,
                  "endLine": 248,
                  "endColumn": 29,
                  "snippet": {
                    "text": "execline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\ndoing a job, not at implementing a program's logic. </li>\n</ul>\n\n",
                    "rendered": {
                      "text": "execline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\ndoing a job, not at implementing a program's logic. </li>\n</ul>\n\n",
                      "markdown": "`execline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\ndoing a job, not at implementing a program's logic. </li>\n</ul>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 53,
                  "endLine": 240,
                  "endColumn": 57,
                  "snippet": {
                    "text": "In that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n",
                    "rendered": {
                      "text": "In that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n",
                      "markdown": "`In that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 64,
                  "endLine": 240,
                  "endColumn": 8,
                  "snippet": {
                    "text": "simple command line that does not require the shell's processing power.\nIn that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n",
                    "rendered": {
                      "text": "simple command line that does not require the shell's processing power.\nIn that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n",
                      "markdown": "`simple command line that does not require the shell's processing power.\nIn that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 9,
                  "endLine": 165,
                  "endColumn": 13,
                  "snippet": {
                    "text": "<p>\n The fact remains that modern shells have to be compatible with that historical\nnonsense and that makes them big and complex at best, or incompatible and ridden\nwith bugs at worst.\nAn OpenBSD developer said to me, when asked about the OpenBSD <tt>/bin/sh</tt>:\n\"It works, but it's far from not being a nightmare\".\n</p>\n",
                    "rendered": {
                      "text": "<p>\n The fact remains that modern shells have to be compatible with that historical\nnonsense and that makes them big and complex at best, or incompatible and ridden\nwith bugs at worst.\nAn OpenBSD developer said to me, when asked about the OpenBSD <tt>/bin/sh</tt>:\n\"It works, but it's far from not being a nightmare\".\n</p>\n",
                      "markdown": "`<p>\n The fact remains that modern shells have to be compatible with that historical\nnonsense and that makes them big and complex at best, or incompatible and ridden\nwith bugs at worst.\nAn OpenBSD developer said to me, when asked about the OpenBSD <tt>/bin/sh</tt>:\n\"It works, but it's far from not being a nightmare\".\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 44,
                  "endLine": 164,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n<p>\n The fact remains that modern shells have to be compatible with that historical\nnonsense and that makes them big and complex at best, or incompatible and ridden\nwith bugs at worst.\nAn OpenBSD developer said to me, when asked about the OpenBSD <tt>/bin/sh</tt>:\n\"It works, but it's far from not being a nightmare\".\n",
                    "rendered": {
                      "text": "\n<p>\n The fact remains that modern shells have to be compatible with that historical\nnonsense and that makes them big and complex at best, or incompatible and ridden\nwith bugs at worst.\nAn OpenBSD developer said to me, when asked about the OpenBSD <tt>/bin/sh</tt>:\n\"It works, but it's far from not being a nightmare\".\n",
                      "markdown": "`\n<p>\n The fact remains that modern shells have to be compatible with that historical\nnonsense and that makes them big and complex at best, or incompatible and ridden\nwith bugs at worst.\nAn OpenBSD developer said to me, when asked about the OpenBSD <tt>/bin/sh</tt>:\n\"It works, but it's far from not being a nightmare\".\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 23,
                  "endLine": 145,
                  "endColumn": 27,
                  "snippet": {
                    "text": "<p>\n I originally wanted a shell that could be used on an embedded system.\nEven the <tt>ash</tt> shell seemed big, so I thought of writing my\nown. Hence I had a look at the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html\">sh\nspecification</a>... and ran away screaming.\nThis specification\n",
                    "rendered": {
                      "text": "<p>\n I originally wanted a shell that could be used on an embedded system.\nEven the <tt>ash</tt> shell seemed big, so I thought of writing my\nown. Hence I had a look at the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html\">sh\nspecification</a>... and ran away screaming.\nThis specification\n",
                      "markdown": "`<p>\n I originally wanted a shell that could be used on an embedded system.\nEven the <tt>ash</tt> shell seemed big, so I thought of writing my\nown. Hence I had a look at the\n<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html\">sh\nspecification</a>... and ran away screaming.\nThis specification\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 37,
                  "endLine": 105,
                  "endColumn": 41,
                  "snippet": {
                    "text": "<p>\n A long-standing problem with Unix scripts is the shebang line, which\nrequires an absolute path to the interpreter. Scripts are only portable\nas is if the interpreter can be found at the same absolute path on every\nsystem. With <tt>/bin/sh</tt>, it is <em>almost</em> the case (Solaris\nmanages to get it wrong by having a non-POSIX shell as <tt>/bin/sh</tt>\nand requiring something like <tt>#!/usr/xpg4/bin/sh</tt> to get a POSIX\n",
                    "rendered": {
                      "text": "<p>\n A long-standing problem with Unix scripts is the shebang line, which\nrequires an absolute path to the interpreter. Scripts are only portable\nas is if the interpreter can be found at the same absolute path on every\nsystem. With <tt>/bin/sh</tt>, it is <em>almost</em> the case (Solaris\nmanages to get it wrong by having a non-POSIX shell as <tt>/bin/sh</tt>\nand requiring something like <tt>#!/usr/xpg4/bin/sh</tt> to get a POSIX\n",
                      "markdown": "`<p>\n A long-standing problem with Unix scripts is the shebang line, which\nrequires an absolute path to the interpreter. Scripts are only portable\nas is if the interpreter can be found at the same absolute path on every\nsystem. With <tt>/bin/sh</tt>, it is <em>almost</em> the case (Solaris\nmanages to get it wrong by having a non-POSIX shell as <tt>/bin/sh</tt>\nand requiring something like <tt>#!/usr/xpg4/bin/sh</tt> to get a POSIX\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 28,
                  "endLine": 75,
                  "endColumn": 32,
                  "snippet": {
                    "text": "all exhibit a different behaviour, <em>even when they are\nrun with the so-called compatibility mode</em>. From what I have\nseen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\n",
                    "rendered": {
                      "text": "all exhibit a different behaviour, <em>even when they are\nrun with the so-called compatibility mode</em>. From what I have\nseen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\n",
                      "markdown": "`all exhibit a different behaviour, <em>even when they are\nrun with the so-called compatibility mode</em>. From what I have\nseen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 38,
                  "endLine": 58,
                  "endColumn": 47,
                  "snippet": {
                    "text": "words, no other parsing phase will happen, unless the user explicitly\nrequires it. Positional parameters, when\nused, are never split, even if they contain spaces or newlines, unless\nthe user explicitly requires it. Users control exactly what\nis split, what is done, and how.\n</p>\n\n",
                    "rendered": {
                      "text": "words, no other parsing phase will happen, unless the user explicitly\nrequires it. Positional parameters, when\nused, are never split, even if they contain spaces or newlines, unless\nthe user explicitly requires it. Users control exactly what\nis split, what is done, and how.\n</p>\n\n",
                      "markdown": "`words, no other parsing phase will happen, unless the user explicitly\nrequires it. Positional parameters, when\nused, are never split, even if they contain spaces or newlines, unless\nthe user explicitly requires it. Users control exactly what\nis split, what is done, and how.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 25,
                  "endLine": 276,
                  "endColumn": 31,
                  "snippet": {
                    "text": "the average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\nends up spending a lot of time resolving dynamic symbols. If it is a\nconcern to you, you should try and <em>statically compile</em> the\nexecline package, to eliminate the dynamic resolution costs. Unless\nyou're heavily looping around <tt>execve()</tt>,\n",
                    "rendered": {
                      "text": "the average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\nends up spending a lot of time resolving dynamic symbols. If it is a\nconcern to you, you should try and <em>statically compile</em> the\nexecline package, to eliminate the dynamic resolution costs. Unless\nyou're heavily looping around <tt>execve()</tt>,\n",
                      "markdown": "`the average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\nends up spending a lot of time resolving dynamic symbols. If it is a\nconcern to you, you should try and <em>statically compile</em> the\nexecline package, to eliminate the dynamic resolution costs. Unless\nyou're heavily looping around <tt>execve()</tt>,\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 17,
                  "endLine": 273,
                  "endColumn": 25,
                  "snippet": {
                    "text": "is often <em>convenient</em>. Shell constructs can be terse and short,\nwhere <tt>execline</tt> constructs will be verbose and lengthy. </li>\n <li> An execline script is generally heavier on <tt>execve()</tt> than\nthe average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\nends up spending a lot of time resolving dynamic symbols. If it is a\n",
                    "rendered": {
                      "text": "is often <em>convenient</em>. Shell constructs can be terse and short,\nwhere <tt>execline</tt> constructs will be verbose and lengthy. </li>\n <li> An execline script is generally heavier on <tt>execve()</tt> than\nthe average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\nends up spending a lot of time resolving dynamic symbols. If it is a\n",
                      "markdown": "`is often <em>convenient</em>. Shell constructs can be terse and short,\nwhere <tt>execline</tt> constructs will be verbose and lengthy. </li>\n <li> An execline script is generally heavier on <tt>execve()</tt> than\nthe average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\nends up spending a lot of time resolving dynamic symbols. If it is a\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 17,
                  "endLine": 272,
                  "endColumn": 25,
                  "snippet": {
                    "text": "being available on every Unix platform, that is) is that it\nis often <em>convenient</em>. Shell constructs can be terse and short,\nwhere <tt>execline</tt> constructs will be verbose and lengthy. </li>\n <li> An execline script is generally heavier on <tt>execve()</tt> than\nthe average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\n",
                    "rendered": {
                      "text": "being available on every Unix platform, that is) is that it\nis often <em>convenient</em>. Shell constructs can be terse and short,\nwhere <tt>execline</tt> constructs will be verbose and lengthy. </li>\n <li> An execline script is generally heavier on <tt>execve()</tt> than\nthe average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\n",
                      "markdown": "`being available on every Unix platform, that is) is that it\nis often <em>convenient</em>. Shell constructs can be terse and short,\nwhere <tt>execline</tt> constructs will be verbose and lengthy. </li>\n <li> An execline script is generally heavier on <tt>execve()</tt> than\nthe average shell script - notably in programs where the shell can\nuse builtins. This can lead to a performance loss, especially when\nexecuted programs make numerous calls to the dynamic linker: the system\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 28,
                  "endLine": 245,
                  "endColumn": 34,
                  "snippet": {
                    "text": " <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\nthat execline is unable to replicate without forking. In that case,\nexecline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\n",
                    "rendered": {
                      "text": " <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\nthat execline is unable to replicate without forking. In that case,\nexecline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\n",
                      "markdown": "` <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\nthat execline is unable to replicate without forking. In that case,\nexecline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\nbeen designed as a <em>scripting</em> language, not as a <em>programming</em>\nlanguage: it is efficient at being the glue that ties together programs\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 29,
                  "endLine": 243,
                  "endColumn": 37,
                  "snippet": {
                    "text": "control flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\nthat execline is unable to replicate without forking. In that case,\nexecline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\n",
                    "rendered": {
                      "text": "control flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\nthat execline is unable to replicate without forking. In that case,\nexecline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\n",
                      "markdown": "`control flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\nthat execline is unable to replicate without forking. In that case,\nexecline will waste a lot of time in fork/exec system calls that the\nshell does not have to perform, and be noticeably slower. execline has\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 37,
                  "endLine": 240,
                  "endColumn": 45,
                  "snippet": {
                    "text": "In that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n",
                    "rendered": {
                      "text": "In that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n",
                      "markdown": "`In that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n <li> The worst use case of execline is when the shell is used as a\nprogramming language, and the script loops over complex internal constructs\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 65,
                  "endLine": 238,
                  "snippet": {
                    "text": " <li>\n The best use case of execline is a linear, straightforward script, a\nsimple command line that does not require the shell's processing power.\nIn that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n",
                    "rendered": {
                      "text": " <li>\n The best use case of execline is a linear, straightforward script, a\nsimple command line that does not require the shell's processing power.\nIn that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n",
                      "markdown": "` <li>\n The best use case of execline is a linear, straightforward script, a\nsimple command line that does not require the shell's processing power.\nIn that case, execline will skip the shell's overhead and win big time\non resource usage and execution speed. </li>\n <li> For longer scripts that fork a few commands, with a bit of\ncontrol flow, on average, an execline script will run at roughly the\nsame speed as the equivalent shell script, while using less resources. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 54,
                  "endLine": 125,
                  "endColumn": 62,
                  "snippet": {
                    "text": "<p>\n<tt>execline</tt> suffers from the same issues. <tt>#!/bin/execlineb</tt>&nbsp;?\n<tt>#!/usr/bin/execlineb</tt>&nbsp;? This is the only portability problem that\nyou will find with execline, and it is common to every script language. \n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "<p>\n<tt>execline</tt> suffers from the same issues. <tt>#!/bin/execlineb</tt>&nbsp;?\n<tt>#!/usr/bin/execlineb</tt>&nbsp;? This is the only portability problem that\nyou will find with execline, and it is common to every script language. \n</p>\n\n<p>\n",
                      "markdown": "`<p>\n<tt>execline</tt> suffers from the same issues. <tt>#!/bin/execlineb</tt>&nbsp;?\n<tt>#!/usr/bin/execlineb</tt>&nbsp;? This is the only portability problem that\nyou will find with execline, and it is common to every script language. \n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 14,
                  "snippet": {
                    "text": "<p>\n<tt>execline</tt> suffers from the same issues. <tt>#!/bin/execlineb</tt>&nbsp;?\n<tt>#!/usr/bin/execlineb</tt>&nbsp;? This is the only portability problem that\nyou will find with execline, and it is common to every script language. \n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "<p>\n<tt>execline</tt> suffers from the same issues. <tt>#!/bin/execlineb</tt>&nbsp;?\n<tt>#!/usr/bin/execlineb</tt>&nbsp;? This is the only portability problem that\nyou will find with execline, and it is common to every script language. \n</p>\n\n<p>\n",
                      "markdown": "`<p>\n<tt>execline</tt> suffers from the same issues. <tt>#!/bin/execlineb</tt>&nbsp;?\n<tt>#!/usr/bin/execlineb</tt>&nbsp;? This is the only portability problem that\nyou will find with execline, and it is common to every script language. \n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 32,
                  "endLine": 113,
                  "endColumn": 38,
                  "snippet": {
                    "text": "lucky: perl can be <tt>/bin/perl</tt>, <tt>/usr/bin/perl</tt>,\n<tt>/usr/local/bin/perl</tt> or something else entirely. For those cases,\nsome people advocate the use of <tt>env</tt>: <tt>#!/usr/bin/env perl</tt>.\nBut first, <tt>env</tt> can only find interpreters that can be found via the\nuser's PATH environment variable, which defeats the purpose of having an\nabsolute path in the shebang line in the first place; and second, this only\ndisplaces the problem: the <tt>env</tt> utility does not\n",
                    "rendered": {
                      "text": "lucky: perl can be <tt>/bin/perl</tt>, <tt>/usr/bin/perl</tt>,\n<tt>/usr/local/bin/perl</tt> or something else entirely. For those cases,\nsome people advocate the use of <tt>env</tt>: <tt>#!/usr/bin/env perl</tt>.\nBut first, <tt>env</tt> can only find interpreters that can be found via the\nuser's PATH environment variable, which defeats the purpose of having an\nabsolute path in the shebang line in the first place; and second, this only\ndisplaces the problem: the <tt>env</tt> utility does not\n",
                      "markdown": "`lucky: perl can be <tt>/bin/perl</tt>, <tt>/usr/bin/perl</tt>,\n<tt>/usr/local/bin/perl</tt> or something else entirely. For those cases,\nsome people advocate the use of <tt>env</tt>: <tt>#!/usr/bin/env perl</tt>.\nBut first, <tt>env</tt> can only find interpreters that can be found via the\nuser's PATH environment variable, which defeats the purpose of having an\nabsolute path in the shebang line in the first place; and second, this only\ndisplaces the problem: the <tt>env</tt> utility does not\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 12,
                  "snippet": {
                    "text": "manages to get it wrong by having a non-POSIX shell as <tt>/bin/sh</tt>\nand requiring something like <tt>#!/usr/xpg4/bin/sh</tt> to get a POSIX\nshell to interpret your script). Other scripting languages are not so\nlucky: perl can be <tt>/bin/perl</tt>, <tt>/usr/bin/perl</tt>,\n<tt>/usr/local/bin/perl</tt> or something else entirely. For those cases,\nsome people advocate the use of <tt>env</tt>: <tt>#!/usr/bin/env perl</tt>.\nBut first, <tt>env</tt> can only find interpreters that can be found via the\n",
                    "rendered": {
                      "text": "manages to get it wrong by having a non-POSIX shell as <tt>/bin/sh</tt>\nand requiring something like <tt>#!/usr/xpg4/bin/sh</tt> to get a POSIX\nshell to interpret your script). Other scripting languages are not so\nlucky: perl can be <tt>/bin/perl</tt>, <tt>/usr/bin/perl</tt>,\n<tt>/usr/local/bin/perl</tt> or something else entirely. For those cases,\nsome people advocate the use of <tt>env</tt>: <tt>#!/usr/bin/env perl</tt>.\nBut first, <tt>env</tt> can only find interpreters that can be found via the\n",
                      "markdown": "`manages to get it wrong by having a non-POSIX shell as <tt>/bin/sh</tt>\nand requiring something like <tt>#!/usr/xpg4/bin/sh</tt> to get a POSIX\nshell to interpret your script). Other scripting languages are not so\nlucky: perl can be <tt>/bin/perl</tt>, <tt>/usr/bin/perl</tt>,\n<tt>/usr/local/bin/perl</tt> or something else entirely. For those cases,\nsome people advocate the use of <tt>env</tt>: <tt>#!/usr/bin/env perl</tt>.\nBut first, <tt>env</tt> can only find interpreters that can be found via the\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 2,
                  "endLine": 97,
                  "endColumn": 8,
                  "snippet": {
                    "text": " Scripts will\nnot break from one machine to another; if they do,\nit's not a \"portability problem\", it's a bug. You are then encouraged\nto find the program that is responsible for the different behaviour,\nand send a bug-report to the program author - including me, if the\nrelevant program is part of the execline distribution.\n</p>\n",
                    "rendered": {
                      "text": " Scripts will\nnot break from one machine to another; if they do,\nit's not a \"portability problem\", it's a bug. You are then encouraged\nto find the program that is responsible for the different behaviour,\nand send a bug-report to the program author - including me, if the\nrelevant program is part of the execline distribution.\n</p>\n",
                      "markdown": "` Scripts will\nnot break from one machine to another; if they do,\nit's not a \"portability problem\", it's a bug. You are then encouraged\nto find the program that is responsible for the different behaviour,\nand send a bug-report to the program author - including me, if the\nrelevant program is part of the execline distribution.\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 58,
                  "endLine": 84,
                  "endColumn": 66,
                  "snippet": {
                    "text": "specification to the letter. And let's not get started about <tt>echo</tt>,\nwhich has its own set of problems. Rich Felker has\n<a href=\"https://www.etalabs.net/sh_tricks.html\">a page</a> listing tricks\nto use to write portable shell scripts. Writing a portable script should\nnot be that hard.\n</p>\n\n",
                    "rendered": {
                      "text": "specification to the letter. And let's not get started about <tt>echo</tt>,\nwhich has its own set of problems. Rich Felker has\n<a href=\"https://www.etalabs.net/sh_tricks.html\">a page</a> listing tricks\nto use to write portable shell scripts. Writing a portable script should\nnot be that hard.\n</p>\n\n",
                      "markdown": "`specification to the letter. And let's not get started about <tt>echo</tt>,\nwhich has its own set of problems. Rich Felker has\n<a href=\"https://www.etalabs.net/sh_tricks.html\">a page</a> listing tricks\nto use to write portable shell scripts. Writing a portable script should\nnot be that hard.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 44,
                  "endLine": 77,
                  "endColumn": 52,
                  "snippet": {
                    "text": "seen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\ncannot be used safely with the normalized options, because most shells\ncome with a builtin <tt>test</tt> that does <em>not</em> respect the\n",
                    "rendered": {
                      "text": "seen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\ncannot be used safely with the normalized options, because most shells\ncome with a builtin <tt>test</tt> that does <em>not</em> respect the\n",
                      "markdown": "`seen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\ncannot be used safely with the normalized options, because most shells\ncome with a builtin <tt>test</tt> that does <em>not</em> respect the\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 57,
                  "endLine": 76,
                  "endColumn": 65,
                  "snippet": {
                    "text": "run with the so-called compatibility mode</em>. From what I have\nseen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\ncannot be used safely with the normalized options, because most shells\n",
                    "rendered": {
                      "text": "run with the so-called compatibility mode</em>. From what I have\nseen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\ncannot be used safely with the normalized options, because most shells\n",
                      "markdown": "`run with the so-called compatibility mode</em>. From what I have\nseen on various experiments, only <tt>zsh</tt> is able to follow the\nspecification to the letter, at the expense of being big and complex to\nconfigure. This is a source of endless problems for shell script writers,\nwho <em>should</em> be able to assume that a script will run everywhere,\nbut <em>cannot</em> in practice. Even a simple utility like <tt>test</tt>\ncannot be used safely with the normalized options, because most shells\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 55,
                  "endLine": 54,
                  "endColumn": 63,
                  "snippet": {
                    "text": "<tt>execlineb</tt> parses the script only once: when\nreading it. The parser has been designed to be simple and systematic,\nto reduce the potential for bugs - which you just cannot do\nwith a shell. After <tt>execlineb</tt> has split up the script into\nwords, no other parsing phase will happen, unless the user explicitly\nrequires it. Positional parameters, when\nused, are never split, even if they contain spaces or newlines, unless\n",
                    "rendered": {
                      "text": "<tt>execlineb</tt> parses the script only once: when\nreading it. The parser has been designed to be simple and systematic,\nto reduce the potential for bugs - which you just cannot do\nwith a shell. After <tt>execlineb</tt> has split up the script into\nwords, no other parsing phase will happen, unless the user explicitly\nrequires it. Positional parameters, when\nused, are never split, even if they contain spaces or newlines, unless\n",
                      "markdown": "`<tt>execlineb</tt> parses the script only once: when\nreading it. The parser has been designed to be simple and systematic,\nto reduce the potential for bugs - which you just cannot do\nwith a shell. After <tt>execlineb</tt> has split up the script into\nwords, no other parsing phase will happen, unless the user explicitly\nrequires it. Positional parameters, when\nused, are never split, even if they contain spaces or newlines, unless\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 29,
                  "endLine": 51,
                  "endColumn": 37,
                  "snippet": {
                    "text": "</p>\n\n<p>\n<tt>execlineb</tt> parses the script only once: when\nreading it. The parser has been designed to be simple and systematic,\nto reduce the potential for bugs - which you just cannot do\nwith a shell. After <tt>execlineb</tt> has split up the script into\n",
                    "rendered": {
                      "text": "</p>\n\n<p>\n<tt>execlineb</tt> parses the script only once: when\nreading it. The parser has been designed to be simple and systematic,\nto reduce the potential for bugs - which you just cannot do\nwith a shell. After <tt>execlineb</tt> has split up the script into\n",
                      "markdown": "`</p>\n\n<p>\n<tt>execlineb</tt> parses the script only once: when\nreading it. The parser has been designed to be simple and systematic,\nto reduce the potential for bugs - which you just cannot do\nwith a shell. After <tt>execlineb</tt> has split up the script into\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/dieshdiedie.html"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 52,
                  "endLine": 8,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: why execline and not sh</title>\n    <meta name=\"Description\" content=\"execline: why execline and not sh\" />\n    <meta name=\"Keywords\" content=\"execline sh shell script language\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                    "rendered": {
                      "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: why execline and not sh</title>\n    <meta name=\"Description\" content=\"execline: why execline and not sh\" />\n    <meta name=\"Keywords\" content=\"execline sh shell script language\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                      "markdown": "`    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: why execline and not sh</title>\n    <meta name=\"Description\" content=\"execline: why execline and not sh\" />\n    <meta name=\"Keywords\" content=\"execline sh shell script language\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/exlsn_importas.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 6,
                  "endLine": 51,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  if (argc < 1 + ivar) return -3 ;\n  if (!*argv[0] || el_vardupl(argv[0], info->vars.s, info->vars.len)) return -2 ;\n  if (!stralloc_catb(&info->vars, argv[0], strlen(argv[0]) + 1)) return -1 ;\n  x = env_get2(envp, argv[ivar]) ;\n  if (!x)\n  {\n    if (insist) strerr_dienotset(100, argv[ivar]) ;\n",
                    "rendered": {
                      "text": "  if (argc < 1 + ivar) return -3 ;\n  if (!*argv[0] || el_vardupl(argv[0], info->vars.s, info->vars.len)) return -2 ;\n  if (!stralloc_catb(&info->vars, argv[0], strlen(argv[0]) + 1)) return -1 ;\n  x = env_get2(envp, argv[ivar]) ;\n  if (!x)\n  {\n    if (insist) strerr_dienotset(100, argv[ivar]) ;\n",
                      "markdown": "`  if (argc < 1 + ivar) return -3 ;\n  if (!*argv[0] || el_vardupl(argv[0], info->vars.s, info->vars.len)) return -2 ;\n  if (!stralloc_catb(&info->vars, argv[0], strlen(argv[0]) + 1)) return -1 ;\n  x = env_get2(envp, argv[ivar]) ;\n  if (!x)\n  {\n    if (insist) strerr_dienotset(100, argv[ivar]) ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/dollarat.c"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 18,
                  "endLine": 30,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      if (opt == -1) break ;\n      switch (opt)\n      {\n        case 'n' : nl = 0 ; break ;\n        case 'd' : delim = *l.arg ; zero = 0 ; break ;\n        case '0' : zero = 1 ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n",
                    "rendered": {
                      "text": "      if (opt == -1) break ;\n      switch (opt)\n      {\n        case 'n' : nl = 0 ; break ;\n        case 'd' : delim = *l.arg ; zero = 0 ; break ;\n        case '0' : zero = 1 ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n",
                      "markdown": "`      if (opt == -1) break ;\n      switch (opt)\n      {\n        case 'n' : nl = 0 ; break ;\n        case 'd' : delim = *l.arg ; zero = 0 ; break ;\n        case '0' : zero = 1 ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/dollarat.c"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  char const *x ;\n  char delim = '\\n' ;\n  int zero = 0 ;\n  int nl = 1 ;\n  PROG = \"dollarat\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n",
                    "rendered": {
                      "text": "  char const *x ;\n  char delim = '\\n' ;\n  int zero = 0 ;\n  int nl = 1 ;\n  PROG = \"dollarat\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n",
                      "markdown": "`  char const *x ;\n  char delim = '\\n' ;\n  int zero = 0 ;\n  int nl = 1 ;\n  PROG = \"dollarat\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/tryexec.c"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 18,
                  "endLine": 33,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      {\n        case 'n' : not = 1 ; break ;\n        case 'c' : dom_envp = env_zero ; break ;\n        case 'l' : dash = 1 ; break ;\n        case 'a' : argv0 = l.arg ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n      }\n",
                    "rendered": {
                      "text": "      {\n        case 'n' : not = 1 ; break ;\n        case 'c' : dom_envp = env_zero ; break ;\n        case 'l' : dash = 1 ; break ;\n        case 'a' : argv0 = l.arg ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n      }\n",
                      "markdown": "`      {\n        case 'n' : not = 1 ; break ;\n        case 'c' : dom_envp = env_zero ; break ;\n        case 'l' : dash = 1 ; break ;\n        case 'a' : argv0 = l.arg ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/tryexec.c"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 14,
                  "endLine": 21,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  char const **dom = 0 ;\n  char const **sub = 0 ;\n  char const *const *dom_envp = envp ;\n  int not = 0, dash = 0 ;\n  PROG = \"tryexec\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n",
                    "rendered": {
                      "text": "  char const **dom = 0 ;\n  char const **sub = 0 ;\n  char const *const *dom_envp = envp ;\n  int not = 0, dash = 0 ;\n  PROG = \"tryexec\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n",
                      "markdown": "`  char const **dom = 0 ;\n  char const **sub = 0 ;\n  char const *const *dom_envp = envp ;\n  int not = 0, dash = 0 ;\n  PROG = \"tryexec\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/runblock.c"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 59,
                  "endLine": 127,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n        }\n      }\n      else x++ ;\n",
                    "rendered": {
                      "text": "          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n        }\n      }\n      else x++ ;\n",
                      "markdown": "`          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n        }\n      }\n      else x++ ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/runblock.c"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 55,
                  "endLine": 125,
                  "endColumn": 59,
                  "snippet": {
                    "text": "          fmtn[uint_fmt(fmtn, n)] = 0 ;\n          fmtb[uint_fmt(fmtb, m - base)] = 0 ;\n          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n        }\n",
                    "rendered": {
                      "text": "          fmtn[uint_fmt(fmtn, n)] = 0 ;\n          fmtb[uint_fmt(fmtb, m - base)] = 0 ;\n          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n        }\n",
                      "markdown": "`          fmtn[uint_fmt(fmtn, n)] = 0 ;\n          fmtb[uint_fmt(fmtb, m - base)] = 0 ;\n          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmtn, \" position \", fmtb) ;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/runblock.c"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 59,
                  "endLine": 76,
                  "endColumn": 63,
                  "snippet": {
                    "text": "          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n        }\n      }\n    }\n",
                    "rendered": {
                      "text": "          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n        }\n      }\n    }\n",
                      "markdown": "`          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n        }\n      }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/runblock.c"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 55,
                  "endLine": 74,
                  "endColumn": 59,
                  "snippet": {
                    "text": "          fmti[uint_fmt(fmti, i)] = 0 ;\n          fmtb[uint_fmt(fmtb, m - base)] = 0 ;\n          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n        }\n",
                    "rendered": {
                      "text": "          fmti[uint_fmt(fmti, i)] = 0 ;\n          fmtb[uint_fmt(fmtb, m - base)] = 0 ;\n          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n        }\n",
                      "markdown": "`          fmti[uint_fmt(fmti, i)] = 0 ;\n          fmtb[uint_fmt(fmtb, m - base)] = 0 ;\n          if (strict == 1)\n            strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n          else\n            strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtb) ;\n        }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/package/deps.mak"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 52,
                  "endLine": 65,
                  "endColumn": 96,
                  "snippet": {
                    "text": "rse_from_string.o src/libexecline/el_parse_from_string.lo: src/libexecline/el_parse_from_string.c src/include/execline/execline.h\nsrc/libexecline/el_popenv.o src/libexecline/el_popenv.lo: src/libexecline/el_popenv.c src/include/execline/execline.h\nsrc/libexecline/el_pushenv.o src/libexecline/el_pushenv.lo: src/libexecline/el_pushenv.c src/include/execline/execline.h\nsrc/libexecline/el_semicolon.o src/libexecline/el_semicolon.lo: src/libexecline/el_semicolon.c src/include/execline/execline.h\nsrc/libexecline/el_spawn0.o src/libexecline/el_spawn0.lo: src/libexecline/el_spawn0.c src/include/execline/config.h src/include/execline/execline.h\n",
                    "rendered": {
                      "text": "rse_from_string.o src/libexecline/el_parse_from_string.lo: src/libexecline/el_parse_from_string.c src/include/execline/execline.h\nsrc/libexecline/el_popenv.o src/libexecline/el_popenv.lo: src/libexecline/el_popenv.c src/include/execline/execline.h\nsrc/libexecline/el_pushenv.o src/libexecline/el_pushenv.lo: src/libexecline/el_pushenv.c src/include/execline/execline.h\nsrc/libexecline/el_semicolon.o src/libexecline/el_semicolon.lo: src/libexecline/el_semicolon.c src/include/execline/execline.h\nsrc/libexecline/el_spawn0.o src/libexecline/el_spawn0.lo: src/libexecline/el_spawn0.c src/include/execline/config.h src/include/execline/execline.h\n",
                      "markdown": "`rse_from_string.o src/libexecline/el_parse_from_string.lo: src/libexecline/el_parse_from_string.c src/include/execline/execline.h\nsrc/libexecline/el_popenv.o src/libexecline/el_popenv.lo: src/libexecline/el_popenv.c src/include/execline/execline.h\nsrc/libexecline/el_pushenv.o src/libexecline/el_pushenv.lo: src/libexecline/el_pushenv.c src/include/execline/execline.h\nsrc/libexecline/el_semicolon.o src/libexecline/el_semicolon.lo: src/libexecline/el_semicolon.c src/include/execline/execline.h\nsrc/libexecline/el_spawn0.o src/libexecline/el_spawn0.lo: src/libexecline/el_spawn0.c src/include/execline/config.h src/include/execline/execline.h\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/package/deps.mak"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 50,
                  "endLine": 64,
                  "endColumn": 93,
                  "snippet": {
                    "text": "ne/el_parse_from_buffer.lo: src/libexecline/el_parse_from_buffer.c src/include/execline/execline.h\nsrc/libexecline/el_parse_from_string.o src/libexecline/el_parse_from_string.lo: src/libexecline/el_parse_from_string.c src/include/execline/execline.h\nsrc/libexecline/el_popenv.o src/libexecline/el_popenv.lo: src/libexecline/el_popenv.c src/include/execline/execline.h\nsrc/libexecline/el_pushenv.o src/libexecline/el_pushenv.lo: src/libexecline/el_pushenv.c src/include/execline/execline.h\nsrc/libexecline/el_semicolon.o src/libexecline/el_semicolon.lo: src/libexecline/el_semicolon.c src/include/execline/execline.h\nsrc/libexecline/el_spawn0.o",
                    "rendered": {
                      "text": "ne/el_parse_from_buffer.lo: src/libexecline/el_parse_from_buffer.c src/include/execline/execline.h\nsrc/libexecline/el_parse_from_string.o src/libexecline/el_parse_from_string.lo: src/libexecline/el_parse_from_string.c src/include/execline/execline.h\nsrc/libexecline/el_popenv.o src/libexecline/el_popenv.lo: src/libexecline/el_popenv.c src/include/execline/execline.h\nsrc/libexecline/el_pushenv.o src/libexecline/el_pushenv.lo: src/libexecline/el_pushenv.c src/include/execline/execline.h\nsrc/libexecline/el_semicolon.o src/libexecline/el_semicolon.lo: src/libexecline/el_semicolon.c src/include/execline/execline.h\nsrc/libexecline/el_spawn0.o",
                      "markdown": "`ne/el_parse_from_buffer.lo: src/libexecline/el_parse_from_buffer.c src/include/execline/execline.h\nsrc/libexecline/el_parse_from_string.o src/libexecline/el_parse_from_string.lo: src/libexecline/el_parse_from_string.c src/include/execline/execline.h\nsrc/libexecline/el_popenv.o src/libexecline/el_popenv.lo: src/libexecline/el_popenv.c src/include/execline/execline.h\nsrc/libexecline/el_pushenv.o src/libexecline/el_pushenv.lo: src/libexecline/el_pushenv.c src/include/execline/execline.h\nsrc/libexecline/el_semicolon.o src/libexecline/el_semicolon.lo: src/libexecline/el_semicolon.c src/include/execline/execline.h\nsrc/libexecline/el_spawn0.o`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/package/deps.mak"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 81,
                  "snippet": {
                    "text": "src/execline/elgetpositionals.o src/execline/elgetpositionals.lo: src/execline/elgetpositionals.c src/include-local/exlsn.h\nsrc/execline/elglob.o src/execline/elglob.lo: src/execline/elglob.c src/include-local/exlsn.h\nsrc/execline/eltest.o src/execline/eltest.lo: src/execline/eltest.c\nsrc/execline/emptyenv.o src/execline/emptyenv.lo: src/execline/emptyenv.c src/include/execline/execline.h\nsrc/execline/envfile.o src/execline/envfile.lo: src/execline/envfile.c\nsrc/execline/exec.o src/execline/exec.lo: src/execline/exec.c\nsrc/execline/execline-cd.o src/execline/execline-cd.lo: src/execline/execline-cd.c\n",
                    "rendered": {
                      "text": "src/execline/elgetpositionals.o src/execline/elgetpositionals.lo: src/execline/elgetpositionals.c src/include-local/exlsn.h\nsrc/execline/elglob.o src/execline/elglob.lo: src/execline/elglob.c src/include-local/exlsn.h\nsrc/execline/eltest.o src/execline/eltest.lo: src/execline/eltest.c\nsrc/execline/emptyenv.o src/execline/emptyenv.lo: src/execline/emptyenv.c src/include/execline/execline.h\nsrc/execline/envfile.o src/execline/envfile.lo: src/execline/envfile.c\nsrc/execline/exec.o src/execline/exec.lo: src/execline/exec.c\nsrc/execline/execline-cd.o src/execline/execline-cd.lo: src/execline/execline-cd.c\n",
                      "markdown": "`src/execline/elgetpositionals.o src/execline/elgetpositionals.lo: src/execline/elgetpositionals.c src/include-local/exlsn.h\nsrc/execline/elglob.o src/execline/elglob.lo: src/execline/elglob.c src/include-local/exlsn.h\nsrc/execline/eltest.o src/execline/eltest.lo: src/execline/eltest.c\nsrc/execline/emptyenv.o src/execline/emptyenv.lo: src/execline/emptyenv.c src/include/execline/execline.h\nsrc/execline/envfile.o src/execline/envfile.lo: src/execline/envfile.c\nsrc/execline/exec.o src/execline/exec.lo: src/execline/exec.c\nsrc/execline/execline-cd.o src/execline/execline-cd.lo: src/execline/execline-cd.c\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 20,
                  "endLine": 90,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      if echo $dep | grep -q -- \\\\.o$ ; then\n        dep=\"src/$dir/$dep\"\n      fi\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n        libs=\"$libs $dep\"\n      else\n        deps=\"$deps $dep\"\n",
                    "rendered": {
                      "text": "      if echo $dep | grep -q -- \\\\.o$ ; then\n        dep=\"src/$dir/$dep\"\n      fi\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n        libs=\"$libs $dep\"\n      else\n        deps=\"$deps $dep\"\n",
                      "markdown": "`      if echo $dep | grep -q -- \\\\.o$ ; then\n        dep=\"src/$dir/$dep\"\n      fi\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n        libs=\"$libs $dep\"\n      else\n        deps=\"$deps $dep\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 20,
                  "endLine": 87,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    deps=\n    libs=\n    while read dep ; do\n      if echo $dep | grep -q -- \\\\.o$ ; then\n        dep=\"src/$dir/$dep\"\n      fi\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n",
                    "rendered": {
                      "text": "    deps=\n    libs=\n    while read dep ; do\n      if echo $dep | grep -q -- \\\\.o$ ; then\n        dep=\"src/$dir/$dep\"\n      fi\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n",
                      "markdown": "`    deps=\n    libs=\n    while read dep ; do\n      if echo $dep | grep -q -- \\\\.o$ ; then\n        dep=\"src/$dir/$dep\"\n      fi\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 48,
                  "endLine": 77,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n      internal_libs=\"$internal_libs lib${file}.a.xyzzy\"\n    fi\n",
                    "rendered": {
                      "text": "    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n      internal_libs=\"$internal_libs lib${file}.a.xyzzy\"\n    fi\n",
                      "markdown": "`    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n      internal_libs=\"$internal_libs lib${file}.a.xyzzy\"\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 54,
                  "endLine": 75,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n",
                    "rendered": {
                      "text": "    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n",
                      "markdown": "`    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 6,
                  "endLine": 75,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n",
                    "rendered": {
                      "text": "    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n",
                      "markdown": "`    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n      echo \"lib${file}.so.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 45,
                  "endLine": 73,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    echo 'ifeq ($(strip $(STATIC_LIBS_ARE_PIC)),)'\n    echo \"lib${file}.a.xyzzy:$deps\"\n    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n",
                    "rendered": {
                      "text": "    echo 'ifeq ($(strip $(STATIC_LIBS_ARE_PIC)),)'\n    echo \"lib${file}.a.xyzzy:$deps\"\n    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n",
                      "markdown": "`    echo 'ifeq ($(strip $(STATIC_LIBS_ARE_PIC)),)'\n    echo \"lib${file}.a.xyzzy:$deps\"\n    echo else\n    echo \"lib${file}.a.xyzzy:$(echo \"$deps\" | sed 's/\\.o/.lo/g')\"\n    echo endif\n    if grep -E \"^LIB_DEFS [+:]=\" package/targets.mak | grep -qF \"$file\" ; then\n      echo \"lib${file}.so.xyzzy: EXTRA_LIBS :=$libs\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 20,
                  "endLine": 64,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    deps=\n    libs=\n    while read dep ; do\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n        libs=\"$libs $dep\"\n      else\n        deps=\"$deps src/$dir/$dep\"\n",
                    "rendered": {
                      "text": "    deps=\n    libs=\n    while read dep ; do\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n        libs=\"$libs $dep\"\n      else\n        deps=\"$deps src/$dir/$dep\"\n",
                      "markdown": "`    deps=\n    libs=\n    while read dep ; do\n      if echo $dep | grep -q -e ^-l -e '^\\${.*_LIB}' ; then\n        libs=\"$libs $dep\"\n      else\n        deps=\"$deps src/$dir/$dep\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 24,
                  "endLine": 59,
                  "endColumn": 30,
                  "snippet": {
                    "text": "done\necho\n\nfor dir in $(ls -1 src | grep -v ^include) ; do\n  for file in $(ls -1 src/$dir/deps-lib) ; do\n    deps=\n    libs=\n",
                    "rendered": {
                      "text": "done\necho\n\nfor dir in $(ls -1 src | grep -v ^include) ; do\n  for file in $(ls -1 src/$dir/deps-lib) ; do\n    deps=\n    libs=\n",
                      "markdown": "`done\necho\n\nfor dir in $(ls -1 src | grep -v ^include) ; do\n  for file in $(ls -1 src/$dir/deps-lib) ; do\n    deps=\n    libs=\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 23,
                  "endLine": 52,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        fi\n      done\n      o=$(echo $file | sed s/\\\\.c$/.o/)\n      lo=$(echo $file | sed s/\\\\.c$/.lo/)\n      echo \"${dir}/${o} ${dir}/${lo}:${deps}\"\n    }\n  done\n",
                    "rendered": {
                      "text": "        fi\n      done\n      o=$(echo $file | sed s/\\\\.c$/.o/)\n      lo=$(echo $file | sed s/\\\\.c$/.lo/)\n      echo \"${dir}/${o} ${dir}/${lo}:${deps}\"\n    }\n  done\n",
                      "markdown": "`        fi\n      done\n      o=$(echo $file | sed s/\\\\.c$/.o/)\n      lo=$(echo $file | sed s/\\\\.c$/.lo/)\n      echo \"${dir}/${o} ${dir}/${lo}:${deps}\"\n    }\n  done\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "endLine": 51,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          deps=\"$deps src/include-local/$dep\"\n        fi\n      done\n      o=$(echo $file | sed s/\\\\.c$/.o/)\n      lo=$(echo $file | sed s/\\\\.c$/.lo/)\n      echo \"${dir}/${o} ${dir}/${lo}:${deps}\"\n    }\n",
                    "rendered": {
                      "text": "          deps=\"$deps src/include-local/$dep\"\n        fi\n      done\n      o=$(echo $file | sed s/\\\\.c$/.o/)\n      lo=$(echo $file | sed s/\\\\.c$/.lo/)\n      echo \"${dir}/${o} ${dir}/${lo}:${deps}\"\n    }\n",
                      "markdown": "`          deps=\"$deps src/include-local/$dep\"\n        fi\n      done\n      o=$(echo $file | sed s/\\\\.c$/.o/)\n      lo=$(echo $file | sed s/\\\\.c$/.lo/)\n      echo \"${dir}/${o} ${dir}/${lo}:${deps}\"\n    }\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 22,
                  "endLine": 43,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n          deps=\"$deps src/include/$dep\"\n        elif test -f \"${dir}/$dep\" ; then\n          deps=\"$deps ${dir}/$dep\"\n",
                    "rendered": {
                      "text": "    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n          deps=\"$deps src/include/$dep\"\n        elif test -f \"${dir}/$dep\" ; then\n          deps=\"$deps ${dir}/$dep\"\n",
                      "markdown": "`    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n          deps=\"$deps src/include/$dep\"\n        elif test -f \"${dir}/$dep\" ; then\n          deps=\"$deps ${dir}/$dep\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 7,
                  "endLine": 40,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n",
                    "rendered": {
                      "text": "    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n",
                      "markdown": "`    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 49,
                  "endLine": 39,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n",
                    "rendered": {
                      "text": "  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n",
                      "markdown": "`  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "endLine": 39,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n",
                    "rendered": {
                      "text": "  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n",
                      "markdown": "`  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n      while read dep ; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 73,
                  "endLine": 38,
                  "endColumn": 78,
                  "snippet": {
                    "text": "for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n",
                    "rendered": {
                      "text": "for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n",
                      "markdown": "`for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 57,
                  "endLine": 38,
                  "endColumn": 62,
                  "snippet": {
                    "text": "for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n",
                    "rendered": {
                      "text": "for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n",
                      "markdown": "`for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 11,
                  "snippet": {
                    "text": "for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n",
                    "rendered": {
                      "text": "for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n",
                      "markdown": "`for dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\" ${dir}/$file\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 28,
                  "endLine": 36,
                  "endColumn": 34,
                  "snippet": {
                    "text": "done\n\nfor dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n",
                    "rendered": {
                      "text": "done\n\nfor dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n",
                      "markdown": "`done\n\nfor dir in src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.c$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 22,
                  "endLine": 20,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    } | sort -u | {\n      deps=\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n          deps=\"$deps src/include/$dep\"\n        elif test -f \"${dir}/$dep\" ; then\n          deps=\"$deps ${dir}/$dep\"\n",
                    "rendered": {
                      "text": "    } | sort -u | {\n      deps=\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n          deps=\"$deps src/include/$dep\"\n        elif test -f \"${dir}/$dep\" ; then\n          deps=\"$deps ${dir}/$dep\"\n",
                      "markdown": "`    } | sort -u | {\n      deps=\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n          deps=\"$deps src/include/$dep\"\n        elif test -f \"${dir}/$dep\" ; then\n          deps=\"$deps ${dir}/$dep\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 7,
                  "endLine": 17,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n",
                    "rendered": {
                      "text": "    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n",
                      "markdown": "`    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n        if echo $dep | grep -q \"^${package}/\" ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n",
                    "rendered": {
                      "text": "  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n",
                      "markdown": "`  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 16,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n",
                    "rendered": {
                      "text": "  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n",
                      "markdown": "`  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n      while read dep ; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 73,
                  "endLine": 15,
                  "endColumn": 78,
                  "snippet": {
                    "text": "for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n",
                    "rendered": {
                      "text": "for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n",
                      "markdown": "`for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 57,
                  "endLine": 15,
                  "endColumn": 62,
                  "snippet": {
                    "text": "for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n",
                    "rendered": {
                      "text": "for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n",
                      "markdown": "`for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 5,
                  "endLine": 15,
                  "endColumn": 11,
                  "snippet": {
                    "text": "for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n",
                    "rendered": {
                      "text": "for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n",
                      "markdown": "`for dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n    } | sort -u | {\n      deps=\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-deps.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 28,
                  "endLine": 13,
                  "endColumn": 34,
                  "snippet": {
                    "text": "internal_libs=\n\nfor dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n",
                    "rendered": {
                      "text": "internal_libs=\n\nfor dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n",
                      "markdown": "`internal_libs=\n\nfor dir in src/include/${package} src/* ; do\n  for file in $(ls -1 $dir | grep -- \\\\.h$) ; do\n    {\n      grep -F -- \"#include <${package}/\" < ${dir}/$file | cut -d'<' -f2 | cut -d'>' -f1 ;\n      grep -- '#include \".*\\.h\"' < ${dir}/$file | cut -d'\"' -f2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_substitute.html"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 57,
                  "endLine": 262,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n<p>\nIf the left-to-right order does not suit you, then you should perform\n<em>serial</em> substitutions. For instance, the previous script can\nbe replaced with\n</p>\n\n",
                    "rendered": {
                      "text": "\n<p>\nIf the left-to-right order does not suit you, then you should perform\n<em>serial</em> substitutions. For instance, the previous script can\nbe replaced with\n</p>\n\n",
                      "markdown": "`\n<p>\nIf the left-to-right order does not suit you, then you should perform\n<em>serial</em> substitutions. For instance, the previous script can\nbe replaced with\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_substitute.html"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 71,
                  "endLine": 134,
                  "endColumn": 7,
                  "snippet": {
                    "text": " And now, the catch: the <a href=\"execlineb.html\">execlineb</a> launcher,\nas well as the shell,\ninterprets backslashes as escape characters. To make a word that contains\na backlash, you need to write <em>two</em> backslashes in your execline\nscript or shell command line. That means that the whole number of backslashes\nyou must write before your <tt>${<em>foo</em>}</tt> sequence must be doubled\nfor the substitution command to read the proper number of backslashes and\nperform its work correctly. <br />\n",
                    "rendered": {
                      "text": " And now, the catch: the <a href=\"execlineb.html\">execlineb</a> launcher,\nas well as the shell,\ninterprets backslashes as escape characters. To make a word that contains\na backlash, you need to write <em>two</em> backslashes in your execline\nscript or shell command line. That means that the whole number of backslashes\nyou must write before your <tt>${<em>foo</em>}</tt> sequence must be doubled\nfor the substitution command to read the proper number of backslashes and\nperform its work correctly. <br />\n",
                      "markdown": "` And now, the catch: the <a href=\"execlineb.html\">execlineb</a> launcher,\nas well as the shell,\ninterprets backslashes as escape characters. To make a word that contains\na backlash, you need to write <em>two</em> backslashes in your execline\nscript or shell command line. That means that the whole number of backslashes\nyou must write before your <tt>${<em>foo</em>}</tt> sequence must be doubled\nfor the substitution command to read the proper number of backslashes and\nperform its work correctly. <br />\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_substitute.html"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 47,
                  "endLine": 77,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n<p>\n which will replace the <tt>FOO</tt> key with the <tt>blah</tt> value,\nthen execute the <tt>echo</tt> command. So that script will print\n<tt>blah</tt> on stdout.\n</p>\n\n",
                    "rendered": {
                      "text": "\n<p>\n which will replace the <tt>FOO</tt> key with the <tt>blah</tt> value,\nthen execute the <tt>echo</tt> command. So that script will print\n<tt>blah</tt> on stdout.\n</p>\n\n",
                      "markdown": "`\n<p>\n which will replace the <tt>FOO</tt> key with the <tt>blah</tt> value,\nthen execute the <tt>echo</tt> command. So that script will print\n<tt>blah</tt> on stdout.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/redirfd.html"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 15,
                  "endLine": 90,
                  "endColumn": 19,
                  "snippet": {
                    "text": "there is no reader:\n<tt>redirfd -w -nb <em>n</em> <em>fifo</em> prog...</tt>. Warning:\nthe first attempt to write to the fifo will raise a SIGPIPE if there is\nstill no reader at that time. The named pipe semantics normally do not\nallow a fifo to be open for writing without a reading end, and you\nshould know what you are doing if you're using <tt>redirfd</tt>\nthis way. </li>\n",
                    "rendered": {
                      "text": "there is no reader:\n<tt>redirfd -w -nb <em>n</em> <em>fifo</em> prog...</tt>. Warning:\nthe first attempt to write to the fifo will raise a SIGPIPE if there is\nstill no reader at that time. The named pipe semantics normally do not\nallow a fifo to be open for writing without a reading end, and you\nshould know what you are doing if you're using <tt>redirfd</tt>\nthis way. </li>\n",
                      "markdown": "`there is no reader:\n<tt>redirfd -w -nb <em>n</em> <em>fifo</em> prog...</tt>. Warning:\nthe first attempt to write to the fifo will raise a SIGPIPE if there is\nstill no reader at that time. The named pipe semantics normally do not\nallow a fifo to be open for writing without a reading end, and you\nshould know what you are doing if you're using <tt>redirfd</tt>\nthis way. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/redirfd.html"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 32,
                  "endLine": 82,
                  "endColumn": 36,
                  "snippet": {
                    "text": " <li> Opening a fifo for reading, blocking if there is no writer:\n<tt>redirfd -r <em>n</em> <em>fifo</em> prog...</tt></li>\n <li> Opening a fifo for reading, with instant success even if\nthere is no writer, and blocking at the first attempt to read from it:\n<tt>redirfd -r -nb <em>n</em> <em>fifo</em> prog...</tt></li>\n <li> Opening a fifo for writing, blocking if there is no reader:\n<tt>redirfd -w <em>n</em> <em>fifo</em> prog...</tt></li>\n",
                    "rendered": {
                      "text": " <li> Opening a fifo for reading, blocking if there is no writer:\n<tt>redirfd -r <em>n</em> <em>fifo</em> prog...</tt></li>\n <li> Opening a fifo for reading, with instant success even if\nthere is no writer, and blocking at the first attempt to read from it:\n<tt>redirfd -r -nb <em>n</em> <em>fifo</em> prog...</tt></li>\n <li> Opening a fifo for writing, blocking if there is no reader:\n<tt>redirfd -w <em>n</em> <em>fifo</em> prog...</tt></li>\n",
                      "markdown": "` <li> Opening a fifo for reading, blocking if there is no writer:\n<tt>redirfd -r <em>n</em> <em>fifo</em> prog...</tt></li>\n <li> Opening a fifo for reading, with instant success even if\nthere is no writer, and blocking at the first attempt to read from it:\n<tt>redirfd -r -nb <em>n</em> <em>fifo</em> prog...</tt></li>\n <li> Opening a fifo for writing, blocking if there is no reader:\n<tt>redirfd -w <em>n</em> <em>fifo</em> prog...</tt></li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/install.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  if $symlink ; then\n    mkdir \"$tmp\"\n    ln -s \"$src\" \"$tmp/$(basename $dst)\"\n    mv -f \"$tmp/$(basename $dst)\" \"${dst%/*}\"\n    rmdir \"$tmp\"\n  else\n    echo \"$0: $dst is a directory\" 1>&2\n",
                    "rendered": {
                      "text": "  if $symlink ; then\n    mkdir \"$tmp\"\n    ln -s \"$src\" \"$tmp/$(basename $dst)\"\n    mv -f \"$tmp/$(basename $dst)\" \"${dst%/*}\"\n    rmdir \"$tmp\"\n  else\n    echo \"$0: $dst is a directory\" 1>&2\n",
                      "markdown": "`  if $symlink ; then\n    mkdir \"$tmp\"\n    ln -s \"$src\" \"$tmp/$(basename $dst)\"\n    mv -f \"$tmp/$(basename $dst)\" \"${dst%/*}\"\n    rmdir \"$tmp\"\n  else\n    echo \"$0: $dst is a directory\" 1>&2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/install.sh"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 57,
                  "endColumn": 3,
                  "snippet": {
                    "text": "  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n\nmv -f \"$tmp\" \"$dst\"\nif test -d \"$dst\" ; then\n  rm -f \"$dst/$(basename $tmp)\"\n  if $symlink ; then\n",
                    "rendered": {
                      "text": "  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n\nmv -f \"$tmp\" \"$dst\"\nif test -d \"$dst\" ; then\n  rm -f \"$dst/$(basename $tmp)\"\n  if $symlink ; then\n",
                      "markdown": "`  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n\nmv -f \"$tmp\" \"$dst\"\nif test -d \"$dst\" ; then\n  rm -f \"$dst/$(basename $tmp)\"\n  if $symlink ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/install.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n\nmv -f \"$tmp\" \"$dst\"\n",
                    "rendered": {
                      "text": "  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n\nmv -f \"$tmp\" \"$dst\"\n",
                      "markdown": "`  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n\nmv -f \"$tmp\" \"$dst\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/install.sh"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 3,
                  "endLine": 52,
                  "endColumn": 10,
                  "snippet": {
                    "text": "else\n  cat < \"$1\" > \"$tmp\"\n  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n",
                    "rendered": {
                      "text": "else\n  cat < \"$1\" > \"$tmp\"\n  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n",
                      "markdown": "`else\n  cat < \"$1\" > \"$tmp\"\n  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n  chmod -- \"$mode\" \"$tmp\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/install.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 1,
                  "endLine": 50,
                  "endColumn": 6,
                  "snippet": {
                    "text": "if $symlink ; then\n  ln -s \"$src\" \"$tmp\"\nelse\n  cat < \"$1\" > \"$tmp\"\n  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n",
                    "rendered": {
                      "text": "if $symlink ; then\n  ln -s \"$src\" \"$tmp\"\nelse\n  cat < \"$1\" > \"$tmp\"\n  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n",
                      "markdown": "`if $symlink ; then\n  ln -s \"$src\" \"$tmp\"\nelse\n  cat < \"$1\" > \"$tmp\"\n  if test -n \"$og\" ; then\n    chown -- \"$og\" \"$tmp\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/Makefile"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 7,
                  "endLine": 125,
                  "endColumn": 15,
                  "snippet": {
                    "text": "$(DESTDIR)$(sproot)/library.so/lib%.so.$(version_M): $(DESTDIR)$(dynlibdir)/lib%.so.$(version_M)\n\texec $(INSTALL) -D -l ..$(subst $(sproot),,$(exthome))/library.so/$(<F) $@\n\n.PHONY: update global-links\n\nendif\n\n",
                    "rendered": {
                      "text": "$(DESTDIR)$(sproot)/library.so/lib%.so.$(version_M): $(DESTDIR)$(dynlibdir)/lib%.so.$(version_M)\n\texec $(INSTALL) -D -l ..$(subst $(sproot),,$(exthome))/library.so/$(<F) $@\n\n.PHONY: update global-links\n\nendif\n\n",
                      "markdown": "`$(DESTDIR)$(sproot)/library.so/lib%.so.$(version_M): $(DESTDIR)$(dynlibdir)/lib%.so.$(version_M)\n\texec $(INSTALL) -D -l ..$(subst $(sproot),,$(exthome))/library.so/$(<F) $@\n\n.PHONY: update global-links\n\nendif\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/Makefile"
                },
                "region": {
                  "startLine": 91,
                  "endLine": 91,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\trm -rf /tmp/$$package-$$version && \\\n\tcp -a . /tmp/$$package-$$version && \\\n\tcd /tmp && \\\n\ttar -zpcv --owner=0 --group=0 --numeric-owner --exclude=.git* -f /tmp/$$package-$$version.tar.gz $$package-$$version && \\\n\texec rm -rf /tmp/$$package-$$version\n\nstrip: $(ALL_LIBS) $(ALL_BINS)\n",
                    "rendered": {
                      "text": "\trm -rf /tmp/$$package-$$version && \\\n\tcp -a . /tmp/$$package-$$version && \\\n\tcd /tmp && \\\n\ttar -zpcv --owner=0 --group=0 --numeric-owner --exclude=.git* -f /tmp/$$package-$$version.tar.gz $$package-$$version && \\\n\texec rm -rf /tmp/$$package-$$version\n\nstrip: $(ALL_LIBS) $(ALL_BINS)\n",
                      "markdown": "`\trm -rf /tmp/$$package-$$version && \\\n\tcp -a . /tmp/$$package-$$version && \\\n\tcd /tmp && \\\n\ttar -zpcv --owner=0 --group=0 --numeric-owner --exclude=.git* -f /tmp/$$package-$$version.tar.gz $$package-$$version && \\\n\texec rm -rf /tmp/$$package-$$version\n\nstrip: $(ALL_LIBS) $(ALL_BINS)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/Makefile"
                },
                "region": {
                  "startLine": 89,
                  "endLine": 89,
                  "endColumn": 4,
                  "snippet": {
                    "text": "tgz: distclean\n\t@. package/info && \\\n\trm -rf /tmp/$$package-$$version && \\\n\tcp -a . /tmp/$$package-$$version && \\\n\tcd /tmp && \\\n\ttar -zpcv --owner=0 --group=0 --numeric-owner --exclude=.git* -f /tmp/$$package-$$version.tar.gz $$package-$$version && \\\n\texec rm -rf /tmp/$$package-$$version\n",
                    "rendered": {
                      "text": "tgz: distclean\n\t@. package/info && \\\n\trm -rf /tmp/$$package-$$version && \\\n\tcp -a . /tmp/$$package-$$version && \\\n\tcd /tmp && \\\n\ttar -zpcv --owner=0 --group=0 --numeric-owner --exclude=.git* -f /tmp/$$package-$$version.tar.gz $$package-$$version && \\\n\texec rm -rf /tmp/$$package-$$version\n",
                      "markdown": "`tgz: distclean\n\t@. package/info && \\\n\trm -rf /tmp/$$package-$$version && \\\n\tcp -a . /tmp/$$package-$$version && \\\n\tcd /tmp && \\\n\ttar -zpcv --owner=0 --group=0 --numeric-owner --exclude=.git* -f /tmp/$$package-$$version.tar.gz $$package-$$version && \\\n\texec rm -rf /tmp/$$package-$$version\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/Makefile"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n\ndefine symlink_installation_rule\n",
                    "rendered": {
                      "text": "\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n\ndefine symlink_installation_rule\n",
                      "markdown": "`\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n\ndefine symlink_installation_rule\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/Makefile"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 30,
                  "endLine": 38,
                  "endColumn": 37,
                  "snippet": {
                    "text": "$(DESTDIR)$(1)/$(2): $(2) package/modes\n\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n\n",
                    "rendered": {
                      "text": "$(DESTDIR)$(1)/$(2): $(2) package/modes\n\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n\n",
                      "markdown": "`$(DESTDIR)$(1)/$(2): $(2) package/modes\n\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/Makefile"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "endColumn": 6,
                  "snippet": {
                    "text": "define binary_installation_rule\n$(DESTDIR)$(1)/$(2): $(2) package/modes\n\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n",
                    "rendered": {
                      "text": "define binary_installation_rule\n$(DESTDIR)$(1)/$(2): $(2) package/modes\n\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n",
                      "markdown": "`define binary_installation_rule\n$(DESTDIR)$(1)/$(2): $(2) package/modes\n\texec $(INSTALL) -D -m 600 $$< $$@\n\tgrep -- ^$$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$$$owner != x ] ; then chown -- $$$$owner $$@ ; fi && \\\n\tchmod $$$$mode $$@ ; }\nendef\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/multisubstitute.html"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 58,
                  "endLine": 96,
                  "endColumn": 62,
                  "snippet": {
                    "text": "</pre>\n\n<p>\n will print <tt>${A}</tt>, because A and B are substituted at the same\ntime. Serial substitution may be what you want - but when in doubt,\nalways perform parallel substitution.\n</p>\n",
                    "rendered": {
                      "text": "</pre>\n\n<p>\n will print <tt>${A}</tt>, because A and B are substituted at the same\ntime. Serial substitution may be what you want - but when in doubt,\nalways perform parallel substitution.\n</p>\n",
                      "markdown": "`</pre>\n\n<p>\n will print <tt>${A}</tt>, because A and B are substituted at the same\ntime. Serial substitution may be what you want - but when in doubt,\nalways perform parallel substitution.\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/multisubstitute.html"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 55,
                  "endLine": 22,
                  "endColumn": 59,
                  "snippet": {
                    "text": "<h1> The <tt>multisubstitute</tt> program </h1>\n\n<p>\n<tt>multisubstitute</tt> performs several substitutions at once in\nits <em>argv</em>, then executes another program.\n</p>\n\n",
                    "rendered": {
                      "text": "<h1> The <tt>multisubstitute</tt> program </h1>\n\n<p>\n<tt>multisubstitute</tt> performs several substitutions at once in\nits <em>argv</em>, then executes another program.\n</p>\n\n",
                      "markdown": "`<h1> The <tt>multisubstitute</tt> program </h1>\n\n<p>\n<tt>multisubstitute</tt> performs several substitutions at once in\nits <em>argv</em>, then executes another program.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline.html"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 37,
                  "endLine": 76,
                  "endColumn": 41,
                  "snippet": {
                    "text": "</p>\n\n<p>\n I am not a fan of multicall binaries at all.\n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "</p>\n\n<p>\n I am not a fan of multicall binaries at all.\n</p>\n\n<p>\n",
                      "markdown": "`</p>\n\n<p>\n I am not a fan of multicall binaries at all.\n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline.html"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 11,
                  "snippet": {
                    "text": "<p>\nThe <tt>execline</tt> program is only available when the\n<tt>--enable-multicall</tt> option has been given to the <tt>configure</tt>\nprogram at build time. In this configuration, <tt>execline</tt> is\na multicall binary implementing the functionality of <em>all</em>\nthe programs in the execline package; and the other programs, instead\nof being executables of their own, are symbolic links to the\n",
                    "rendered": {
                      "text": "<p>\nThe <tt>execline</tt> program is only available when the\n<tt>--enable-multicall</tt> option has been given to the <tt>configure</tt>\nprogram at build time. In this configuration, <tt>execline</tt> is\na multicall binary implementing the functionality of <em>all</em>\nthe programs in the execline package; and the other programs, instead\nof being executables of their own, are symbolic links to the\n",
                      "markdown": "`<p>\nThe <tt>execline</tt> program is only available when the\n<tt>--enable-multicall</tt> option has been given to the <tt>configure</tt>\nprogram at build time. In this configuration, <tt>execline</tt> is\na multicall binary implementing the functionality of <em>all</em>\nthe programs in the execline package; and the other programs, instead\nof being executables of their own, are symbolic links to the\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline.html"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 6,
                  "endLine": 93,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n<p>\n So now, the multicall configuration is supported for execline.\nDo not expect anything similar for other skarnet.org packages\nsuch as <a href=\"//skarnet.org/software/s6/\">s6</a>, because\nthey're not as good candidates and it would require a tremendous\namount of work for less benefit.\n",
                    "rendered": {
                      "text": "\n<p>\n So now, the multicall configuration is supported for execline.\nDo not expect anything similar for other skarnet.org packages\nsuch as <a href=\"//skarnet.org/software/s6/\">s6</a>, because\nthey're not as good candidates and it would require a tremendous\namount of work for less benefit.\n",
                      "markdown": "`\n<p>\n So now, the multicall configuration is supported for execline.\nDo not expect anything similar for other skarnet.org packages\nsuch as <a href=\"//skarnet.org/software/s6/\">s6</a>, because\nthey're not as good candidates and it would require a tremendous\namount of work for less benefit.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline.html"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 24,
                  "endLine": 59,
                  "endColumn": 32,
                  "snippet": {
                    "text": "to save disk space. Its goal is purely to save disk space;\nfunctionality-wise, the execline package should be the exact same\nwhether it has been built with <tt>--enable-multicall</tt> or not.\nThat means: any execline script should work the exact same way.\n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "to save disk space. Its goal is purely to save disk space;\nfunctionality-wise, the execline package should be the exact same\nwhether it has been built with <tt>--enable-multicall</tt> or not.\nThat means: any execline script should work the exact same way.\n</p>\n\n<p>\n",
                      "markdown": "`to save disk space. Its goal is purely to save disk space;\nfunctionality-wise, the execline package should be the exact same\nwhether it has been built with <tt>--enable-multicall</tt> or not.\nThat means: any execline script should work the exact same way.\n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 40,
                  "endLine": 65,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n<p>\n <div id=\"pop\">When you are done with the arguments</div>, it is advisable to <em>drop</em>\nthe current frame, and <em>pop</em> the environment stack to get it back\nto its previous state:\n</p>\n\n",
                    "rendered": {
                      "text": "\n<p>\n <div id=\"pop\">When you are done with the arguments</div>, it is advisable to <em>drop</em>\nthe current frame, and <em>pop</em> the environment stack to get it back\nto its previous state:\n</p>\n\n",
                      "markdown": "`\n<p>\n <div id=\"pop\">When you are done with the arguments</div>, it is advisable to <em>drop</em>\nthe current frame, and <em>pop</em> the environment stack to get it back\nto its previous state:\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 71,
                  "endLine": 155,
                  "endColumn": 3,
                  "snippet": {
                    "text": "</p>\n\n<ul>\n <li> Use <tt>execlineb -P</tt> if you don't need positional parameters\nat all; for instance, in\n<a href=\"//skarnet.org/software/s6/\">s6</a> or\n<a href=\"http://smarden.org/runit/\">runit</a> <em>run scripts</em>. </li>\n <li> Use <tt>execlineb -S<em>n</em></tt> if you need only simple\n",
                    "rendered": {
                      "text": "</p>\n\n<ul>\n <li> Use <tt>execlineb -P</tt> if you don't need positional parameters\nat all; for instance, in\n<a href=\"//skarnet.org/software/s6/\">s6</a> or\n<a href=\"http://smarden.org/runit/\">runit</a> <em>run scripts</em>. </li>\n <li> Use <tt>execlineb -S<em>n</em></tt> if you need only simple\n",
                      "markdown": "`</p>\n\n<ul>\n <li> Use <tt>execlineb -P</tt> if you don't need positional parameters\nat all; for instance, in\n<a href=\"//skarnet.org/software/s6/\">s6</a> or\n<a href=\"http://smarden.org/runit/\">runit</a> <em>run scripts</em>. </li>\n <li> Use <tt>execlineb -S<em>n</em></tt> if you need only simple\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 70,
                  "endLine": 125,
                  "endColumn": 3,
                  "snippet": {
                    "text": "in your execline script, and don't need to go through the whole\n<a href=\"elgetpositionals.html\">elgetpositionals</a> and\n<a href=\"emptyenv.html\">emptyenv</a> chain. execline comes with an\nintegrated substitution mechanism, that does not touch the environment\nat all: the <tt>-S&nbsp;<em>n</em></tt> option.\n</p>\n\n<p>\n",
                    "rendered": {
                      "text": "in your execline script, and don't need to go through the whole\n<a href=\"elgetpositionals.html\">elgetpositionals</a> and\n<a href=\"emptyenv.html\">emptyenv</a> chain. execline comes with an\nintegrated substitution mechanism, that does not touch the environment\nat all: the <tt>-S&nbsp;<em>n</em></tt> option.\n</p>\n\n<p>\n",
                      "markdown": "`in your execline script, and don't need to go through the whole\n<a href=\"elgetpositionals.html\">elgetpositionals</a> and\n<a href=\"emptyenv.html\">emptyenv</a> chain. execline comes with an\nintegrated substitution mechanism, that does not touch the environment\nat all: the <tt>-S&nbsp;<em>n</em></tt> option.\n</p>\n\n<p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 41,
                  "endLine": 159,
                  "endColumn": 49,
                  "snippet": {
                    "text": "<a href=\"//skarnet.org/software/s6/\">s6</a> or\n<a href=\"http://smarden.org/runit/\">runit</a> <em>run scripts</em>. </li>\n <li> Use <tt>execlineb -S<em>n</em></tt> if you need only simple\npositional parameter substitution in your script - no\n<a href=\"shift.html\">shift</a> or <a href=\"elgetopt.html\">elgetopt</a>,\nno <tt>importas 1 1</tt>. </li>\n <li> Use <tt>execlineb -p</tt>, then <tt>elgetpositionals</tt> if\n",
                    "rendered": {
                      "text": "<a href=\"//skarnet.org/software/s6/\">s6</a> or\n<a href=\"http://smarden.org/runit/\">runit</a> <em>run scripts</em>. </li>\n <li> Use <tt>execlineb -S<em>n</em></tt> if you need only simple\npositional parameter substitution in your script - no\n<a href=\"shift.html\">shift</a> or <a href=\"elgetopt.html\">elgetopt</a>,\nno <tt>importas 1 1</tt>. </li>\n <li> Use <tt>execlineb -p</tt>, then <tt>elgetpositionals</tt> if\n",
                      "markdown": "`<a href=\"//skarnet.org/software/s6/\">s6</a> or\n<a href=\"http://smarden.org/runit/\">runit</a> <em>run scripts</em>. </li>\n <li> Use <tt>execlineb -S<em>n</em></tt> if you need only simple\npositional parameter substitution in your script - no\n<a href=\"shift.html\">shift</a> or <a href=\"elgetopt.html\">elgetopt</a>,\nno <tt>importas 1 1</tt>. </li>\n <li> Use <tt>execlineb -p</tt>, then <tt>elgetpositionals</tt> if\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 58,
                  "endLine": 99,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n<p>\nwill work, but will pollute <em>prog</em>'s environment with a set of\npositional parameters that have no meaning to it. A better script is:\n</p>\n\n<pre>\n",
                    "rendered": {
                      "text": "\n<p>\nwill work, but will pollute <em>prog</em>'s environment with a set of\npositional parameters that have no meaning to it. A better script is:\n</p>\n\n<pre>\n",
                      "markdown": "`\n<p>\nwill work, but will pollute <em>prog</em>'s environment with a set of\npositional parameters that have no meaning to it. A better script is:\n</p>\n\n<pre>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 4,
                  "endLine": 57,
                  "endColumn": 12,
                  "snippet": {
                    "text": "</p>\n\n<p>\n The script then runs; and commands such as\n<a href=\"elgetpositionals.html\">elgetpositionals</a> use the current\nframe of positional parameters, without paying attention to the deeper\nlevels.\n",
                    "rendered": {
                      "text": "</p>\n\n<p>\n The script then runs; and commands such as\n<a href=\"elgetpositionals.html\">elgetpositionals</a> use the current\nframe of positional parameters, without paying attention to the deeper\nlevels.\n",
                      "markdown": "`</p>\n\n<p>\n The script then runs; and commands such as\n<a href=\"elgetpositionals.html\">elgetpositionals</a> use the current\nframe of positional parameters, without paying attention to the deeper\nlevels.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_pushenv.html"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 9,
                  "endLine": 32,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n<p>\n Up to execline-1.04, this could create problems with nested scripts:\nthe inner script would overwrite the outer script's parameters, and\nthere was no way to get them back. In particular, writing execline\ncommands in the execline language via the\n<a href=\"runblock.html\">runblock</a> command was impossible.\n",
                    "rendered": {
                      "text": "\n<p>\n Up to execline-1.04, this could create problems with nested scripts:\nthe inner script would overwrite the outer script's parameters, and\nthere was no way to get them back. In particular, writing execline\ncommands in the execline language via the\n<a href=\"runblock.html\">runblock</a> command was impossible.\n",
                      "markdown": "`\n<p>\n Up to execline-1.04, this could create problems with nested scripts:\nthe inner script would overwrite the outer script's parameters, and\nthere was no way to get them back. In particular, writing execline\ncommands in the execline language via the\n<a href=\"runblock.html\">runblock</a> command was impossible.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline-cd.html"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 14,
                  "endLine": 46,
                  "endColumn": 22,
                  "snippet": {
                    "text": " <li> When execline has been configured with the <tt>--enable-pedantic-posix</tt>\noption, the <tt>cd</tt> binary is a symbolic link to the\n<a href=\"posix-cd.html\">posix-cd</a> binary instead, so a <tt>cd</tt> command\nin an execline script will invoke <a href=\"posix-cd.html\">posix-cd</a> instead\nof <tt>execline-cd</tt>. </li>\n <li> Existing scripts that call <tt>cd</tt> will keep working no matter the\nchosen configuration. </li>\n",
                    "rendered": {
                      "text": " <li> When execline has been configured with the <tt>--enable-pedantic-posix</tt>\noption, the <tt>cd</tt> binary is a symbolic link to the\n<a href=\"posix-cd.html\">posix-cd</a> binary instead, so a <tt>cd</tt> command\nin an execline script will invoke <a href=\"posix-cd.html\">posix-cd</a> instead\nof <tt>execline-cd</tt>. </li>\n <li> Existing scripts that call <tt>cd</tt> will keep working no matter the\nchosen configuration. </li>\n",
                      "markdown": "` <li> When execline has been configured with the <tt>--enable-pedantic-posix</tt>\noption, the <tt>cd</tt> binary is a symbolic link to the\n<a href=\"posix-cd.html\">posix-cd</a> binary instead, so a <tt>cd</tt> command\nin an execline script will invoke <a href=\"posix-cd.html\">posix-cd</a> instead\nof <tt>execline-cd</tt>. </li>\n <li> Existing scripts that call <tt>cd</tt> will keep working no matter the\nchosen configuration. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/fdreserve.html"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 25,
                  "endLine": 62,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n<p>\n Warning: <tt>fdreserve</tt> does not allocate descriptors, it merely returns\ndescriptors that are free at the time it is run. A program like\n</p>\n\n<pre>\n",
                    "rendered": {
                      "text": "\n<p>\n Warning: <tt>fdreserve</tt> does not allocate descriptors, it merely returns\ndescriptors that are free at the time it is run. A program like\n</p>\n\n<pre>\n",
                      "markdown": "`\n<p>\n Warning: <tt>fdreserve</tt> does not allocate descriptors, it merely returns\ndescriptors that are free at the time it is run. A program like\n</p>\n\n<pre>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/fdreserve.html"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 32,
                  "endLine": 62,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n<p>\n Warning: <tt>fdreserve</tt> does not allocate descriptors, it merely returns\ndescriptors that are free at the time it is run. A program like\n</p>\n\n<pre>\n",
                    "rendered": {
                      "text": "\n<p>\n Warning: <tt>fdreserve</tt> does not allocate descriptors, it merely returns\ndescriptors that are free at the time it is run. A program like\n</p>\n\n<pre>\n",
                      "markdown": "`\n<p>\n Warning: <tt>fdreserve</tt> does not allocate descriptors, it merely returns\ndescriptors that are free at the time it is run. A program like\n</p>\n\n<pre>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/index.html"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 58,
                  "endLine": 113,
                  "endColumn": 64,
                  "snippet": {
                    "text": "<p>\n All these commands exit 111 if they encounter a temporary error, and\n100 if they encounter a permanent error - such as a misuse. They exit\n127 if they're trying to execute into a program and cannot find it, and\n126 if they fail to execute into a program for another reason.\n</p>\n\n",
                    "rendered": {
                      "text": "<p>\n All these commands exit 111 if they encounter a temporary error, and\n100 if they encounter a permanent error - such as a misuse. They exit\n127 if they're trying to execute into a program and cannot find it, and\n126 if they fail to execute into a program for another reason.\n</p>\n\n",
                      "markdown": "`<p>\n All these commands exit 111 if they encounter a temporary error, and\n100 if they encounter a permanent error - such as a misuse. They exit\n127 if they're trying to execute into a program and cannot find it, and\n126 if they fail to execute into a program for another reason.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/index.html"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 15,
                  "endLine": 87,
                  "endColumn": 20,
                  "snippet": {
                    "text": "<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\nof the execline git repository. </li>\n</ul>\n\n<h3> Compilation </h3>\n",
                    "rendered": {
                      "text": "<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\nof the execline git repository. </li>\n</ul>\n\n<h3> Compilation </h3>\n",
                      "markdown": "`<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\nof the execline git repository. </li>\n</ul>\n\n<h3> Compilation </h3>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/index.html"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 5,
                  "endLine": 84,
                  "endColumn": 10,
                  "snippet": {
                    "text": " <li> Alternatively, you can checkout a copy of the\n<a href=\"//git.skarnet.org/cgi-bin/cgit.cgi/execline/\">execline\ngit repository</a>:\n<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\nof the execline git repository. </li>\n",
                    "rendered": {
                      "text": " <li> Alternatively, you can checkout a copy of the\n<a href=\"//git.skarnet.org/cgi-bin/cgit.cgi/execline/\">execline\ngit repository</a>:\n<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\nof the execline git repository. </li>\n",
                      "markdown": "` <li> Alternatively, you can checkout a copy of the\n<a href=\"//git.skarnet.org/cgi-bin/cgit.cgi/execline/\">execline\ngit repository</a>:\n<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\nof the execline git repository. </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/index.html"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 63,
                  "endLine": 83,
                  "endColumn": 4,
                  "snippet": {
                    "text": "<ul>\n <li> The current released version of execline is <a href=\"execline-2.9.6.1.tar.gz\">2.9.6.1</a>. </li>\n <li> Alternatively, you can checkout a copy of the\n<a href=\"//git.skarnet.org/cgi-bin/cgit.cgi/execline/\">execline\ngit repository</a>:\n<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\n",
                    "rendered": {
                      "text": "<ul>\n <li> The current released version of execline is <a href=\"execline-2.9.6.1.tar.gz\">2.9.6.1</a>. </li>\n <li> Alternatively, you can checkout a copy of the\n<a href=\"//git.skarnet.org/cgi-bin/cgit.cgi/execline/\">execline\ngit repository</a>:\n<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\n",
                      "markdown": "`<ul>\n <li> The current released version of execline is <a href=\"execline-2.9.6.1.tar.gz\">2.9.6.1</a>. </li>\n <li> Alternatively, you can checkout a copy of the\n<a href=\"//git.skarnet.org/cgi-bin/cgit.cgi/execline/\">execline\ngit repository</a>:\n<pre> git clone git://git.skarnet.org/execline </pre> </li>\n <li> There's also a\n<a href=\"https://github.com/skarnet/execline\">GitHub mirror</a>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/index.html"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 43,
                  "endLine": 8,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: a small scripting language</title>\n    <meta name=\"Description\" content=\"execline: a small scripting language\" />\n    <meta name=\"Keywords\" content=\"execline script scripting language shell embedded chain loading bernstein chaining unix\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                    "rendered": {
                      "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: a small scripting language</title>\n    <meta name=\"Description\" content=\"execline: a small scripting language\" />\n    <meta name=\"Keywords\" content=\"execline script scripting language shell embedded chain loading bernstein chaining unix\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                      "markdown": "`    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: a small scripting language</title>\n    <meta name=\"Description\" content=\"execline: a small scripting language\" />\n    <meta name=\"Keywords\" content=\"execline script scripting language shell embedded chain loading bernstein chaining unix\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/multidefine.html"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 65,
                  "endLine": 22,
                  "endColumn": 69,
                  "snippet": {
                    "text": "<h1> The <tt>multidefine</tt> program </h1>\n\n<p>\n<tt>multidefine</tt> splits a value and defines several variables at once,\nthen executes another program.\n</p>\n\n",
                    "rendered": {
                      "text": "<h1> The <tt>multidefine</tt> program </h1>\n\n<p>\n<tt>multidefine</tt> splits a value and defines several variables at once,\nthen executes another program.\n</p>\n\n",
                      "markdown": "`<h1> The <tt>multidefine</tt> program </h1>\n\n<p>\n<tt>multidefine</tt> splits a value and defines several variables at once,\nthen executes another program.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/if.html"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 11,
                  "endLine": 63,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n<ul>\n <li> <tt>if</tt> will exit if <em>prog1...</em> exits false. To use it in\nan execline script that must run <em>prog3...</em> no matter the result of\nthe test, use a <tt>foreground</tt> wrapper:\n<pre> foreground { if { <em>prog1...</em> } <em>prog2...</em> } <em>prog3...</em> </pre>\n(in <a href=\"execlineb.html\">execlineb</a> syntax) </li>\n",
                    "rendered": {
                      "text": "\n<ul>\n <li> <tt>if</tt> will exit if <em>prog1...</em> exits false. To use it in\nan execline script that must run <em>prog3...</em> no matter the result of\nthe test, use a <tt>foreground</tt> wrapper:\n<pre> foreground { if { <em>prog1...</em> } <em>prog2...</em> } <em>prog3...</em> </pre>\n(in <a href=\"execlineb.html\">execlineb</a> syntax) </li>\n",
                      "markdown": "`\n<ul>\n <li> <tt>if</tt> will exit if <em>prog1...</em> exits false. To use it in\nan execline script that must run <em>prog3...</em> no matter the result of\nthe test, use a <tt>foreground</tt> wrapper:\n<pre> foreground { if { <em>prog1...</em> } <em>prog2...</em> } <em>prog3...</em> </pre>\n(in <a href=\"execlineb.html\">execlineb</a> syntax) </li>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/wait.html"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 58,
                  "endLine": 78,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\n<ul>\n <li> For <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/wait.html\">POSIX\ncompatibility</a>, <tt>wait</tt> also works when it cannot find a block.\nIn that case, all the options are still supported and have the same\neffect, but the rest of the command line is interpreted as <em>pids...</em>\narguments and <tt>wait</tt> does not execute into a program; instead, it exits\n",
                    "rendered": {
                      "text": "\n<ul>\n <li> For <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/wait.html\">POSIX\ncompatibility</a>, <tt>wait</tt> also works when it cannot find a block.\nIn that case, all the options are still supported and have the same\neffect, but the rest of the command line is interpreted as <em>pids...</em>\narguments and <tt>wait</tt> does not execute into a program; instead, it exits\n",
                      "markdown": "`\n<ul>\n <li> For <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/wait.html\">POSIX\ncompatibility</a>, <tt>wait</tt> also works when it cannot find a block.\nIn that case, all the options are still supported and have the same\neffect, but the rest of the command line is interpreted as <em>pids...</em>\narguments and <tt>wait</tt> does not execute into a program; instead, it exits\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/envfile.html"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 43,
                  "endLine": 98,
                  "endColumn": 47,
                  "snippet": {
                    "text": "<p>\n If <em>value</em> is empty, <em>key</em> is <strong>still</strong>\nadded to the environment, with an empty value. If you do not want\n<em>key</em> to be added to the environment at all, comment out the line.\n<tt>envfile</tt> does not offer a way to <em>remove</em> variables from\nthe environment.\n</p>\n",
                    "rendered": {
                      "text": "<p>\n If <em>value</em> is empty, <em>key</em> is <strong>still</strong>\nadded to the environment, with an empty value. If you do not want\n<em>key</em> to be added to the environment at all, comment out the line.\n<tt>envfile</tt> does not offer a way to <em>remove</em> variables from\nthe environment.\n</p>\n",
                      "markdown": "`<p>\n If <em>value</em> is empty, <em>key</em> is <strong>still</strong>\nadded to the environment, with an empty value. If you do not want\n<em>key</em> to be added to the environment at all, comment out the line.\n<tt>envfile</tt> does not offer a way to <em>remove</em> variables from\nthe environment.\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/envfile.html"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 26,
                  "endLine": 83,
                  "endColumn": 30,
                  "snippet": {
                    "text": " A non-commented line that ends with a backslash (\"<tt>\\</tt>\") is\nconcatenated with the following one, and the newline character is\nignored. If a backslashed newline happens before the start of a\nvalue, then the whitespace at the beginning of the new line will be\npart of the value (i.e. leading whitespace on a new line is not\nstripped).\n</p>\n",
                    "rendered": {
                      "text": " A non-commented line that ends with a backslash (\"<tt>\\</tt>\") is\nconcatenated with the following one, and the newline character is\nignored. If a backslashed newline happens before the start of a\nvalue, then the whitespace at the beginning of the new line will be\npart of the value (i.e. leading whitespace on a new line is not\nstripped).\n</p>\n",
                      "markdown": "` A non-commented line that ends with a backslash (\"<tt>\\</tt>\") is\nconcatenated with the following one, and the newline character is\nignored. If a backslashed newline happens before the start of a\nvalue, then the whitespace at the beginning of the new line will be\npart of the value (i.e. leading whitespace on a new line is not\nstripped).\n</p>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/elgetpositionals.html"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 55,
                  "endLine": 59,
                  "endColumn": 59,
                  "snippet": {
                    "text": "<h2> Options </h2>\n\n<ul>\n <li> <tt>-P</tt>&nbsp;<em>sharp</em>&nbsp;: substitute at least\n<em>sharp</em>+1 positional parameters, from 0 to\nmax(<em>n</em>, <em>sharp</em>). If <em>n</em>&lt;<em>sharp</em>,\npositional parameters between <em>n</em>+1 and <em>sharp</em> are\n",
                    "rendered": {
                      "text": "<h2> Options </h2>\n\n<ul>\n <li> <tt>-P</tt>&nbsp;<em>sharp</em>&nbsp;: substitute at least\n<em>sharp</em>+1 positional parameters, from 0 to\nmax(<em>n</em>, <em>sharp</em>). If <em>n</em>&lt;<em>sharp</em>,\npositional parameters between <em>n</em>+1 and <em>sharp</em> are\n",
                      "markdown": "`<h2> Options </h2>\n\n<ul>\n <li> <tt>-P</tt>&nbsp;<em>sharp</em>&nbsp;: substitute at least\n<em>sharp</em>+1 positional parameters, from 0 to\nmax(<em>n</em>, <em>sharp</em>). If <em>n</em>&lt;<em>sharp</em>,\npositional parameters between <em>n</em>+1 and <em>sharp</em> are\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/elgetpositionals.html"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 40,
                  "endLine": 70,
                  "endColumn": 48,
                  "snippet": {
                    "text": "<h2> Notes </h2>\n\n<ul>\n <li> A typical argument-taking execline script will\noften begin this way:\n<pre>\n #!/command/execlineb\n",
                    "rendered": {
                      "text": "<h2> Notes </h2>\n\n<ul>\n <li> A typical argument-taking execline script will\noften begin this way:\n<pre>\n #!/command/execlineb\n",
                      "markdown": "`<h2> Notes </h2>\n\n<ul>\n <li> A typical argument-taking execline script will\noften begin this way:\n<pre>\n #!/command/execlineb\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline-startup.html"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 34,
                  "endLine": 19,
                  "endColumn": 42,
                  "snippet": {
                    "text": "<a href=\"//skarnet.org/\">skarnet.org</a>\n</p>\n\n<h1> The <tt>execline-startup</tt> script </h1>\n\n<p>\n<tt>execline-startup</tt> performs some system-specific\n",
                    "rendered": {
                      "text": "<a href=\"//skarnet.org/\">skarnet.org</a>\n</p>\n\n<h1> The <tt>execline-startup</tt> script </h1>\n\n<p>\n<tt>execline-startup</tt> performs some system-specific\n",
                      "markdown": "`<a href=\"//skarnet.org/\">skarnet.org</a>\n</p>\n\n<h1> The <tt>execline-startup</tt> script </h1>\n\n<p>\n<tt>execline-startup</tt> performs some system-specific\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/execline-startup.html"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 74,
                  "endLine": 8,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: the execline-startup script</title>\n    <meta name=\"Description\" content=\"execline: the execline-startup script\" />\n    <meta name=\"Keywords\" content=\"execline execline-startup startup login script .profile\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                    "rendered": {
                      "text": "    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: the execline-startup script</title>\n    <meta name=\"Description\" content=\"execline: the execline-startup script\" />\n    <meta name=\"Keywords\" content=\"execline execline-startup startup login script .profile\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n",
                      "markdown": "`    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>execline: the execline-startup script</title>\n    <meta name=\"Description\" content=\"execline: the execline-startup script\" />\n    <meta name=\"Keywords\" content=\"execline execline-startup startup login script .profile\" />\n    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"//skarnet.org/default.css\" /> -->\n  </head>\n<body>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_semicolon.c"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 53,
                  "endLine": 31,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        if (strict >= 2)\n          strerr_dief6x(100, \"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n        else\n          strerr_warnw6x(\"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n      }\n    }\n  }\n",
                    "rendered": {
                      "text": "        if (strict >= 2)\n          strerr_dief6x(100, \"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n        else\n          strerr_warnw6x(\"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n      }\n    }\n  }\n",
                      "markdown": "`        if (strict >= 2)\n          strerr_dief6x(100, \"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n        else\n          strerr_warnw6x(\"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n      }\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_semicolon.c"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 57,
                  "endLine": 29,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        fmt1[uint_fmt(fmt1, nblock)] = 0 ;\n        fmt2[uint_fmt(fmt2, (unsigned int)argc1)] = 0 ;\n        if (strict >= 2)\n          strerr_dief6x(100, \"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n        else\n          strerr_warnw6x(\"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n      }\n",
                    "rendered": {
                      "text": "        fmt1[uint_fmt(fmt1, nblock)] = 0 ;\n        fmt2[uint_fmt(fmt2, (unsigned int)argc1)] = 0 ;\n        if (strict >= 2)\n          strerr_dief6x(100, \"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n        else\n          strerr_warnw6x(\"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n      }\n",
                      "markdown": "`        fmt1[uint_fmt(fmt1, nblock)] = 0 ;\n        fmt2[uint_fmt(fmt2, (unsigned int)argc1)] = 0 ;\n        if (strict >= 2)\n          strerr_dief6x(100, \"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n        else\n          strerr_warnw6x(\"unquoted argument \", arg, \" at block \", fmt1, \" position \", fmt2) ;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/eltest.c"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 64,
                  "endLine": 234,
                  "endColumn": 68,
                  "snippet": {
                    "text": "        {\n          char fmt[UINT_FMT] ;\n          fmt[uint_fmt(fmt, pos)] = 0 ;\n          strerr_dief2x(100, \"parse error: bad right parenthesis at argument \", fmt) ;\n        }\n        stack[sp-2] = stack[sp-1] ;\n        sp -= 2 ;\n",
                    "rendered": {
                      "text": "        {\n          char fmt[UINT_FMT] ;\n          fmt[uint_fmt(fmt, pos)] = 0 ;\n          strerr_dief2x(100, \"parse error: bad right parenthesis at argument \", fmt) ;\n        }\n        stack[sp-2] = stack[sp-1] ;\n        sp -= 2 ;\n",
                      "markdown": "`        {\n          char fmt[UINT_FMT] ;\n          fmt[uint_fmt(fmt, pos)] = 0 ;\n          strerr_dief2x(100, \"parse error: bad right parenthesis at argument \", fmt) ;\n        }\n        stack[sp-2] = stack[sp-1] ;\n        sp -= 2 ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/eltest.c"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 39,
                  "endLine": 186,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      {\n        char fmt[UINT_FMT] ;\n        fmt[uint_fmt(fmt, pos)] = 0 ;\n        strerr_dief2x(100, \"parse error at argument \", fmt) ;\n        break ;\n      }\n      case 'a' : /* accept */\n",
                    "rendered": {
                      "text": "      {\n        char fmt[UINT_FMT] ;\n        fmt[uint_fmt(fmt, pos)] = 0 ;\n        strerr_dief2x(100, \"parse error at argument \", fmt) ;\n        break ;\n      }\n      case 'a' : /* accept */\n",
                      "markdown": "`      {\n        char fmt[UINT_FMT] ;\n        fmt[uint_fmt(fmt, pos)] = 0 ;\n        strerr_dief2x(100, \"parse error at argument \", fmt) ;\n        break ;\n      }\n      case 'a' : /* accept */\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/INSTALL"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 47,
                  "endLine": 189,
                  "endColumn": 51,
                  "snippet": {
                    "text": "the execline binary will be built, and other programs will be\ncreated as symbolic links to execline at installation time.\n\n The multicall setup saves a lot of disk space, at the price of\nan unnoticeable amount of CPU usage. RAM usage is about equivalent\nand difficult to assess. The setup is meant for embedded devices\nor small distributions with a focus on saving disk space.\n",
                    "rendered": {
                      "text": "the execline binary will be built, and other programs will be\ncreated as symbolic links to execline at installation time.\n\n The multicall setup saves a lot of disk space, at the price of\nan unnoticeable amount of CPU usage. RAM usage is about equivalent\nand difficult to assess. The setup is meant for embedded devices\nor small distributions with a focus on saving disk space.\n",
                      "markdown": "`the execline binary will be built, and other programs will be\ncreated as symbolic links to execline at installation time.\n\n The multicall setup saves a lot of disk space, at the price of\nan unnoticeable amount of CPU usage. RAM usage is about equivalent\nand difficult to assess. The setup is meant for embedded devices\nor small distributions with a focus on saving disk space.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/INSTALL"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 37,
                  "endLine": 187,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n To use this, use the --enable-multicall option to configure. Only\nthe execline binary will be built, and other programs will be\ncreated as symbolic links to execline at installation time.\n\n The multicall setup saves a lot of disk space, at the price of\nan unnoticeable amount of CPU usage. RAM usage is about equivalent\n",
                    "rendered": {
                      "text": "\n To use this, use the --enable-multicall option to configure. Only\nthe execline binary will be built, and other programs will be\ncreated as symbolic links to execline at installation time.\n\n The multicall setup saves a lot of disk space, at the price of\nan unnoticeable amount of CPU usage. RAM usage is about equivalent\n",
                      "markdown": "`\n To use this, use the --enable-multicall option to configure. Only\nthe execline binary will be built, and other programs will be\ncreated as symbolic links to execline at installation time.\n\n The multicall setup saves a lot of disk space, at the price of\nan unnoticeable amount of CPU usage. RAM usage is about equivalent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 1,
                  "endLine": 230,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  fi\nfi\n\n# Expand installation directories\nstripdir prefix\nfor i in exec_prefix dynlibdir libexecdir bindir libdir includedir shebangdir sysdeps sproot ; do\n  eval tmp=\\${$i}\n",
                    "rendered": {
                      "text": "  fi\nfi\n\n# Expand installation directories\nstripdir prefix\nfor i in exec_prefix dynlibdir libexecdir bindir libdir includedir shebangdir sysdeps sproot ; do\n  eval tmp=\\${$i}\n",
                      "markdown": "`  fi\nfi\n\n# Expand installation directories\nstripdir prefix\nfor i in exec_prefix dynlibdir libexecdir bindir libdir includedir shebangdir sysdeps sproot ; do\n  eval tmp=\\${$i}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 60,
                  "endLine": 46,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  --disable-allstatic           do not prefer linking against static libraries [enabled]\n  --enable-static-libc          make entirely static binaries [disabled]\n  --disable-all-pic             do not build executables or static libs as PIC [enabled]\n  --enable-slashpackage[=ROOT]  assume /package installation at ROOT [disabled]\n  --enable-absolute-paths       do not rely on PATH to access this package's binaries,\n                                  hardcode absolute BINDIR/foobar paths instead [disabled]\n  --enable-nsss                 use the nsss library for user information [disabled]\n",
                    "rendered": {
                      "text": "  --disable-allstatic           do not prefer linking against static libraries [enabled]\n  --enable-static-libc          make entirely static binaries [disabled]\n  --disable-all-pic             do not build executables or static libs as PIC [enabled]\n  --enable-slashpackage[=ROOT]  assume /package installation at ROOT [disabled]\n  --enable-absolute-paths       do not rely on PATH to access this package's binaries,\n                                  hardcode absolute BINDIR/foobar paths instead [disabled]\n  --enable-nsss                 use the nsss library for user information [disabled]\n",
                      "markdown": "`  --disable-allstatic           do not prefer linking against static libraries [enabled]\n  --enable-static-libc          make entirely static binaries [disabled]\n  --disable-all-pic             do not build executables or static libs as PIC [enabled]\n  --enable-slashpackage[=ROOT]  assume /package installation at ROOT [disabled]\n  --enable-absolute-paths       do not rely on PATH to access this package's binaries,\n                                  hardcode absolute BINDIR/foobar paths instead [disabled]\n  --enable-nsss                 use the nsss library for user information [disabled]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 44,
                  "endLine": 476,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\necho \"Creating src/include/${package}/config.h...\"\nmkdir -p -m 0755 src/include/${package}\nexec 3>&1 1> src/include/${package}/config.h\ncat <<EOF\n/* ISC license. */\n\n/* Generated by: $cmdline */\n",
                    "rendered": {
                      "text": "\necho \"Creating src/include/${package}/config.h...\"\nmkdir -p -m 0755 src/include/${package}\nexec 3>&1 1> src/include/${package}/config.h\ncat <<EOF\n/* ISC license. */\n\n/* Generated by: $cmdline */\n",
                      "markdown": "`\necho \"Creating src/include/${package}/config.h...\"\nmkdir -p -m 0755 src/include/${package}\nexec 3>&1 1> src/include/${package}/config.h\ncat <<EOF\n/* ISC license. */\n\n/* Generated by: $cmdline */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 22,
                  "endLine": 391,
                  "endColumn": 4,
                  "snippet": {
                    "text": "echo \"Creating config.mak...\"\ncmdline=$(quote \"$0\")\nfor i ; do cmdline=\"$cmdline $(quote \"$i\")\" ; done\nexec 3>&1 1>config.mak\ncat << EOF\n# This file was generated by:\n# $cmdline\n# Any changes made here will be lost if configure is re-run.\n",
                    "rendered": {
                      "text": "echo \"Creating config.mak...\"\ncmdline=$(quote \"$0\")\nfor i ; do cmdline=\"$cmdline $(quote \"$i\")\" ; done\nexec 3>&1 1>config.mak\ncat << EOF\n# This file was generated by:\n# $cmdline\n# Any changes made here will be lost if configure is re-run.\n",
                      "markdown": "`echo \"Creating config.mak...\"\ncmdline=$(quote \"$0\")\nfor i ; do cmdline=\"$cmdline $(quote \"$i\")\" ; done\nexec 3>&1 1>config.mak\ncat << EOF\n# This file was generated by:\n# $cmdline\n# Any changes made here will be lost if configure is re-run.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 1,
                  "endLine": 322,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  echo \"  ... yes\"\nelse\n  echo \"  ... no. Compiler output follows:\"\n  cat < \"$tmpe\"\n  exit 1\nfi\n\n",
                    "rendered": {
                      "text": "  echo \"  ... yes\"\nelse\n  echo \"  ... no. Compiler output follows:\"\n  cat < \"$tmpe\"\n  exit 1\nfi\n\n",
                      "markdown": "`  echo \"  ... yes\"\nelse\n  echo \"  ... no. Compiler output follows:\"\n  cat < \"$tmpe\"\n  exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 40,
                  "endLine": 314,
                  "endColumn": 46,
                  "snippet": {
                    "text": "trycc ${cross}gcc\ntrycc ${cross}clang\ntrycc ${cross}cc\ntest -n \"$CC_AUTO\" || { echo \"$0: cannot find a C compiler\" ; exit 1 ; }\necho \"  ... $CC_AUTO\"\necho \"Checking whether C compiler works... \"\necho \"typedef int x;\" > \"$tmpc\"\n",
                    "rendered": {
                      "text": "trycc ${cross}gcc\ntrycc ${cross}clang\ntrycc ${cross}cc\ntest -n \"$CC_AUTO\" || { echo \"$0: cannot find a C compiler\" ; exit 1 ; }\necho \"  ... $CC_AUTO\"\necho \"Checking whether C compiler works... \"\necho \"typedef int x;\" > \"$tmpc\"\n",
                      "markdown": "`trycc ${cross}gcc\ntrycc ${cross}clang\ntrycc ${cross}cc\ntest -n \"$CC_AUTO\" || { echo \"$0: cannot find a C compiler\" ; exit 1 ; }\necho \"  ... $CC_AUTO\"\necho \"Checking whether C compiler works... \"\necho \"typedef int x;\" > \"$tmpc\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 1,
                  "endLine": 288,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  done < package/deps-build\nfi\n\n# Find a C compiler to use\nif test -n \"$target\" && test x${build} != x${target} ; then\n  cross=${target}-\nelse\n",
                    "rendered": {
                      "text": "  done < package/deps-build\nfi\n\n# Find a C compiler to use\nif test -n \"$target\" && test x${build} != x${target} ; then\n  cross=${target}-\nelse\n",
                      "markdown": "`  done < package/deps-build\nfi\n\n# Find a C compiler to use\nif test -n \"$target\" && test x${build} != x${target} ; then\n  cross=${target}-\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 1,
                  "endLine": 230,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  fi\nfi\n\n# Expand installation directories\nstripdir prefix\nfor i in exec_prefix dynlibdir libexecdir bindir libdir includedir shebangdir sysdeps sproot ; do\n  eval tmp=\\${$i}\n",
                    "rendered": {
                      "text": "  fi\nfi\n\n# Expand installation directories\nstripdir prefix\nfor i in exec_prefix dynlibdir libexecdir bindir libdir includedir shebangdir sysdeps sproot ; do\n  eval tmp=\\${$i}\n",
                      "markdown": "`  fi\nfi\n\n# Expand installation directories\nstripdir prefix\nfor i in exec_prefix dynlibdir libexecdir bindir libdir includedir shebangdir sysdeps sproot ; do\n  eval tmp=\\${$i}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "endLine": 127,
                  "snippet": {
                    "text": "}\n\n\n# Actual script\n\nCC_AUTO=\nCPPFLAGS_AUTO=\"-D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -iquote src/include-local -Isrc/include\"\nCPPFLAGS_POST=\"$CPPFLAGS\"\n",
                    "rendered": {
                      "text": "}\n\n\n# Actual script\n\nCC_AUTO=\nCPPFLAGS_AUTO=\"-D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -iquote src/include-local -Isrc/include\"\nCPPFLAGS_POST=\"$CPPFLAGS\"\n",
                      "markdown": "`}\n\n\n# Actual script\n\nCC_AUTO=\nCPPFLAGS_AUTO=\"-D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -iquote src/include-local -Isrc/include\"\nCPPFLAGS_POST=\"$CPPFLAGS\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 13,
                  "endLine": 71,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  tr '\\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo \"$1\" ; return 0 ; }\n$1\nEOF\n  echo \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\" -e \"1s/^/'/\" -e \"\\$s/\\$/'/\" -e \"s#^'\\([-[:alnum:]_,./:]*\\)=\\(.*\\)\\$#\\1='\\2#\" -e \"s|\\*/|* /|g\"\n}\n\nfail () {\n",
                    "rendered": {
                      "text": "  tr '\\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo \"$1\" ; return 0 ; }\n$1\nEOF\n  echo \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\" -e \"1s/^/'/\" -e \"\\$s/\\$/'/\" -e \"s#^'\\([-[:alnum:]_,./:]*\\)=\\(.*\\)\\$#\\1='\\2#\" -e \"s|\\*/|* /|g\"\n}\n\nfail () {\n",
                      "markdown": "`  tr '\\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo \"$1\" ; return 0 ; }\n$1\nEOF\n  echo \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\" -e \"1s/^/'/\" -e \"\\$s/\\$/'/\" -e \"s#^'\\([-[:alnum:]_,./:]*\\)=\\(.*\\)\\$#\\1='\\2#\" -e \"s|\\*/|* /|g\"\n}\n\nfail () {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 21,
                  "endLine": 68,
                  "endColumn": 27,
                  "snippet": {
                    "text": "}\n\nquote () {\n  tr '\\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo \"$1\" ; return 0 ; }\n$1\nEOF\n  echo \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\" -e \"1s/^/'/\" -e \"\\$s/\\$/'/\" -e \"s#^'\\([-[:alnum:]_,./:]*\\)=\\(.*\\)\\$#\\1='\\2#\" -e \"s|\\*/|* /|g\"\n",
                    "rendered": {
                      "text": "}\n\nquote () {\n  tr '\\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo \"$1\" ; return 0 ; }\n$1\nEOF\n  echo \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\" -e \"1s/^/'/\" -e \"\\$s/\\$/'/\" -e \"s#^'\\([-[:alnum:]_,./:]*\\)=\\(.*\\)\\$#\\1='\\2#\" -e \"s|\\*/|* /|g\"\n",
                      "markdown": "`}\n\nquote () {\n  tr '\\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo \"$1\" ; return 0 ; }\n$1\nEOF\n  echo \"$1\" | sed -e \"s/'/'\\\\\\\\''/g\" -e \"1s/^/'/\" -e \"\\$s/\\$/'/\" -e \"s#^'\\([-[:alnum:]_,./:]*\\)=\\(.*\\)\\$#\\1='\\2#\" -e \"s|\\*/|* /|g\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 74,
                  "endLine": 45,
                  "endColumn": 79,
                  "snippet": {
                    "text": "  --disable-static              do not build static libraries [enabled]\n  --disable-allstatic           do not prefer linking against static libraries [enabled]\n  --enable-static-libc          make entirely static binaries [disabled]\n  --disable-all-pic             do not build executables or static libs as PIC [enabled]\n  --enable-slashpackage[=ROOT]  assume /package installation at ROOT [disabled]\n  --enable-absolute-paths       do not rely on PATH to access this package's binaries,\n                                  hardcode absolute BINDIR/foobar paths instead [disabled]\n",
                    "rendered": {
                      "text": "  --disable-static              do not build static libraries [enabled]\n  --disable-allstatic           do not prefer linking against static libraries [enabled]\n  --enable-static-libc          make entirely static binaries [disabled]\n  --disable-all-pic             do not build executables or static libs as PIC [enabled]\n  --enable-slashpackage[=ROOT]  assume /package installation at ROOT [disabled]\n  --enable-absolute-paths       do not rely on PATH to access this package's binaries,\n                                  hardcode absolute BINDIR/foobar paths instead [disabled]\n",
                      "markdown": "`  --disable-static              do not build static libraries [enabled]\n  --disable-allstatic           do not prefer linking against static libraries [enabled]\n  --enable-static-libc          make entirely static binaries [disabled]\n  --disable-all-pic             do not build executables or static libs as PIC [enabled]\n  --enable-slashpackage[=ROOT]  assume /package installation at ROOT [disabled]\n  --enable-absolute-paths       do not rely on PATH to access this package's binaries,\n                                  hardcode absolute BINDIR/foobar paths instead [disabled]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/configure"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 4,
                  "snippet": {
                    "text": "cd `dirname \"$0\"`\n. package/info\n\nusage () {\ncat <<EOF\nUsage: $0 [OPTION]... [TARGET]\n\nDefaults for the options are specified in brackets.\n",
                    "rendered": {
                      "text": "cd `dirname \"$0\"`\n. package/info\n\nusage () {\ncat <<EOF\nUsage: $0 [OPTION]... [TARGET]\n\nDefaults for the options are specified in brackets.\n",
                      "markdown": "`cd `dirname \"$0\"`\n. package/info\n\nusage () {\ncat <<EOF\nUsage: $0 [OPTION]... [TARGET]\n\nDefaults for the options are specified in brackets.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 28,
                  "endLine": 21,
                  "endColumn": 3,
                  "snippet": {
                    "text": "\necho 'SHELL := /usr/xpg4/bin/sh' > Makefile.tmp\necho >> Makefile.tmp\ncat Makefile >> Makefile.tmp\nmv -f Makefile.tmp Makefile\n",
                    "rendered": {
                      "text": "\necho 'SHELL := /usr/xpg4/bin/sh' > Makefile.tmp\necho >> Makefile.tmp\ncat Makefile >> Makefile.tmp\nmv -f Makefile.tmp Makefile\n",
                      "markdown": "`\necho 'SHELL := /usr/xpg4/bin/sh' > Makefile.tmp\necho >> Makefile.tmp\ncat Makefile >> Makefile.tmp\nmv -f Makefile.tmp Makefile\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 4,
                  "snippet": {
                    "text": "patchit ./tools/gen-deps.sh\n\necho 'SHELL := /usr/xpg4/bin/sh' > Makefile.tmp\necho >> Makefile.tmp\ncat Makefile >> Makefile.tmp\nmv -f Makefile.tmp Makefile\n",
                    "rendered": {
                      "text": "patchit ./tools/gen-deps.sh\n\necho 'SHELL := /usr/xpg4/bin/sh' > Makefile.tmp\necho >> Makefile.tmp\ncat Makefile >> Makefile.tmp\nmv -f Makefile.tmp Makefile\n",
                      "markdown": "`patchit ./tools/gen-deps.sh\n\necho 'SHELL := /usr/xpg4/bin/sh' > Makefile.tmp\necho >> Makefile.tmp\ncat Makefile >> Makefile.tmp\nmv -f Makefile.tmp Makefile\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 73,
                  "endLine": 12,
                  "endColumn": 3,
                  "snippet": {
                    "text": "}\n\n# Solaris doesn't understand POSIX.1-2008 either.\nsed -e 's/XOPEN_SOURCE=700/XOPEN_SOURCE=600/' < configure > configure.tmp\nmv -f configure.tmp configure\n\npatchit ./configure\npatchit ./tools/install.sh\n",
                    "rendered": {
                      "text": "}\n\n# Solaris doesn't understand POSIX.1-2008 either.\nsed -e 's/XOPEN_SOURCE=700/XOPEN_SOURCE=600/' < configure > configure.tmp\nmv -f configure.tmp configure\n\npatchit ./configure\npatchit ./tools/install.sh\n",
                      "markdown": "`}\n\n# Solaris doesn't understand POSIX.1-2008 either.\nsed -e 's/XOPEN_SOURCE=700/XOPEN_SOURCE=600/' < configure > configure.tmp\nmv -f configure.tmp configure\n\npatchit ./configure\npatchit ./tools/install.sh\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 49,
                  "endLine": 11,
                  "endColumn": 4,
                  "snippet": {
                    "text": "  chmod 0755 $1\n}\n\n# Solaris doesn't understand POSIX.1-2008 either.\nsed -e 's/XOPEN_SOURCE=700/XOPEN_SOURCE=600/' < configure > configure.tmp\nmv -f configure.tmp configure\n\npatchit ./configure\n",
                    "rendered": {
                      "text": "  chmod 0755 $1\n}\n\n# Solaris doesn't understand POSIX.1-2008 either.\nsed -e 's/XOPEN_SOURCE=700/XOPEN_SOURCE=600/' < configure > configure.tmp\nmv -f configure.tmp configure\n\npatchit ./configure\n",
                      "markdown": "`  chmod 0755 $1\n}\n\n# Solaris doesn't understand POSIX.1-2008 either.\nsed -e 's/XOPEN_SOURCE=700/XOPEN_SOURCE=600/' < configure > configure.tmp\nmv -f configure.tmp configure\n\npatchit ./configure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n\n# Solaris doesn't understand POSIX.1-2008 either.\n",
                    "rendered": {
                      "text": "  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n\n# Solaris doesn't understand POSIX.1-2008 either.\n",
                      "markdown": "`  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n\n# Solaris doesn't understand POSIX.1-2008 either.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 5,
                  "snippet": {
                    "text": "patchit () {\n  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n\n",
                    "rendered": {
                      "text": "patchit () {\n  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n\n",
                      "markdown": "`patchit () {\n  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/patch-for-solaris"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\npatchit () {\n  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n",
                    "rendered": {
                      "text": "\npatchit () {\n  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n",
                      "markdown": "`\npatchit () {\n  echo '#!/usr/xpg4/bin/sh' > $1.tmp\n  tail -n +2 $1 >> $1.tmp\n  mv -f $1.tmp $1\n  chmod 0755 $1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/CONTRIBUTING"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 2,
                  "endLine": 5,
                  "endColumn": 6,
                  "snippet": {
                    "text": "which certifies that you have the right and authority to pass\nit on as an open-source patch, as explicited in the Developer's\nCertificate of Origin available in this project's DCO file,\nor at https://developercertificate.org/\n",
                    "rendered": {
                      "text": "which certifies that you have the right and authority to pass\nit on as an open-source patch, as explicited in the Developer's\nCertificate of Origin available in this project's DCO file,\nor at https://developercertificate.org/\n",
                      "markdown": "`which certifies that you have the right and authority to pass\nit on as an open-source patch, as explicited in the Developer's\nCertificate of Origin available in this project's DCO file,\nor at https://developercertificate.org/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/CONTRIBUTING"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 33,
                  "endLine": 1,
                  "endColumn": 37,
                  "snippet": {
                    "text": " Please add a Signed-Off-By: line at the end of your commit,\nwhich certifies that you have the right and authority to pass\nit on as an open-source patch, as explicited in the Developer's\nCertificate of Origin available in this project's DCO file,\n",
                    "rendered": {
                      "text": " Please add a Signed-Off-By: line at the end of your commit,\nwhich certifies that you have the right and authority to pass\nit on as an open-source patch, as explicited in the Developer's\nCertificate of Origin available in this project's DCO file,\n",
                      "markdown": "` Please add a Signed-Off-By: line at the end of your commit,\nwhich certifies that you have the right and authority to pass\nit on as an open-source patch, as explicited in the Developer's\nCertificate of Origin available in this project's DCO file,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/runblock.html"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 14,
                  "endLine": 24,
                  "endColumn": 22,
                  "snippet": {
                    "text": "<p>\n<tt>runblock</tt>'s purpose is to help you write execline commands\nin the execline language. It can only be used inside an execline\nscript. If the script has been given blocks as arguments, <tt>runblock</tt>\nallows you to execute one of the blocks individually.\nIt also allows you to give those blocks as a set of arguments to\nanother command.\n",
                    "rendered": {
                      "text": "<p>\n<tt>runblock</tt>'s purpose is to help you write execline commands\nin the execline language. It can only be used inside an execline\nscript. If the script has been given blocks as arguments, <tt>runblock</tt>\nallows you to execute one of the blocks individually.\nIt also allows you to give those blocks as a set of arguments to\nanother command.\n",
                      "markdown": "`<p>\n<tt>runblock</tt>'s purpose is to help you write execline commands\nin the execline language. It can only be used inside an execline\nscript. If the script has been given blocks as arguments, <tt>runblock</tt>\nallows you to execute one of the blocks individually.\nIt also allows you to give those blocks as a set of arguments to\nanother command.\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_transform.html"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 34,
                  "endLine": 159,
                  "endColumn": 38,
                  "snippet": {
                    "text": "as a word even if it is not terminated by a delimiter, unless you have\nrequested <a href=\"#chomp\">chomping</a> and there was no delimiter at\nthe end of the value <em>before</em> the chomp operation - in which case\nthat last sequence will not appear at all. </li>\n </ul> </li>\n <li> The substitution rewrites the argv. A non-split value will\nbe written as one word in the argv; a split value will be written\n",
                    "rendered": {
                      "text": "as a word even if it is not terminated by a delimiter, unless you have\nrequested <a href=\"#chomp\">chomping</a> and there was no delimiter at\nthe end of the value <em>before</em> the chomp operation - in which case\nthat last sequence will not appear at all. </li>\n </ul> </li>\n <li> The substitution rewrites the argv. A non-split value will\nbe written as one word in the argv; a split value will be written\n",
                      "markdown": "`as a word even if it is not terminated by a delimiter, unless you have\nrequested <a href=\"#chomp\">chomping</a> and there was no delimiter at\nthe end of the value <em>before</em> the chomp operation - in which case\nthat last sequence will not appear at all. </li>\n </ul> </li>\n <li> The substitution rewrites the argv. A non-split value will\nbe written as one word in the argv; a split value will be written\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_transform.html"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 66,
                  "endLine": 158,
                  "snippet": {
                    "text": "will begin with <em>x</em> empty words. </li>\n  <li> The last sequence of characters in the value will be recognized\nas a word even if it is not terminated by a delimiter, unless you have\nrequested <a href=\"#chomp\">chomping</a> and there was no delimiter at\nthe end of the value <em>before</em> the chomp operation - in which case\nthat last sequence will not appear at all. </li>\n </ul> </li>\n <li> The substitution rewrites the argv. A non-split value will\n",
                    "rendered": {
                      "text": "will begin with <em>x</em> empty words. </li>\n  <li> The last sequence of characters in the value will be recognized\nas a word even if it is not terminated by a delimiter, unless you have\nrequested <a href=\"#chomp\">chomping</a> and there was no delimiter at\nthe end of the value <em>before</em> the chomp operation - in which case\nthat last sequence will not appear at all. </li>\n </ul> </li>\n <li> The substitution rewrites the argv. A non-split value will\n",
                      "markdown": "`will begin with <em>x</em> empty words. </li>\n  <li> The last sequence of characters in the value will be recognized\nas a word even if it is not terminated by a delimiter, unless you have\nrequested <a href=\"#chomp\">chomping</a> and there was no delimiter at\nthe end of the value <em>before</em> the chomp operation - in which case\nthat last sequence will not appear at all. </li>\n </ul> </li>\n <li> The substitution rewrites the argv. A non-split value will\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/el_transform.html"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 49,
                  "endLine": 113,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n<p>\n The doublequotes \"protect\" the spaces. Unfortunately, it's easy\nto forget them and perform unwanted splits during script execution\n- countless bugs happen because of the shell's splitting behaviour.\n</p>\n\n",
                    "rendered": {
                      "text": "\n<p>\n The doublequotes \"protect\" the spaces. Unfortunately, it's easy\nto forget them and perform unwanted splits during script execution\n- countless bugs happen because of the shell's splitting behaviour.\n</p>\n\n",
                      "markdown": "`\n<p>\n The doublequotes \"protect\" the spaces. Unfortunately, it's easy\nto forget them and perform unwanted splits during script execution\n- countless bugs happen because of the shell's splitting behaviour.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/doc/exitcodes.html"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 25,
                  "snippet": {
                    "text": "</p>\n\n<p>\n So, any way you look at it, there is always more information than we\ncan report.\n</p>\n\n",
                    "rendered": {
                      "text": "</p>\n\n<p>\n So, any way you look at it, there is always more information than we\ncan report.\n</p>\n\n",
                      "markdown": "`</p>\n\n<p>\n So, any way you look at it, there is always more information than we\ncan report.\n</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_substitute.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 8,
                  "endLine": 176,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  stralloc_free(&info.sa) ;\n  if (!wasnull) stralloc_free(dst) ;\n  *dst = info.dst ;\n  return nc ;\n\nerr :\n  genalloc_free(elsubsu_t, &info.list) ;\n",
                    "rendered": {
                      "text": "  stralloc_free(&info.sa) ;\n  if (!wasnull) stralloc_free(dst) ;\n  *dst = info.dst ;\n  return nc ;\n\nerr :\n  genalloc_free(elsubsu_t, &info.list) ;\n",
                      "markdown": "`  stralloc_free(&info.sa) ;\n  if (!wasnull) stralloc_free(dst) ;\n  *dst = info.dst ;\n  return nc ;\n\nerr :\n  genalloc_free(elsubsu_t, &info.list) ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_substitute.c"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 5,
                  "endLine": 169,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    {\n      int r = substword(&info, 0, info.sa.len, 0, 0) ;\n      if (r < 0) goto err ;\n      nc += r ;\n    }\n  }\n  genalloc_free(elsubsu_t, &info.list) ;\n",
                    "rendered": {
                      "text": "    {\n      int r = substword(&info, 0, info.sa.len, 0, 0) ;\n      if (r < 0) goto err ;\n      nc += r ;\n    }\n  }\n  genalloc_free(elsubsu_t, &info.list) ;\n",
                      "markdown": "`    {\n      int r = substword(&info, 0, info.sa.len, 0, 0) ;\n      if (r < 0) goto err ;\n      nc += r ;\n    }\n  }\n  genalloc_free(elsubsu_t, &info.list) ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_substitute.c"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "endLine": 151,
                  "endColumn": 9,
                  "snippet": {
                    "text": "{\n  subsuinfo_t info = SUBSUINFO_ZERO ;\n  size_t i = 0 ;\n  int nc = 0 ;\n  int wasnull = !dst->s ;\n\n  if (!stralloc_copy(&info.dst, dst)) return -1 ;\n",
                    "rendered": {
                      "text": "{\n  subsuinfo_t info = SUBSUINFO_ZERO ;\n  size_t i = 0 ;\n  int nc = 0 ;\n  int wasnull = !dst->s ;\n\n  if (!stralloc_copy(&info.dst, dst)) return -1 ;\n",
                      "markdown": "`{\n  subsuinfo_t info = SUBSUINFO_ZERO ;\n  size_t i = 0 ;\n  int nc = 0 ;\n  int wasnull = !dst->s ;\n\n  if (!stralloc_copy(&info.dst, dst)) return -1 ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_substitute.c"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 10,
                  "endLine": 132,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      nc += r ;\n      p += plen+1 ;\n    }\n    return nc ;\n   err:\n    info->sa.len = sabase ;\n    info->dst.len = dstbase ;\n",
                    "rendered": {
                      "text": "      nc += r ;\n      p += plen+1 ;\n    }\n    return nc ;\n   err:\n    info->sa.len = sabase ;\n    info->dst.len = dstbase ;\n",
                      "markdown": "`      nc += r ;\n      p += plen+1 ;\n    }\n    return nc ;\n   err:\n    info->sa.len = sabase ;\n    info->dst.len = dstbase ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_substitute.c"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 5,
                  "endLine": 129,
                  "endColumn": 9,
                  "snippet": {
                    "text": "      stralloc_catb(&info->sa, info->sa.s + wordstart + l, wordlen - l) ;\n      r = substword(info, sabase, info->sa.len - sabase, n+1, offset + plen) ;\n      if (r < 0) goto err ;\n      nc += r ;\n      p += plen+1 ;\n    }\n    return nc ;\n",
                    "rendered": {
                      "text": "      stralloc_catb(&info->sa, info->sa.s + wordstart + l, wordlen - l) ;\n      r = substword(info, sabase, info->sa.len - sabase, n+1, offset + plen) ;\n      if (r < 0) goto err ;\n      nc += r ;\n      p += plen+1 ;\n    }\n    return nc ;\n",
                      "markdown": "`      stralloc_catb(&info->sa, info->sa.s + wordstart + l, wordlen - l) ;\n      r = substword(info, sabase, info->sa.len - sabase, n+1, offset + plen) ;\n      if (r < 0) goto err ;\n      nc += r ;\n      p += plen+1 ;\n    }\n    return nc ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/libexecline/el_substitute.c"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 7,
                  "endLine": 116,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    size_t dstbase = info->dst.len ;\n    size_t sabase = info->sa.len ;\n    unsigned int i = 0 ;\n    int nc = 0 ;\n    if (!stralloc_readyplus(&info->sa, l)) return -1 ;\n    stralloc_catb(&info->sa, info->sa.s + wordstart, l) ;\n    for (; i < list[n].subst->n ; i++)\n",
                    "rendered": {
                      "text": "    size_t dstbase = info->dst.len ;\n    size_t sabase = info->sa.len ;\n    unsigned int i = 0 ;\n    int nc = 0 ;\n    if (!stralloc_readyplus(&info->sa, l)) return -1 ;\n    stralloc_catb(&info->sa, info->sa.s + wordstart, l) ;\n    for (; i < list[n].subst->n ; i++)\n",
                      "markdown": "`    size_t dstbase = info->dst.len ;\n    size_t sabase = info->sa.len ;\n    unsigned int i = 0 ;\n    int nc = 0 ;\n    if (!stralloc_readyplus(&info->sa, l)) return -1 ;\n    stralloc_catb(&info->sa, info->sa.s + wordstart, l) ;\n    for (; i < list[n].subst->n ; i++)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/forbacktickx.c"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 20,
                  "endLine": 112,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    {\n      newargv[m++] = EXECLINE_BINPREFIX \"fdmove\" ;\n      newargv[m++] = \"0\" ;\n      newargv[m++] = fmt ;\n    }\n    while (argv[i]) newargv[m++] = argv[i++] ;\n    newargv[m++] = 0 ;\n",
                    "rendered": {
                      "text": "    {\n      newargv[m++] = EXECLINE_BINPREFIX \"fdmove\" ;\n      newargv[m++] = \"0\" ;\n      newargv[m++] = fmt ;\n    }\n    while (argv[i]) newargv[m++] = argv[i++] ;\n    newargv[m++] = 0 ;\n",
                      "markdown": "`    {\n      newargv[m++] = EXECLINE_BINPREFIX \"fdmove\" ;\n      newargv[m++] = \"0\" ;\n      newargv[m++] = fmt ;\n    }\n    while (argv[i]) newargv[m++] = argv[i++] ;\n    newargv[m++] = 0 ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/shift.c"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 11,
                  "endLine": 118,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      char fmu[UINT_FMT] ;\n      fmt[uint_fmt(fmt, i)] = 0 ;\n      fmu[uint_fmt(fmu, i + n)] = 0 ;\n      if (!env_mexec(fmt, i <= (sharp - n) ? getenv(fmu) : 0))\n        strerr_diefu1sys(111, \"modify environment\") ;\n    }\n  }\n",
                    "rendered": {
                      "text": "      char fmu[UINT_FMT] ;\n      fmt[uint_fmt(fmt, i)] = 0 ;\n      fmu[uint_fmt(fmu, i + n)] = 0 ;\n      if (!env_mexec(fmt, i <= (sharp - n) ? getenv(fmu) : 0))\n        strerr_diefu1sys(111, \"modify environment\") ;\n    }\n  }\n",
                      "markdown": "`      char fmu[UINT_FMT] ;\n      fmt[uint_fmt(fmt, i)] = 0 ;\n      fmu[uint_fmt(fmu, i + n)] = 0 ;\n      if (!env_mexec(fmt, i <= (sharp - n) ? getenv(fmu) : 0))\n        strerr_diefu1sys(111, \"modify environment\") ;\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/shift.c"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 57,
                  "endLine": 100,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        if (strict == 1)\n          strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n        else\n          strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n      }\n    }\n  }\n",
                    "rendered": {
                      "text": "        if (strict == 1)\n          strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n        else\n          strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n      }\n    }\n  }\n",
                      "markdown": "`        if (strict == 1)\n          strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n        else\n          strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n      }\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/shift.c"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 53,
                  "endLine": 98,
                  "endColumn": 57,
                  "snippet": {
                    "text": "        fmti[uint_fmt(fmti, i)] = 0 ;\n        fmtp[uint_fmt(fmtp, n - base)] = 0 ;\n        if (strict == 1)\n          strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n        else\n          strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n      }\n",
                    "rendered": {
                      "text": "        fmti[uint_fmt(fmti, i)] = 0 ;\n        fmtp[uint_fmt(fmtp, n - base)] = 0 ;\n        if (strict == 1)\n          strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n        else\n          strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n      }\n",
                      "markdown": "`        fmti[uint_fmt(fmti, i)] = 0 ;\n        fmtp[uint_fmt(fmtp, n - base)] = 0 ;\n        if (strict == 1)\n          strerr_warnw6x(\"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n        else\n          strerr_dief6x(100, \"unquoted positional \", x, \" at block \", fmti, \" position \", fmtp) ;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/wait.c"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 53,
                  "endLine": 22,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n#include <execline/execline.h>\n\n#define USAGE \"wait [ -I | -i ] [ -a | -o ] [ -r | -t timeout ] { pids... } [ prog... ]\"\n#define dieusage() strerr_dieusage(100, USAGE)\n\ntypedef int ac_func (pid_t *, unsigned int *, int *) ;\n",
                    "rendered": {
                      "text": "\n#include <execline/execline.h>\n\n#define USAGE \"wait [ -I | -i ] [ -a | -o ] [ -r | -t timeout ] { pids... } [ prog... ]\"\n#define dieusage() strerr_dieusage(100, USAGE)\n\ntypedef int ac_func (pid_t *, unsigned int *, int *) ;\n",
                      "markdown": "`\n#include <execline/execline.h>\n\n#define USAGE \"wait [ -I | -i ] [ -a | -o ] [ -r | -t timeout ] { pids... } [ prog... ]\"\n#define dieusage() strerr_dieusage(100, USAGE)\n\ntypedef int ac_func (pid_t *, unsigned int *, int *) ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 9,
                  "endLine": 199,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  {\n    char const *v[nc+1] ;\n    if (!env_make(v, nc, sa.s, sa.len)) strerr_diefu1sys(111, \"make argv\") ;\n    v[nc] = 0 ;\n\n    if (flagpushenv > 1)\n",
                    "rendered": {
                      "text": "\n  {\n    char const *v[nc+1] ;\n    if (!env_make(v, nc, sa.s, sa.len)) strerr_diefu1sys(111, \"make argv\") ;\n    v[nc] = 0 ;\n\n    if (flagpushenv > 1)\n",
                      "markdown": "`\n  {\n    char const *v[nc+1] ;\n    if (!env_make(v, nc, sa.s, sa.len)) strerr_diefu1sys(111, \"make argv\") ;\n    v[nc] = 0 ;\n\n    if (flagpushenv > 1)\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 52,
                  "endLine": 176,
                  "endColumn": 56,
                  "snippet": {
                    "text": "      if (flagstrict > 1)\n        strerr_dief4x(100, \"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n    nc = myexlp(&sa, argv, argc, nmin, dollar0, flagpushenv == 4) ;\n    if (nc < 0) strerr_diefu1sys(111, \"substitute positional parameters\") ;\n",
                    "rendered": {
                      "text": "      if (flagstrict > 1)\n        strerr_dief4x(100, \"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n    nc = myexlp(&sa, argv, argc, nmin, dollar0, flagpushenv == 4) ;\n    if (nc < 0) strerr_diefu1sys(111, \"substitute positional parameters\") ;\n",
                      "markdown": "`      if (flagstrict > 1)\n        strerr_dief4x(100, \"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n    nc = myexlp(&sa, argv, argc, nmin, dollar0, flagpushenv == 4) ;\n    if (nc < 0) strerr_diefu1sys(111, \"substitute positional parameters\") ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 56,
                  "endLine": 174,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      fmtn[uint_fmt(fmtn, nmin)] = 0 ;\n      fmta[uint_fmt(fmta, argc)] = 0 ;\n      if (flagstrict > 1)\n        strerr_dief4x(100, \"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n",
                    "rendered": {
                      "text": "      fmtn[uint_fmt(fmtn, nmin)] = 0 ;\n      fmta[uint_fmt(fmta, argc)] = 0 ;\n      if (flagstrict > 1)\n        strerr_dief4x(100, \"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n",
                      "markdown": "`      fmtn[uint_fmt(fmtn, nmin)] = 0 ;\n      fmta[uint_fmt(fmta, argc)] = 0 ;\n      if (flagstrict > 1)\n        strerr_dief4x(100, \"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "endLine": 178,
                  "endColumn": 7,
                  "snippet": {
                    "text": "      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n    nc = myexlp(&sa, argv, argc, nmin, dollar0, flagpushenv == 4) ;\n    if (nc < 0) strerr_diefu1sys(111, \"substitute positional parameters\") ;\n    if (!nc) return 0 ;\n    flagpushenv = 0 ;\n",
                    "rendered": {
                      "text": "      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n    nc = myexlp(&sa, argv, argc, nmin, dollar0, flagpushenv == 4) ;\n    if (nc < 0) strerr_diefu1sys(111, \"substitute positional parameters\") ;\n    if (!nc) return 0 ;\n    flagpushenv = 0 ;\n",
                      "markdown": "`      else\n        strerr_warnw4x(\"too few arguments: expecting at least \", fmtn, \" but got \", fmta) ;\n    }\n    nc = myexlp(&sa, argv, argc, nmin, dollar0, flagpushenv == 4) ;\n    if (nc < 0) strerr_diefu1sys(111, \"substitute positional parameters\") ;\n    if (!nc) return 0 ;\n    flagpushenv = 0 ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 61,
                  "endLine": 147,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  {\n    char fmt[UINT_FMT] ;\n    fmt[uint_fmt(fmt, (unsigned int)flagstrict)] = 0 ;\n    if (!env_addmodif(&modif, \"EXECLINE_STRICT\", flagstrict ? fmt : 0))\n      goto errenv ;\n  }\n  else\n",
                    "rendered": {
                      "text": "  {\n    char fmt[UINT_FMT] ;\n    fmt[uint_fmt(fmt, (unsigned int)flagstrict)] = 0 ;\n    if (!env_addmodif(&modif, \"EXECLINE_STRICT\", flagstrict ? fmt : 0))\n      goto errenv ;\n  }\n  else\n",
                      "markdown": "`  {\n    char fmt[UINT_FMT] ;\n    fmt[uint_fmt(fmt, (unsigned int)flagstrict)] = 0 ;\n    if (!env_addmodif(&modif, \"EXECLINE_STRICT\", flagstrict ? fmt : 0))\n      goto errenv ;\n  }\n  else\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "endLine": 131,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    fd = openb_read(dollar0) ;\n    if (fd < 0) strerr_diefu3sys(111, \"open \", dollar0, \" for reading\") ;\n    buffer_init(&b, &fd_readv, fd, buf, BUFFER_INSIZE) ;\n    nc = el_parse_from_buffer(&sa, &b) ;\n    fd_close(fd) ;\n    switch (nc)\n    {\n",
                    "rendered": {
                      "text": "    fd = openb_read(dollar0) ;\n    if (fd < 0) strerr_diefu3sys(111, \"open \", dollar0, \" for reading\") ;\n    buffer_init(&b, &fd_readv, fd, buf, BUFFER_INSIZE) ;\n    nc = el_parse_from_buffer(&sa, &b) ;\n    fd_close(fd) ;\n    switch (nc)\n    {\n",
                      "markdown": "`    fd = openb_read(dollar0) ;\n    if (fd < 0) strerr_diefu3sys(111, \"open \", dollar0, \" for reading\") ;\n    buffer_init(&b, &fd_readv, fd, buf, BUFFER_INSIZE) ;\n    nc = el_parse_from_buffer(&sa, &b) ;\n    fd_close(fd) ;\n    switch (nc)\n    {\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 3,
                  "endLine": 111,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  }\n  if (stringarg)\n  {\n    nc = el_parse_from_string(&sa, stringarg) ;\n    switch (nc)\n    {\n      case -4: strerr_dief2x(100, \"unmatched \", \"}\") ;\n",
                    "rendered": {
                      "text": "  }\n  if (stringarg)\n  {\n    nc = el_parse_from_string(&sa, stringarg) ;\n    switch (nc)\n    {\n      case -4: strerr_dief2x(100, \"unmatched \", \"}\") ;\n",
                      "markdown": "`  }\n  if (stringarg)\n  {\n    nc = el_parse_from_string(&sa, stringarg) ;\n    switch (nc)\n    {\n      case -4: strerr_dief2x(100, \"unmatched \", \"}\") ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "{\n  stralloc sa = STRALLOC_ZERO ;\n  stralloc modif = STRALLOC_ZERO ;\n  int nc ;\n  int flagstrict = -1 ;\n  unsigned int nmin = 0 ;\n  char const *stringarg = 0 ;\n",
                    "rendered": {
                      "text": "{\n  stralloc sa = STRALLOC_ZERO ;\n  stralloc modif = STRALLOC_ZERO ;\n  int nc ;\n  int flagstrict = -1 ;\n  unsigned int nmin = 0 ;\n  char const *stringarg = 0 ;\n",
                      "markdown": "`{\n  stralloc sa = STRALLOC_ZERO ;\n  stralloc modif = STRALLOC_ZERO ;\n  int nc ;\n  int flagstrict = -1 ;\n  unsigned int nmin = 0 ;\n  char const *stringarg = 0 ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/execlineb.c"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 99,
                  "endLine": 21,
                  "endColumn": 107,
                  "snippet": {
                    "text": "#include <execline/execline.h>\n#include \"exlsn.h\"\n\n#define USAGE \"execlineb [ -p | -P | -S nmin | -s nmin ] [ -q | -w | -W ] [ -e ] [ -c commandline ] script args\"\n\nstatic int myexlp (stralloc *sa, char const *const *argv, unsigned int argc, unsigned int nmin, char const *dollar0, int doshift)\n{\n",
                    "rendered": {
                      "text": "#include <execline/execline.h>\n#include \"exlsn.h\"\n\n#define USAGE \"execlineb [ -p | -P | -S nmin | -s nmin ] [ -q | -w | -W ] [ -e ] [ -c commandline ] script args\"\n\nstatic int myexlp (stralloc *sa, char const *const *argv, unsigned int argc, unsigned int nmin, char const *dollar0, int doshift)\n{\n",
                      "markdown": "`#include <execline/execline.h>\n#include \"exlsn.h\"\n\n#define USAGE \"execlineb [ -p | -P | -S nmin | -s nmin ] [ -q | -w | -W ] [ -e ] [ -c commandline ] script args\"\n\nstatic int myexlp (stralloc *sa, char const *const *argv, unsigned int argc, unsigned int nmin, char const *dollar0, int doshift)\n{\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/exec.c"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 18,
                  "endLine": 27,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      switch (opt)\n      {\n        case 'c' : envp = &zero ; break ;\n        case 'l' : dash = 1 ; break ;\n        case 'a' : argv0 = l.arg ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n      }\n",
                    "rendered": {
                      "text": "      switch (opt)\n      {\n        case 'c' : envp = &zero ; break ;\n        case 'l' : dash = 1 ; break ;\n        case 'a' : argv0 = l.arg ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n      }\n",
                      "markdown": "`      switch (opt)\n      {\n        case 'c' : envp = &zero ; break ;\n        case 'l' : dash = 1 ; break ;\n        case 'a' : argv0 = l.arg ; break ;\n        default : strerr_dieusage(100, USAGE) ;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/src/execline/exec.c"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "endLine": 16,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  static char const *const zero = 0 ;\n  char const *executable = 0 ;\n  char const *argv0 = 0 ;\n  int dash = 0 ;\n  PROG = \"exec\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n",
                    "rendered": {
                      "text": "  static char const *const zero = 0 ;\n  char const *executable = 0 ;\n  char const *argv0 = 0 ;\n  int dash = 0 ;\n  PROG = \"exec\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n",
                      "markdown": "`  static char const *const zero = 0 ;\n  char const *executable = 0 ;\n  char const *argv0 = 0 ;\n  int dash = 0 ;\n  PROG = \"exec\" ;\n  {\n    subgetopt l = SUBGETOPT_ZERO ;\n`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/package/targets.mak"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\nendif\n",
                    "rendered": {
                      "text": "\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\nendif\n",
                      "markdown": "`\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/package/targets.mak"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 28,
                  "endLine": 38,
                  "endColumn": 35,
                  "snippet": {
                    "text": "$(DESTDIR)$(bindir)/define: ./define package/modes\n\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\nendif\n",
                    "rendered": {
                      "text": "$(DESTDIR)$(bindir)/define: ./define package/modes\n\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\nendif\n",
                      "markdown": "`$(DESTDIR)$(bindir)/define: ./define package/modes\n\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\nendif\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/package/targets.mak"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\n$(DESTDIR)$(bindir)/define: ./define package/modes\n\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\n",
                    "rendered": {
                      "text": "\n$(DESTDIR)$(bindir)/define: ./define package/modes\n\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\n",
                      "markdown": "`\n$(DESTDIR)$(bindir)/define: ./define package/modes\n\texec $(INSTALL) -D -m 600 $< $@\n\tgrep -- ^$(@F) < package/modes | { read name mode owner && \\\n\tif [ x$$owner != x ] ; then chown -- $$owner $@ ; fi && \\\n\tchmod $$mode $@ ; }\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 78,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    echo \"  { .name = \\\"${i}\\\", .mainf = (main_func_ref)&${j}_main },\"\n  fi\ndone\n\ncat <<EOF\n} ;\n\n#define USAGE \"execline subcommand [ arguments... ]\"\n",
                    "rendered": {
                      "text": "    echo \"  { .name = \\\"${i}\\\", .mainf = (main_func_ref)&${j}_main },\"\n  fi\ndone\n\ncat <<EOF\n} ;\n\n#define USAGE \"execline subcommand [ arguments... ]\"\n",
                      "markdown": "`    echo \"  { .name = \\\"${i}\\\", .mainf = (main_func_ref)&${j}_main },\"\n  fi\ndone\n\ncat <<EOF\n} ;\n\n#define USAGE \"execline subcommand [ arguments... ]\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 51,
                  "endColumn": 4,
                  "snippet": {
                    "text": "  echo '#undef dieusage'\n  echo '#undef dienomem'\ndone\n\ncat <<EOF\n\nstatic int execline_main (int, char **, char const *const *) ;\n\n",
                    "rendered": {
                      "text": "  echo '#undef dieusage'\n  echo '#undef dienomem'\ndone\n\ncat <<EOF\n\nstatic int execline_main (int, char **, char const *const *) ;\n\n",
                      "markdown": "`  echo '#undef dieusage'\n  echo '#undef dienomem'\ndone\n\ncat <<EOF\n\nstatic int execline_main (int, char **, char const *const *) ;\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 78,
                  "endLine": 44,
                  "endColumn": 83,
                  "snippet": {
                    "text": "for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n",
                    "rendered": {
                      "text": "for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n",
                      "markdown": "`for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 46,
                  "endLine": 44,
                  "endColumn": 52,
                  "snippet": {
                    "text": "for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n",
                    "rendered": {
                      "text": "for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n",
                      "markdown": "`for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 7,
                  "snippet": {
                    "text": "for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n",
                    "rendered": {
                      "text": "for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n",
                      "markdown": "`for i in `ls -1 src/execline/deps-exe` ; do\n  j=`echo $i | tr - _`\n  echo\n  grep -v '^#include ' < src/execline/${i}.c | grep -vF '/* ISC license. */' | sed -e \"s/int main (int argc, char \\(.*\\)\\*argv.*$/int ${j}_main (int argc, char \\1*argv, char const *const *envp)/\"\n  echo\n  echo '#undef USAGE'\n  echo '#undef dieusage'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 12,
                  "endColumn": 4,
                  "snippet": {
                    "text": "echo '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n#include <skalibs/nsig.h>\n#include <skalibs/skalibs.h>\n",
                    "rendered": {
                      "text": "echo '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n#include <skalibs/nsig.h>\n#include <skalibs/skalibs.h>\n",
                      "markdown": "`echo '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n#include <skalibs/nsig.h>\n#include <skalibs/skalibs.h>\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 154,
                  "endLine": 10,
                  "endColumn": 160,
                  "snippet": {
                    "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                    "rendered": {
                      "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                      "markdown": "`echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 126,
                  "endLine": 10,
                  "endColumn": 132,
                  "snippet": {
                    "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                    "rendered": {
                      "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                      "markdown": "`echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 103,
                  "endLine": 10,
                  "endColumn": 109,
                  "snippet": {
                    "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                    "rendered": {
                      "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                      "markdown": "`echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 82,
                  "endLine": 10,
                  "endColumn": 88,
                  "snippet": {
                    "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                    "rendered": {
                      "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                      "markdown": "`echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/tools/gen-multicall.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 59,
                  "endLine": 10,
                  "endColumn": 64,
                  "snippet": {
                    "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                    "rendered": {
                      "text": "echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n",
                      "markdown": "`echo '#include <skalibs/nonposix.h>'\necho '#include <skalibs/bsdsnowflake.h>'\necho\n{ echo '#include <string.h>' ; echo '#include <stdlib.h>' ; cat src/execline/*.c | grep '^#include <' | grep -vF '<skalibs/' | grep -vF '<execline/' ; } | sort -u\n\ncat <<EOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/README"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 24,
                  "endLine": 27,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n Laurent Bercot <ska-skaware at skarnet.org>\n\n Please use the <skaware at list.skarnet.org> mailing-list for\nquestions about execline.\n",
                    "rendered": {
                      "text": "\n Laurent Bercot <ska-skaware at skarnet.org>\n\n Please use the <skaware at list.skarnet.org> mailing-list for\nquestions about execline.\n",
                      "markdown": "`\n Laurent Bercot <ska-skaware at skarnet.org>\n\n Please use the <skaware at list.skarnet.org> mailing-list for\nquestions about execline.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/README"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 28,
                  "endLine": 25,
                  "endColumn": 32,
                  "snippet": {
                    "text": "* Contact information\n  -------------------\n\n Laurent Bercot <ska-skaware at skarnet.org>\n\n Please use the <skaware at list.skarnet.org> mailing-list for\nquestions about execline.\n",
                    "rendered": {
                      "text": "* Contact information\n  -------------------\n\n Laurent Bercot <ska-skaware at skarnet.org>\n\n Please use the <skaware at list.skarnet.org> mailing-list for\nquestions about execline.\n",
                      "markdown": "`* Contact information\n  -------------------\n\n Laurent Bercot <ska-skaware at skarnet.org>\n\n Please use the <skaware at list.skarnet.org> mailing-list for\nquestions about execline.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/README"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 14,
                  "snippet": {
                    "text": " execline is a scripting language unlike any other in that\nit has no resident interpreter. It reads a script, turns it\ninto a single command line, and executes into that command\nline; control is performed by executables run inside the\ncommand line itself.\n\n It is especially suited to very small and simple scripts\n",
                    "rendered": {
                      "text": " execline is a scripting language unlike any other in that\nit has no resident interpreter. It reads a script, turns it\ninto a single command line, and executes into that command\nline; control is performed by executables run inside the\ncommand line itself.\n\n It is especially suited to very small and simple scripts\n",
                      "markdown": "` execline is a scripting language unlike any other in that\nit has no resident interpreter. It reads a script, turns it\ninto a single command line, and executes into that command\nline; control is performed by executables run inside the\ncommand line itself.\n\n It is especially suited to very small and simple scripts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/NEWS"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 23,
                  "endLine": 199,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n - Bugfixes.\n - New command: envfile.\n - Everything builds as PIC by default.\n\n\nIn 2.5.0.1\n",
                    "rendered": {
                      "text": "\n - Bugfixes.\n - New command: envfile.\n - Everything builds as PIC by default.\n\n\nIn 2.5.0.1\n",
                      "markdown": "`\n - Bugfixes.\n - New command: envfile.\n - Everything builds as PIC by default.\n\n\nIn 2.5.0.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/README.solaris"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 16,
                  "endLine": 11,
                  "endColumn": 24,
                  "snippet": {
                    "text": "     ./patch-for-solaris\n\n before you run ./configure. This script will change the #! invocation\nof the configure script and various tools so that a POSIX shell is used\nfor the compilation process.\n",
                    "rendered": {
                      "text": "     ./patch-for-solaris\n\n before you run ./configure. This script will change the #! invocation\nof the configure script and various tools so that a POSIX shell is used\nfor the compilation process.\n",
                      "markdown": "`     ./patch-for-solaris\n\n before you run ./configure. This script will change the #! invocation\nof the configure script and various tools so that a POSIX shell is used\nfor the compilation process.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/execline.zip/README.solaris"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 33,
                  "endLine": 10,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n     ./patch-for-solaris\n\n before you run ./configure. This script will change the #! invocation\nof the configure script and various tools so that a POSIX shell is used\nfor the compilation process.\n",
                    "rendered": {
                      "text": "\n     ./patch-for-solaris\n\n before you run ./configure. This script will change the #! invocation\nof the configure script and various tools so that a POSIX shell is used\nfor the compilation process.\n",
                      "markdown": "`\n     ./patch-for-solaris\n\n before you run ./configure. This script will change the #! invocation\nof the configure script and various tools so that a POSIX shell is used\nfor the compilation process.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}