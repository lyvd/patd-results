{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.13.1"
                },
                "region": {
                  "startLine": 6455,
                  "startColumn": 24,
                  "endLine": 6456,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.13.1"
                },
                "region": {
                  "startLine": 4856,
                  "startColumn": 5,
                  "endLine": 4856,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.13.1"
                },
                "region": {
                  "startLine": 7260,
                  "startColumn": 12,
                  "endLine": 7260,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.13.1"
                },
                "region": {
                  "startLine": 3032,
                  "startColumn": 19,
                  "endLine": 3032,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.13.1"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 10,
                  "endLine": 112,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 12518,
                  "startColumn": 13,
                  "endLine": 12518,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 10063,
                  "startColumn": 31,
                  "endLine": 10064,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 10058,
                  "startColumn": 24,
                  "endLine": 10059,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 7256,
                  "startColumn": 5,
                  "endLine": 7256,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 12700,
                  "startColumn": 19,
                  "endLine": 12700,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 12691,
                  "startColumn": 12,
                  "endLine": 12691,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 11748,
                  "startColumn": 8,
                  "endLine": 11748,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 11746,
                  "startColumn": 1,
                  "endLine": 11746,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.3.1"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 10,
                  "endLine": 104,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 13594,
                  "startColumn": 13,
                  "endLine": 13594,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 10652,
                  "startColumn": 31,
                  "endLine": 10653,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 10647,
                  "startColumn": 24,
                  "endLine": 10648,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 7578,
                  "startColumn": 5,
                  "endLine": 7578,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 6773,
                  "startColumn": 30,
                  "endLine": 6773,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 13799,
                  "startColumn": 19,
                  "endLine": 13799,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 13787,
                  "startColumn": 12,
                  "endLine": 13787,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 12728,
                  "startColumn": 8,
                  "endLine": 12728,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 12724,
                  "startColumn": 1,
                  "endLine": 12724,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.11.1"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "endLine": 91,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 13114,
                  "startColumn": 13,
                  "endLine": 13114,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 10328,
                  "startColumn": 31,
                  "endLine": 10329,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 10323,
                  "startColumn": 24,
                  "endLine": 10324,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 7389,
                  "startColumn": 5,
                  "endLine": 7389,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 6596,
                  "startColumn": 30,
                  "endLine": 6596,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 13310,
                  "startColumn": 19,
                  "endLine": 13310,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 13298,
                  "startColumn": 12,
                  "endLine": 13298,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 12274,
                  "startColumn": 8,
                  "endLine": 12274,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 12270,
                  "startColumn": 1,
                  "endLine": 12270,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.8.1"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 10,
                  "endLine": 89,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 14949,
                  "startColumn": 13,
                  "endLine": 14949,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 11619,
                  "startColumn": 31,
                  "endLine": 11620,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 11614,
                  "startColumn": 24,
                  "endLine": 11615,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 8239,
                  "startColumn": 5,
                  "endLine": 8239,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 7326,
                  "startColumn": 30,
                  "endLine": 7326,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 2469,
                  "startColumn": 19,
                  "endLine": 2469,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 2454,
                  "startColumn": 12,
                  "endLine": 2454,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 15192,
                  "startColumn": 19,
                  "endLine": 15192,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 15179,
                  "startColumn": 12,
                  "endLine": 15179,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.1.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.5.1"
                },
                "region": {
                  "startLine": 7812,
                  "startColumn": 24,
                  "endLine": 7813,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.5.1"
                },
                "region": {
                  "startLine": 5833,
                  "startColumn": 5,
                  "endLine": 5833,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.5.1"
                },
                "region": {
                  "startLine": 8993,
                  "startColumn": 12,
                  "endLine": 8993,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.5.1"
                },
                "region": {
                  "startLine": 3498,
                  "startColumn": 19,
                  "endLine": 3498,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.5.1"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 10,
                  "endLine": 123,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.17.1"
                },
                "region": {
                  "startLine": 9011,
                  "startColumn": 24,
                  "endLine": 9012,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.17.1"
                },
                "region": {
                  "startLine": 6614,
                  "startColumn": 5,
                  "endLine": 6614,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.17.1"
                },
                "region": {
                  "startLine": 10754,
                  "startColumn": 12,
                  "endLine": 10754,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.17.1"
                },
                "region": {
                  "startLine": 10316,
                  "startColumn": 1,
                  "endLine": 10316,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.17.1"
                },
                "region": {
                  "startLine": 3838,
                  "startColumn": 19,
                  "endLine": 3838,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.17.1"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 10,
                  "endLine": 126,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.10.1"
                },
                "region": {
                  "startLine": 6168,
                  "startColumn": 24,
                  "endLine": 6169,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.10.1"
                },
                "region": {
                  "startLine": 4675,
                  "startColumn": 5,
                  "endLine": 4675,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.10.1"
                },
                "region": {
                  "startLine": 2924,
                  "startColumn": 19,
                  "endLine": 2924,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.10.1"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 10,
                  "endLine": 111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 15693,
                  "startColumn": 13,
                  "endLine": 15693,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 8593,
                  "startColumn": 5,
                  "endLine": 8593,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 7647,
                  "startColumn": 30,
                  "endLine": 7647,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 2552,
                  "startColumn": 19,
                  "endLine": 2552,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_PERF_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_PERF_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_PERF_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 2533,
                  "startColumn": 12,
                  "endLine": 2533,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 15942,
                  "startColumn": 19,
                  "endLine": 15942,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 15929,
                  "startColumn": 12,
                  "endLine": 15929,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.7.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.12.1"
                },
                "region": {
                  "startLine": 8658,
                  "startColumn": 24,
                  "endLine": 8659,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.12.1"
                },
                "region": {
                  "startLine": 6412,
                  "startColumn": 5,
                  "endLine": 6412,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.12.1"
                },
                "region": {
                  "startLine": 10203,
                  "startColumn": 12,
                  "endLine": 10203,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.12.1"
                },
                "region": {
                  "startLine": 9793,
                  "startColumn": 1,
                  "endLine": 9793,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n\n#\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n\n#\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.12.1"
                },
                "region": {
                  "startLine": 3764,
                  "startColumn": 19,
                  "endLine": 3764,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.12.1"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 10,
                  "endLine": 121,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.8.1"
                },
                "region": {
                  "startLine": 8114,
                  "startColumn": 24,
                  "endLine": 8115,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.8.1"
                },
                "region": {
                  "startLine": 6047,
                  "startColumn": 5,
                  "endLine": 6047,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.8.1"
                },
                "region": {
                  "startLine": 9411,
                  "startColumn": 12,
                  "endLine": 9411,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.8.1"
                },
                "region": {
                  "startLine": 3586,
                  "startColumn": 19,
                  "endLine": 3586,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.8.1"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 10,
                  "endLine": 121,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 13451,
                  "startColumn": 13,
                  "endLine": 13451,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 10570,
                  "startColumn": 31,
                  "endLine": 10571,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 10565,
                  "startColumn": 24,
                  "endLine": 10566,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 7533,
                  "startColumn": 5,
                  "endLine": 7533,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 6732,
                  "startColumn": 30,
                  "endLine": 6732,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 13655,
                  "startColumn": 19,
                  "endLine": 13655,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 13643,
                  "startColumn": 12,
                  "endLine": 13643,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 12595,
                  "startColumn": 8,
                  "endLine": 12595,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 12591,
                  "startColumn": 1,
                  "endLine": 12591,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.10.1"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "endLine": 91,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.17.1"
                },
                "region": {
                  "startLine": 6832,
                  "startColumn": 24,
                  "endLine": 6833,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.17.1"
                },
                "region": {
                  "startLine": 5082,
                  "startColumn": 5,
                  "endLine": 5082,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.17.1"
                },
                "region": {
                  "startLine": 7708,
                  "startColumn": 12,
                  "endLine": 7708,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.17.1"
                },
                "region": {
                  "startLine": 3165,
                  "startColumn": 19,
                  "endLine": 3165,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.17.1"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 10,
                  "endLine": 117,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.4.1"
                },
                "region": {
                  "startLine": 7708,
                  "startColumn": 24,
                  "endLine": 7709,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.4.1"
                },
                "region": {
                  "startLine": 5760,
                  "startColumn": 5,
                  "endLine": 5760,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.4.1"
                },
                "region": {
                  "startLine": 8830,
                  "startColumn": 12,
                  "endLine": 8830,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.4.1"
                },
                "region": {
                  "startLine": 3447,
                  "startColumn": 19,
                  "endLine": 3447,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.4.1"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 10,
                  "endLine": 120,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.6.1"
                },
                "region": {
                  "startLine": 7950,
                  "startColumn": 24,
                  "endLine": 7951,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.6.1"
                },
                "region": {
                  "startLine": 5935,
                  "startColumn": 5,
                  "endLine": 5935,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.6.1"
                },
                "region": {
                  "startLine": 9172,
                  "startColumn": 12,
                  "endLine": 9172,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.6.1"
                },
                "region": {
                  "startLine": 3546,
                  "startColumn": 19,
                  "endLine": 3546,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.6.1"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 10,
                  "endLine": 124,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.14.1"
                },
                "region": {
                  "startLine": 8849,
                  "startColumn": 24,
                  "endLine": 8850,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.14.1"
                },
                "region": {
                  "startLine": 6497,
                  "startColumn": 5,
                  "endLine": 6497,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.14.1"
                },
                "region": {
                  "startLine": 10487,
                  "startColumn": 12,
                  "endLine": 10487,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.14.1"
                },
                "region": {
                  "startLine": 10065,
                  "startColumn": 1,
                  "endLine": 10065,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.14.1"
                },
                "region": {
                  "startLine": 3779,
                  "startColumn": 19,
                  "endLine": 3779,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.14.1"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 10,
                  "endLine": 126,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.7.1"
                },
                "region": {
                  "startLine": 5937,
                  "startColumn": 24,
                  "endLine": 5938,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.7.1"
                },
                "region": {
                  "startLine": 4486,
                  "startColumn": 5,
                  "endLine": 4486,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.7.1"
                },
                "region": {
                  "startLine": 2842,
                  "startColumn": 19,
                  "endLine": 2842,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.7.1"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 10,
                  "endLine": 111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_IRQ_TIME_ACCOUNTING is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_IRQ_TIME_ACCOUNTING is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_IRQ_TIME_ACCOUNTING is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.11.1"
                },
                "region": {
                  "startLine": 6234,
                  "startColumn": 24,
                  "endLine": 6235,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.11.1"
                },
                "region": {
                  "startLine": 4733,
                  "startColumn": 5,
                  "endLine": 4733,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.11.1"
                },
                "region": {
                  "startLine": 6991,
                  "startColumn": 12,
                  "endLine": 6991,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.11.1"
                },
                "region": {
                  "startLine": 2970,
                  "startColumn": 19,
                  "endLine": 2970,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.11.1"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 10,
                  "endLine": 116,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.16.1"
                },
                "region": {
                  "startLine": 6757,
                  "startColumn": 24,
                  "endLine": 6758,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.16.1"
                },
                "region": {
                  "startLine": 5025,
                  "startColumn": 5,
                  "endLine": 5025,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.16.1"
                },
                "region": {
                  "startLine": 7623,
                  "startColumn": 12,
                  "endLine": 7623,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.16.1"
                },
                "region": {
                  "startLine": 3139,
                  "startColumn": 19,
                  "endLine": 3139,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.16.1"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 10,
                  "endLine": 116,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.0.1"
                },
                "region": {
                  "startLine": 7085,
                  "startColumn": 24,
                  "endLine": 7086,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.0.1"
                },
                "region": {
                  "startLine": 5269,
                  "startColumn": 5,
                  "endLine": 5269,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.0.1"
                },
                "region": {
                  "startLine": 8047,
                  "startColumn": 12,
                  "endLine": 8047,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.0.1"
                },
                "region": {
                  "startLine": 3245,
                  "startColumn": 19,
                  "endLine": 3245,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.0.1"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 10,
                  "endLine": 119,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 12739,
                  "startColumn": 13,
                  "endLine": 12739,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 10164,
                  "startColumn": 31,
                  "endLine": 10165,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 10159,
                  "startColumn": 24,
                  "endLine": 10160,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 7319,
                  "startColumn": 5,
                  "endLine": 7319,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 12924,
                  "startColumn": 19,
                  "endLine": 12924,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 12913,
                  "startColumn": 12,
                  "endLine": 12913,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 11923,
                  "startColumn": 8,
                  "endLine": 11923,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 11921,
                  "startColumn": 1,
                  "endLine": 11921,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.5.1"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 10,
                  "endLine": 104,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 15802,
                  "startColumn": 13,
                  "endLine": 15802,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 8610,
                  "startColumn": 5,
                  "endLine": 8610,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 7651,
                  "startColumn": 30,
                  "endLine": 7651,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 2557,
                  "startColumn": 19,
                  "endLine": 2557,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_VERSION1_COMPLIANCE=y\nCONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SDE_INTERFACE=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_VERSION1_COMPLIANCE=y\nCONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SDE_INTERFACE=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_VERSION1_COMPLIANCE=y\nCONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SDE_INTERFACE=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 2540,
                  "startColumn": 12,
                  "endLine": 2540,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 16052,
                  "startColumn": 19,
                  "endLine": 16052,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 16039,
                  "startColumn": 12,
                  "endLine": 16039,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.8.1"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 10,
                  "endLine": 130,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 15555,
                  "startColumn": 13,
                  "endLine": 15555,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 8539,
                  "startColumn": 5,
                  "endLine": 8539,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 7601,
                  "startColumn": 30,
                  "endLine": 7601,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 2538,
                  "startColumn": 19,
                  "endLine": 2538,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 2520,
                  "startColumn": 12,
                  "endLine": 2520,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 15802,
                  "startColumn": 19,
                  "endLine": 15802,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 15789,
                  "startColumn": 12,
                  "endLine": 15789,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.6.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/proc.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/procAll.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/kernel.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/procLibs.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"fmt\"\n\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"fmt\"\n\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"fmt\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/fortifyProc.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/dir.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/file.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"github.com/slimm609/checksec/pkg/utils\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/fortifyFile.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/cmd/root.go"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "package cmd\n\nimport (\n\t\"os\"\n\n",
                    "rendered": {
                      "text": "package cmd\n\nimport (\n\t\"os\"\n\n",
                      "markdown": "`package cmd\n\nimport (\n\t\"os\"\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "endLine": 15,
                  "snippet": {
                    "text": "\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n",
                    "rendered": {
                      "text": "\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n",
                      "markdown": "`\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\n",
                      "markdown": "`#!/usr/bin/env bash\n# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 20,
                  "endLine": 36,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# add the footer\nsed -e '1,3d' \"${REPO_ROOT}\"/src/footer.sh >> \"${generated_file}\"\n\n# make it executable\nchmod 755 \"${generated_file}\"\n",
                    "rendered": {
                      "text": "# add the footer\nsed -e '1,3d' \"${REPO_ROOT}\"/src/footer.sh >> \"${generated_file}\"\n\n# make it executable\nchmod 755 \"${generated_file}\"\n",
                      "markdown": "`# add the footer\nsed -e '1,3d' \"${REPO_ROOT}\"/src/footer.sh >> \"${generated_file}\"\n\n# make it executable\nchmod 755 \"${generated_file}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 4,
                  "snippet": {
                    "text": "  sed -e '1,3d' \"${file}\" >> \"${generated_file}\"\ndone < <(find \"${REPO_ROOT}\"/src/functions -type f -iname \"*.sh\" | sort)\n\n# add the footer\nsed -e '1,3d' \"${REPO_ROOT}\"/src/footer.sh >> \"${generated_file}\"\n\n# make it executable\nchmod 755 \"${generated_file}\"\n",
                    "rendered": {
                      "text": "  sed -e '1,3d' \"${file}\" >> \"${generated_file}\"\ndone < <(find \"${REPO_ROOT}\"/src/functions -type f -iname \"*.sh\" | sort)\n\n# add the footer\nsed -e '1,3d' \"${REPO_ROOT}\"/src/footer.sh >> \"${generated_file}\"\n\n# make it executable\nchmod 755 \"${generated_file}\"\n",
                      "markdown": "`  sed -e '1,3d' \"${file}\" >> \"${generated_file}\"\ndone < <(find \"${REPO_ROOT}\"/src/functions -type f -iname \"*.sh\" | sort)\n\n# add the footer\nsed -e '1,3d' \"${REPO_ROOT}\"/src/footer.sh >> \"${generated_file}\"\n\n# make it executable\nchmod 755 \"${generated_file}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 6,
                  "snippet": {
                    "text": "while read -r file; do\n  # remove the first 3 lines of each source file\n  # shebang line is included to properly shellcheck and format\n  sed -e '1,3d' \"${file}\" >> \"${generated_file}\"\ndone < <(find \"${REPO_ROOT}\"/src/functions -type f -iname \"*.sh\" | sort)\n\n# add the footer\n",
                    "rendered": {
                      "text": "while read -r file; do\n  # remove the first 3 lines of each source file\n  # shebang line is included to properly shellcheck and format\n  sed -e '1,3d' \"${file}\" >> \"${generated_file}\"\ndone < <(find \"${REPO_ROOT}\"/src/functions -type f -iname \"*.sh\" | sort)\n\n# add the footer\n",
                      "markdown": "`while read -r file; do\n  # remove the first 3 lines of each source file\n  # shebang line is included to properly shellcheck and format\n  sed -e '1,3d' \"${file}\" >> \"${generated_file}\"\ndone < <(find \"${REPO_ROOT}\"/src/functions -type f -iname \"*.sh\" | sort)\n\n# add the footer\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 23,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# add the header\nsed -e '1,3d' \"${REPO_ROOT}\"/src/header.sh >> \"${generated_file}\"\n\n# add the core file\nsed -e '1,3d' \"${REPO_ROOT}\"/src/core.sh >> \"${generated_file}\"\n\n# join all function files together in the middle\nwhile read -r file; do\n",
                    "rendered": {
                      "text": "# add the header\nsed -e '1,3d' \"${REPO_ROOT}\"/src/header.sh >> \"${generated_file}\"\n\n# add the core file\nsed -e '1,3d' \"${REPO_ROOT}\"/src/core.sh >> \"${generated_file}\"\n\n# join all function files together in the middle\nwhile read -r file; do\n",
                      "markdown": "`# add the header\nsed -e '1,3d' \"${REPO_ROOT}\"/src/header.sh >> \"${generated_file}\"\n\n# add the core file\nsed -e '1,3d' \"${REPO_ROOT}\"/src/core.sh >> \"${generated_file}\"\n\n# join all function files together in the middle\nwhile read -r file; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 16,
                  "endLine": 20,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n# add the header\nsed -e '1,3d' \"${REPO_ROOT}\"/src/header.sh >> \"${generated_file}\"\n\n# add the core file\nsed -e '1,3d' \"${REPO_ROOT}\"/src/core.sh >> \"${generated_file}\"\n",
                    "rendered": {
                      "text": "# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n# add the header\nsed -e '1,3d' \"${REPO_ROOT}\"/src/header.sh >> \"${generated_file}\"\n\n# add the core file\nsed -e '1,3d' \"${REPO_ROOT}\"/src/core.sh >> \"${generated_file}\"\n",
                      "markdown": "`# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n# add the header\nsed -e '1,3d' \"${REPO_ROOT}\"/src/header.sh >> \"${generated_file}\"\n\n# add the core file\nsed -e '1,3d' \"${REPO_ROOT}\"/src/core.sh >> \"${generated_file}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 14,
                  "endLine": 15,
                  "snippet": {
                    "text": "\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n",
                    "rendered": {
                      "text": "\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n",
                      "markdown": "`\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\nEOF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 32,
                  "endLine": 13,
                  "endColumn": 4,
                  "snippet": {
                    "text": "}\ngenerated_file=\"${REPO_ROOT}/checksec\"\n\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n",
                    "rendered": {
                      "text": "}\ngenerated_file=\"${REPO_ROOT}/checksec\"\n\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n",
                      "markdown": "`}\ngenerated_file=\"${REPO_ROOT}/checksec\"\n\n# add shebang line and edit line\ncat << 'EOF' > \"${generated_file}\"\n#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 34,
                  "endLine": 5,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\ncd \"${REPO_ROOT}\" || {\n  echo \"error: directory does not exist\"\n  exit 1\n",
                    "rendered": {
                      "text": "# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\ncd \"${REPO_ROOT}\" || {\n  echo \"error: directory does not exist\"\n  exit 1\n",
                      "markdown": "`# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\ncd \"${REPO_ROOT}\" || {\n  echo \"error: directory does not exist\"\n  exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\n",
                      "markdown": "`#!/usr/bin/env bash\n# generate the checksec file from the src directory\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &> /dev/null && pwd)\"\nREPO_ROOT=\"$(cd \"${SCRIPT_DIR}\" && git rev-parse --show-toplevel)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/enable-git-hooks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/enable-git-hooks.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\nif [[ -d ${LOCAL_REPO}/.git-hooks/ ]]; then\n  git config core.hooksPath \"${LOCAL_REPO}/.git-hooks/\" > /dev/null\nfi\n",
                    "rendered": {
                      "text": "\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\nif [[ -d ${LOCAL_REPO}/.git-hooks/ ]]; then\n  git config core.hooksPath \"${LOCAL_REPO}/.git-hooks/\" > /dev/null\nfi\n",
                      "markdown": "`\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\nif [[ -d ${LOCAL_REPO}/.git-hooks/ ]]; then\n  git config core.hooksPath \"${LOCAL_REPO}/.git-hooks/\" > /dev/null\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/enable-git-hooks.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\nif [[ -d ${LOCAL_REPO}/.git-hooks/ ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\nif [[ -d ${LOCAL_REPO}/.git-hooks/ ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\nif [[ -d ${LOCAL_REPO}/.git-hooks/ ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/hack/enable-git-hooks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# enable git commit hooks\n\nLOCAL_REPO=\"$(git rev-parse --show-toplevel)\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.12.1"
                },
                "region": {
                  "startLine": 6383,
                  "startColumn": 24,
                  "endLine": 6384,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.12.1"
                },
                "region": {
                  "startLine": 4795,
                  "startColumn": 5,
                  "endLine": 4795,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.12.1"
                },
                "region": {
                  "startLine": 7164,
                  "startColumn": 12,
                  "endLine": 7164,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.12.1"
                },
                "region": {
                  "startLine": 2983,
                  "startColumn": 19,
                  "endLine": 2983,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.12.1"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 10,
                  "endLine": 114,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.4.1"
                },
                "region": {
                  "startLine": 5778,
                  "startColumn": 24,
                  "endLine": 5779,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.4.1"
                },
                "region": {
                  "startLine": 4361,
                  "startColumn": 5,
                  "endLine": 4361,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.4.1"
                },
                "region": {
                  "startLine": 2790,
                  "startColumn": 19,
                  "endLine": 2790,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.19.1"
                },
                "region": {
                  "startLine": 9435,
                  "startColumn": 24,
                  "endLine": 9436,
                  "snippet": {
                    "text": "CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.19.1"
                },
                "region": {
                  "startLine": 6931,
                  "startColumn": 5,
                  "endLine": 6931,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.19.1"
                },
                "region": {
                  "startLine": 11687,
                  "startColumn": 12,
                  "endLine": 11687,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.19.1"
                },
                "region": {
                  "startLine": 10820,
                  "startColumn": 1,
                  "endLine": 10820,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.19.1"
                },
                "region": {
                  "startLine": 4068,
                  "startColumn": 19,
                  "endLine": 4068,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.19.1"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 10,
                  "endLine": 95,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.13.1"
                },
                "region": {
                  "startLine": 8773,
                  "startColumn": 24,
                  "endLine": 8774,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.13.1"
                },
                "region": {
                  "startLine": 6493,
                  "startColumn": 5,
                  "endLine": 6493,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.13.1"
                },
                "region": {
                  "startLine": 10361,
                  "startColumn": 12,
                  "endLine": 10361,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.13.1"
                },
                "region": {
                  "startLine": 9941,
                  "startColumn": 1,
                  "endLine": 9941,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.13.1"
                },
                "region": {
                  "startLine": 3806,
                  "startColumn": 19,
                  "endLine": 3806,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.13.1"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 10,
                  "endLine": 124,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.3.1"
                },
                "region": {
                  "startLine": 5707,
                  "startColumn": 24,
                  "endLine": 5708,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.3.1"
                },
                "region": {
                  "startLine": 4303,
                  "startColumn": 5,
                  "endLine": 4303,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.3.1"
                },
                "region": {
                  "startLine": 2762,
                  "startColumn": 19,
                  "endLine": 2762,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.2.1"
                },
                "region": {
                  "startLine": 5573,
                  "startColumn": 24,
                  "endLine": 5574,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.2.1"
                },
                "region": {
                  "startLine": 4189,
                  "startColumn": 5,
                  "endLine": 4189,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.2.1"
                },
                "region": {
                  "startLine": 2677,
                  "startColumn": 19,
                  "endLine": 2677,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.10.1"
                },
                "region": {
                  "startLine": 8420,
                  "startColumn": 24,
                  "endLine": 8421,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.10.1"
                },
                "region": {
                  "startLine": 6226,
                  "startColumn": 5,
                  "endLine": 6226,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.10.1"
                },
                "region": {
                  "startLine": 9856,
                  "startColumn": 12,
                  "endLine": 9856,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.10.1"
                },
                "region": {
                  "startLine": 3683,
                  "startColumn": 19,
                  "endLine": 3683,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.10.1"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 10,
                  "endLine": 122,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.15.1"
                },
                "region": {
                  "startLine": 6644,
                  "startColumn": 24,
                  "endLine": 6645,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.15.1"
                },
                "region": {
                  "startLine": 4969,
                  "startColumn": 5,
                  "endLine": 4969,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.15.1"
                },
                "region": {
                  "startLine": 7490,
                  "startColumn": 12,
                  "endLine": 7490,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.15.1"
                },
                "region": {
                  "startLine": 3092,
                  "startColumn": 19,
                  "endLine": 3092,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.15.1"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 10,
                  "endLine": 113,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.9.1"
                },
                "region": {
                  "startLine": 8282,
                  "startColumn": 24,
                  "endLine": 8283,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.9.1"
                },
                "region": {
                  "startLine": 6137,
                  "startColumn": 5,
                  "endLine": 6137,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.9.1"
                },
                "region": {
                  "startLine": 9660,
                  "startColumn": 12,
                  "endLine": 9660,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.9.1"
                },
                "region": {
                  "startLine": 3630,
                  "startColumn": 19,
                  "endLine": 3630,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.9.1"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 10,
                  "endLine": 122,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.18.1"
                },
                "region": {
                  "startLine": 9224,
                  "startColumn": 24,
                  "endLine": 9225,
                  "snippet": {
                    "text": "CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.18.1"
                },
                "region": {
                  "startLine": 6747,
                  "startColumn": 5,
                  "endLine": 6747,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.18.1"
                },
                "region": {
                  "startLine": 10997,
                  "startColumn": 12,
                  "endLine": 10997,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.18.1"
                },
                "region": {
                  "startLine": 10554,
                  "startColumn": 1,
                  "endLine": 10554,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.18.1"
                },
                "region": {
                  "startLine": 3922,
                  "startColumn": 19,
                  "endLine": 3922,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.18.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 15348,
                  "startColumn": 13,
                  "endLine": 15348,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 8437,
                  "startColumn": 5,
                  "endLine": 8437,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 7506,
                  "startColumn": 30,
                  "endLine": 7506,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 2516,
                  "startColumn": 19,
                  "endLine": 2516,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 2498,
                  "startColumn": 12,
                  "endLine": 2498,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 15594,
                  "startColumn": 19,
                  "endLine": 15594,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 15581,
                  "startColumn": 12,
                  "endLine": 15581,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.5.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/general_functions.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/general_functions.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 13,
                  "endLine": 19,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n# check if input is numeric\nisNumeric() {\n  echo \"$@\" | grep -q -v \"[^0-9]\"\n}\n",
                    "rendered": {
                      "text": "\n# check if input is numeric\nisNumeric() {\n  echo \"$@\" | grep -q -v \"[^0-9]\"\n}\n",
                      "markdown": "`\n# check if input is numeric\nisNumeric() {\n  echo \"$@\" | grep -q -v \"[^0-9]\"\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/general_functions.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n  if [[ ${format} == \"csv\" ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n  if [[ ${format} == \"csv\" ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n  if [[ ${format} == \"csv\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/general_functions.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\necho_message() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 34,
                  "endLine": 139,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  fi\n  N=${CHK_PROC_LIBS}\n  if [[ -d \"${N}\" ]]; then\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    if [[ \"${format}\" == \"cli\" ]]; then\n      printf \"%16s\" \"${name}\"\n      printf \"%7d \" \"${N}\"\n",
                    "rendered": {
                      "text": "  fi\n  N=${CHK_PROC_LIBS}\n  if [[ -d \"${N}\" ]]; then\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    if [[ \"${format}\" == \"cli\" ]]; then\n      printf \"%16s\" \"${name}\"\n      printf \"%7d \" \"${N}\"\n",
                      "markdown": "`  fi\n  N=${CHK_PROC_LIBS}\n  if [[ -d \"${N}\" ]]; then\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    if [[ \"${format}\" == \"cli\" ]]; then\n      printf \"%16s\" \"${name}\"\n      printf \"%7d \" \"${N}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 36,
                  "endLine": 87,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  last=${fpids[$pos]}\n  for N in \"${fpids[@]}\"; do\n    if [[ -d \"${N}\" ]]; then\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                    "rendered": {
                      "text": "  last=${fpids[$pos]}\n  for N in \"${fpids[@]}\"; do\n    if [[ -d \"${N}\" ]]; then\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                      "markdown": "`  last=${fpids[$pos]}\n  for N in \"${fpids[@]}\"; do\n    if [[ -d \"${N}\" ]]; then\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 63,
                  "endLine": 51,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n      echo_message \"      Too see all processes, please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n    fi\n  fi\n}\n",
                    "rendered": {
                      "text": "  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n      echo_message \"      Too see all processes, please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n    fi\n  fi\n}\n",
                      "markdown": "`  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n      echo_message \"      Too see all processes, please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n    fi\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 66,
                  "endLine": 47,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  echo_message \"\" \"\" \"</procs>\" \" }\\n\"\n  if [[ ! -e /usr/bin/id ]]; then\n    echo_message \"\\n\\033[33mNote: If you are running 'checksec.sh' as an unprivileged user, you\\n\" \"\" \"\" \"\"\n    echo_message \"      will not see all processes. Please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n",
                    "rendered": {
                      "text": "  echo_message \"\" \"\" \"</procs>\" \" }\\n\"\n  if [[ ! -e /usr/bin/id ]]; then\n    echo_message \"\\n\\033[33mNote: If you are running 'checksec.sh' as an unprivileged user, you\\n\" \"\" \"\" \"\"\n    echo_message \"      will not see all processes. Please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n",
                      "markdown": "`  echo_message \"\" \"\" \"</procs>\" \" }\\n\"\n  if [[ ! -e /usr/bin/id ]]; then\n    echo_message \"\\n\\033[33mNote: If you are running 'checksec.sh' as an unprivileged user, you\\n\" \"\" \"\" \"\"\n    echo_message \"      will not see all processes. Please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 36,
                  "endLine": 28,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  for N in [1-9]*; do\n    if [[ \"${N}\" != \"$$\" ]] && readlink -q \"${N}\"/exe > /dev/null; then\n      ((currpid++))\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                    "rendered": {
                      "text": "  for N in [1-9]*; do\n    if [[ \"${N}\" != \"$$\" ]] && readlink -q \"${N}\"/exe > /dev/null; then\n      ((currpid++))\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                      "markdown": "`  for N in [1-9]*; do\n    if [[ \"${N}\" != \"$$\" ]] && readlink -q \"${N}\"/exe > /dev/null; then\n      ((currpid++))\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n  cd /proc || exit\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n  cd /proc || exit\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n  cd /proc || exit\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_proc.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_proc_all() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/fs_funcs.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/fs_funcs.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n# is FORTIFY_SOURCE supported by libc?\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n# is FORTIFY_SOURCE supported by libc?\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n# is FORTIFY_SOURCE supported by libc?\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/fs_funcs.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# --- FORTIFY_SOURCE subfunctions (start) ---\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 33,
                  "endLine": 34,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to random \\n\" '' '' ''\n      echo_message \"  addresses. Also for PIE-linked binaries, the location of code start is randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 0'; then\n      echo_message '\\033[31mNone (Setting: 0)\\033[m\\n' '' '' ''\n    else\n      echo_message '\\033[31mNot supported\\033[m\\n' '' '' ''\n",
                    "rendered": {
                      "text": "      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to random \\n\" '' '' ''\n      echo_message \"  addresses. Also for PIE-linked binaries, the location of code start is randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 0'; then\n      echo_message '\\033[31mNone (Setting: 0)\\033[m\\n' '' '' ''\n    else\n      echo_message '\\033[31mNot supported\\033[m\\n' '' '' ''\n",
                      "markdown": "`      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to random \\n\" '' '' ''\n      echo_message \"  addresses. Also for PIE-linked binaries, the location of code start is randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 0'; then\n      echo_message '\\033[31mNone (Setting: 0)\\033[m\\n' '' '' ''\n    else\n      echo_message '\\033[31mNot supported\\033[m\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 33,
                  "endLine": 29,
                  "endColumn": 39,
                  "snippet": {
                    "text": " things, implies that shared libraries will be loaded to \\n\" '' '' ''\n      echo_message \"  random addresses. Also for PIE-linked binaries, the location of code start\\n\" '' '' ''\n      echo_message \"  is randomized. Heap addresses are *not* randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 2'; then\n      echo_message '\\033[32mFull (Setting: 2)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libra",
                    "rendered": {
                      "text": " things, implies that shared libraries will be loaded to \\n\" '' '' ''\n      echo_message \"  random addresses. Also for PIE-linked binaries, the location of code start\\n\" '' '' ''\n      echo_message \"  is randomized. Heap addresses are *not* randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 2'; then\n      echo_message '\\033[32mFull (Setting: 2)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libra",
                      "markdown": "` things, implies that shared libraries will be loaded to \\n\" '' '' ''\n      echo_message \"  random addresses. Also for PIE-linked binaries, the location of code start\\n\" '' '' ''\n      echo_message \"  is randomized. Heap addresses are *not* randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 2'; then\n      echo_message '\\033[32mFull (Setting: 2)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libra`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 31,
                  "endLine": 23,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    # standard Linux 'kernel.randomize_va_space' ASLR support\n    # (see the kernel file 'Documentation/admin-guide/sysctl/kernel.rst' for a detailed description)\n    echo_message \" (kernel.randomize_va_space): \" '' '' ''\n    if sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 1'; then\n      echo_message '\\033[33mPartial (Setting: 1)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to \\n\" '' '' ''\n",
                    "rendered": {
                      "text": "    # standard Linux 'kernel.randomize_va_space' ASLR support\n    # (see the kernel file 'Documentation/admin-guide/sysctl/kernel.rst' for a detailed description)\n    echo_message \" (kernel.randomize_va_space): \" '' '' ''\n    if sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 1'; then\n      echo_message '\\033[33mPartial (Setting: 1)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to \\n\" '' '' ''\n",
                      "markdown": "`    # standard Linux 'kernel.randomize_va_space' ASLR support\n    # (see the kernel file 'Documentation/admin-guide/sysctl/kernel.rst' for a detailed description)\n    echo_message \" (kernel.randomize_va_space): \" '' '' ''\n    if sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 1'; then\n      echo_message '\\033[33mPartial (Setting: 1)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to \\n\" '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 51,
                  "endLine": 14,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                    "rendered": {
                      "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                      "markdown": "`  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "endLine": 14,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                    "rendered": {
                      "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                      "markdown": "`  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 4,
                  "endLine": 13,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    echo_message '  Fallback to standard Linux ASLR check' '' '' ''\n  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n",
                    "rendered": {
                      "text": "    echo_message '  Fallback to standard Linux ASLR check' '' '' ''\n  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n",
                      "markdown": "`    echo_message '  Fallback to standard Linux ASLR check' '' '' ''\n  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\naslrcheck() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\naslrcheck() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\naslrcheck() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/aslrcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check for system-wide ASLR support\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 177,
                  "endLine": 80,
                  "endColumn": 183,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 158,
                  "endLine": 80,
                  "endColumn": 163,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 143,
                  "endLine": 80,
                  "endColumn": 148,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 122,
                  "endLine": 80,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 183,
                  "endLine": 79,
                  "endColumn": 189,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 160,
                  "endLine": 79,
                  "endColumn": 165,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 148,
                  "endLine": 79,
                  "endColumn": 153,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 127,
                  "endLine": 79,
                  "endColumn": 132,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 113,
                  "endLine": 79,
                  "endColumn": 119,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 34,
                  "endLine": 72,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      fi\n      exit 1\n    fi\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    echo_message \"* Process name (PID)                         : ${name} (${N})\\n\" \"\" \"\" \"\"\n\n    search_libc\n",
                    "rendered": {
                      "text": "      fi\n      exit 1\n    fi\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    echo_message \"* Process name (PID)                         : ${name} (${N})\\n\" \"\" \"\" \"\"\n\n    search_libc\n",
                      "markdown": "`      fi\n      exit 1\n    fi\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    echo_message \"* Process name (PID)                         : ${name} (${N})\\n\" \"\" \"\" \"\"\n\n    search_libc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 171,
                  "endLine": 39,
                  "endColumn": 177,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 152,
                  "endLine": 39,
                  "endColumn": 157,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 137,
                  "endLine": 39,
                  "endColumn": 142,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 116,
                  "endLine": 39,
                  "endColumn": 121,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 181,
                  "endLine": 38,
                  "endColumn": 187,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 158,
                  "endLine": 38,
                  "endColumn": 163,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 146,
                  "endLine": 38,
                  "endColumn": 151,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 125,
                  "endLine": 38,
                  "endColumn": 130,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 111,
                  "endLine": 38,
                  "endColumn": 117,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n  # if first char of pathname is '~' replace it with '${HOME}'\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n  # if first char of pathname is '~' replace it with '${HOME}'\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n  # if first char of pathname is '~' replace it with '${HOME}'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_fortify.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_fortify_file() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_file.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_file.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n  if [[ -z \"${CHK_FILE}\" ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n  if [[ -z \"${CHK_FILE}\" ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n  if [[ -z \"${CHK_FILE}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_file.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_file() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 137,
                  "endLine": 7,
                  "endColumn": 142,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 116,
                  "endLine": 7,
                  "endColumn": 121,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 105,
                  "endLine": 7,
                  "endColumn": 111,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 92,
                  "endLine": 7,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 82,
                  "endLine": 7,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 71,
                  "endLine": 7,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\nlibcheck() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\nlibcheck() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\nlibcheck() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/libcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check mapped libraries\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/format.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/format.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\nformat() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\nformat() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\nformat() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/format.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# format\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_dir.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_dir.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 31,
                  "endLine": 15,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    CHK_DIR=$(readlink -f \"${CHK_DIR}\")\n  fi\n  # remove trailing slashes\n  tempdir=$(echo \"${CHK_DIR}\" | sed -e \"s/\\/*$//\")\n  if [[ ! -d \"${tempdir}\" ]]; then\n    printf \"\\033[31mError: The directory '%s' does not exist.\\033[m\\n\\n\" \"${tempdir}\"\n    exit 1\n",
                    "rendered": {
                      "text": "    CHK_DIR=$(readlink -f \"${CHK_DIR}\")\n  fi\n  # remove trailing slashes\n  tempdir=$(echo \"${CHK_DIR}\" | sed -e \"s/\\/*$//\")\n  if [[ ! -d \"${tempdir}\" ]]; then\n    printf \"\\033[31mError: The directory '%s' does not exist.\\033[m\\n\\n\" \"${tempdir}\"\n    exit 1\n",
                      "markdown": "`    CHK_DIR=$(readlink -f \"${CHK_DIR}\")\n  fi\n  # remove trailing slashes\n  tempdir=$(echo \"${CHK_DIR}\" | sed -e \"s/\\/*$//\")\n  if [[ ! -d \"${tempdir}\" ]]; then\n    printf \"\\033[31mError: The directory '%s' does not exist.\\033[m\\n\\n\" \"${tempdir}\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_dir.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n  if [[ -z \"${CHK_DIR}\" ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n  if [[ -z \"${CHK_DIR}\" ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n  if [[ -z \"${CHK_DIR}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/chk_dir.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_dir() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/nxcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/nxcheck.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 4,
                  "endLine": 7,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# check cpu nx flag\nnxcheck() {\n  if grep -qFw 'nx' /proc/cpuinfo; then\n    echo_message '\\033[32mYes\\033[m\\n\\n' '' '' ''\n  else\n    echo_message '\\033[31mNo\\033[m\\n\\n' '' '' ''\n",
                    "rendered": {
                      "text": "\n# check cpu nx flag\nnxcheck() {\n  if grep -qFw 'nx' /proc/cpuinfo; then\n    echo_message '\\033[32mYes\\033[m\\n\\n' '' '' ''\n  else\n    echo_message '\\033[31mNo\\033[m\\n\\n' '' '' ''\n",
                      "markdown": "`\n# check cpu nx flag\nnxcheck() {\n  if grep -qFw 'nx' /proc/cpuinfo; then\n    echo_message '\\033[32mYes\\033[m\\n\\n' '' '' ''\n  else\n    echo_message '\\033[31mNo\\033[m\\n\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/nxcheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\nnxcheck() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\nnxcheck() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\nnxcheck() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/nxcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check cpu nx flag\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/footer.sh"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 68,
                  "endLine": 120,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  printf \"\\033[31mError: No option selected. Please select an option.\\033[m\\n\\n\"\n  exit 1\nelif [[ \"${OPT}\" != 1 ]]; then\n  printf \"\\033[31mError: To many options selected. Please select one at a time.\\033[m\\n\\n\"\n  exit 1\nfi\n\n",
                    "rendered": {
                      "text": "  printf \"\\033[31mError: No option selected. Please select an option.\\033[m\\n\\n\"\n  exit 1\nelif [[ \"${OPT}\" != 1 ]]; then\n  printf \"\\033[31mError: To many options selected. Please select one at a time.\\033[m\\n\\n\"\n  exit 1\nfi\n\n",
                      "markdown": "`  printf \"\\033[31mError: No option selected. Please select an option.\\033[m\\n\\n\"\n  exit 1\nelif [[ \"${OPT}\" != 1 ]]; then\n  printf \"\\033[31mError: To many options selected. Please select one at a time.\\033[m\\n\\n\"\n  exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/footer.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          debug_report\n          exit 0\n          ;;\n        update | upgrade)\n          # shellcheck disable=SC2119\n          upgrade\n          exit 0\n",
                    "rendered": {
                      "text": "          debug_report\n          exit 0\n          ;;\n        update | upgrade)\n          # shellcheck disable=SC2119\n          upgrade\n          exit 0\n",
                      "markdown": "`          debug_report\n          exit 0\n          ;;\n        update | upgrade)\n          # shellcheck disable=SC2119\n          upgrade\n          exit 0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/footer.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/footer.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\nif [[ $# -lt 1 ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\nif [[ $# -lt 1 ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\nif [[ $# -lt 1 ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/footer.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# run help if nothing is passed\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/header.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/header.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 16,
                  "snippet": {
                    "text": "PATH=${PATH}:/sbin/:/usr/sbin/:/usr/bin/:/bin/\n\n# sanitize the environment before run\n[[ \"$(env | sed -r -e '/^(PWD|SHLVL|_)=/d')\" ]] && exec -c \"$0\" \"$@\"\n\nexport PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n\n",
                    "rendered": {
                      "text": "PATH=${PATH}:/sbin/:/usr/sbin/:/usr/bin/:/bin/\n\n# sanitize the environment before run\n[[ \"$(env | sed -r -e '/^(PWD|SHLVL|_)=/d')\" ]] && exec -c \"$0\" \"$@\"\n\nexport PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n\n",
                      "markdown": "`PATH=${PATH}:/sbin/:/usr/sbin/:/usr/bin/:/bin/\n\n# sanitize the environment before run\n[[ \"$(env | sed -r -e '/^(PWD|SHLVL|_)=/d')\" ]] && exec -c \"$0\" \"$@\"\n\nexport PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/header.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n# Name    : checksec.sh\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n# Name    : checksec.sh\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n# Name    : checksec.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/header.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# --- Modified Version ---\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 12,
                  "endLine": 77,
                  "snippet": {
                    "text": "    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n",
                    "rendered": {
                      "text": "    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n",
                      "markdown": "`    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 12,
                  "endLine": 77,
                  "snippet": {
                    "text": "    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n",
                    "rendered": {
                      "text": "    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n",
                      "markdown": "`    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 16,
                  "endLine": 62,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      with:\n        languages: ${{ matrix.language }}\n        build-mode: ${{ matrix.build-mode }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n",
                    "rendered": {
                      "text": "      with:\n        languages: ${{ matrix.language }}\n        build-mode: ${{ matrix.build-mode }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n",
                      "markdown": "`      with:\n        languages: ${{ matrix.language }}\n        build-mode: ${{ matrix.build-mode }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 92,
                  "endLine": 29,
                  "endColumn": 98,
                  "snippet": {
                    "text": "    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners (GitHub.com only)\n    # Consider using larger runners or machines with greater resources for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    permissions:\n      # required for all workflows\n",
                    "rendered": {
                      "text": "    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners (GitHub.com only)\n    # Consider using larger runners or machines with greater resources for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    permissions:\n      # required for all workflows\n",
                      "markdown": "`    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners (GitHub.com only)\n    # Consider using larger runners or machines with greater resources for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    permissions:\n      # required for all workflows\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/codeql.yml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 9,
                  "endLine": 4,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n",
                    "rendered": {
                      "text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n",
                      "markdown": "`# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.3.1"
                },
                "region": {
                  "startLine": 7602,
                  "startColumn": 24,
                  "endLine": 7603,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.3.1"
                },
                "region": {
                  "startLine": 5675,
                  "startColumn": 5,
                  "endLine": 5675,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.3.1"
                },
                "region": {
                  "startLine": 8652,
                  "startColumn": 12,
                  "endLine": 8652,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.3.1"
                },
                "region": {
                  "startLine": 3414,
                  "startColumn": 19,
                  "endLine": 3414,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.3.1"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 10,
                  "endLine": 120,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 12634,
                  "startColumn": 13,
                  "endLine": 12634,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 10140,
                  "startColumn": 31,
                  "endLine": 10141,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 10135,
                  "startColumn": 24,
                  "endLine": 10136,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 7316,
                  "startColumn": 5,
                  "endLine": 7316,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 12816,
                  "startColumn": 19,
                  "endLine": 12816,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 12807,
                  "startColumn": 12,
                  "endLine": 12807,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 11854,
                  "startColumn": 8,
                  "endLine": 11854,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 11852,
                  "startColumn": 1,
                  "endLine": 11852,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.4.1"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 10,
                  "endLine": 105,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.9.1"
                },
                "region": {
                  "startLine": 6112,
                  "startColumn": 24,
                  "endLine": 6113,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.9.1"
                },
                "region": {
                  "startLine": 4631,
                  "startColumn": 5,
                  "endLine": 4631,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.9.1"
                },
                "region": {
                  "startLine": 2910,
                  "startColumn": 19,
                  "endLine": 2910,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.9.1"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 10,
                  "endLine": 110,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.1.1"
                },
                "region": {
                  "startLine": 5483,
                  "startColumn": 24,
                  "endLine": 5484,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.1.1"
                },
                "region": {
                  "startLine": 4108,
                  "startColumn": 5,
                  "endLine": 4108,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_ISL6405=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_ISL6405=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_ISL6405=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.1.1"
                },
                "region": {
                  "startLine": 2615,
                  "startColumn": 19,
                  "endLine": 2615,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 13783,
                  "startColumn": 13,
                  "endLine": 13783,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 10794,
                  "startColumn": 31,
                  "endLine": 10795,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 10789,
                  "startColumn": 24,
                  "endLine": 10790,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 7688,
                  "startColumn": 5,
                  "endLine": 7688,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 6875,
                  "startColumn": 30,
                  "endLine": 6875,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 13993,
                  "startColumn": 19,
                  "endLine": 13993,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 13981,
                  "startColumn": 12,
                  "endLine": 13981,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 12908,
                  "startColumn": 8,
                  "endLine": 12908,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 12904,
                  "startColumn": 1,
                  "endLine": 12904,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.13.1"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 10,
                  "endLine": 109,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 13224,
                  "startColumn": 13,
                  "endLine": 13224,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 10428,
                  "startColumn": 31,
                  "endLine": 10429,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 10423,
                  "startColumn": 24,
                  "endLine": 10424,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 7447,
                  "startColumn": 5,
                  "endLine": 7447,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 6650,
                  "startColumn": 30,
                  "endLine": 6650,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 13425,
                  "startColumn": 19,
                  "endLine": 13425,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 13413,
                  "startColumn": 12,
                  "endLine": 13413,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 12379,
                  "startColumn": 8,
                  "endLine": 12379,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 12375,
                  "startColumn": 1,
                  "endLine": 12375,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.9.1"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 10,
                  "endLine": 89,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/man/checksec.1"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 26,
                  "endLine": 64,
                  "endColumn": 34,
                  "snippet": {
                    "text": ".It Fl h No or Fl \\-help\nDisplays the help text and exit\n.It Fl \\-update No or Fl \\-upgrade\nChecks source for a signed update and updates the application if available and exit\n.It Fl \\-version\nShows the current version of the running software and exit\n.El\n",
                    "rendered": {
                      "text": ".It Fl h No or Fl \\-help\nDisplays the help text and exit\n.It Fl \\-update No or Fl \\-upgrade\nChecks source for a signed update and updates the application if available and exit\n.It Fl \\-version\nShows the current version of the running software and exit\n.El\n",
                      "markdown": "`.It Fl h No or Fl \\-help\nDisplays the help text and exit\n.It Fl \\-update No or Fl \\-upgrade\nChecks source for a signed update and updates the application if available and exit\n.It Fl \\-version\nShows the current version of the running software and exit\n.El\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/man/checksec.1"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 6,
                  "endLine": 53,
                  "endColumn": 12,
                  "snippet": {
                    "text": ".It Fl \\-output Ns = Ns Ar (cli|csv|xml|json) No Ns , or Fl \\-format Ns = Ns Ar (cli|csv|xml|json)\nOutput the results in different formats for ingestion to other applications.\n.It Fl \\-trace\nEnable bash tracing (set\n.Fl x No Ns ).\n.El\n\n",
                    "rendered": {
                      "text": ".It Fl \\-output Ns = Ns Ar (cli|csv|xml|json) No Ns , or Fl \\-format Ns = Ns Ar (cli|csv|xml|json)\nOutput the results in different formats for ingestion to other applications.\n.It Fl \\-trace\nEnable bash tracing (set\n.Fl x No Ns ).\n.El\n\n",
                      "markdown": "`.It Fl \\-output Ns = Ns Ar (cli|csv|xml|json) No Ns , or Fl \\-format Ns = Ns Ar (cli|csv|xml|json)\nOutput the results in different formats for ingestion to other applications.\n.It Fl \\-trace\nEnable bash tracing (set\n.Fl x No Ns ).\n.El\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/man/checksec.1"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 4,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": ".Op Ar file\n.Sh DESCRIPTION\n.Nm\nis a bash script used to check the properties of executables\n(like PIE, RELRO, PaX, Canaries, ASLR, Fortify Source), library calls (Fortify Source),\nand kernel security options (like GRSecurity and SELinux).\n.Sh Options\n",
                    "rendered": {
                      "text": ".Op Ar file\n.Sh DESCRIPTION\n.Nm\nis a bash script used to check the properties of executables\n(like PIE, RELRO, PaX, Canaries, ASLR, Fortify Source), library calls (Fortify Source),\nand kernel security options (like GRSecurity and SELinux).\n.Sh Options\n",
                      "markdown": "`.Op Ar file\n.Sh DESCRIPTION\n.Nm\nis a bash script used to check the properties of executables\n(like PIE, RELRO, PaX, Canaries, ASLR, Fortify Source), library calls (Fortify Source),\nand kernel security options (like GRSecurity and SELinux).\n.Sh Options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/man/checksec.1"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 6,
                  "endLine": 53,
                  "endColumn": 12,
                  "snippet": {
                    "text": ".It Fl \\-output Ns = Ns Ar (cli|csv|xml|json) No Ns , or Fl \\-format Ns = Ns Ar (cli|csv|xml|json)\nOutput the results in different formats for ingestion to other applications.\n.It Fl \\-trace\nEnable bash tracing (set\n.Fl x No Ns ).\n.El\n\n",
                    "rendered": {
                      "text": ".It Fl \\-output Ns = Ns Ar (cli|csv|xml|json) No Ns , or Fl \\-format Ns = Ns Ar (cli|csv|xml|json)\nOutput the results in different formats for ingestion to other applications.\n.It Fl \\-trace\nEnable bash tracing (set\n.Fl x No Ns ).\n.El\n\n",
                      "markdown": "`.It Fl \\-output Ns = Ns Ar (cli|csv|xml|json) No Ns , or Fl \\-format Ns = Ns Ar (cli|csv|xml|json)\nOutput the results in different formats for ingestion to other applications.\n.It Fl \\-trace\nEnable bash tracing (set\n.Fl x No Ns ).\n.El\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/man/checksec.1"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 4,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": ".Op Ar file\n.Sh DESCRIPTION\n.Nm\nis a bash script used to check the properties of executables\n(like PIE, RELRO, PaX, Canaries, ASLR, Fortify Source), library calls (Fortify Source),\nand kernel security options (like GRSecurity and SELinux).\n.Sh Options\n",
                    "rendered": {
                      "text": ".Op Ar file\n.Sh DESCRIPTION\n.Nm\nis a bash script used to check the properties of executables\n(like PIE, RELRO, PaX, Canaries, ASLR, Fortify Source), library calls (Fortify Source),\nand kernel security options (like GRSecurity and SELinux).\n.Sh Options\n",
                      "markdown": "`.Op Ar file\n.Sh DESCRIPTION\n.Nm\nis a bash script used to check the properties of executables\n(like PIE, RELRO, PaX, Canaries, ASLR, Fortify Source), library calls (Fortify Source),\nand kernel security options (like GRSecurity and SELinux).\n.Sh Options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Makefile"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "SHELL = bash\n\n.PHONY: build\nbuild:\n\t@echo \"Building checksec\"\n",
                    "rendered": {
                      "text": "SHELL = bash\n\n.PHONY: build\nbuild:\n\t@echo \"Building checksec\"\n",
                      "markdown": "`SHELL = bash\n\n.PHONY: build\nbuild:\n\t@echo \"Building checksec\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Makefile"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n.PHONY: build-image\nbuild-image:\n\tdocker build -t slimm609/checksec .\n\n.PHONY: go\ngo:\n",
                    "rendered": {
                      "text": "\n.PHONY: build-image\nbuild-image:\n\tdocker build -t slimm609/checksec .\n\n.PHONY: go\ngo:\n",
                      "markdown": "`\n.PHONY: build-image\nbuild-image:\n\tdocker build -t slimm609/checksec .\n\n.PHONY: go\ngo:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Makefile"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "SHELL = bash\n\n.PHONY: build\nbuild:\n\t@echo \"Building checksec\"\n",
                    "rendered": {
                      "text": "SHELL = bash\n\n.PHONY: build\nbuild:\n\t@echo \"Building checksec\"\n",
                      "markdown": "`SHELL = bash\n\n.PHONY: build\nbuild:\n\t@echo \"Building checksec\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.8.1"
                },
                "region": {
                  "startLine": 6009,
                  "startColumn": 24,
                  "endLine": 6010,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.8.1"
                },
                "region": {
                  "startLine": 4558,
                  "startColumn": 5,
                  "endLine": 4558,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.8.1"
                },
                "region": {
                  "startLine": 2869,
                  "startColumn": 19,
                  "endLine": 2869,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.8.1"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 10,
                  "endLine": 111,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_IRQ_TIME_ACCOUNTING is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_IRQ_TIME_ACCOUNTING is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_IRQ_TIME_ACCOUNTING is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 15241,
                  "startColumn": 13,
                  "endLine": 15241,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 8380,
                  "startColumn": 5,
                  "endLine": 8380,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 7449,
                  "startColumn": 30,
                  "endLine": 7449,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 2505,
                  "startColumn": 19,
                  "endLine": 2505,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 2487,
                  "startColumn": 12,
                  "endLine": 2487,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 15485,
                  "startColumn": 19,
                  "endLine": 15485,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 15472,
                  "startColumn": 12,
                  "endLine": 15472,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.4.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 15067,
                  "startColumn": 13,
                  "endLine": 15067,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 11694,
                  "startColumn": 31,
                  "endLine": 11695,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 11689,
                  "startColumn": 24,
                  "endLine": 11690,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 8302,
                  "startColumn": 5,
                  "endLine": 8302,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 7377,
                  "startColumn": 30,
                  "endLine": 7377,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 2486,
                  "startColumn": 19,
                  "endLine": 2486,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 2471,
                  "startColumn": 12,
                  "endLine": 2471,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 15310,
                  "startColumn": 19,
                  "endLine": 15310,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 15297,
                  "startColumn": 12,
                  "endLine": 15297,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.2.1"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 10,
                  "endLine": 130,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 12419,
                  "startColumn": 13,
                  "endLine": 12419,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 10030,
                  "startColumn": 31,
                  "endLine": 10031,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 10025,
                  "startColumn": 24,
                  "endLine": 10026,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 7294,
                  "startColumn": 5,
                  "endLine": 7294,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 12598,
                  "startColumn": 19,
                  "endLine": 12598,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\nCONFIG_BOOT_PRINTK_DELAY=y\nCONFIG_DYNAMIC_DEBUG=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 12589,
                  "startColumn": 12,
                  "endLine": 12589,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 11657,
                  "startColumn": 8,
                  "endLine": 11657,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\n# TEE drivers\n#\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 11655,
                  "startColumn": 1,
                  "endLine": 11655,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\n# end of TEE drivers\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 4250,
                  "startColumn": 19,
                  "endLine": 4250,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.2.1"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 10,
                  "endLine": 100,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.11.1"
                },
                "region": {
                  "startLine": 8547,
                  "startColumn": 24,
                  "endLine": 8548,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.11.1"
                },
                "region": {
                  "startLine": 6329,
                  "startColumn": 5,
                  "endLine": 6329,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.11.1"
                },
                "region": {
                  "startLine": 10017,
                  "startColumn": 12,
                  "endLine": 10017,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.11.1"
                },
                "region": {
                  "startLine": 3724,
                  "startColumn": 19,
                  "endLine": 3724,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.11.1"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 10,
                  "endLine": 121,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.2.1"
                },
                "region": {
                  "startLine": 7448,
                  "startColumn": 24,
                  "endLine": 7449,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.2.1"
                },
                "region": {
                  "startLine": 5539,
                  "startColumn": 5,
                  "endLine": 5539,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.2.1"
                },
                "region": {
                  "startLine": 8468,
                  "startColumn": 12,
                  "endLine": 8468,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.2.1"
                },
                "region": {
                  "startLine": 3367,
                  "startColumn": 19,
                  "endLine": 3367,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.2.1"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 10,
                  "endLine": 120,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 12731,
                  "startColumn": 13,
                  "endLine": 12731,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 10057,
                  "startColumn": 31,
                  "endLine": 10058,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 10052,
                  "startColumn": 24,
                  "endLine": 10053,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 7214,
                  "startColumn": 5,
                  "endLine": 7214,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 12923,
                  "startColumn": 19,
                  "endLine": 12923,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 12912,
                  "startColumn": 12,
                  "endLine": 12912,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 11920,
                  "startColumn": 8,
                  "endLine": 11920,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 11916,
                  "startColumn": 1,
                  "endLine": 11916,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.6.1"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 10,
                  "endLine": 89,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.6.1"
                },
                "region": {
                  "startLine": 5907,
                  "startColumn": 24,
                  "endLine": 5908,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.6.1"
                },
                "region": {
                  "startLine": 4463,
                  "startColumn": 5,
                  "endLine": 4463,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.6.1"
                },
                "region": {
                  "startLine": 2829,
                  "startColumn": 19,
                  "endLine": 2829,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.16.1"
                },
                "region": {
                  "startLine": 9010,
                  "startColumn": 24,
                  "endLine": 9011,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.16.1"
                },
                "region": {
                  "startLine": 6598,
                  "startColumn": 5,
                  "endLine": 6598,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.16.1"
                },
                "region": {
                  "startLine": 10717,
                  "startColumn": 12,
                  "endLine": 10717,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.16.1"
                },
                "region": {
                  "startLine": 10291,
                  "startColumn": 1,
                  "endLine": 10291,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.16.1"
                },
                "region": {
                  "startLine": 3843,
                  "startColumn": 19,
                  "endLine": 3843,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.16.1"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 10,
                  "endLine": 125,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.7.1"
                },
                "region": {
                  "startLine": 8040,
                  "startColumn": 24,
                  "endLine": 8041,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.7.1"
                },
                "region": {
                  "startLine": 5993,
                  "startColumn": 5,
                  "endLine": 5993,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.7.1"
                },
                "region": {
                  "startLine": 9288,
                  "startColumn": 12,
                  "endLine": 9288,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.7.1"
                },
                "region": {
                  "startLine": 3576,
                  "startColumn": 19,
                  "endLine": 3576,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.7.1"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 10,
                  "endLine": 123,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 13861,
                  "startColumn": 13,
                  "endLine": 13861,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 10849,
                  "startColumn": 31,
                  "endLine": 10850,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 10844,
                  "startColumn": 24,
                  "endLine": 10845,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 7731,
                  "startColumn": 5,
                  "endLine": 7731,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 6921,
                  "startColumn": 30,
                  "endLine": 6921,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_MEDIA_USB_SUPPORT=y\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_MEDIA_USB_SUPPORT=y\n\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_MEDIA_USB_SUPPORT=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 14071,
                  "startColumn": 19,
                  "endLine": 14071,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 14058,
                  "startColumn": 12,
                  "endLine": 14058,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 12987,
                  "startColumn": 8,
                  "endLine": 12987,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 12983,
                  "startColumn": 1,
                  "endLine": 12983,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "endLine": 127,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.14.1"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 10,
                  "endLine": 112,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.15.1"
                },
                "region": {
                  "startLine": 8919,
                  "startColumn": 24,
                  "endLine": 8920,
                  "snippet": {
                    "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_TSL2x7x=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.15.1"
                },
                "region": {
                  "startLine": 6528,
                  "startColumn": 5,
                  "endLine": 6528,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.15.1"
                },
                "region": {
                  "startLine": 10597,
                  "startColumn": 12,
                  "endLine": 10597,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_CONSOLE_LOGLEVEL_DEFAULT=7\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.15.1"
                },
                "region": {
                  "startLine": 10169,
                  "startColumn": 1,
                  "endLine": 10169,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.15.1"
                },
                "region": {
                  "startLine": 3798,
                  "startColumn": 19,
                  "endLine": 3798,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.15.1"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 10,
                  "endLine": 127,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.5.1"
                },
                "region": {
                  "startLine": 5848,
                  "startColumn": 24,
                  "endLine": 5849,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.5.1"
                },
                "region": {
                  "startLine": 4409,
                  "startColumn": 5,
                  "endLine": 4409,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.5.1"
                },
                "region": {
                  "startLine": 2821,
                  "startColumn": 19,
                  "endLine": 2821,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/binaries/nolibc32.asm"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 68,
                  "endLine": 2,
                  "endColumn": 72,
                  "snippet": {
                    "text": "section .data\n        msg db \"Hello, world!\", 0xa ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dd 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (dwords, 32-bit integer values)\n\n",
                    "rendered": {
                      "text": "section .data\n        msg db \"Hello, world!\", 0xa ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dd 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (dwords, 32-bit integer values)\n\n",
                      "markdown": "`section .data\n        msg db \"Hello, world!\", 0xa ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dd 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (dwords, 32-bit integer values)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/binaries/nolibc32.asm"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 13,
                  "endLine": 4,
                  "endColumn": 17,
                  "snippet": {
                    "text": "section .data\n        msg db \"Hello, world!\", 0xa ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dd 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (dwords, 32-bit integer values)\n\nsection .text\n        global _start               ;must be declared for linker (ld)\n",
                    "rendered": {
                      "text": "section .data\n        msg db \"Hello, world!\", 0xa ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dd 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (dwords, 32-bit integer values)\n\nsection .text\n        global _start               ;must be declared for linker (ld)\n",
                      "markdown": "`section .data\n        msg db \"Hello, world!\", 0xa ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dd 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (dwords, 32-bit integer values)\n\nsection .text\n        global _start               ;must be declared for linker (ld)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/binaries/nolibc.asm"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 68,
                  "endLine": 2,
                  "endColumn": 72,
                  "snippet": {
                    "text": "section .data\n        msg db 'Hello, World!', 0ah ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dq 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (qwords, 64-bit integer values)\n\n",
                    "rendered": {
                      "text": "section .data\n        msg db 'Hello, World!', 0ah ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dq 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (qwords, 64-bit integer values)\n\n",
                      "markdown": "`section .data\n        msg db 'Hello, World!', 0ah ;note the newline (Line Feed-LF) at the end (hex:0ah; decimal:10)\n        len equ $ - msg             ;calculate the length of the message\n        delay dq 2, 100000000       ;define delay with Timespec structure members tv_sec, tv_nsec (qwords, 64-bit integer values)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 1,
                  "endLine": 189,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"dir json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"dir json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"dir json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 176,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 1,
                  "endLine": 163,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 1,
                  "endLine": 150,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 1,
                  "endLine": 137,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"fortify-file json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 1,
                  "endLine": 124,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"file json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"file json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"file json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"listfile json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"listfile json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"listfile json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"file json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"file json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"file json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 3,
                  "endLine": 84,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  jq . < \"${DIR}/output.json\" &> /dev/null\n  JQRET=$?\n  if [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n    cat \"${DIR}/output.json\"\n    echo \"custom kernel json validation failed\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "  jq . < \"${DIR}/output.json\" &> /dev/null\n  JQRET=$?\n  if [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n    cat \"${DIR}/output.json\"\n    echo \"custom kernel json validation failed\"\n    exit 1\n  fi\n",
                      "markdown": "`  jq . < \"${DIR}/output.json\" &> /dev/null\n  JQRET=$?\n  if [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n    cat \"${DIR}/output.json\"\n    echo \"custom kernel json validation failed\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 1,
                  "endLine": 70,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"custom kernel json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"custom kernel json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"custom kernel json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 58,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"kernel json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"kernel json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"kernel json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"proc-all json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"proc-all json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"proc-all json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 6,
                  "snippet": {
                    "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"proc-all json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"proc-all json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`jq . < \"${DIR}/output.json\" &> /dev/null\nJQRET=$?\nif [[ ${RET} != 0 ]] || [[ ${JQRET} != 0 ]]; then\n  cat \"${DIR}/output.json\"\n  echo \"proc-all json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 17,
                  "endLine": 10,
                  "endColumn": 23,
                  "snippet": {
                    "text": "elif [[ -f /bin/ls ]]; then\n  test_file=\"/bin/ls\"\nelse\n  echo \"could not find valid file to test\"\n  exit 255\nfi\n\n",
                    "rendered": {
                      "text": "elif [[ -f /bin/ls ]]; then\n  test_file=\"/bin/ls\"\nelse\n  echo \"could not find valid file to test\"\n  exit 255\nfi\n\n",
                      "markdown": "`elif [[ -f /bin/ls ]]; then\n  test_file=\"/bin/ls\"\nelse\n  echo \"could not find valid file to test\"\n  exit 255\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/json-checks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-checkout"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-checkout"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\nfi\n",
                    "rendered": {
                      "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\nfi\n",
                      "markdown": "`    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-checkout"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 128,
                  "endLine": 6,
                  "endColumn": 133,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-checkout"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 116,
                  "endLine": 6,
                  "endColumn": 122,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-checkout"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 54,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-checkout \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-checkout"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-merge"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-merge"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\nfi\n",
                    "rendered": {
                      "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\nfi\n",
                      "markdown": "`    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-merge"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 128,
                  "endLine": 6,
                  "endColumn": 133,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-merge"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 116,
                  "endLine": 6,
                  "endColumn": 122,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-merge"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 54,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-merge \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-merge"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/pkg/checksec/sysctl.go"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 20,
                  "endLine": 35,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\t\tvar colors []interface{}\n\t\tvar output string\n\t\tvar color string\n\t\tcheck, _ := sysctl.Get(s[\"name\"].(string))\n\n\t\tvalues := s[\"values\"].(map[string]map[string]string)\n\n",
                    "rendered": {
                      "text": "\t\tvar colors []interface{}\n\t\tvar output string\n\t\tvar color string\n\t\tcheck, _ := sysctl.Get(s[\"name\"].(string))\n\n\t\tvalues := s[\"values\"].(map[string]map[string]string)\n\n",
                      "markdown": "`\t\tvar colors []interface{}\n\t\tvar output string\n\t\tvar color string\n\t\tcheck, _ := sysctl.Get(s[\"name\"].(string))\n\n\t\tvalues := s[\"values\"].(map[string]map[string]string)\n\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 5,
                  "endLine": 66,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  if [[ ! \"${1}\" == \"\" ]]; then\n    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n",
                    "rendered": {
                      "text": "  if [[ ! \"${1}\" == \"\" ]]; then\n    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n",
                      "markdown": "`  if [[ ! \"${1}\" == \"\" ]]; then\n    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 17,
                  "endLine": 436,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n  echo_message \"* SELinux:                                \" \"\" \"\" \"\"\n  if ${kconfig} | grep -qi 'CONFIG_SECURITY_SELINUX=y'; then\n    getsestatus\n    sestatus=$?\n    if [[ ${sestatus} == 0 ]]; then\n",
                    "rendered": {
                      "text": "\n  echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n  echo_message \"* SELinux:                                \" \"\" \"\" \"\"\n  if ${kconfig} | grep -qi 'CONFIG_SECURITY_SELINUX=y'; then\n    getsestatus\n    sestatus=$?\n    if [[ ${sestatus} == 0 ]]; then\n",
                      "markdown": "`\n  echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n  echo_message \"* SELinux:                                \" \"\" \"\" \"\"\n  if ${kconfig} | grep -qi 'CONFIG_SECURITY_SELINUX=y'; then\n    getsestatus\n    sestatus=$?\n    if [[ ${sestatus} == 0 ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 21,
                  "endLine": 424,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_module_region_full='no'\" ', \"randomize_module_region_full\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_module_region_full='no'\" ', \"randomize_module_region_full\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_module_region_full='no'\" ', \"randomize_module_region_full\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 19,
                  "endLine": 422,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 21,
                  "endLine": 415,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_kernel_address='no'\" ', \"randomize_kernel_address\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_kernel_address='no'\" ', \"randomize_kernel_address\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_kernel_address='no'\" ', \"randomize_kernel_address\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 19,
                  "endLine": 413,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 21,
                  "endLine": 406,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" emulate_privileged_access_never='no'\" ', \"emulate_privileged_access_never\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" emulate_privileged_access_never='no'\" ', \"emulate_privileged_access_never\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" emulate_privileged_access_never='no'\" ', \"emulate_privileged_access_never\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 19,
                  "endLine": 404,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 21,
                  "endLine": 397,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" speculative_store_bypass_disable='no'\" ', \"speculative_store_bypass_disable\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" speculative_store_bypass_disable='no'\" ', \"speculative_store_bypass_disable\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" speculative_store_bypass_disable='no'\" ', \"speculative_store_bypass_disable\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 19,
                  "endLine": 395,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 21,
                  "endLine": 388,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_el2_vector_mapping='no'\" ', \"harden_el2_vector_mapping\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_el2_vector_mapping='no'\" ', \"harden_el2_vector_mapping\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_el2_vector_mapping='no'\" ', \"harden_el2_vector_mapping\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 19,
                  "endLine": 386,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 21,
                  "endLine": 379,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_branch_predictor='no'\" ', \"harden_branch_predictor\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_branch_predictor='no'\" ', \"harden_branch_predictor\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_branch_predictor='no'\" ', \"harden_branch_predictor\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 19,
                  "endLine": 377,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 21,
                  "endLine": 370,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" unmap_kernel_in_userspace='no'\" ', \"unmap_kernel_in_userspace\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" unmap_kernel_in_userspace='no'\" ', \"unmap_kernel_in_userspace\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" unmap_kernel_in_userspace='no'\" ', \"unmap_kernel_in_userspace\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 19,
                  "endLine": 368,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM64 only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM64 only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM64 only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 21,
                  "endLine": 354,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_strict_rodata='no'\" ', \"arm_strict_rodata\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_strict_rodata='no'\" ', \"arm_strict_rodata\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_strict_rodata='no'\" ', \"arm_strict_rodata\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 19,
                  "endLine": 352,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 21,
                  "endLine": 345,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_kernmem_perms='no'\" ', \"arm_kernmem_perms\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_kernmem_perms='no'\" ', \"arm_kernmem_perms\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_kernmem_perms='no'\" ', \"arm_kernmem_perms\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 19,
                  "endLine": 343,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 72,
                  "endLine": 330,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 21,
                  "endLine": 330,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 68,
                  "endLine": 328,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 19,
                  "endLine": 328,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 23,
                  "endLine": 320,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" strict_user_copy_check='no'\" ', \"strict_user_copy_check\":\"no\"'\n",
                    "rendered": {
                      "text": "    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" strict_user_copy_check='no'\" ', \"strict_user_copy_check\":\"no\"'\n",
                      "markdown": "`    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" strict_user_copy_check='no'\" ', \"strict_user_copy_check\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 21,
                  "endLine": 318,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n",
                      "markdown": "`    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 21,
                  "endLine": 317,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    echo_message \"\\n\" \"\\n\" \"\" \"\"\n    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n",
                    "rendered": {
                      "text": "    echo_message \"\\n\" \"\\n\" \"\" \"\"\n    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n",
                      "markdown": "`    echo_message \"\\n\" \"\\n\" \"\" \"\"\n    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 19,
                  "endLine": 305,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n    else\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_kmem_access='yes'\" ', \"restrict_dev_kmem_access\":\"yes\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n    else\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_kmem_access='yes'\" ', \"restrict_dev_kmem_access\":\"yes\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n    else\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_kmem_access='yes'\" ', \"restrict_dev_kmem_access\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 17,
                  "endLine": 303,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 19,
                  "endLine": 296,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" fortify_source='no'\" ', \"fortify_source\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" fortify_source='no'\" ', \"fortify_source\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" fortify_source='no'\" ', \"fortify_source\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 17,
                  "endLine": 294,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 19,
                  "endLine": 287,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" hardened_usercopy='no'\" ', \"hardened_usercopy\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" hardened_usercopy='no'\" ', \"hardened_usercopy\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" hardened_usercopy='no'\" ', \"hardened_usercopy\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 17,
                  "endLine": 285,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    echo_message \"\\033[32mActive\\033[m\\n\\n\" \"Active,\" \" yama_ptrace_scope='active'\" ', \"yama_ptrace_scope\":\"active\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\033[32mActive\\033[m\\n\\n\" \"Active,\" \" yama_ptrace_scope='active'\" ', \"yama_ptrace_scope\":\"active\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\033[32mActive\\033[m\\n\\n\" \"Active,\" \" yama_ptrace_scope='active'\" ', \"yama_ptrace_scope\":\"active\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 19,
                  "endLine": 258,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" full_refcount_validation='no'\" ', \"full_refcount_validation\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" full_refcount_validation='no'\" ', \"full_refcount_validation\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" full_refcount_validation='no'\" ', \"full_refcount_validation\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 17,
                  "endLine": 256,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 19,
                  "endLine": 249,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_io_dev_mem_access='no'\" ', \"restrict_io_dev_mem_access\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_io_dev_mem_access='no'\" ', \"restrict_io_dev_mem_access\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_io_dev_mem_access='no'\" ', \"restrict_io_dev_mem_access\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 17,
                  "endLine": 247,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 19,
                  "endLine": 240,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_mem_access='no'\" ', \"restrict_dev_mem_access\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_mem_access='no'\" ', \"restrict_dev_mem_access\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_mem_access='no'\" ', \"restrict_dev_mem_access\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 17,
                  "endLine": 238,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 19,
                  "endLine": 231,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" virtually_mapped_stack='no'\" ', \"virtually_mapped_stack\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" virtually_mapped_stack='no'\" ', \"virtually_mapped_stack\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" virtually_mapped_stack='no'\" ', \"virtually_mapped_stack\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 17,
                  "endLine": 229,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 19,
                  "endLine": 222,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" cpu_sw_domain='no'\" ', \"cpu_sw_domain\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" cpu_sw_domain='no'\" ', \"cpu_sw_domain\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" cpu_sw_domain='no'\" ', \"cpu_sw_domain\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 19,
                  "endLine": 213,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" slab_freelist_randomization='no'\" ', \"slab_freelist_randomization\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" slab_freelist_randomization='no'\" ', \"slab_freelist_randomization\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" slab_freelist_randomization='no'\" ', \"slab_freelist_randomization\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 17,
                  "endLine": 211,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 21,
                  "endLine": 201,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='yes'\" ', \"gcc_structleak_byref\":\"yes\"'\n      else\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='no'\" ', \"gcc_structleak_byref\":\"no\"'\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='yes'\" ', \"gcc_structleak_byref\":\"yes\"'\n      else\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='no'\" ', \"gcc_structleak_byref\":\"no\"'\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='yes'\" ', \"gcc_structleak_byref\":\"yes\"'\n      else\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='no'\" ', \"gcc_structleak_byref\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 19,
                  "endLine": 198,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 17,
                  "endLine": 196,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 84,
                  "endLine": 185,
                  "endColumn": 90,
                  "snippet": {
                    "text": "ctor\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" gcc_stack_protector_strong='no'\" ', \"gcc_stac",
                    "rendered": {
                      "text": "ctor\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" gcc_stack_protector_strong='no'\" ', \"gcc_stac",
                      "markdown": "`ctor\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" gcc_stack_protector_strong='no'\" ', \"gcc_stac`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 23,
                  "endLine": 185,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n",
                    "rendered": {
                      "text": "\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n",
                      "markdown": "`\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 80,
                  "endLine": 183,
                  "endColumn": 86,
                  "snippet": {
                    "text": "fig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"E",
                    "rendered": {
                      "text": "fig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"E",
                      "markdown": "`fig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"E`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 21,
                  "endLine": 183,
                  "endColumn": 27,
                  "snippet": {
                    "text": "tack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y",
                    "rendered": {
                      "text": "tack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y",
                      "markdown": "`tack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 73,
                  "endLine": 180,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 19,
                  "endLine": 180,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 69,
                  "endLine": 178,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 17,
                  "endLine": 178,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "endLine": 172,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  echo_message \"  Kernel heap randomization:              \" \"\" \"\" \"\"\n  # NOTE: y means it turns off kernel heap randomization for backwards compatability (libc5)\n  if ${kconfig} | grep -qi 'CONFIG_COMPAT_BRK=y'; then\n    echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" kernel_heap_randomization='no'\" ', \"kernel_heap_randomization\":\"no\"'\n  else\n    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n",
                    "rendered": {
                      "text": "\n  echo_message \"  Kernel heap randomization:              \" \"\" \"\" \"\"\n  # NOTE: y means it turns off kernel heap randomization for backwards compatability (libc5)\n  if ${kconfig} | grep -qi 'CONFIG_COMPAT_BRK=y'; then\n    echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" kernel_heap_randomization='no'\" ', \"kernel_heap_randomization\":\"no\"'\n  else\n    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n",
                      "markdown": "`\n  echo_message \"  Kernel heap randomization:              \" \"\" \"\" \"\"\n  # NOTE: y means it turns off kernel heap randomization for backwards compatability (libc5)\n  if ${kconfig} | grep -qi 'CONFIG_COMPAT_BRK=y'; then\n    echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" kernel_heap_randomization='no'\" ', \"kernel_heap_randomization\":\"no\"'\n  else\n    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 43,
                  "endLine": 110,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n  if [ -n \"$nx_protection\" ]; then\n    if [[ \"${nx_protection}\" == \"NX (Execute Disable) protection: active\" ]]; then\n",
                    "rendered": {
                      "text": "  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n  if [ -n \"$nx_protection\" ]; then\n    if [[ \"${nx_protection}\" == \"NX (Execute Disable) protection: active\" ]]; then\n",
                      "markdown": "`  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n  if [ -n \"$nx_protection\" ]; then\n    if [[ \"${nx_protection}\" == \"NX (Execute Disable) protection: active\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 57,
                  "endLine": 108,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                    "rendered": {
                      "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                      "markdown": "`\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 43,
                  "endLine": 108,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                    "rendered": {
                      "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                      "markdown": "`\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 37,
                  "endLine": 108,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                    "rendered": {
                      "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                      "markdown": "`\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 19,
                  "endLine": 76,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n      arch=\"32\"\n    fi\n  elif [[ -f /proc/config.gz ]]; then\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n      arch=\"32\"\n    fi\n  elif [[ -f /proc/config.gz ]]; then\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n      arch=\"32\"\n    fi\n  elif [[ -f /proc/config.gz ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 19,
                  "endLine": 73,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 19,
                  "endLine": 70,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 19,
                  "endLine": 67,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n",
                    "rendered": {
                      "text": "    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n",
                      "markdown": "`    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 45,
                  "endLine": 44,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                    "rendered": {
                      "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                      "markdown": "`    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 28,
                  "endLine": 44,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                    "rendered": {
                      "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                      "markdown": "`    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 49,
                  "endLine": 40,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                    "rendered": {
                      "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                      "markdown": "`      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 25,
                  "endLine": 40,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                    "rendered": {
                      "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                      "markdown": "`      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n  if [[ ${CHK_KERNEL} == \"kernel\" ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n  if [[ ${CHK_KERNEL} == \"kernel\" ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n  if [[ ${CHK_KERNEL} == \"kernel\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/kernelcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\nchk_kernel() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/coredumpcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/coredumpcheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\ncoredumpcheck() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\ncoredumpcheck() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\ncoredumpcheck() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/coredumpcheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#Check core dumps restricted?\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 21,
                  "endLine": 24,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 11,
                  "endLine": 78,
                  "snippet": {
                    "text": "  return 0\n}\n\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n",
                    "rendered": {
                      "text": "  return 0\n}\n\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n",
                      "markdown": "`  return 0\n}\n\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 40,
                  "endLine": 26,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n",
                      "markdown": "`  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 35,
                  "endLine": 84,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                    "rendered": {
                      "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                      "markdown": "`  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 26,
                  "endLine": 84,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                    "rendered": {
                      "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                      "markdown": "`  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 3,
                  "endLine": 82,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n",
                    "rendered": {
                      "text": "  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n",
                      "markdown": "`  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 11,
                  "endLine": 81,
                  "endColumn": 17,
                  "snippet": {
                    "text": "fetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n",
                    "rendered": {
                      "text": "fetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n",
                      "markdown": "`fetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "endLine": 80,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n",
                    "rendered": {
                      "text": "# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n",
                      "markdown": "`# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 9,
                  "endLine": 79,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n",
                      "markdown": "`\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n      chmod \"${PERMS}\" \"${0}\"\n    else\n      echo \"Error: Could not update... Please check permissions\"\n      rm -f \"${TMP_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n      chmod \"${PERMS}\" \"${0}\"\n    else\n      echo \"Error: Could not update... Please check permissions\"\n      rm -f \"${TMP_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n      chmod \"${PERMS}\" \"${0}\"\n    else\n      echo \"Error: Could not update... Please check permissions\"\n      rm -f \"${TMP_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 3,
                  "endLine": 34,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    mv \"${TMP_FILE}\" \"$0\" > /dev/null 2>&1\n    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n",
                    "rendered": {
                      "text": "  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    mv \"${TMP_FILE}\" \"$0\" > /dev/null 2>&1\n    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n",
                      "markdown": "`  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    mv \"${TMP_FILE}\" \"$0\" > /dev/null 2>&1\n    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 57,
                  "endLine": 30,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n  UPDATE_VERSION=$(grep \"^SCRIPT_VERSION\" \"${TMP_FILE}\" | awk -F\"=\" '{ print $2 }')\n  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n  UPDATE_VERSION=$(grep \"^SCRIPT_VERSION\" \"${TMP_FILE}\" | awk -F\"=\" '{ print $2 }')\n  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n  UPDATE_VERSION=$(grep \"^SCRIPT_VERSION\" \"${TMP_FILE}\" | awk -F\"=\" '{ print $2 }')\n  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n",
                    "rendered": {
                      "text": "  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n",
                      "markdown": "`  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 20,
                  "endLine": 24,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\nread -r PUBKEY << EOF\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\nread -r PUBKEY << EOF\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\nread -r PUBKEY << EOF\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/upgrade.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n#openssl public key for verification of updates\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/version.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/version.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\nversion() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\nversion() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\nversion() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/version.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# version information\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 86,
                  "endLine": 139,
                  "endColumn": 91,
                  "snippet": {
                    "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                    "rendered": {
                      "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                      "markdown": "`  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 65,
                  "endLine": 139,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                    "rendered": {
                      "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                      "markdown": "`  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 84,
                  "endLine": 137,
                  "endColumn": 89,
                  "snippet": {
                    "text": "  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n",
                    "rendered": {
                      "text": "  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n",
                      "markdown": "`  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 56,
                  "endLine": 134,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 40,
                  "endLine": 134,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 47,
                  "endLine": 126,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n    echo_message '\\033[32mNo Symbols\\t\\033[m' 'No Symbols,' ' symbols=\"no\"' '\"symbols\":\"no\",'\n",
                    "rendered": {
                      "text": "\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n    echo_message '\\033[32mNo Symbols\\t\\033[m' 'No Symbols,' ' symbols=\"no\"' '\"symbols\":\"no\",'\n",
                      "markdown": "`\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n    echo_message '\\033[32mNo Symbols\\t\\033[m' 'No Symbols,' ' symbols=\"no\"' '\"symbols\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 112,
                  "endLine": 125,
                  "endColumn": 117,
                  "snippet": {
                    "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                      "markdown": "`  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 96,
                  "endLine": 125,
                  "endColumn": 101,
                  "snippet": {
                    "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                      "markdown": "`  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 78,
                  "endLine": 125,
                  "endColumn": 84,
                  "snippet": {
                    "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                      "markdown": "`  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 66,
                  "endLine": 114,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 8,
                  "endLine": 114,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 77,
                  "endLine": 112,
                  "endColumn": 82,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m  ' 'N/A,' ' runpath=\"n/a\"' '\"runpath\":\"n/a\",'\n  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m  ' 'N/A,' ' runpath=\"n/a\"' '\"runpath\":\"n/a\",'\n  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m  ' 'N/A,' ' runpath=\"n/a\"' '\"runpath\":\"n/a\",'\n  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 64,
                  "endLine": 98,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 75,
                  "endLine": 96,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A      \\033[m  ' 'N/A,' ' rpath=\"n/a\"' '\"rpath\":\"n/a\",'\n  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A      \\033[m  ' 'N/A,' ' rpath=\"n/a\"' '\"rpath\":\"n/a\",'\n  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A      \\033[m  ' 'N/A,' ' rpath=\"n/a\"' '\"rpath\":\"n/a\",'\n  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 55,
                  "endLine": 83,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    fi\n\n    # check if compiled with Clang SafeStack\n    if $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                    "rendered": {
                      "text": "    fi\n\n    # check if compiled with Clang SafeStack\n    if $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                      "markdown": "`    fi\n\n    # check if compiled with Clang SafeStack\n    if $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 76,
                  "endLine": 76,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                    "rendered": {
                      "text": "    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                      "markdown": "`    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 92,
                  "endLine": 74,
                  "endColumn": 97,
                  "snippet": {
                    "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                      "markdown": "`  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 77,
                  "endLine": 74,
                  "endColumn": 83,
                  "snippet": {
                    "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                      "markdown": "`  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 38,
                  "endLine": 73,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 60,
                  "endLine": 64,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 42,
                  "endLine": 64,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 42,
                  "endLine": 56,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n    fi\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*REL'; then\n    echo_message '\\033[33mREL          \\033[m   ' 'REL,' ' pie=\"rel\"' '\"pie\":\"rel\",'\n  else\n    echo_message '\\033[33mNot an ELF file\\033[m   ' 'Not an ELF file,' ' pie=\"not_elf\"' '\"pie\":\"not_elf\",'\n",
                    "rendered": {
                      "text": "    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n    fi\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*REL'; then\n    echo_message '\\033[33mREL          \\033[m   ' 'REL,' ' pie=\"rel\"' '\"pie\":\"rel\",'\n  else\n    echo_message '\\033[33mNot an ELF file\\033[m   ' 'Not an ELF file,' ' pie=\"not_elf\"' '\"pie\":\"not_elf\",'\n",
                      "markdown": "`    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n    fi\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*REL'; then\n    echo_message '\\033[33mREL          \\033[m   ' 'REL,' ' pie=\"rel\"' '\"pie\":\"rel\",'\n  else\n    echo_message '\\033[33mNot an ELF file\\033[m   ' 'Not an ELF file,' ' pie=\"not_elf\"' '\"pie\":\"not_elf\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 42,
                  "endLine": 51,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                    "rendered": {
                      "text": "  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                      "markdown": "`  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 42,
                  "endLine": 50,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                    "rendered": {
                      "text": "  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                      "markdown": "`  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 40,
                  "endLine": 48,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                      "markdown": "`  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 108,
                  "endLine": 38,
                  "endColumn": 114,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 96,
                  "endLine": 38,
                  "endColumn": 102,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 66,
                  "endLine": 38,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 47,
                  "endLine": 38,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 42,
                  "endLine": 37,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # shellcheck disable=SC2126\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n",
                    "rendered": {
                      "text": "  # shellcheck disable=SC2126\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n",
                      "markdown": "`  # shellcheck disable=SC2126\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 72,
                  "endLine": 27,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 57,
                  "endLine": 27,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 102,
                  "endLine": 11,
                  "endColumn": 108,
                  "snippet": {
                    "text": "headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"partial\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"partial\\\",\"\n    fi\n  else\n  ",
                    "rendered": {
                      "text": "headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"partial\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"partial\\\",\"\n    fi\n  else\n  ",
                      "markdown": "`headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"partial\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"partial\\\",\"\n    fi\n  else\n  `"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 42,
                  "endLine": 11,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"part",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"part",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"part`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 42,
                  "endLine": 10,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # check for RELRO support\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n",
                    "rendered": {
                      "text": "  # check for RELRO support\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n",
                      "markdown": "`  # check for RELRO support\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\nfilecheck() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\nfilecheck() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\nfilecheck() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/filecheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check file(s)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 23,
                  "endLine": 63,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        file \"${path}\"\n      fi\n    else\n      echo \"*** can not find command ${command}\"\n      failed=true\n    fi\n  done\n",
                    "rendered": {
                      "text": "        file \"${path}\"\n      fi\n    else\n      echo \"*** can not find command ${command}\"\n      failed=true\n    fi\n  done\n",
                      "markdown": "`        file \"${path}\"\n      fi\n    else\n      echo \"*** can not find command ${command}\"\n      failed=true\n    fi\n  done\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 129,
                  "endLine": 51,
                  "endColumn": 138,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 119,
                  "endLine": 51,
                  "endColumn": 125,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 79,
                  "endLine": 51,
                  "endColumn": 85,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 56,
                  "endLine": 51,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 31,
                  "endLine": 51,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "endLine": 51,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 11,
                  "endLine": 39,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    OS=$(cat /etc/SuSe-release)\n    VER=$(uname -r)\n  elif [[ -f /etc/redhat-release ]]; then\n    # Older Red Hat, CentOS, etc.\n    OS=$(cat /etc/redhat-release)\n    VER=$(uname -r)\n  else\n",
                    "rendered": {
                      "text": "    OS=$(cat /etc/SuSe-release)\n    VER=$(uname -r)\n  elif [[ -f /etc/redhat-release ]]; then\n    # Older Red Hat, CentOS, etc.\n    OS=$(cat /etc/redhat-release)\n    VER=$(uname -r)\n  else\n",
                      "markdown": "`    OS=$(cat /etc/SuSe-release)\n    VER=$(uname -r)\n  elif [[ -f /etc/redhat-release ]]; then\n    # Older Red Hat, CentOS, etc.\n    OS=$(cat /etc/redhat-release)\n    VER=$(uname -r)\n  else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n  echo \"***** Checksec debug *****\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n  echo \"***** Checksec debug *****\"\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n  echo \"***** Checksec debug *****\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/debug.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\ndebug_report() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/help.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/help.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\nhelp() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\nhelp() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\nhelp() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/help.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# help\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 95,
                  "endLine": 128,
                  "endColumn": 100,
                  "snippet": {
                    "text": "_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_total=$((Proc_FS_cnt_unc",
                    "rendered": {
                      "text": "_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_total=$((Proc_FS_cnt_unc",
                      "markdown": "`_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_total=$((Proc_FS_cnt_unc`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 74,
                  "endLine": 128,
                  "endColumn": 79,
                  "snippet": {
                    "text": "c\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_tot",
                    "rendered": {
                      "text": "c\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_tot",
                      "markdown": "`c\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_tot`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 89,
                  "endLine": 126,
                  "endColumn": 94,
                  "snippet": {
                    "text": "  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n",
                    "rendered": {
                      "text": "  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n",
                      "markdown": "`  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 74,
                  "endLine": 123,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 58,
                  "endLine": 123,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 64,
                  "endLine": 113,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 46,
                  "endLine": 113,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 46,
                  "endLine": 102,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDynamic Shared Object\\033[m   ' 'Dynamic Shared Object,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                    "rendered": {
                      "text": "  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDynamic Shared Object\\033[m   ' 'Dynamic Shared Object,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                      "markdown": "`  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDynamic Shared Object\\033[m   ' 'Dynamic Shared Object,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 46,
                  "endLine": 101,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                    "rendered": {
                      "text": "  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                      "markdown": "`  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 44,
                  "endLine": 99,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                      "markdown": "`  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 112,
                  "endLine": 92,
                  "endColumn": 118,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 100,
                  "endLine": 92,
                  "endColumn": 106,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 70,
                  "endLine": 92,
                  "endColumn": 76,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 51,
                  "endLine": 92,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 55,
                  "endLine": 77,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n    elif [[ \"${pageexec}\" = \"p\" && \"${segmexec}\" = \"s\" && \"${randmmap}\" = \"R\" ]]; then\n",
                    "rendered": {
                      "text": "    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n    elif [[ \"${pageexec}\" = \"p\" && \"${segmexec}\" = \"s\" && \"${randmmap}\" = \"R\" ]]; then\n",
                      "markdown": "`    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n    elif [[ \"${pageexec}\" = \"p\" && \"${segmexec}\" = \"s\" && \"${randmmap}\" = \"R\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 55,
                  "endLine": 76,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n",
                      "markdown": "`  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 55,
                  "endLine": 75,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n",
                    "rendered": {
                      "text": "  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n",
                      "markdown": "`  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 55,
                  "endLine": 74,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  # first check for PaX support\n  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n",
                    "rendered": {
                      "text": "  # first check for PaX support\n  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n",
                      "markdown": "`  # first check for PaX support\n  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 56,
                  "endLine": 62,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  fi\n\n  # check for Seccomp mode\n  seccomp=$(grep 'Seccomp:' \"${1}/status\" 2> /dev/null | cut -b10)\n  if [[ \"${seccomp}\" == \"1\" ]]; then\n    echo_message '\\033[32mSeccomp strict\\033[m   ' 'Seccomp strict,' ' seccomp=\"strict\"' '\"seccomp\":\"strict\",'\n  elif [[ \"${seccomp}\" == \"2\" ]]; then\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for Seccomp mode\n  seccomp=$(grep 'Seccomp:' \"${1}/status\" 2> /dev/null | cut -b10)\n  if [[ \"${seccomp}\" == \"1\" ]]; then\n    echo_message '\\033[32mSeccomp strict\\033[m   ' 'Seccomp strict,' ' seccomp=\"strict\"' '\"seccomp\":\"strict\",'\n  elif [[ \"${seccomp}\" == \"2\" ]]; then\n",
                      "markdown": "`  fi\n\n  # check for Seccomp mode\n  seccomp=$(grep 'Seccomp:' \"${1}/status\" 2> /dev/null | cut -b10)\n  if [[ \"${seccomp}\" == \"1\" ]]; then\n    echo_message '\\033[32mSeccomp strict\\033[m   ' 'Seccomp strict,' ' seccomp=\"strict\"' '\"seccomp\":\"strict\",'\n  elif [[ \"${seccomp}\" == \"2\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 42,
                  "endLine": 54,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    # check if compiled with Clang SafeStack\n    $debug && echo -e \"\\n***function proccheck->safestack\"\n    if $readelf -s \"$1/exe\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                    "rendered": {
                      "text": "\n    # check if compiled with Clang SafeStack\n    $debug && echo -e \"\\n***function proccheck->safestack\"\n    if $readelf -s \"$1/exe\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                      "markdown": "`\n    # check if compiled with Clang SafeStack\n    $debug && echo -e \"\\n***function proccheck->safestack\"\n    if $readelf -s \"$1/exe\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 63,
                  "endLine": 46,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n    if [ -n \"$cfifunc\" ] && $readelf -s \"$1/exe\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                    "rendered": {
                      "text": "    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n    if [ -n \"$cfifunc\" ] && $readelf -s \"$1/exe\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                      "markdown": "`    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n    if [ -n \"$cfifunc\" ] && $readelf -s \"$1/exe\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 80,
                  "endLine": 42,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                    "rendered": {
                      "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                      "markdown": "`    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 65,
                  "endLine": 42,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                    "rendered": {
                      "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                      "markdown": "`    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 38,
                  "endLine": 41,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n",
                    "rendered": {
                      "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n",
                      "markdown": "`  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 61,
                  "endLine": 25,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 46,
                  "endLine": 25,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 44,
                  "endLine": 24,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n",
                      "markdown": "`  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 112,
                  "endLine": 10,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                    "rendered": {
                      "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                      "markdown": "`  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 48,
                  "endLine": 10,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                    "rendered": {
                      "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                      "markdown": "`  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 46,
                  "endLine": 9,
                  "endColumn": 52,
                  "snippet": {
                    "text": "proccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n",
                    "rendered": {
                      "text": "proccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n",
                      "markdown": "`proccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 44,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "# check process(es)\nproccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n",
                    "rendered": {
                      "text": "# check process(es)\nproccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n",
                      "markdown": "`# check process(es)\nproccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\nproccheck() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\nproccheck() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\nproccheck() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/functions/proccheck.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n# these top lines are moved during build\n\n# check process(es)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 25,
                  "endLine": 116,
                  "endColumn": 34,
                  "snippet": {
                    "text": "done\n\nif [[ -z ${readelf} ]]; then\n  echo -e \"\\n\\e[31mERROR: readelf is a required tool for almost all tests. Aborting...\\e[0m\\n\"\n  exit\nfi\n\n",
                    "rendered": {
                      "text": "done\n\nif [[ -z ${readelf} ]]; then\n  echo -e \"\\n\\e[31mERROR: readelf is a required tool for almost all tests. Aborting...\\e[0m\\n\"\n  exit\nfi\n\n",
                      "markdown": "`done\n\nif [[ -z ${readelf} ]]; then\n  echo -e \"\\n\\e[31mERROR: readelf is a required tool for almost all tests. Aborting...\\e[0m\\n\"\n  exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 14,
                  "endLine": 108,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  fi\n}\n\nfor command in readelf eu-readelf greadelf; do\n  if (command_exists ${command}); then\n    readelf=\"${command} -W\"\n    break\n",
                    "rendered": {
                      "text": "  fi\n}\n\nfor command in readelf eu-readelf greadelf; do\n  if (command_exists ${command}); then\n    readelf=\"${command} -W\"\n    break\n",
                      "markdown": "`  fi\n}\n\nfor command in readelf eu-readelf greadelf; do\n  if (command_exists ${command}); then\n    readelf=\"${command} -W\"\n    break\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 10,
                  "endLine": 92,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n        FS_libc=$(find \"${LIBC_SEARCH_PATH}\" \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      # if ldconfig failed, then as a last resort search for libc in \"/lib/\", \"/lib64/\" and \"/\"\n      else\n        FS_libc=$(find /lib/ /lib64/ / \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      fi\n",
                    "rendered": {
                      "text": "      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n        FS_libc=$(find \"${LIBC_SEARCH_PATH}\" \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      # if ldconfig failed, then as a last resort search for libc in \"/lib/\", \"/lib64/\" and \"/\"\n      else\n        FS_libc=$(find /lib/ /lib64/ / \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      fi\n",
                      "markdown": "`      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n        FS_libc=$(find \"${LIBC_SEARCH_PATH}\" \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      # if ldconfig failed, then as a last resort search for libc in \"/lib/\", \"/lib64/\" and \"/\"\n      else\n        FS_libc=$(find /lib/ /lib64/ / \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 35,
                  "endLine": 87,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n    if [[ -z ${FS_libc} ]]; then\n      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n",
                    "rendered": {
                      "text": "      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n    if [[ -z ${FS_libc} ]]; then\n      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n",
                      "markdown": "`      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n    if [[ -z ${FS_libc} ]]; then\n      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 66,
                  "endLine": 84,
                  "endColumn": 72,
                  "snippet": {
                    "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                    "rendered": {
                      "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                      "markdown": "`      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 47,
                  "endLine": 84,
                  "endColumn": 52,
                  "snippet": {
                    "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                    "rendered": {
                      "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                      "markdown": "`      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 29,
                  "endLine": 84,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                    "rendered": {
                      "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                      "markdown": "`      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 67,
                  "endLine": 83,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                    "rendered": {
                      "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                      "markdown": "`        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 48,
                  "endLine": 83,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                    "rendered": {
                      "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                      "markdown": "`        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 30,
                  "endLine": 83,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                    "rendered": {
                      "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                      "markdown": "`        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 19,
                  "endLine": 82,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      elif [[ -d \"${LIBC_FILE}\" ]]; then\n        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n",
                    "rendered": {
                      "text": "      elif [[ -d \"${LIBC_FILE}\" ]]; then\n        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n",
                      "markdown": "`      elif [[ -d \"${LIBC_FILE}\" ]]; then\n        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 122,
                  "endLine": 59,
                  "endColumn": 129,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 87,
                  "endLine": 59,
                  "endColumn": 93,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 77,
                  "endLine": 59,
                  "endColumn": 83,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 54,
                  "endLine": 59,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 22,
                  "endLine": 59,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 14,
                  "endLine": 59,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 7,
                  "endLine": 3,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\nexport LC_ALL=\"C\"\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\nexport LC_ALL=\"C\"\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\nexport LC_ALL=\"C\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/src/core.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154,SC2034\n# these top lines are moved during build\n\n# set global lang to C\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/zsh/README.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 21,
                  "endLine": 1,
                  "endColumn": 26,
                  "snippet": {
                    "text": "A completion file for zsh was added which can just be put into a directory of zsh's $fpath\n(e.g. on gentoo into /usr/share/zsh/site-functions/)\n",
                    "rendered": {
                      "text": "A completion file for zsh was added which can just be put into a directory of zsh's $fpath\n(e.g. on gentoo into /usr/share/zsh/site-functions/)\n",
                      "markdown": "`A completion file for zsh was added which can just be put into a directory of zsh's $fpath\n(e.g. on gentoo into /usr/share/zsh/site-functions/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/rpm/checksec.spec"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 3,
                  "snippet": {
                    "text": "checksec can check binary-files and running processes for hardening\nfeatures.\n\n%prep\ncp -p %{SOURCE1} ChangeLog\n\n%install\nrm -rf $RPM_BUILD_ROOT\n",
                    "rendered": {
                      "text": "checksec can check binary-files and running processes for hardening\nfeatures.\n\n%prep\ncp -p %{SOURCE1} ChangeLog\n\n%install\nrm -rf $RPM_BUILD_ROOT\n",
                      "markdown": "`checksec can check binary-files and running processes for hardening\nfeatures.\n\n%prep\ncp -p %{SOURCE1} ChangeLog\n\n%install\nrm -rf $RPM_BUILD_ROOT\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/rpm/checksec.spec"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 29,
                  "snippet": {
                    "text": "The checksec script is designed to test what *standard* Linux OS and\nPaX <http://pax.grsecurity.net/> security features are being used.\n\nAs of version 1.3 the script also lists the status of various Linux\nkernel protection mechanisms.\n\nchecksec can check binary-files and running processes for hardening\n",
                    "rendered": {
                      "text": "The checksec script is designed to test what *standard* Linux OS and\nPaX <http://pax.grsecurity.net/> security features are being used.\n\nAs of version 1.3 the script also lists the status of various Linux\nkernel protection mechanisms.\n\nchecksec can check binary-files and running processes for hardening\n",
                      "markdown": "`The checksec script is designed to test what *standard* Linux OS and\nPaX <http://pax.grsecurity.net/> security features are being used.\n\nAs of version 1.3 the script also lists the status of various Linux\nkernel protection mechanisms.\n\nchecksec can check binary-files and running processes for hardening\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/extras/rpm/checksec.spec"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 12,
                  "endLine": 22,
                  "endColumn": 20,
                  "snippet": {
                    "text": "made reliably exploiting any vulnerabilities that do exist far more\nchallenging.\n\nThe checksec script is designed to test what *standard* Linux OS and\nPaX <http://pax.grsecurity.net/> security features are being used.\n\nAs of version 1.3 the script also lists the status of various Linux\n",
                    "rendered": {
                      "text": "made reliably exploiting any vulnerabilities that do exist far more\nchallenging.\n\nThe checksec script is designed to test what *standard* Linux OS and\nPaX <http://pax.grsecurity.net/> security features are being used.\n\nAs of version 1.3 the script also lists the status of various Linux\n",
                      "markdown": "`made reliably exploiting any vulnerabilities that do exist far more\nchallenging.\n\nThe checksec script is designed to test what *standard* Linux OS and\nPaX <http://pax.grsecurity.net/> security features are being used.\n\nAs of version 1.3 the script also lists the status of various Linux\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/push.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 39,
                  "endLine": 17,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n",
                      "markdown": "`        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/push.yml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n",
                    "rendered": {
                      "text": "        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n",
                      "markdown": "`        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/push.yml"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 21,
                  "endLine": 18,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n",
                    "rendered": {
                      "text": "        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n",
                      "markdown": "`        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Push to Docker Hub\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/push.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 12,
                  "endLine": 12,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: docker build -t slimm609/checksec:latest .\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n        with:\n",
                    "rendered": {
                      "text": "    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: docker build -t slimm609/checksec:latest .\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n        with:\n",
                      "markdown": "`    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: docker build -t slimm609/checksec:latest .\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n        with:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/push.yml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 13,
                  "endLine": 11,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: docker build -t slimm609/checksec:latest .\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n",
                    "rendered": {
                      "text": "    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: docker build -t slimm609/checksec:latest .\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n",
                      "markdown": "`    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: docker build\n        run: docker build -t slimm609/checksec:latest .\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "endLine": 24,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      - name: Checksec tests\n        run: |\n          docker build -t checksec:test -f Dockerfile.ubuntu .\n          docker run -t checksec:test tests/test-checksec.sh\n",
                    "rendered": {
                      "text": "      - name: Checksec tests\n        run: |\n          docker build -t checksec:test -f Dockerfile.ubuntu .\n          docker run -t checksec:test tests/test-checksec.sh\n",
                      "markdown": "`      - name: Checksec tests\n        run: |\n          docker build -t checksec:test -f Dockerfile.ubuntu .\n          docker run -t checksec:test tests/test-checksec.sh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 9,
                  "endLine": 23,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          fi\n      - name: Checksec tests\n        run: |\n          docker build -t checksec:test -f Dockerfile.ubuntu .\n          docker run -t checksec:test tests/test-checksec.sh\n",
                    "rendered": {
                      "text": "          fi\n      - name: Checksec tests\n        run: |\n          docker build -t checksec:test -f Dockerfile.ubuntu .\n          docker run -t checksec:test tests/test-checksec.sh\n",
                      "markdown": "`          fi\n      - name: Checksec tests\n        run: |\n          docker build -t checksec:test -f Dockerfile.ubuntu .\n          docker run -t checksec:test tests/test-checksec.sh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 9,
                  "endLine": 16,
                  "endColumn": 14,
                  "snippet": {
                    "text": "          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n          git status\n          if [[ ! -z $(git status --porcelain) ]]; then\n            echo \"source file differs, checksec needs build\"\n            exit 1\n",
                    "rendered": {
                      "text": "          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n          git status\n          if [[ ! -z $(git status --porcelain) ]]; then\n            echo \"source file differs, checksec needs build\"\n            exit 1\n",
                      "markdown": "`          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n          git status\n          if [[ ! -z $(git status --porcelain) ]]; then\n            echo \"source file differs, checksec needs build\"\n            exit 1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 9,
                  "endLine": 13,
                  "endColumn": 16,
                  "snippet": {
                    "text": "          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n          git status\n",
                    "rendered": {
                      "text": "          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n          git status\n",
                      "markdown": "`          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n          git status\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 9,
                  "endLine": 12,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        run: |\n          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n",
                    "rendered": {
                      "text": "        run: |\n          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n",
                      "markdown": "`        run: |\n          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n          export PATH=${PATH}:${HOME}/bin\n          pre-commit run --all-files\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 9,
                  "endLine": 10,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      - uses: actions/checkout@v3\n      - name: render-checksec\n        run: |\n          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n",
                    "rendered": {
                      "text": "      - uses: actions/checkout@v3\n      - name: render-checksec\n        run: |\n          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n",
                      "markdown": "`      - uses: actions/checkout@v3\n      - name: render-checksec\n        run: |\n          pip install pre-commit\n          mkdir ${HOME}/bin\n          curl -Lo ${HOME}/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.8.0/shfmt_v3.8.0_linux_amd64\n          chmod +x ${HOME}/bin/shfmt\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/workflows/pull_request.yml"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 5,
                  "endLine": 1,
                  "endColumn": 13,
                  "snippet": {
                    "text": "name: docker image test\non: pull_request\njobs:\n  test:\n",
                    "rendered": {
                      "text": "name: docker image test\non: pull_request\njobs:\n  test:\n",
                      "markdown": "`name: docker image test\non: pull_request\njobs:\n  test:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/ISSUE_TEMPLATE.md"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 7,
                  "endLine": 2,
                  "snippet": {
                    "text": "# Issue tracker\n If any of these values are not included, the issue will be closed and not worked\n\n## Issue\n<!--- Tell us what should happen -->\n",
                    "rendered": {
                      "text": "# Issue tracker\n If any of these values are not included, the issue will be closed and not worked\n\n## Issue\n<!--- Tell us what should happen -->\n",
                      "markdown": "`# Issue tracker\n If any of these values are not included, the issue will be closed and not worked\n\n## Issue\n<!--- Tell us what should happen -->\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 23,
                  "endLine": 2,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file\n\n",
                    "rendered": {
                      "text": "# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file\n\n",
                      "markdown": "`# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.github/dependabot.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 30,
                  "endLine": 13,
                  "snippet": {
                    "text": "    directory: \"/\" # Location of package manifests\n    schedule:\n      interval: \"weekly\"\n  # Enable version updates for Docker\n  - package-ecosystem: \"docker\"\n    # Look for a `Dockerfile` in the `root` directory\n    directory: \"/\"\n    # Check for updates once a week\n",
                    "rendered": {
                      "text": "    directory: \"/\" # Location of package manifests\n    schedule:\n      interval: \"weekly\"\n  # Enable version updates for Docker\n  - package-ecosystem: \"docker\"\n    # Look for a `Dockerfile` in the `root` directory\n    directory: \"/\"\n    # Check for updates once a week\n",
                      "markdown": "`    directory: \"/\" # Location of package manifests\n    schedule:\n      interval: \"weekly\"\n  # Enable version updates for Docker\n  - package-ecosystem: \"docker\"\n    # Look for a `Dockerfile` in the `root` directory\n    directory: \"/\"\n    # Check for updates once a week\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n- repo: https://github.com/pre-commit/pre-commit-hooks\n",
                    "rendered": {
                      "text": "    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n- repo: https://github.com/pre-commit/pre-commit-hooks\n",
                      "markdown": "`    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n- repo: https://github.com/pre-commit/pre-commit-hooks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n",
                    "rendered": {
                      "text": "  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n",
                      "markdown": "`  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n- repo: https://github.com/pre-commit/pre-commit-hooks\n",
                    "rendered": {
                      "text": "    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n- repo: https://github.com/pre-commit/pre-commit-hooks\n",
                      "markdown": "`    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n- repo: https://github.com/pre-commit/pre-commit-hooks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 16,
                  "endLine": 10,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    language: system\n    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n",
                    "rendered": {
                      "text": "    language: system\n    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n",
                      "markdown": "`    language: system\n    pass_filenames: false\n  - id: enable_hooks\n    name: enable git hooks\n    entry: bash ./hack/enable-git-hooks.sh\n    language: system\n    pass_filenames: false\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n",
                    "rendered": {
                      "text": "  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n",
                      "markdown": "`  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 24,
                  "endLine": 6,
                  "snippet": {
                    "text": "- repo: local\n  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n",
                    "rendered": {
                      "text": "- repo: local\n  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n",
                      "markdown": "`- repo: local\n  hooks:\n  - id: build_checksec\n    name: build checksec script\n    entry: bash ./hack/build.sh\n    language: system\n    pass_filenames: false\n  - id: enable_hooks\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile.ubuntu"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 19,
                  "endLine": 3,
                  "endColumn": 27,
                  "snippet": {
                    "text": "FROM ubuntu:24.04\n\n# install the build script and run it.\n# this is to give more flexiblity to the build process\nCOPY tests/docker-build.sh /tmp\nRUN /tmp/docker-build.sh\n",
                    "rendered": {
                      "text": "FROM ubuntu:24.04\n\n# install the build script and run it.\n# this is to give more flexiblity to the build process\nCOPY tests/docker-build.sh /tmp\nRUN /tmp/docker-build.sh\n",
                      "markdown": "`FROM ubuntu:24.04\n\n# install the build script and run it.\n# this is to give more flexiblity to the build process\nCOPY tests/docker-build.sh /tmp\nRUN /tmp/docker-build.sh\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 22,
                  "endLine": 236,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  * checksec.sh: Updated to version 1.6\n  * checksec.sh: Implemented rev numbers and --update option\n  * checksec.sh: Added SELinux checks as additional checks for kernel security.\n  * checksec.sh: Added update option to pull the latest release\n  * checksec.sh: Added fortify_source to proc-all output.\n  * checksec.sh: Added Json, strict XML and updated Grsecurity section.\n  * checksec.sh: Carried over Robin David's changes with XML and CSV.\n",
                    "rendered": {
                      "text": "  * checksec.sh: Updated to version 1.6\n  * checksec.sh: Implemented rev numbers and --update option\n  * checksec.sh: Added SELinux checks as additional checks for kernel security.\n  * checksec.sh: Added update option to pull the latest release\n  * checksec.sh: Added fortify_source to proc-all output.\n  * checksec.sh: Added Json, strict XML and updated Grsecurity section.\n  * checksec.sh: Carried over Robin David's changes with XML and CSV.\n",
                      "markdown": "`  * checksec.sh: Updated to version 1.6\n  * checksec.sh: Implemented rev numbers and --update option\n  * checksec.sh: Added SELinux checks as additional checks for kernel security.\n  * checksec.sh: Added update option to pull the latest release\n  * checksec.sh: Added fortify_source to proc-all output.\n  * checksec.sh: Added Json, strict XML and updated Grsecurity section.\n  * checksec.sh: Carried over Robin David's changes with XML and CSV.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 52,
                  "endLine": 163,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  * checksec.sh: resolved issue with eu-readelf debug\n  * checksec.sh: shellcheck cleanup\nRev-2017080801 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Cleaned up if statements for proper bash expressions\nRev-2016102701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: updated to 1.7.5\n  * checksec.sh: added OSX support\n",
                    "rendered": {
                      "text": "  * checksec.sh: resolved issue with eu-readelf debug\n  * checksec.sh: shellcheck cleanup\nRev-2017080801 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Cleaned up if statements for proper bash expressions\nRev-2016102701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: updated to 1.7.5\n  * checksec.sh: added OSX support\n",
                      "markdown": "`  * checksec.sh: resolved issue with eu-readelf debug\n  * checksec.sh: shellcheck cleanup\nRev-2017080801 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Cleaned up if statements for proper bash expressions\nRev-2016102701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: updated to 1.7.5\n  * checksec.sh: added OSX support\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 16,
                  "endLine": 84,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      Thanks @ja-pa\n  * checksec.sh: Support for list file modifier\n      Thanks @dsuarezv\n  * checksec.sh: Update license\n      Thanks @mr-segfault\nRev-2020052701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 2.2.0\n",
                    "rendered": {
                      "text": "      Thanks @ja-pa\n  * checksec.sh: Support for list file modifier\n      Thanks @dsuarezv\n  * checksec.sh: Update license\n      Thanks @mr-segfault\nRev-2020052701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 2.2.0\n",
                      "markdown": "`      Thanks @ja-pa\n  * checksec.sh: Support for list file modifier\n      Thanks @dsuarezv\n  * checksec.sh: Update license\n      Thanks @mr-segfault\nRev-2020052701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 2.2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "endLine": 66,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  * split checksec into multiple files for easier maintenance and debugging\n  * remove space between options and only support `=` until refactor can happen\n  * Add pre-commit-checks\n  * update License.txt to include BSD license\n    Thanks @mr-segfault\n  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n",
                    "rendered": {
                      "text": "  * split checksec into multiple files for easier maintenance and debugging\n  * remove space between options and only support `=` until refactor can happen\n  * Add pre-commit-checks\n  * update License.txt to include BSD license\n    Thanks @mr-segfault\n  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n",
                      "markdown": "`  * split checksec into multiple files for easier maintenance and debugging\n  * remove space between options and only support `=` until refactor can happen\n  * Add pre-commit-checks\n  * update License.txt to include BSD license\n    Thanks @mr-segfault\n  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 3,
                  "endLine": 62,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  * add missing libc on LoongArch-64\n    Thanks @xiaoxiaoafeifei\nRev-2021101001 Brian Davis <slimm609@gmail.com>\n  * update to 2.5.0\n  * split checksec into multiple files for easier maintenance and debugging\n  * remove space between options and only support `=` until refactor can happen\n  * Add pre-commit-checks\n",
                    "rendered": {
                      "text": "  * add missing libc on LoongArch-64\n    Thanks @xiaoxiaoafeifei\nRev-2021101001 Brian Davis <slimm609@gmail.com>\n  * update to 2.5.0\n  * split checksec into multiple files for easier maintenance and debugging\n  * remove space between options and only support `=` until refactor can happen\n  * Add pre-commit-checks\n",
                      "markdown": "`  * add missing libc on LoongArch-64\n    Thanks @xiaoxiaoafeifei\nRev-2021101001 Brian Davis <slimm609@gmail.com>\n  * update to 2.5.0\n  * split checksec into multiple files for easier maintenance and debugging\n  * remove space between options and only support `=` until refactor can happen\n  * Add pre-commit-checks\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 3,
                  "endLine": 54,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  * Check fortify vs fortified\n    Thanks @azat\nRev-2022052701 Brian Davis <slimm609@gmail.com>\n  * update to 2.6.0\n  * fix missing sysctl on fedora\n    Thanks @spdfnet\n  * remove extra parenthesis\n",
                    "rendered": {
                      "text": "  * Check fortify vs fortified\n    Thanks @azat\nRev-2022052701 Brian Davis <slimm609@gmail.com>\n  * update to 2.6.0\n  * fix missing sysctl on fedora\n    Thanks @spdfnet\n  * remove extra parenthesis\n",
                      "markdown": "`  * Check fortify vs fortified\n    Thanks @azat\nRev-2022052701 Brian Davis <slimm609@gmail.com>\n  * update to 2.6.0\n  * fix missing sysctl on fedora\n    Thanks @spdfnet\n  * remove extra parenthesis\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 3,
                  "endLine": 15,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    Thanks @cgzones\n  * Fix Nx checks\n  * Move github primary branch from master to main\n  * Update gitattributes\n    Thanks @calebTree\n  * Allow setting a libc file\n    Thanks @sreschke80\n",
                    "rendered": {
                      "text": "    Thanks @cgzones\n  * Fix Nx checks\n  * Move github primary branch from master to main\n  * Update gitattributes\n    Thanks @calebTree\n  * Allow setting a libc file\n    Thanks @sreschke80\n",
                      "markdown": "`    Thanks @cgzones\n  * Fix Nx checks\n  * Move github primary branch from master to main\n  * Update gitattributes\n    Thanks @calebTree\n  * Allow setting a libc file\n    Thanks @sreschke80\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 3,
                  "endLine": 8,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  * Fix duplicate entries in fortify count\n  * update tests\nRev-2024042101 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.0\n  * libc cleanup\n  * Added github pages\n  * Check kernel for YAMA\n",
                    "rendered": {
                      "text": "  * Fix duplicate entries in fortify count\n  * update tests\nRev-2024042101 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.0\n  * libc cleanup\n  * Added github pages\n  * Check kernel for YAMA\n",
                      "markdown": "`  * Fix duplicate entries in fortify count\n  * update tests\nRev-2024042101 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.0\n  * libc cleanup\n  * Added github pages\n  * Check kernel for YAMA\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  * checksec FORTIFY detection (#236)\n    Thanks @teoberi\n  * Fix duplicate entries in fortify count\n  * update tests\nRev-2024042101 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.0\n  * libc cleanup\n",
                    "rendered": {
                      "text": "  * checksec FORTIFY detection (#236)\n    Thanks @teoberi\n  * Fix duplicate entries in fortify count\n  * update tests\nRev-2024042101 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.0\n  * libc cleanup\n",
                      "markdown": "`  * checksec FORTIFY detection (#236)\n    Thanks @teoberi\n  * Fix duplicate entries in fortify count\n  * update tests\nRev-2024042101 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.0\n  * libc cleanup\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 3,
                  "endLine": 2,
                  "endColumn": 11,
                  "snippet": {
                    "text": "Rev-2024042601 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.1\n  * checksec FORTIFY detection (#236)\n    Thanks @teoberi\n  * Fix duplicate entries in fortify count\n",
                    "rendered": {
                      "text": "Rev-2024042601 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.1\n  * checksec FORTIFY detection (#236)\n    Thanks @teoberi\n  * Fix duplicate entries in fortify count\n",
                      "markdown": "`Rev-2024042601 Brian Davis <slimm609@gmail.com>\n  * Update to 2.7.1\n  * checksec FORTIFY detection (#236)\n    Thanks @teoberi\n  * Fix duplicate entries in fortify count\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 5,
                  "endLine": 260,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n  * Lots of other bugfixes and improvements\n    - Check if the readelf command is available\n    - readelf support for 64-bit ELF files\n    - Check if the requested files and directories do exist\n    - '--dir' is now case-sensitive and correctly deals with\n      trailing slashes\n",
                    "rendered": {
                      "text": "\n  * Lots of other bugfixes and improvements\n    - Check if the readelf command is available\n    - readelf support for 64-bit ELF files\n    - Check if the requested files and directories do exist\n    - '--dir' is now case-sensitive and correctly deals with\n      trailing slashes\n",
                      "markdown": "`\n  * Lots of other bugfixes and improvements\n    - Check if the readelf command is available\n    - readelf support for 64-bit ELF files\n    - Check if the requested files and directories do exist\n    - '--dir' is now case-sensitive and correctly deals with\n      trailing slashes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 18,
                  "endLine": 259,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  * Support for FORTIFY_SOURCE (--fortify-file, --fortify-proc)\n\n  * Lots of other bugfixes and improvements\n    - Check if the readelf command is available\n    - readelf support for 64-bit ELF files\n    - Check if the requested files and directories do exist\n    - '--dir' is now case-sensitive and correctly deals with\n",
                    "rendered": {
                      "text": "  * Support for FORTIFY_SOURCE (--fortify-file, --fortify-proc)\n\n  * Lots of other bugfixes and improvements\n    - Check if the readelf command is available\n    - readelf support for 64-bit ELF files\n    - Check if the requested files and directories do exist\n    - '--dir' is now case-sensitive and correctly deals with\n",
                      "markdown": "`  * Support for FORTIFY_SOURCE (--fortify-file, --fortify-proc)\n\n  * Lots of other bugfixes and improvements\n    - Check if the readelf command is available\n    - readelf support for 64-bit ELF files\n    - Check if the requested files and directories do exist\n    - '--dir' is now case-sensitive and correctly deals with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 26,
                  "endLine": 177,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  * checksec.sh: added pkg_release option to disable updates for packaged releases\n  * checksec.sh: cleanup up proc-libs\nRev-2016021501 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: merged in zsh completion\n      Thanks Vaeth\n  * checksec.sh: added man page for checksec\n  * checksec.sh: updated readme to reflect output in place of format option\n",
                    "rendered": {
                      "text": "  * checksec.sh: added pkg_release option to disable updates for packaged releases\n  * checksec.sh: cleanup up proc-libs\nRev-2016021501 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: merged in zsh completion\n      Thanks Vaeth\n  * checksec.sh: added man page for checksec\n  * checksec.sh: updated readme to reflect output in place of format option\n",
                      "markdown": "`  * checksec.sh: added pkg_release option to disable updates for packaged releases\n  * checksec.sh: cleanup up proc-libs\nRev-2016021501 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: merged in zsh completion\n      Thanks Vaeth\n  * checksec.sh: added man page for checksec\n  * checksec.sh: updated readme to reflect output in place of format option\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 52,
                  "endLine": 163,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  * checksec.sh: resolved issue with eu-readelf debug\n  * checksec.sh: shellcheck cleanup\nRev-2017080801 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Cleaned up if statements for proper bash expressions\nRev-2016102701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: updated to 1.7.5\n  * checksec.sh: added OSX support\n",
                    "rendered": {
                      "text": "  * checksec.sh: resolved issue with eu-readelf debug\n  * checksec.sh: shellcheck cleanup\nRev-2017080801 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Cleaned up if statements for proper bash expressions\nRev-2016102701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: updated to 1.7.5\n  * checksec.sh: added OSX support\n",
                      "markdown": "`  * checksec.sh: resolved issue with eu-readelf debug\n  * checksec.sh: shellcheck cleanup\nRev-2017080801 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Cleaned up if statements for proper bash expressions\nRev-2016102701 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: updated to 1.7.5\n  * checksec.sh: added OSX support\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 22,
                  "endLine": 124,
                  "endColumn": 30,
                  "snippet": {
                    "text": "Rev-2019011901 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 1.11.1\n  * checksec.sh: resolved issues with readelf\n  * checksec.sh: Added docker images for testing\n  * checksec.sh: Added armhf and aarch64 libc locations\n      Thanks Avamander\n  * checksec.sh: Replace FS_COUNT with fgrep\n",
                    "rendered": {
                      "text": "Rev-2019011901 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 1.11.1\n  * checksec.sh: resolved issues with readelf\n  * checksec.sh: Added docker images for testing\n  * checksec.sh: Added armhf and aarch64 libc locations\n      Thanks Avamander\n  * checksec.sh: Replace FS_COUNT with fgrep\n",
                      "markdown": "`Rev-2019011901 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 1.11.1\n  * checksec.sh: resolved issues with readelf\n  * checksec.sh: Added docker images for testing\n  * checksec.sh: Added armhf and aarch64 libc locations\n      Thanks Avamander\n  * checksec.sh: Replace FS_COUNT with fgrep\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 37,
                  "endLine": 124,
                  "snippet": {
                    "text": "  * checksec.sh: fixed fortify source catching false positives\nRev-2019011901 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 1.11.1\n  * checksec.sh: resolved issues with readelf\n  * checksec.sh: Added docker images for testing\n  * checksec.sh: Added armhf and aarch64 libc locations\n      Thanks Avamander\n  * checksec.sh: Replace FS_COUNT with fgrep\n",
                    "rendered": {
                      "text": "  * checksec.sh: fixed fortify source catching false positives\nRev-2019011901 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 1.11.1\n  * checksec.sh: resolved issues with readelf\n  * checksec.sh: Added docker images for testing\n  * checksec.sh: Added armhf and aarch64 libc locations\n      Thanks Avamander\n  * checksec.sh: Replace FS_COUNT with fgrep\n",
                      "markdown": "`  * checksec.sh: fixed fortify source catching false positives\nRev-2019011901 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 1.11.1\n  * checksec.sh: resolved issues with readelf\n  * checksec.sh: Added docker images for testing\n  * checksec.sh: Added armhf and aarch64 libc locations\n      Thanks Avamander\n  * checksec.sh: Replace FS_COUNT with fgrep\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 36,
                  "endLine": 117,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      Thanks etke\n  * checksec.sh: Fix --proc-libs json output\n      Thanks etke\n  * checksec.sh: Fixed some calls to readelf missing stderr redirection to /dev/null\n      Thanks areisbr\n  * checksec.sh: fixed several issues around json and xml formatting\n  * checksec.sh: fixed fortify source catching false positives\n",
                    "rendered": {
                      "text": "      Thanks etke\n  * checksec.sh: Fix --proc-libs json output\n      Thanks etke\n  * checksec.sh: Fixed some calls to readelf missing stderr redirection to /dev/null\n      Thanks areisbr\n  * checksec.sh: fixed several issues around json and xml formatting\n  * checksec.sh: fixed fortify source catching false positives\n",
                      "markdown": "`      Thanks etke\n  * checksec.sh: Fix --proc-libs json output\n      Thanks etke\n  * checksec.sh: Fixed some calls to readelf missing stderr redirection to /dev/null\n      Thanks areisbr\n  * checksec.sh: fixed several issues around json and xml formatting\n  * checksec.sh: fixed fortify source catching false positives\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 20,
                  "endLine": 98,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      Thanks @cgzones\n  * checksec.sh: improve core dump checks\n      Thanks @cgzones\n  * checksec.sh: Run readelf in wide mode\n      Thanks @cgzones\nRev-2019061301 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 2.0.0 - Breaking changes in options, no longer support short options\n",
                    "rendered": {
                      "text": "      Thanks @cgzones\n  * checksec.sh: improve core dump checks\n      Thanks @cgzones\n  * checksec.sh: Run readelf in wide mode\n      Thanks @cgzones\nRev-2019061301 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 2.0.0 - Breaking changes in options, no longer support short options\n",
                      "markdown": "`      Thanks @cgzones\n  * checksec.sh: improve core dump checks\n      Thanks @cgzones\n  * checksec.sh: Run readelf in wide mode\n      Thanks @cgzones\nRev-2019061301 Brian Davis <slimm609@gmail.com>\n  * checksec.sh: Updated to 2.0.0 - Breaking changes in options, no longer support short options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 9,
                  "endLine": 71,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n  * Add photon support for tests\n  * Check journalctl -k for NX protection\n    Thanks @Tatsh\n  * improve debug formatting\n    Thanks @bmwiedemann\n",
                    "rendered": {
                      "text": "  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n  * Add photon support for tests\n  * Check journalctl -k for NX protection\n    Thanks @Tatsh\n  * improve debug formatting\n    Thanks @bmwiedemann\n",
                      "markdown": "`  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n  * Add photon support for tests\n  * Check journalctl -k for NX protection\n    Thanks @Tatsh\n  * improve debug formatting\n    Thanks @bmwiedemann\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 26,
                  "endLine": 68,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  * Add pre-commit-checks\n  * update License.txt to include BSD license\n    Thanks @mr-segfault\n  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n  * Add photon support for tests\n  * Check journalctl -k for NX protection\n",
                    "rendered": {
                      "text": "  * Add pre-commit-checks\n  * update License.txt to include BSD license\n    Thanks @mr-segfault\n  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n  * Add photon support for tests\n  * Check journalctl -k for NX protection\n",
                      "markdown": "`  * Add pre-commit-checks\n  * update License.txt to include BSD license\n    Thanks @mr-segfault\n  * Move to new Arch Linux docker images\n    Thanks @Maryse47\n  * Add photon support for tests\n  * Check journalctl -k for NX protection\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 37,
                  "endLine": 46,
                  "snippet": {
                    "text": "    Thanks @petervas\n  * Speed up FS_comparison by 10x\n    Thanks @Artoria2e5\n  * Make shellcheck only run on final script\n    Thanks @Artoria2e5\n  * Fix debug exit check\n    Thanks @katexochen\n  * Use Dynamic Section if there is no symbols table\n",
                    "rendered": {
                      "text": "    Thanks @petervas\n  * Speed up FS_comparison by 10x\n    Thanks @Artoria2e5\n  * Make shellcheck only run on final script\n    Thanks @Artoria2e5\n  * Fix debug exit check\n    Thanks @katexochen\n  * Use Dynamic Section if there is no symbols table\n",
                      "markdown": "`    Thanks @petervas\n  * Speed up FS_comparison by 10x\n    Thanks @Artoria2e5\n  * Make shellcheck only run on final script\n    Thanks @Artoria2e5\n  * Fix debug exit check\n    Thanks @katexochen\n  * Use Dynamic Section if there is no symbols table\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/ChangeLog"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 11,
                  "endLine": 34,
                  "snippet": {
                    "text": "    Thanks @petervas\n  * change default libc search path from / to /lib\n    Thanks @petervas\n  * Cleanup grep\n    Thanks @petervas\n  * Rewrite man page in mdoc\n    Thanks @Artoria2e5\n  * Remove s_readelf\n",
                    "rendered": {
                      "text": "    Thanks @petervas\n  * change default libc search path from / to /lib\n    Thanks @petervas\n  * Cleanup grep\n    Thanks @petervas\n  * Rewrite man page in mdoc\n    Thanks @Artoria2e5\n  * Remove s_readelf\n",
                      "markdown": "`    Thanks @petervas\n  * change default libc search path from / to /lib\n    Thanks @petervas\n  * Cleanup grep\n    Thanks @petervas\n  * Rewrite man page in mdoc\n    Thanks @Artoria2e5\n  * Remove s_readelf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.18.1"
                },
                "region": {
                  "startLine": 6943,
                  "startColumn": 24,
                  "endLine": 6944,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.18.1"
                },
                "region": {
                  "startLine": 5192,
                  "startColumn": 5,
                  "endLine": 5192,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.18.1"
                },
                "region": {
                  "startLine": 7835,
                  "startColumn": 12,
                  "endLine": 7835,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.18.1"
                },
                "region": {
                  "startLine": 3212,
                  "startColumn": 19,
                  "endLine": 3212,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.18.1"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 10,
                  "endLine": 118,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 15123,
                  "startColumn": 13,
                  "endLine": 15123,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_KEY_TYPE=y\nCONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\nCONFIG_SIGNED_PE_FILE_VERIFICATION=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 11728,
                  "startColumn": 31,
                  "endLine": 11729,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 11723,
                  "startColumn": 24,
                  "endLine": 11724,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 8345,
                  "startColumn": 5,
                  "endLine": 8345,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_A8293=y\nCONFIG_DVB_AF9033=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 7408,
                  "startColumn": 30,
                  "endLine": 7408,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\n\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 2491,
                  "startColumn": 19,
                  "endLine": 2491,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_VIRTIO_ATOMIC_ENABLE=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\nCONFIG_ARM_SCMI_POWER_CONTROL=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 2473,
                  "startColumn": 12,
                  "endLine": 2473,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_NEED_DEBUGFS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 15366,
                  "startColumn": 19,
                  "endLine": 15366,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\nCONFIG_DEBUG_KERNEL=y\nCONFIG_DEBUG_MISC=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 15353,
                  "startColumn": 12,
                  "endLine": 15353,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-6.3.1"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 13644,
                  "startColumn": 13,
                  "endLine": 13644,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 10682,
                  "startColumn": 31,
                  "endLine": 10683,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 10677,
                  "startColumn": 24,
                  "endLine": 10678,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 7606,
                  "startColumn": 5,
                  "endLine": 7606,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 6795,
                  "startColumn": 30,
                  "endLine": 6795,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_TTPCI_EEPROM=y\nCONFIG_MEDIA_USB_SUPPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 13850,
                  "startColumn": 19,
                  "endLine": 13850,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 13838,
                  "startColumn": 12,
                  "endLine": 13838,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 12778,
                  "startColumn": 8,
                  "endLine": 12778,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 12774,
                  "startColumn": 1,
                  "endLine": 12774,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.12.1"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 10,
                  "endLine": 92,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.14.1"
                },
                "region": {
                  "startLine": 6534,
                  "startColumn": 24,
                  "endLine": 6535,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.14.1"
                },
                "region": {
                  "startLine": 4908,
                  "startColumn": 5,
                  "endLine": 4908,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=y\nCONFIG_DVB_LNBP22=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.14.1"
                },
                "region": {
                  "startLine": 7358,
                  "startColumn": 12,
                  "endLine": 7358,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_DEFAULT_MESSAGE_LOGLEVEL=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.14.1"
                },
                "region": {
                  "startLine": 3062,
                  "startColumn": 19,
                  "endLine": 3062,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-3.14.1"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 10,
                  "endLine": 112,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 14014,
                  "startColumn": 13,
                  "endLine": 14014,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 10960,
                  "startColumn": 31,
                  "endLine": 10961,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 10955,
                  "startColumn": 24,
                  "endLine": 10956,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 7820,
                  "startColumn": 5,
                  "endLine": 7820,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 7007,
                  "startColumn": 30,
                  "endLine": 7007,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_MEDIA_USB_SUPPORT=y\n\n",
                    "rendered": {
                      "text": "#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_MEDIA_USB_SUPPORT=y\n\n",
                      "markdown": "`#\n\n#\n# Drivers filtered as selected at 'Filter media drivers'\n#\nCONFIG_MEDIA_USB_SUPPORT=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 2455,
                  "startColumn": 19,
                  "endLine": 2455,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_ARM_SCMI_TRANSPORT_SMC=y\nCONFIG_ARM_SCMI_TRANSPORT_VIRTIO=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                    "rendered": {
                      "text": "CONFIG_ARM_SCMI_TRANSPORT_SMC=y\nCONFIG_ARM_SCMI_TRANSPORT_VIRTIO=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n",
                      "markdown": "`CONFIG_ARM_SCMI_TRANSPORT_SMC=y\nCONFIG_ARM_SCMI_TRANSPORT_VIRTIO=y\nCONFIG_ARM_SCMI_POWER_DOMAIN=y\n# end of ARM System Control and Management Interface Protocol\n\nCONFIG_ARM_SCPI_PROTOCOL=y\nCONFIG_ARM_SCPI_POWER_DOMAIN=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 2445,
                  "startColumn": 12,
                  "endLine": 2445,
                  "endColumn": 21,
                  "snippet": {
                    "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n",
                      "markdown": "`#\n\n#\n# ARM System Control and Management Interface Protocol\n#\nCONFIG_ARM_SCMI_PROTOCOL=y\nCONFIG_ARM_SCMI_HAVE_TRANSPORT=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 14227,
                  "startColumn": 19,
                  "endLine": 14227,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG_CORE=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 14214,
                  "startColumn": 12,
                  "endLine": 14214,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 13132,
                  "startColumn": 8,
                  "endLine": 13132,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 13128,
                  "startColumn": 1,
                  "endLine": 13128,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.15.1"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 10,
                  "endLine": 113,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_SCHED_CORE=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 12920,
                  "startColumn": 13,
                  "endLine": 12920,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 10196,
                  "startColumn": 31,
                  "endLine": 10197,
                  "snippet": {
                    "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                    "rendered": {
                      "text": "CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n",
                      "markdown": "`CONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n# end of Active energy metering IC\n\n#\n# Resolver to digital converters\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 10191,
                  "startColumn": 24,
                  "endLine": 10192,
                  "snippet": {
                    "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`# end of Network Analyzer, Impedance Converters\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 7283,
                  "startColumn": 5,
                  "endLine": 7283,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 13112,
                  "startColumn": 19,
                  "endLine": 13112,
                  "endColumn": 26,
                  "snippet": {
                    "text": "CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                    "rendered": {
                      "text": "CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n",
                      "markdown": "`CONFIG_DYNAMIC_DEBUG=y\nCONFIG_SYMBOLIC_ERRNAME=y\nCONFIG_DEBUG_BUGVERBOSE=y\n# end of printk and dmesg options\n\n#\n# Compile-time checks and compiler options\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 13101,
                  "startColumn": 12,
                  "endLine": 13101,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 12095,
                  "startColumn": 8,
                  "endLine": 12095,
                  "endColumn": 13,
                  "snippet": {
                    "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n# end of TEE drivers\n\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 12091,
                  "startColumn": 1,
                  "endLine": 12091,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_OPTEE=y\nCONFIG_OPTEE_SHM_NUM_PRIV_PAGES=1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n",
                      "markdown": "`CONFIG_TASK_IO_ACCOUNTING=y\nCONFIG_PSI=y\nCONFIG_PSI_DEFAULT_DISABLED=y\n# end of CPU/Task time and stats accounting\n\nCONFIG_CPU_ISOLATION=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.7.1"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 10,
                  "endLine": 89,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.1.1"
                },
                "region": {
                  "startLine": 7158,
                  "startColumn": 24,
                  "endLine": 7159,
                  "snippet": {
                    "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                    "rendered": {
                      "text": "CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n",
                      "markdown": "`CONFIG_SENSORS_HMC5843_SPI=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7753=y\nCONFIG_ADE7754=y\nCONFIG_ADE7758=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.1.1"
                },
                "region": {
                  "startLine": 5311,
                  "startColumn": 5,
                  "endLine": 5311,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBP21=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.1.1"
                },
                "region": {
                  "startLine": 8134,
                  "startColumn": 12,
                  "endLine": 8134,
                  "endColumn": 19,
                  "snippet": {
                    "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                    "rendered": {
                      "text": "CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n",
                      "markdown": "`CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.1.1"
                },
                "region": {
                  "startLine": 3273,
                  "startColumn": 19,
                  "endLine": 3273,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-4.1.1"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 10,
                  "endLine": 119,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_HIGH_RES_TIMERS=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 11871,
                  "startColumn": 13,
                  "endLine": 11871,
                  "endColumn": 24,
                  "snippet": {
                    "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                    "rendered": {
                      "text": "CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n",
                      "markdown": "`CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE=y\nCONFIG_ASYMMETRIC_TPM_KEY_SUBTYPE=y\nCONFIG_X509_CERTIFICATE_PARSER=y\nCONFIG_PKCS8_PRIVATE_KEY_PARSER=y\nCONFIG_TPM_KEY_PARSER=y\nCONFIG_PKCS7_MESSAGE_PARSER=y\nCONFIG_PKCS7_TEST_KEY=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 9650,
                  "startColumn": 24,
                  "endLine": 9651,
                  "snippet": {
                    "text": "CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                    "rendered": {
                      "text": "CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n",
                      "markdown": "`CONFIG_AD5933=y\n\n#\n# Active energy metering IC\n#\nCONFIG_ADE7854=y\nCONFIG_ADE7854_I2C=y\nCONFIG_ADE7854_SPI=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 7038,
                  "startColumn": 5,
                  "endLine": 7038,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=y\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_DRX39XYJ=y\nCONFIG_DVB_LNBH25=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 12035,
                  "startColumn": 12,
                  "endLine": 12035,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                    "rendered": {
                      "text": "#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n",
                      "markdown": "`#\n\n#\n# printk and dmesg options\n#\nCONFIG_PRINTK_TIME=y\nCONFIG_PRINTK_CALLER=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 11146,
                  "startColumn": 1,
                  "endLine": 11146,
                  "endColumn": 6,
                  "snippet": {
                    "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                    "rendered": {
                      "text": "CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n",
                      "markdown": "`CONFIG_TEE=y\n\n#\n# TEE drivers\n#\nCONFIG_MULTIPLEXER=y\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 4122,
                  "startColumn": 19,
                  "endLine": 4122,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                    "rendered": {
                      "text": "CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n",
                      "markdown": "`CONFIG_HISAX_DEBUG=y\n\n#\n# HiSax PCMCIA card service modules\n#\nCONFIG_HISAX_SEDLBAUER_CS=y\nCONFIG_HISAX_ELSA_CS=y\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/configs/config-5.1.1"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 10,
                  "endLine": 96,
                  "endColumn": 16,
                  "snippet": {
                    "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                    "rendered": {
                      "text": "CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n",
                      "markdown": "`CONFIG_PREEMPT_COUNT=y\n\n#\n# CPU/Task time and stats accounting\n#\nCONFIG_TICK_CPU_ACCOUNTING=y\n# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 11,
                  "endLine": 4,
                  "endColumn": 19,
                  "snippet": {
                    "text": "FROM ubuntu:bionic\n\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n",
                    "rendered": {
                      "text": "FROM ubuntu:bionic\n\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n",
                      "markdown": "`FROM ubuntu:bionic\n\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 3,
                  "endLine": 10,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\nCOPY build_kernel_configs.sh /root\n",
                    "rendered": {
                      "text": "    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\nCOPY build_kernel_configs.sh /root\n",
                      "markdown": "`    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\nCOPY build_kernel_configs.sh /root\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 16,
                  "endLine": 9,
                  "endColumn": 22,
                  "snippet": {
                    "text": " && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\nCOPY build_kernel_configs.sh /root\n",
                    "rendered": {
                      "text": " && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\nCOPY build_kernel_configs.sh /root\n",
                      "markdown": "` && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\nCOPY build_kernel_configs.sh /root\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 15,
                  "snippet": {
                    "text": " && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\n",
                    "rendered": {
                      "text": " && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\n",
                      "markdown": "` && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n && apt-get clean\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n",
                    "rendered": {
                      "text": "# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n",
                      "markdown": "`# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n    u-boot-tools wget xz-utils             \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n",
                    "rendered": {
                      "text": "\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n",
                      "markdown": "`\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n    ccache git libncurses-dev libssl-dev   \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/Dockerfile"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 12,
                  "snippet": {
                    "text": "FROM ubuntu:bionic\n\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n",
                    "rendered": {
                      "text": "FROM ubuntu:bionic\n\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n",
                      "markdown": "`FROM ubuntu:bionic\n\n# Install dependencies\nRUN apt-get update               \\\n && apt-get -y -q upgrade        \\\n && apt-get -y -q install        \\\n    bc bison flex build-essential          \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/build_kernel_configs.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# Build all yes kernel config for testing different versions\nset -eou pipefail\n\nbuild_config() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# Build all yes kernel config for testing different versions\nset -eou pipefail\n\nbuild_config() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# Build all yes kernel config for testing different versions\nset -eou pipefail\n\nbuild_config() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/build_kernel_configs.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n    cp .config \"/root/configs/config-${major}.${minor}.${revision}\"\n    cd /root\n    rm -rf \"linux-${major}.${minor}.${revision}.tar.xz\" \"linux-${major}.${minor}.${revision}\"\n  fi\n",
                    "rendered": {
                      "text": "    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n    cp .config \"/root/configs/config-${major}.${minor}.${revision}\"\n    cd /root\n    rm -rf \"linux-${major}.${minor}.${revision}.tar.xz\" \"linux-${major}.${minor}.${revision}\"\n  fi\n",
                      "markdown": "`    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n    cp .config \"/root/configs/config-${major}.${minor}.${revision}\"\n    cd /root\n    rm -rf \"linux-${major}.${minor}.${revision}.tar.xz\" \"linux-${major}.${minor}.${revision}\"\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/build_kernel_configs.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 3,
                  "endLine": 13,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  cd /root\n  if [[ ! -s /root/configs/config-${major}.${minor}.${revision} ]]; then\n    wget --no-check-certificate \"https://mirrors.edge.kernel.org/pub/linux/kernel/v${folder}/linux-${major}.${minor}.${revision}.tar.xz\"\n    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n    cp .config \"/root/configs/config-${major}.${minor}.${revision}\"\n",
                    "rendered": {
                      "text": "  cd /root\n  if [[ ! -s /root/configs/config-${major}.${minor}.${revision} ]]; then\n    wget --no-check-certificate \"https://mirrors.edge.kernel.org/pub/linux/kernel/v${folder}/linux-${major}.${minor}.${revision}.tar.xz\"\n    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n    cp .config \"/root/configs/config-${major}.${minor}.${revision}\"\n",
                      "markdown": "`  cd /root\n  if [[ ! -s /root/configs/config-${major}.${minor}.${revision} ]]; then\n    wget --no-check-certificate \"https://mirrors.edge.kernel.org/pub/linux/kernel/v${folder}/linux-${major}.${minor}.${revision}.tar.xz\"\n    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n    cp .config \"/root/configs/config-${major}.${minor}.${revision}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/build_kernel_configs.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  revision=${4:-1}\n  cd /root\n  if [[ ! -s /root/configs/config-${major}.${minor}.${revision} ]]; then\n    wget --no-check-certificate \"https://mirrors.edge.kernel.org/pub/linux/kernel/v${folder}/linux-${major}.${minor}.${revision}.tar.xz\"\n    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n",
                    "rendered": {
                      "text": "  revision=${4:-1}\n  cd /root\n  if [[ ! -s /root/configs/config-${major}.${minor}.${revision} ]]; then\n    wget --no-check-certificate \"https://mirrors.edge.kernel.org/pub/linux/kernel/v${folder}/linux-${major}.${minor}.${revision}.tar.xz\"\n    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n",
                      "markdown": "`  revision=${4:-1}\n  cd /root\n  if [[ ! -s /root/configs/config-${major}.${minor}.${revision} ]]; then\n    wget --no-check-certificate \"https://mirrors.edge.kernel.org/pub/linux/kernel/v${folder}/linux-${major}.${minor}.${revision}.tar.xz\"\n    tar Jxvf \"linux-${major}.${minor}.${revision}.tar.xz\"\n    cd \"linux-${major}.${minor}.${revision}\"\n    make allyesconfig\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/kernel_configs/build_kernel_configs.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# Build all yes kernel config for testing different versions\nset -eou pipefail\n\nbuild_config() {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# Build all yes kernel config for testing different versions\nset -eou pipefail\n\nbuild_config() {\n",
                      "markdown": "`#!/usr/bin/env bash\n# Build all yes kernel config for testing different versions\nset -eou pipefail\n\nbuild_config() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/test-checksec.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# run a quick test of checksec to ensure normal operations.\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# run a quick test of checksec to ensure normal operations.\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                      "markdown": "`#!/usr/bin/env bash\n# run a quick test of checksec to ensure normal operations.\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/test-checksec.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# run a quick test of checksec to ensure normal operations.\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# run a quick test of checksec to ensure normal operations.\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                      "markdown": "`#!/usr/bin/env bash\n# run a quick test of checksec to ensure normal operations.\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 1,
                  "endLine": 151,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"dir xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"dir xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"dir xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 1,
                  "endLine": 140,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-proc xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-proc xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-proc xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 1,
                  "endLine": 129,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-proc xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-proc xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-proc xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 1,
                  "endLine": 118,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-file xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-file xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-file xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 1,
                  "endLine": 107,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-file xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-file xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"fortify-file xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 1,
                  "endLine": 96,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"file xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"file xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"file xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"file xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"file xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"file xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 3,
                  "endLine": 73,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  xmllint --noout \"${DIR}/output.xml\"\n  RET=$?\n  if [ ${RET} != 0 ]; then\n    cat \"${DIR}/output.xml\"\n    echo \"custom kernel xml validation failed\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "  xmllint --noout \"${DIR}/output.xml\"\n  RET=$?\n  if [ ${RET} != 0 ]; then\n    cat \"${DIR}/output.xml\"\n    echo \"custom kernel xml validation failed\"\n    exit 1\n  fi\n",
                      "markdown": "`  xmllint --noout \"${DIR}/output.xml\"\n  RET=$?\n  if [ ${RET} != 0 ]; then\n    cat \"${DIR}/output.xml\"\n    echo \"custom kernel xml validation failed\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"custom kernel json validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"custom kernel json validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"custom kernel json validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"kernel xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"kernel xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"kernel xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 1,
                  "endLine": 40,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"proc-all xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"proc-all xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"proc-all xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 6,
                  "snippet": {
                    "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"proc-all xml validation failed\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"proc-all xml validation failed\"\n  exit 1\nfi\n",
                      "markdown": "`xmllint --noout \"${DIR}/output.xml\"\nRET=$?\nif [ ${RET} != 0 ]; then\n  cat \"${DIR}/output.xml\"\n  echo \"proc-all xml validation failed\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 17,
                  "endLine": 10,
                  "endColumn": 23,
                  "snippet": {
                    "text": "elif [[ -f /bin/ls ]]; then\n  test_file=\"/bin/ls\"\nelse\n  echo \"could not find valid file to test\"\n  exit 255\nfi\n\n",
                    "rendered": {
                      "text": "elif [[ -f /bin/ls ]]; then\n  test_file=\"/bin/ls\"\nelse\n  echo \"could not find valid file to test\"\n  exit 255\nfi\n\n",
                      "markdown": "`elif [[ -f /bin/ls ]]; then\n  test_file=\"/bin/ls\"\nelse\n  echo \"could not find valid file to test\"\n  exit 255\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/xml-checks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n",
                      "markdown": "`#!/usr/bin/env bash\nset -ou pipefail\nif [[ -f /bin/bash ]]; then\n  test_file=\"/bin/bash\"\nelif [[ -f /bin/sh ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/kernel.config"
                },
                "region": {
                  "startLine": 4966,
                  "startColumn": 19,
                  "endLine": 4966,
                  "endColumn": 28,
                  "snippet": {
                    "text": "CONFIG_GRKERNSEC_KERN_LOCKOUT=y\n\n#\n# Role Based Access Control Options\n#\n# CONFIG_GRKERNSEC_NO_RBAC is not set\nCONFIG_GRKERNSEC_ACL_HIDEKERN=y\n",
                    "rendered": {
                      "text": "CONFIG_GRKERNSEC_KERN_LOCKOUT=y\n\n#\n# Role Based Access Control Options\n#\n# CONFIG_GRKERNSEC_NO_RBAC is not set\nCONFIG_GRKERNSEC_ACL_HIDEKERN=y\n",
                      "markdown": "`CONFIG_GRKERNSEC_KERN_LOCKOUT=y\n\n#\n# Role Based Access Control Options\n#\n# CONFIG_GRKERNSEC_NO_RBAC is not set\nCONFIG_GRKERNSEC_ACL_HIDEKERN=y\n`"
                    }
                  },
                  "sourceLanguage": ".config"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/kernel.config"
                },
                "region": {
                  "startLine": 4905,
                  "startColumn": 5,
                  "endLine": 4906,
                  "snippet": {
                    "text": "CONFIG_PAX=y\n\n#\n# PaX Control\n#\n# CONFIG_PAX_SOFTMODE is not set\nCONFIG_PAX_EI_PAX=y\nCONFIG_PAX_PT_PAX_FLAGS=y\n",
                    "rendered": {
                      "text": "CONFIG_PAX=y\n\n#\n# PaX Control\n#\n# CONFIG_PAX_SOFTMODE is not set\nCONFIG_PAX_EI_PAX=y\nCONFIG_PAX_PT_PAX_FLAGS=y\n",
                      "markdown": "`CONFIG_PAX=y\n\n#\n# PaX Control\n#\n# CONFIG_PAX_SOFTMODE is not set\nCONFIG_PAX_EI_PAX=y\nCONFIG_PAX_PT_PAX_FLAGS=y\n`"
                    }
                  },
                  "sourceLanguage": ".config"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/kernel.config"
                },
                "region": {
                  "startLine": 4316,
                  "startColumn": 24,
                  "endLine": 4317,
                  "snippet": {
                    "text": "# CONFIG_SENSORS_HMC5843 is not set\n\n#\n# Active energy metering IC\n#\n# CONFIG_ADE7753 is not set\n# CONFIG_ADE7754 is not set\n# CONFIG_ADE7758 is not set\n",
                    "rendered": {
                      "text": "# CONFIG_SENSORS_HMC5843 is not set\n\n#\n# Active energy metering IC\n#\n# CONFIG_ADE7753 is not set\n# CONFIG_ADE7754 is not set\n# CONFIG_ADE7758 is not set\n",
                      "markdown": "`# CONFIG_SENSORS_HMC5843 is not set\n\n#\n# Active energy metering IC\n#\n# CONFIG_ADE7753 is not set\n# CONFIG_ADE7754 is not set\n# CONFIG_ADE7758 is not set\n`"
                    }
                  },
                  "sourceLanguage": ".config"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/kernel.config"
                },
                "region": {
                  "startLine": 3266,
                  "startColumn": 5,
                  "endLine": 3266,
                  "endColumn": 14,
                  "snippet": {
                    "text": "CONFIG_DVB_TUNER_DIB0090=m\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=m\nCONFIG_DVB_LNBP22=m\n",
                    "rendered": {
                      "text": "CONFIG_DVB_TUNER_DIB0090=m\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=m\nCONFIG_DVB_LNBP22=m\n",
                      "markdown": "`CONFIG_DVB_TUNER_DIB0090=m\n\n#\n# SEC control devices for DVB-S\n#\nCONFIG_DVB_LNBP21=m\nCONFIG_DVB_LNBP22=m\n`"
                    }
                  },
                  "sourceLanguage": ".config"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                      "markdown": "`#!/usr/bin/env bash\n\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 113,
                  "endLine": 445,
                  "endColumn": 118,
                  "snippet": {
                    "text": "for bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\ndone\n",
                    "rendered": {
                      "text": "for bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\ndone\n",
                      "markdown": "`for bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 59,
                  "endLine": 444,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\n",
                      "markdown": "`# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 59,
                  "endLine": 436,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# No\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"No\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# No\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"No\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# No\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"No\" ]]; then\n    echo \"No Fortify process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 59,
                  "endLine": 428,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# Yes\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"Yes\" ]]; then\n    echo \"Fortify process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# Yes\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"Yes\" ]]; then\n    echo \"Fortify process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# Yes\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f8) != \"Yes\" ]]; then\n    echo \"Fortify process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 414,
                  "startColumn": 59,
                  "endLine": 414,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# No PIE\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f7) != \"No PIE\" ]]; then\n    echo \"No PIE process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# No PIE\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f7) != \"No PIE\" ]]; then\n    echo \"No PIE process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# No PIE\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f7) != \"No PIE\" ]]; then\n    echo \"No PIE process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 59,
                  "endLine": 406,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# PIE enabled\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f7) != \"PIE enabled\" ]]; then\n    echo \"PIE enabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# PIE enabled\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f7) != \"PIE enabled\" ]]; then\n    echo \"PIE enabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# PIE enabled\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f7) != \"PIE enabled\" ]]; then\n    echo \"PIE enabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 59,
                  "endLine": 392,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# NX disabled\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f6) != \"NX disabled\" ]]; then\n    echo \"NX disabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# NX disabled\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f6) != \"NX disabled\" ]]; then\n    echo \"NX disabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# NX disabled\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f6) != \"NX disabled\" ]]; then\n    echo \"NX disabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 59,
                  "endLine": 384,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# NX enabled\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f6) != \"NX enabled\" ]]; then\n    echo \"NX enabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# NX enabled\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f6) != \"NX enabled\" ]]; then\n    echo \"NX enabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# NX enabled\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f6) != \"NX enabled\" ]]; then\n    echo \"NX enabled process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 70,
                  "endLine": 370,
                  "endColumn": 75,
                  "snippet": {
                    "text": "# without SafeStack\nfor bin in none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f6) != \"without SafeStack\" ]]; then\n    echo \"No SafeStack process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# without SafeStack\nfor bin in none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f6) != \"without SafeStack\" ]]; then\n    echo \"No SafeStack process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# without SafeStack\nfor bin in none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f6) != \"without SafeStack\" ]]; then\n    echo \"No SafeStack process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 68,
                  "endLine": 363,
                  "endColumn": 73,
                  "snippet": {
                    "text": "# with SafeStack (omit 32-bit SafeStack because the binary does not work)\nbin=sstack\n\"${DIR}\"/binaries/output/${bin} > /dev/null &\nif [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f6) != \"with SafeStack\" ]]; then\n  echo \"SafeStack process validation failed on \\\"${bin}\\\"\"\n  exit 1\nfi\n",
                    "rendered": {
                      "text": "# with SafeStack (omit 32-bit SafeStack because the binary does not work)\nbin=sstack\n\"${DIR}\"/binaries/output/${bin} > /dev/null &\nif [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f6) != \"with SafeStack\" ]]; then\n  echo \"SafeStack process validation failed on \\\"${bin}\\\"\"\n  exit 1\nfi\n",
                      "markdown": "`# with SafeStack (omit 32-bit SafeStack because the binary does not work)\nbin=sstack\n\"${DIR}\"/binaries/output/${bin} > /dev/null &\nif [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f6) != \"with SafeStack\" ]]; then\n  echo \"SafeStack process validation failed on \\\"${bin}\\\"\"\n  exit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 70,
                  "endLine": 349,
                  "endColumn": 75,
                  "snippet": {
                    "text": "# without CFI\nfor bin in none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f5) != \"without CFI\" ]]; then\n    echo \"No CFI process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# without CFI\nfor bin in none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f5) != \"without CFI\" ]]; then\n    echo \"No CFI process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# without CFI\nfor bin in none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f5) != \"without CFI\" ]]; then\n    echo \"No CFI process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 70,
                  "endLine": 341,
                  "endColumn": 75,
                  "snippet": {
                    "text": "# with CFI\nfor bin in cfi cfi32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f5) != \"with CFI\" ]]; then\n    echo \"CFI process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# with CFI\nfor bin in cfi cfi32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f5) != \"with CFI\" ]]; then\n    echo \"CFI process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# with CFI\nfor bin in cfi cfi32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --extended --format=csv | cut -d, -f5) != \"with CFI\" ]]; then\n    echo \"CFI process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 59,
                  "endLine": 327,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# No Canary found\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f4) != \"No Canary found\" ]]; then\n    echo \"No Stack Canary process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# No Canary found\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f4) != \"No Canary found\" ]]; then\n    echo \"No Stack Canary process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# No Canary found\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f4) != \"No Canary found\" ]]; then\n    echo \"No Stack Canary process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 59,
                  "endLine": 319,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# Canary found\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f4) != \"Canary found\" ]]; then\n    echo \"Stack Canary process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# Canary found\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f4) != \"Canary found\" ]]; then\n    echo \"Stack Canary process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# Canary found\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f4) != \"Canary found\" ]]; then\n    echo \"Stack Canary process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 59,
                  "endLine": 305,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# No RELRO\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"No RELRO\" ]]; then\n    echo \"No RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# No RELRO\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"No RELRO\" ]]; then\n    echo \"No RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# No RELRO\nfor bin in none none32 none_cl none_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"No RELRO\" ]]; then\n    echo \"No RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 59,
                  "endLine": 297,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# Partial RELRO\nfor bin in partial partial32 partial_cl partial_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"Partial RELRO\" ]]; then\n    echo \"Partial RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# Partial RELRO\nfor bin in partial partial32 partial_cl partial_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"Partial RELRO\" ]]; then\n    echo \"Partial RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# Partial RELRO\nfor bin in partial partial32 partial_cl partial_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"Partial RELRO\" ]]; then\n    echo \"Partial RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 59,
                  "endLine": 289,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# Full RELRO\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"Full RELRO\" ]]; then\n    echo \"Full RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "# Full RELRO\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"Full RELRO\" ]]; then\n    echo \"Full RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`# Full RELRO\nfor bin in all all32 all_cl all_cl32; do\n  \"${DIR}\"/binaries/output/${bin} > /dev/null &\n  if [[ $(\"${PARENT}\"/checksec --proc=${bin} --format=csv | cut -d, -f3) != \"Full RELRO\" ]]; then\n    echo \"Full RELRO process validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 123,
                  "endLine": 275,
                  "endColumn": 128,
                  "snippet": {
                    "text": "# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/${bin}\" --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\ndone\n",
                    "rendered": {
                      "text": "# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/${bin}\" --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\ndone\n",
                      "markdown": "`# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/${bin}\" --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 84,
                  "endLine": 274,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/${bin}\" --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/${bin}\" --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# N/A\nfor bin in nolibc nolibc_cl nolibc32 nolibc_cl32 fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"N/A\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\": $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/${bin}\" --format=csv | cut -d, -f8)\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 84,
                  "endLine": 267,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# No\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"No\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# No\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"No\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# No\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"No\" ]]; then\n    echo \"No Fortify validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 84,
                  "endLine": 260,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting Fortify check\"\n# Yes\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"Yes\" ]]; then\n    echo \"Fortify validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting Fortify check\"\n# Yes\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"Yes\" ]]; then\n    echo \"Fortify validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting Fortify check\"\n# Yes\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f8) != \"Yes\" ]]; then\n    echo \"Fortify validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 84,
                  "endLine": 248,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# Symbols\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f7) != \"Symbols\" ]]; then\n    echo \"Symbols validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# Symbols\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f7) != \"Symbols\" ]]; then\n    echo \"Symbols validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# Symbols\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f7) != \"Symbols\" ]]; then\n    echo \"Symbols validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 84,
                  "endLine": 241,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting Symbols check\"\n# No Symbols\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f7) != \"No Symbols\" ]]; then\n    echo \"No Symbols validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting Symbols check\"\n# No Symbols\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f7) != \"No Symbols\" ]]; then\n    echo \"No Symbols validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting Symbols check\"\n# No Symbols\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f7) != \"No Symbols\" ]]; then\n    echo \"No Symbols validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 84,
                  "endLine": 229,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"N/A\" ]]; then\n    echo \"N/A RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"N/A\" ]]; then\n    echo \"N/A RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"N/A\" ]]; then\n    echo \"N/A RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 84,
                  "endLine": 222,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# RUNPATH\nfor bin in runpath runpath32 runpath_cl runpath_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"RUNPATH\" ]]; then\n    echo \"RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# RUNPATH\nfor bin in runpath runpath32 runpath_cl runpath_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"RUNPATH\" ]]; then\n    echo \"RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# RUNPATH\nfor bin in runpath runpath32 runpath_cl runpath_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"RUNPATH\" ]]; then\n    echo \"RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 84,
                  "endLine": 215,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting RUNPATH check\"\n# No RUNPATH\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"No RUNPATH\" ]]; then\n    echo \"No RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting RUNPATH check\"\n# No RUNPATH\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"No RUNPATH\" ]]; then\n    echo \"No RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting RUNPATH check\"\n# No RUNPATH\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f6) != \"No RUNPATH\" ]]; then\n    echo \"No RUNPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 84,
                  "endLine": 203,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"N/A\" ]]; then\n    echo \"N/A RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"N/A\" ]]; then\n    echo \"N/A RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"N/A\" ]]; then\n    echo \"N/A RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 84,
                  "endLine": 196,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# RPATH\nfor bin in rpath rpath32 rpath_cl rpath_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"RPATH\" ]]; then\n    echo \"RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# RPATH\nfor bin in rpath rpath32 rpath_cl rpath_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"RPATH\" ]]; then\n    echo \"RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# RPATH\nfor bin in rpath rpath32 rpath_cl rpath_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"RPATH\" ]]; then\n    echo \"RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 84,
                  "endLine": 189,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting RUNPATH check\"\n# No RPATH\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"No RPATH\" ]]; then\n    echo \"No RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting RUNPATH check\"\n# No RPATH\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"No RPATH\" ]]; then\n    echo \"No RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting RUNPATH check\"\n# No RPATH\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f5) != \"No RPATH\" ]]; then\n    echo \"No RPATH validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 95,
                  "endLine": 177,
                  "endColumn": 100,
                  "snippet": {
                    "text": "done\n# without SafeStack\nfor bin in none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f6) != \"without SafeStack\" ]]; then\n    echo \"No SafeStack validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# without SafeStack\nfor bin in none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f6) != \"without SafeStack\" ]]; then\n    echo \"No SafeStack validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# without SafeStack\nfor bin in none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f6) != \"without SafeStack\" ]]; then\n    echo \"No SafeStack validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 95,
                  "endLine": 170,
                  "endColumn": 100,
                  "snippet": {
                    "text": "echo \"Starting SafeStack check\"\n# with SafeStack\nfor bin in sstack sstack32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f6) != \"with SafeStack\" ]]; then\n    echo \"SafeStack validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting SafeStack check\"\n# with SafeStack\nfor bin in sstack sstack32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f6) != \"with SafeStack\" ]]; then\n    echo \"SafeStack validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting SafeStack check\"\n# with SafeStack\nfor bin in sstack sstack32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f6) != \"with SafeStack\" ]]; then\n    echo \"SafeStack validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 95,
                  "endLine": 158,
                  "endColumn": 100,
                  "snippet": {
                    "text": "done\n# without CFI\nfor bin in none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f5) != \"without CFI\" ]]; then\n    echo \"No CFI validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# without CFI\nfor bin in none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f5) != \"without CFI\" ]]; then\n    echo \"No CFI validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# without CFI\nfor bin in none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f5) != \"without CFI\" ]]; then\n    echo \"No CFI validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 95,
                  "endLine": 151,
                  "endColumn": 100,
                  "snippet": {
                    "text": "echo \"Starting CFI check\"\n# with CFI\nfor bin in cfi cfi32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f5) != \"with CFI\" ]]; then\n    echo \"CFI validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting CFI check\"\n# with CFI\nfor bin in cfi cfi32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f5) != \"with CFI\" ]]; then\n    echo \"CFI validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting CFI check\"\n# with CFI\nfor bin in cfi cfi32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --extended --format=csv | cut -d, -f5) != \"with CFI\" ]]; then\n    echo \"CFI validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 84,
                  "endLine": 139,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# REL\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"REL\" ]]; then\n    echo \"PIE REL validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# REL\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"REL\" ]]; then\n    echo \"PIE REL validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# REL\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"REL\" ]]; then\n    echo \"PIE REL validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 84,
                  "endLine": 132,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# DSO\nfor bin in dso.so dso32.so dso_cl.so dso_cl32.so; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"DSO\" ]]; then\n    echo \"PIE DSO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# DSO\nfor bin in dso.so dso32.so dso_cl.so dso_cl32.so; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"DSO\" ]]; then\n    echo \"PIE DSO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# DSO\nfor bin in dso.so dso32.so dso_cl.so dso_cl32.so; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"DSO\" ]]; then\n    echo \"PIE DSO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 84,
                  "endLine": 125,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# No PIE\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"No PIE\" ]]; then\n    echo \"No PIE validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# No PIE\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"No PIE\" ]]; then\n    echo \"No PIE validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# No PIE\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"No PIE\" ]]; then\n    echo \"No PIE validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 84,
                  "endLine": 118,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting PIE check\"\n# PIE enabled\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"PIE enabled\" ]]; then\n    echo \"PIE enabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting PIE check\"\n# PIE enabled\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"PIE enabled\" ]]; then\n    echo \"PIE enabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting PIE check\"\n# PIE enabled\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f4) != \"PIE enabled\" ]]; then\n    echo \"PIE enabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 84,
                  "endLine": 106,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"N/A\" ]]; then\n    echo \"N/A NX validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"N/A\" ]]; then\n    echo \"N/A NX validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"N/A\" ]]; then\n    echo \"N/A NX validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 84,
                  "endLine": 99,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# NX disabled\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"NX disabled\" ]]; then\n    echo \"NX disabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# NX disabled\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"NX disabled\" ]]; then\n    echo \"NX disabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# NX disabled\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"NX disabled\" ]]; then\n    echo \"NX disabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 84,
                  "endLine": 92,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting NX check\"\n# NX enabled\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"NX enabled\" ]]; then\n    echo \"NX enabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting NX check\"\n# NX enabled\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"NX enabled\" ]]; then\n    echo \"NX enabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting NX check\"\n# NX enabled\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f3) != \"NX enabled\" ]]; then\n    echo \"NX enabled validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 84,
                  "endLine": 80,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# No Canary found\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f2) != \"No Canary found\" ]]; then\n    echo \"No Stack Canary validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# No Canary found\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f2) != \"No Canary found\" ]]; then\n    echo \"No Stack Canary validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# No Canary found\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f2) != \"No Canary found\" ]]; then\n    echo \"No Stack Canary validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 84,
                  "endLine": 73,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting Stack Canary check\"\n# Canary found\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f2) != \"Canary found\" ]]; then\n    echo \"Stack Canary validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting Stack Canary check\"\n# Canary found\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f2) != \"Canary found\" ]]; then\n    echo \"Stack Canary validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting Stack Canary check\"\n# Canary found\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f2) != \"Canary found\" ]]; then\n    echo \"Stack Canary validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 84,
                  "endLine": 61,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"N/A\" ]]; then\n    echo \"N/A RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"N/A\" ]]; then\n    echo \"N/A RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# N/A\nfor bin in rel.o rel32.o rel_cl.o rel_cl32.o; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"N/A\" ]]; then\n    echo \"N/A RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 84,
                  "endLine": 54,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# No RELRO\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"No RELRO\" ]]; then\n    echo \"No RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# No RELRO\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"No RELRO\" ]]; then\n    echo \"No RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# No RELRO\nfor bin in none none32 none_cl none_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"No RELRO\" ]]; then\n    echo \"No RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 84,
                  "endLine": 47,
                  "endColumn": 89,
                  "snippet": {
                    "text": "done\n# Partial RELRO\nfor bin in partial partial32 partial_cl partial_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"Partial RELRO\" ]]; then\n    echo \"Partial RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "done\n# Partial RELRO\nfor bin in partial partial32 partial_cl partial_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"Partial RELRO\" ]]; then\n    echo \"Partial RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`done\n# Partial RELRO\nfor bin in partial partial32 partial_cl partial_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"Partial RELRO\" ]]; then\n    echo \"Partial RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 84,
                  "endLine": 40,
                  "endColumn": 89,
                  "snippet": {
                    "text": "echo \"Starting RELRO check\"\n# Full RELRO\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"Full RELRO\" ]]; then\n    echo \"Full RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "echo \"Starting RELRO check\"\n# Full RELRO\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"Full RELRO\" ]]; then\n    echo \"Full RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n",
                      "markdown": "`echo \"Starting RELRO check\"\n# Full RELRO\nfor bin in all all32 all_cl all_cl32; do\n  if [[ $(\"${PARENT}\"/checksec --file=\"${DIR}/binaries/output/${bin}\" --format=csv | cut -d, -f1) != \"Full RELRO\" ]]; then\n    echo \"Full RELRO validation failed on \\\"${bin}\\\"\"\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 19,
                  "endLine": 28,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  nolibc nolibc_cl nolibc32 nolibc_cl32 \\\n  fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ ! -f \"${DIR}/binaries/output/${bin}\" ]]; then\n    echo \"Could not find test file output/${bin}. Run build_binaries.sh in the binaries folder to generate it.\"\n    exit 255\n  fi\ndone\n",
                    "rendered": {
                      "text": "  nolibc nolibc_cl nolibc32 nolibc_cl32 \\\n  fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ ! -f \"${DIR}/binaries/output/${bin}\" ]]; then\n    echo \"Could not find test file output/${bin}. Run build_binaries.sh in the binaries folder to generate it.\"\n    exit 255\n  fi\ndone\n",
                      "markdown": "`  nolibc nolibc_cl nolibc32 nolibc_cl32 \\\n  fszero fszero_cl fszero32 fszero_cl32; do\n  if [[ ! -f \"${DIR}/binaries/output/${bin}\" ]]; then\n    echo \"Could not find test file output/${bin}. Run build_binaries.sh in the binaries folder to generate it.\"\n    exit 255\n  fi\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/hardening-checks.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n",
                      "markdown": "`#!/usr/bin/env bash\n\nDIR=$(\n  cd \"$(dirname \"$0\")\"\n  pwd\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 7,
                  "endLine": 10,
                  "snippet": {
                    "text": "set -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n",
                    "rendered": {
                      "text": "set -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n",
                      "markdown": "`set -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 29,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 55,
                  "endLine": 3,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 22,
                  "endColumn": 8,
                  "snippet": {
                    "text": "if [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n  apt-get -y -q install gcc-multilib\nfi\n\napt-get clean\n\npip3 install setuptools demjson3 --break-system-packages\n",
                    "rendered": {
                      "text": "if [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n  apt-get -y -q install gcc-multilib\nfi\n\napt-get clean\n\npip3 install setuptools demjson3 --break-system-packages\n",
                      "markdown": "`if [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n  apt-get -y -q install gcc-multilib\nfi\n\napt-get clean\n\npip3 install setuptools demjson3 --break-system-packages\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  gcc clang nasm binutils\n\nif [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n  apt-get -y -q install gcc-multilib\nfi\n\napt-get clean\n",
                    "rendered": {
                      "text": "  gcc clang nasm binutils\n\nif [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n  apt-get -y -q install gcc-multilib\nfi\n\napt-get clean\n",
                      "markdown": "`  gcc clang nasm binutils\n\nif [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n  apt-get -y -q install gcc-multilib\nfi\n\napt-get clean\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 15,
                  "snippet": {
                    "text": "DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n\nif [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n",
                    "rendered": {
                      "text": "DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n\nif [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n",
                      "markdown": "`DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n\nif [[ \"$(uname -m)\" == \"x86_64\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 40,
                  "endLine": 14,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n\n",
                    "rendered": {
                      "text": "\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n\n",
                      "markdown": "`\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 31,
                  "endLine": 13,
                  "endColumn": 36,
                  "snippet": {
                    "text": "apt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n",
                    "rendered": {
                      "text": "apt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n",
                      "markdown": "`apt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n  gcc clang nasm binutils\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 30,
                  "endLine": 12,
                  "endColumn": 39,
                  "snippet": {
                    "text": "apt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n",
                    "rendered": {
                      "text": "apt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n",
                      "markdown": "`apt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim libxml2-utils python3 python3-pip jq \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 10,
                  "endColumn": 8,
                  "snippet": {
                    "text": "set -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n",
                    "rendered": {
                      "text": "set -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n",
                      "markdown": "`set -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential git file \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 9,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nset -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n",
                    "rendered": {
                      "text": "\nset -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n",
                      "markdown": "`\nset -eou pipefail\nset -x\n\napt-get update\napt-get -y -q upgrade\n\nDEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 29,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 55,
                  "endLine": 3,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\nset -eou pipefail\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 34,
                  "endLine": 2,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/tests/docker-build.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n",
                      "markdown": "`#!/usr/bin/env bash\n# build the container with a shell script so that it is bash\n# Dockerfile syntax is sh not bash so installing gcc-multilib in an\n# if condition becomes more difficult.\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-commit"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-commit"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 3,
                  "endLine": 23,
                  "endColumn": 8,
                  "snippet": {
                    "text": "tools=('pre-commit' 'checkov' 'shfmt')\nfor tool in \"${tools[@]}\"; do\n  if ! command -v \"${tool}\" > /dev/null 2>&1; then\n    cat << EOF\n    Error: ${tool} not found\n    Please install via brew or package manager\n    'brew install ${tool}'\n",
                    "rendered": {
                      "text": "tools=('pre-commit' 'checkov' 'shfmt')\nfor tool in \"${tools[@]}\"; do\n  if ! command -v \"${tool}\" > /dev/null 2>&1; then\n    cat << EOF\n    Error: ${tool} not found\n    Please install via brew or package manager\n    'brew install ${tool}'\n",
                      "markdown": "`tools=('pre-commit' 'checkov' 'shfmt')\nfor tool in \"${tools[@]}\"; do\n  if ! command -v \"${tool}\" > /dev/null 2>&1; then\n    cat << EOF\n    Error: ${tool} not found\n    Please install via brew or package manager\n    'brew install ${tool}'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-commit"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 26,
                  "endLine": 12,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n# The git hooks repo\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null 2>&1 && pwd)\"\nREPO_ROOT=$(cd \"${DIR}\" && git rev-parse --show-toplevel)\n# The current repo root, in case the repo is different from the hooks (this allows using a single pre-commit across multiple repos)\nCURRENT_REPO=$(git rev-parse --show-toplevel)\n\n",
                    "rendered": {
                      "text": "\n# The git hooks repo\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null 2>&1 && pwd)\"\nREPO_ROOT=$(cd \"${DIR}\" && git rev-parse --show-toplevel)\n# The current repo root, in case the repo is different from the hooks (this allows using a single pre-commit across multiple repos)\nCURRENT_REPO=$(git rev-parse --show-toplevel)\n\n",
                      "markdown": "`\n# The git hooks repo\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null 2>&1 && pwd)\"\nREPO_ROOT=$(cd \"${DIR}\" && git rev-parse --show-toplevel)\n# The current repo root, in case the repo is different from the hooks (this allows using a single pre-commit across multiple repos)\nCURRENT_REPO=$(git rev-parse --show-toplevel)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-commit"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 5,
                  "endLine": 10,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\n# The git hooks repo\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null 2>&1 && pwd)\"\nREPO_ROOT=$(cd \"${DIR}\" && git rev-parse --show-toplevel)\n# The current repo root, in case the repo is different from the hooks (this allows using a single pre-commit across multiple repos)\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\n# The git hooks repo\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null 2>&1 && pwd)\"\nREPO_ROOT=$(cd \"${DIR}\" && git rev-parse --show-toplevel)\n# The current repo root, in case the repo is different from the hooks (this allows using a single pre-commit across multiple repos)\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\n# The git hooks repo\nDIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" > /dev/null 2>&1 && pwd)\"\nREPO_ROOT=$(cd \"${DIR}\" && git rev-parse --show-toplevel)\n# The current repo root, in case the repo is different from the hooks (this allows using a single pre-commit across multiple repos)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-commit"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-commit"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-commit"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-commit"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\nfi\n\n\"${CURRENT_REPO}\"/hack/enable-git-hooks.sh\n",
                    "rendered": {
                      "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\nfi\n\n\"${CURRENT_REPO}\"/hack/enable-git-hooks.sh\n",
                      "markdown": "`    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\nfi\n\n\"${CURRENT_REPO}\"/hack/enable-git-hooks.sh\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-commit"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 128,
                  "endLine": 6,
                  "endColumn": 133,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-commit"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 116,
                  "endLine": 6,
                  "endColumn": 122,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-commit"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 54,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs post-commit \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/post-commit"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f ${CURRENT_REPO}/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-push"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-push"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\nfi\n",
                    "rendered": {
                      "text": "    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\nfi\n",
                      "markdown": "`    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-push"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 128,
                  "endLine": 6,
                  "endColumn": 133,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-push"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 116,
                  "endLine": 6,
                  "endColumn": 122,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-push"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 49,
                  "endLine": 6,
                  "endColumn": 54,
                  "snippet": {
                    "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n",
                    "rendered": {
                      "text": "CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n",
                      "markdown": "`CURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n    echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\\n\"\n    exit 2\n  }\n  git lfs pre-push \"$@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/.git-hooks/pre-push"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n",
                      "markdown": "`#!/usr/bin/env bash\n# The current repo root\nCURRENT_REPO=$(git rev-parse --show-toplevel)\nif [[ -f $CURRENT_REPO/.gitlfs ]]; then\n  command -v git-lfs > /dev/null 2>&1 || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/pkg/utils/utils.go"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "endColumn": 5,
                  "snippet": {
                    "text": "func colorPrinter(result string, resultColor string) string {\n\tunset := color.New(color.Reset).SprintFunc()\n\titalic := color.New(color.Italic).SprintfFunc()\n\tred := color.New(color.FgRed).SprintFunc()\n\tgreen := color.New(color.FgGreen).SprintFunc()\n\tyellow := color.New(color.FgYellow).SprintFunc()\n\tblue := color.New(color.FgBlue).SprintFunc()\n",
                    "rendered": {
                      "text": "func colorPrinter(result string, resultColor string) string {\n\tunset := color.New(color.Reset).SprintFunc()\n\titalic := color.New(color.Italic).SprintfFunc()\n\tred := color.New(color.FgRed).SprintFunc()\n\tgreen := color.New(color.FgGreen).SprintFunc()\n\tyellow := color.New(color.FgYellow).SprintFunc()\n\tblue := color.New(color.FgBlue).SprintFunc()\n",
                      "markdown": "`func colorPrinter(result string, resultColor string) string {\n\tunset := color.New(color.Reset).SprintFunc()\n\titalic := color.New(color.Italic).SprintfFunc()\n\tred := color.New(color.FgRed).SprintFunc()\n\tgreen := color.New(color.FgGreen).SprintFunc()\n\tyellow := color.New(color.FgYellow).SprintFunc()\n\tblue := color.New(color.FgBlue).SprintFunc()\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/pkg/utils/utils.go"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "endColumn": 5,
                  "snippet": {
                    "text": ")\n\nfunc PrintLogo() {\n\tRed := color.New(color.FgHiGreen, color.Bold)\n\tasciiLogo := `\n  _____ _    _ ______ _____ _  __ _____ ______ _____\n / ____| |  | |  ____/ ____| |/ // ____|  ____/ ____|\n",
                    "rendered": {
                      "text": ")\n\nfunc PrintLogo() {\n\tRed := color.New(color.FgHiGreen, color.Bold)\n\tasciiLogo := `\n  _____ _    _ ______ _____ _  __ _____ ______ _____\n / ____| |  | |  ____/ ____| |/ // ____|  ____/ ____|\n",
                      "markdown": "`)\n\nfunc PrintLogo() {\n\tRed := color.New(color.FgHiGreen, color.Bold)\n\tasciiLogo := `\n  _____ _    _ ______ _____ _  __ _____ ______ _____\n / ____| |  | |  ____/ ____| |/ // ____|  ____/ ____|\n`"
                    }
                  },
                  "sourceLanguage": "go"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 214,
                  "endLine": 128,
                  "endColumn": 218,
                  "snippet": {
                    "text": "iguration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be presen",
                    "rendered": {
                      "text": "iguration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be presen",
                      "markdown": "`iguration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be presen`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 13,
                  "endLine": 2,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n",
                    "rendered": {
                      "text": "\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n",
                      "markdown": "`\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 45,
                  "endLine": 132,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the OSX kernel or BSD kernels. It may work on certain BSD based systems but is not officially supported.\n",
                    "rendered": {
                      "text": "\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the OSX kernel or BSD kernels. It may work on certain BSD based systems but is not officially supported.\n",
                      "markdown": "`\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the OSX kernel or BSD kernels. It may work on certain BSD based systems but is not officially supported.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 224,
                  "endLine": 130,
                  "endColumn": 232,
                  "snippet": {
                    "text": " have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the OSX kernel or BSD kernels. It may work on certain BSD based systems",
                    "rendered": {
                      "text": " have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the OSX kernel or BSD kernels. It may work on certain BSD based systems",
                      "markdown": "` have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the OSX kernel or BSD kernels. It may work on certain BSD based systems`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 157,
                  "endLine": 130,
                  "endColumn": 166,
                  "snippet": {
                    "text": "ound this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the O",
                    "rendered": {
                      "text": "ound this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the O",
                      "markdown": "`ound this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.\n\nEven with those limitations, information this script provides still makes it a valuable tool for checking offline file-systems.\n\n### OSX and BSD based systems Support\nMost of the tools do not work on mach-O binaries, the O`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 269,
                  "endLine": 128,
                  "endColumn": 277,
                  "snippet": {
                    "text": "e kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.",
                    "rendered": {
                      "text": "e kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.",
                      "markdown": "`e kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration. If the system is an embedded target, the native binutils tools like readelf may not be present. This would restrict which parts of the script will work.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 43,
                  "endLine": 126,
                  "endColumn": 51,
                  "snippet": {
                    "text": "ta\":\"yes\",\"restrict_dev_mem_access\":\"yes\",\"restrict_dev_kmem_access\":\"no\" },{ \"kernheap_config\":\"no\" } }\n```\n\n### Using with Cross-compiled Systems\nThe checksec tool can be used against cross-compiled target file-systems offline.  Key limitations to note:\n\n* Kernel tests - require you to execute the script on the running system you'd like to check as they directly access kernel resources to identify system configuration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the runn",
                    "rendered": {
                      "text": "ta\":\"yes\",\"restrict_dev_mem_access\":\"yes\",\"restrict_dev_kmem_access\":\"no\" },{ \"kernheap_config\":\"no\" } }\n```\n\n### Using with Cross-compiled Systems\nThe checksec tool can be used against cross-compiled target file-systems offline.  Key limitations to note:\n\n* Kernel tests - require you to execute the script on the running system you'd like to check as they directly access kernel resources to identify system configuration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the runn",
                      "markdown": "`ta\":\"yes\",\"restrict_dev_mem_access\":\"yes\",\"restrict_dev_kmem_access\":\"no\" },{ \"kernheap_config\":\"no\" } }\n```\n\n### Using with Cross-compiled Systems\nThe checksec tool can be used against cross-compiled target file-systems offline.  Key limitations to note:\n\n* Kernel tests - require you to execute the script on the running system you'd like to check as they directly access kernel resources to identify system configuration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature. Fortify, uses the runn`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 15,
                  "endLine": 79,
                  "endColumn": 21,
                  "snippet": {
                    "text": "Some binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -ffile-prefix-map=/build/vim-CSyBG7/vim-8.2.3995=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\n```\n\n",
                    "rendered": {
                      "text": "Some binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -ffile-prefix-map=/build/vim-CSyBG7/vim-8.2.3995=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\n```\n\n",
                      "markdown": "`Some binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -ffile-prefix-map=/build/vim-CSyBG7/vim-8.2.3995=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 9,
                  "endLine": 79,
                  "endColumn": 14,
                  "snippet": {
                    "text": "Some binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -ffile-prefix-map=/build/vim-CSyBG7/vim-8.2.3995=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\n```\n\n",
                    "rendered": {
                      "text": "Some binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -ffile-prefix-map=/build/vim-CSyBG7/vim-8.2.3995=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\n```\n\n",
                      "markdown": "`Some binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\ngcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -ffile-prefix-map=/build/vim-CSyBG7/vim-8.2.3995=. -flto=auto -ffat-lto-objects -flto=auto -ffat-lto-objects -fstack-protector-strong -Wformat -Werror=format-security -D_REENTRANT -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1\n```\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 74,
                  "endLine": 76,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\nNote on Fortify results. There is not currently a known way to determine if the binary was compiled with FORTIFY_SOURCE level 1, 2, or 3 in a reliable manner.\n\nSome binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\n",
                    "rendered": {
                      "text": "\nNote on Fortify results. There is not currently a known way to determine if the binary was compiled with FORTIFY_SOURCE level 1, 2, or 3 in a reliable manner.\n\nSome binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\n",
                      "markdown": "`\nNote on Fortify results. There is not currently a known way to determine if the binary was compiled with FORTIFY_SOURCE level 1, 2, or 3 in a reliable manner.\n\nSome binaries include some details about how it was compiled. For example, VIM on ubuntu is compiled with `-D_FORTIFY_SOURCE=1`. This can be identified with strings on the binary. Most binaries do not include this data, but some do.\n\n```\n$ strings vim | grep FORTIFY\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 3,
                  "endLine": 9,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nManually verify checksec\n\n```\nopenssl dgst -sha256 -verify checksec.pub -signature checksec.sig checksec\n```\n\nExamples\n",
                    "rendered": {
                      "text": "\nManually verify checksec\n\n```\nopenssl dgst -sha256 -verify checksec.pub -signature checksec.sig checksec\n```\n\nExamples\n",
                      "markdown": "`\nManually verify checksec\n\n```\nopenssl dgst -sha256 -verify checksec.pub -signature checksec.sig checksec\n```\n\nExamples\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 24,
                  "endLine": 2,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n",
                    "rendered": {
                      "text": "\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n",
                      "markdown": "`\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/docs/index.md"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 13,
                  "endLine": 2,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n",
                    "rendered": {
                      "text": "\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n",
                      "markdown": "`\nChecksec is a bash shell script that is used to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source) and the linux kernel.\nIt has been originally written by Tobias Klein in 2011 and the original source is available here: [http://www.trapkit.de/tools/checksec.html](http://www.trapkit.de/tools/checksec.html)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 11,
                  "endLine": 5,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                    "rendered": {
                      "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                      "markdown": "`\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n",
                    "rendered": {
                      "text": "  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n",
                      "markdown": "`  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 24,
                  "endLine": 10,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n",
                    "rendered": {
                      "text": "  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n",
                      "markdown": "`  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n",
                    "rendered": {
                      "text": "  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n",
                      "markdown": "`  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n  chmod +x /bin/checksec\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 15,
                  "snippet": {
                    "text": "RUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n",
                    "rendered": {
                      "text": "RUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n",
                      "markdown": "`RUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n  pip3 install demjson3 --break-system-packages && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 40,
                  "endLine": 7,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n",
                    "rendered": {
                      "text": "\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n",
                      "markdown": "`\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n  pip3 install --upgrade pip && pip3 install setuptools --break-system-packages && \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 38,
                  "endLine": 6,
                  "endColumn": 43,
                  "snippet": {
                    "text": "COPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n",
                    "rendered": {
                      "text": "COPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n",
                      "markdown": "`COPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n  gcc clang && apt-get clean \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 77,
                  "endLine": 5,
                  "endColumn": 86,
                  "snippet": {
                    "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                    "rendered": {
                      "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                      "markdown": "`\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 21,
                  "endLine": 5,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                    "rendered": {
                      "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                      "markdown": "`\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/Dockerfile"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 3,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                    "rendered": {
                      "text": "\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n",
                      "markdown": "`\nCOPY checksec /bin/\n\nRUN apt-get update && apt-get -y -q upgrade && DEBIAN_FRONTEND=noninteractive apt-get -y -q install \\\n  bc bison flex build-essential ccache git file \\\n  libncurses-dev libssl-dev u-boot-tools wget \\\n  xz-utils vim xfce4 libxml2-utils python3 python3-pip jq \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1649,
                  "startColumn": 21,
                  "endLine": 1649,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1836,
                  "startColumn": 68,
                  "endLine": 1836,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  printf \"\\033[31mError: No option selected. Please select an option.\\033[m\\n\\n\"\n  exit 1\nelif [[ \"${OPT}\" != 1 ]]; then\n  printf \"\\033[31mError: To many options selected. Please select one at a time.\\033[m\\n\\n\"\n  exit 1\nfi\n\n",
                    "rendered": {
                      "text": "  printf \"\\033[31mError: No option selected. Please select an option.\\033[m\\n\\n\"\n  exit 1\nelif [[ \"${OPT}\" != 1 ]]; then\n  printf \"\\033[31mError: To many options selected. Please select one at a time.\\033[m\\n\\n\"\n  exit 1\nfi\n\n",
                      "markdown": "`  printf \"\\033[31mError: No option selected. Please select an option.\\033[m\\n\\n\"\n  exit 1\nelif [[ \"${OPT}\" != 1 ]]; then\n  printf \"\\033[31mError: To many options selected. Please select one at a time.\\033[m\\n\\n\"\n  exit 1\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1752,
                  "startColumn": 7,
                  "endLine": 1752,
                  "endColumn": 15,
                  "snippet": {
                    "text": "          debug_report\n          exit 0\n          ;;\n        update | upgrade)\n          # shellcheck disable=SC2119\n          upgrade\n          exit 0\n",
                    "rendered": {
                      "text": "          debug_report\n          exit 0\n          ;;\n        update | upgrade)\n          # shellcheck disable=SC2119\n          upgrade\n          exit 0\n",
                      "markdown": "`          debug_report\n          exit 0\n          ;;\n        update | upgrade)\n          # shellcheck disable=SC2119\n          upgrade\n          exit 0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1702,
                  "startColumn": 11,
                  "endLine": 1703,
                  "snippet": {
                    "text": "  return 0\n}\n\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n",
                    "rendered": {
                      "text": "  return 0\n}\n\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n",
                      "markdown": "`  return 0\n}\n\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1651,
                  "startColumn": 40,
                  "endLine": 1651,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n",
                    "rendered": {
                      "text": "  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n",
                      "markdown": "`  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1061,
                  "startColumn": 5,
                  "endLine": 1061,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  if [[ ! \"${1}\" == \"\" ]]; then\n    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n",
                    "rendered": {
                      "text": "  if [[ ! \"${1}\" == \"\" ]]; then\n    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n",
                      "markdown": "`  if [[ ! \"${1}\" == \"\" ]]; then\n    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n\n# --- Modified Version ---\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n\n# --- Modified Version ---\n",
                      "markdown": "`#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n\n# --- Modified Version ---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 35,
                  "endLine": 1709,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                    "rendered": {
                      "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                      "markdown": "`  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1709,
                  "startColumn": 26,
                  "endLine": 1709,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                    "rendered": {
                      "text": "  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n",
                      "markdown": "`  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1707,
                  "startColumn": 3,
                  "endLine": 1707,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n",
                    "rendered": {
                      "text": "  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n",
                      "markdown": "`  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1706,
                  "startColumn": 11,
                  "endLine": 1706,
                  "endColumn": 17,
                  "snippet": {
                    "text": "fetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n",
                    "rendered": {
                      "text": "fetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n",
                      "markdown": "`fetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n    echo 'Warning: Neither wget nor curl is available. online updates unavailable' >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1705,
                  "startColumn": 3,
                  "endLine": 1705,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n",
                    "rendered": {
                      "text": "# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n",
                      "markdown": "`# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1704,
                  "startColumn": 9,
                  "endLine": 1704,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n",
                      "markdown": "`\n# Fetch the update\nfetch() {\n  if type wget > /dev/null 2>&1; then\n    wget --no-check-certificate -O \"${2}\" \"${1}\" > /dev/null 2>&1\n  elif type curl > /dev/null 2>&1; then\n    curl --insecure --remote-name -o \"${2}\" \"${1}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1663,
                  "startColumn": 5,
                  "endLine": 1663,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n      chmod \"${PERMS}\" \"${0}\"\n    else\n      echo \"Error: Could not update... Please check permissions\"\n      rm -f \"${TMP_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n      chmod \"${PERMS}\" \"${0}\"\n    else\n      echo \"Error: Could not update... Please check permissions\"\n      rm -f \"${TMP_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n      chmod \"${PERMS}\" \"${0}\"\n    else\n      echo \"Error: Could not update... Please check permissions\"\n      rm -f \"${TMP_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1659,
                  "startColumn": 3,
                  "endLine": 1659,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    mv \"${TMP_FILE}\" \"$0\" > /dev/null 2>&1\n    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n",
                    "rendered": {
                      "text": "  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    mv \"${TMP_FILE}\" \"$0\" > /dev/null 2>&1\n    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n",
                      "markdown": "`  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    mv \"${TMP_FILE}\" \"$0\" > /dev/null 2>&1\n    exit_status=$?\n    if [[ \"${exit_status}\" -eq \"0\" ]]; then\n      echo \"checksec.sh updated - Rev. ${UPDATE_VERSION}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1655,
                  "startColumn": 57,
                  "endLine": 1655,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n  UPDATE_VERSION=$(grep \"^SCRIPT_VERSION\" \"${TMP_FILE}\" | awk -F\"=\" '{ print $2 }')\n  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n  UPDATE_VERSION=$(grep \"^SCRIPT_VERSION\" \"${TMP_FILE}\" | awk -F\"=\" '{ print $2 }')\n  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n  fi\n  UPDATE_VERSION=$(grep \"^SCRIPT_VERSION\" \"${TMP_FILE}\" | awk -F\"=\" '{ print $2 }')\n  if [[ \"${SCRIPT_VERSION}\" != \"${UPDATE_VERSION}\" ]]; then\n    PERMS=$(stat -c \"%a\" \"$0\")\n    rm -f \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1650,
                  "startColumn": 6,
                  "endLine": 1650,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n",
                    "rendered": {
                      "text": "  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n",
                      "markdown": "`  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1649,
                  "startColumn": 20,
                  "endLine": 1649,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                    "rendered": {
                      "text": "  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n",
                      "markdown": "`  PUBKEY_FILE=$(mktemp /tmp/checksec_pubkey.XXXXXXXXXX)\n  fetch \"${SCRIPT_URL}\" \"${TMP_FILE}\"\n  fetch \"${SIG_URL}\" \"${SIG_FILE}\"\n  echo \"${PUBKEY}\" | base64 -d > \"${PUBKEY_FILE}\"\n  if ! openssl dgst -sha256 -verify \"${PUBKEY_FILE}\" -signature \"${SIG_FILE}\" \"${TMP_FILE}\" > /dev/null 2>&1; then\n    echo \"file signature does not match. Update may be tampered\"\n    rm -f \"${TMP_FILE}\" \"${SIG_FILE}\" \"${PUBKEY_FILE}\" > /dev/null 2>&1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1616,
                  "startColumn": 95,
                  "endLine": 1616,
                  "endColumn": 100,
                  "snippet": {
                    "text": "_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_total=$((Proc_FS_cnt_unc",
                    "rendered": {
                      "text": "_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_total=$((Proc_FS_cnt_unc",
                      "markdown": "`_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_total=$((Proc_FS_cnt_unc`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1616,
                  "startColumn": 74,
                  "endLine": 1616,
                  "endColumn": 79,
                  "snippet": {
                    "text": "c\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_tot",
                    "rendered": {
                      "text": "c\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_tot",
                      "markdown": "`c\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n  Proc_FS_cnt_tot`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1614,
                  "startColumn": 89,
                  "endLine": 1614,
                  "endColumn": 94,
                  "snippet": {
                    "text": "  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n",
                    "rendered": {
                      "text": "  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n",
                      "markdown": "`  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  Proc_FS_func_libc=\"${Proc_FS_filechk_func_libc//_chk/}\"\n  Proc_FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}/exe\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  Proc_FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${Proc_FS_filechk_func_libc}\") <(sort -u <<< \"${Proc_FS_func}\"))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1611,
                  "startColumn": 74,
                  "endLine": 1611,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1611,
                  "startColumn": 58,
                  "endLine": 1611,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`  #check for Fortify source support\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"$(readlink \"${1}\"/exe)\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  Proc_FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1601,
                  "startColumn": 64,
                  "endLine": 1601,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1601,
                  "startColumn": 46,
                  "endLine": 1601,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}/exe\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled    \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando         \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1590,
                  "startColumn": 46,
                  "endLine": 1590,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDynamic Shared Object\\033[m   ' 'Dynamic Shared Object,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                    "rendered": {
                      "text": "  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDynamic Shared Object\\033[m   ' 'Dynamic Shared Object,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                      "markdown": "`  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDynamic Shared Object\\033[m   ' 'Dynamic Shared Object,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1589,
                  "startColumn": 46,
                  "endLine": 1589,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                    "rendered": {
                      "text": "  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                      "markdown": "`  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled          \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1587,
                  "startColumn": 44,
                  "endLine": 1587,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                      "markdown": "`  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE               \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}/exe\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'DEBUG'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 112,
                  "endLine": 1580,
                  "endColumn": 118,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 100,
                  "endLine": 1580,
                  "endColumn": 106,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 70,
                  "endLine": 1580,
                  "endColumn": 76,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 51,
                  "endLine": 1580,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`      echo_message '\\033[31mPaX disabled\\033[m  ' 'Pax disabled,' ' pax=\"no\"' '\"pax\":\"no\",'\n    fi\n    # fallback check for NX support\n  elif [[ $(${readelf} -l \"${1}/exe\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n    echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n  else\n    echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1565,
                  "startColumn": 55,
                  "endLine": 1565,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n    elif [[ \"${pageexec}\" = \"p\" && \"${segmexec}\" = \"s\" && \"${randmmap}\" = \"R\" ]]; then\n",
                    "rendered": {
                      "text": "    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n    elif [[ \"${pageexec}\" = \"p\" && \"${segmexec}\" = \"s\" && \"${randmmap}\" = \"R\" ]]; then\n",
                      "markdown": "`    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n    elif [[ \"${pageexec}\" = \"p\" && \"${segmexec}\" = \"s\" && \"${randmmap}\" = \"R\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1564,
                  "startColumn": 55,
                  "endLine": 1564,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n",
                      "markdown": "`  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n      echo_message '\\033[32mPaX enabled\\033[m   ' 'Pax enabled,' ' pax=\"yes\"' '\"pax\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1563,
                  "startColumn": 55,
                  "endLine": 1563,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n",
                    "rendered": {
                      "text": "  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n",
                      "markdown": "`  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n    if [[ \"${pageexec}\" = \"P\" || \"${segmexec}\" = \"S\" ]] && [[ \"${mprotect}\" = \"M\" && \"${randmmap}\" = \"R\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1562,
                  "startColumn": 55,
                  "endLine": 1562,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  # first check for PaX support\n  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n",
                    "rendered": {
                      "text": "  # first check for PaX support\n  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n",
                      "markdown": "`  # first check for PaX support\n  # shellcheck disable=SC2126\n  if [[ $(grep -c 'PaX:' \"${1}/status\" 2> /dev/null) -gt 0 ]]; then\n    pageexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b6)\n    segmexec=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b10)\n    mprotect=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b8)\n    randmmap=$(grep 'PaX:' \"${1}/status\" 2> /dev/null | cut -b9)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1550,
                  "startColumn": 56,
                  "endLine": 1550,
                  "endColumn": 61,
                  "snippet": {
                    "text": "  fi\n\n  # check for Seccomp mode\n  seccomp=$(grep 'Seccomp:' \"${1}/status\" 2> /dev/null | cut -b10)\n  if [[ \"${seccomp}\" == \"1\" ]]; then\n    echo_message '\\033[32mSeccomp strict\\033[m   ' 'Seccomp strict,' ' seccomp=\"strict\"' '\"seccomp\":\"strict\",'\n  elif [[ \"${seccomp}\" == \"2\" ]]; then\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for Seccomp mode\n  seccomp=$(grep 'Seccomp:' \"${1}/status\" 2> /dev/null | cut -b10)\n  if [[ \"${seccomp}\" == \"1\" ]]; then\n    echo_message '\\033[32mSeccomp strict\\033[m   ' 'Seccomp strict,' ' seccomp=\"strict\"' '\"seccomp\":\"strict\",'\n  elif [[ \"${seccomp}\" == \"2\" ]]; then\n",
                      "markdown": "`  fi\n\n  # check for Seccomp mode\n  seccomp=$(grep 'Seccomp:' \"${1}/status\" 2> /dev/null | cut -b10)\n  if [[ \"${seccomp}\" == \"1\" ]]; then\n    echo_message '\\033[32mSeccomp strict\\033[m   ' 'Seccomp strict,' ' seccomp=\"strict\"' '\"seccomp\":\"strict\",'\n  elif [[ \"${seccomp}\" == \"2\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1542,
                  "startColumn": 42,
                  "endLine": 1542,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    # check if compiled with Clang SafeStack\n    $debug && echo -e \"\\n***function proccheck->safestack\"\n    if $readelf -s \"$1/exe\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                    "rendered": {
                      "text": "\n    # check if compiled with Clang SafeStack\n    $debug && echo -e \"\\n***function proccheck->safestack\"\n    if $readelf -s \"$1/exe\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                      "markdown": "`\n    # check if compiled with Clang SafeStack\n    $debug && echo -e \"\\n***function proccheck->safestack\"\n    if $readelf -s \"$1/exe\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 63,
                  "endLine": 1534,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n    if [ -n \"$cfifunc\" ] && $readelf -s \"$1/exe\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                    "rendered": {
                      "text": "    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n    if [ -n \"$cfifunc\" ] && $readelf -s \"$1/exe\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                      "markdown": "`    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n    if [ -n \"$cfifunc\" ] && $readelf -s \"$1/exe\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1530,
                  "startColumn": 80,
                  "endLine": 1530,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                    "rendered": {
                      "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                      "markdown": "`    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1530,
                  "startColumn": 65,
                  "endLine": 1530,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                    "rendered": {
                      "text": "    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n",
                      "markdown": "`    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n    # shellcheck disable=SC2128\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1529,
                  "startColumn": 38,
                  "endLine": 1529,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n",
                    "rendered": {
                      "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n",
                      "markdown": "`  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    $debug && echo -e \"\\n***function proccheck->clangcfi\"\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r -a cfifunc <<< \"$($readelf -s \"$1/exe\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    # TODO: fix this check properly, need more clang CFI files to be able to test properly\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1513,
                  "startColumn": 61,
                  "endLine": 1513,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1513,
                  "startColumn": 46,
                  "endLine": 1513,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n      echo_message '\\033[31mNo canary found      \\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1512,
                  "startColumn": 44,
                  "endLine": 1512,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n",
                      "markdown": "`  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep -q 'Symbol table'; then\n    if ${readelf} -s \"${1}/exe\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n      echo_message '\\033[32mCanary found         \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1498,
                  "startColumn": 112,
                  "endLine": 1498,
                  "endColumn": 118,
                  "snippet": {
                    "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                    "rendered": {
                      "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                      "markdown": "`  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1498,
                  "startColumn": 48,
                  "endLine": 1498,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                    "rendered": {
                      "text": "  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n",
                      "markdown": "`  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n        echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' ' relro=\"partial\"' '\"relro\":\"partial\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1497,
                  "startColumn": 46,
                  "endLine": 1497,
                  "endColumn": 52,
                  "snippet": {
                    "text": "proccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n",
                    "rendered": {
                      "text": "proccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n",
                      "markdown": "`proccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n      else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1496,
                  "startColumn": 44,
                  "endLine": 1496,
                  "endColumn": 50,
                  "snippet": {
                    "text": "# check process(es)\nproccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n",
                    "rendered": {
                      "text": "# check process(es)\nproccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n",
                      "markdown": "`# check process(es)\nproccheck() {\n  # check for RELRO support\n  if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'Program Headers'; then\n    if ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n      if ${readelf} -d \"${1}/exe\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}/exe\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n        echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' ' relro=\"full\"' '\"relro\":\"full\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1486,
                  "startColumn": 4,
                  "endLine": 1486,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n# check cpu nx flag\nnxcheck() {\n  if grep -qFw 'nx' /proc/cpuinfo; then\n    echo_message '\\033[32mYes\\033[m\\n\\n' '' '' ''\n  else\n    echo_message '\\033[31mNo\\033[m\\n\\n' '' '' ''\n",
                    "rendered": {
                      "text": "\n# check cpu nx flag\nnxcheck() {\n  if grep -qFw 'nx' /proc/cpuinfo; then\n    echo_message '\\033[32mYes\\033[m\\n\\n' '' '' ''\n  else\n    echo_message '\\033[31mNo\\033[m\\n\\n' '' '' ''\n",
                      "markdown": "`\n# check cpu nx flag\nnxcheck() {\n  if grep -qFw 'nx' /proc/cpuinfo; then\n    echo_message '\\033[32mYes\\033[m\\n\\n' '' '' ''\n  else\n    echo_message '\\033[31mNo\\033[m\\n\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 137,
                  "endLine": 1469,
                  "endColumn": 142,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 116,
                  "endLine": 1469,
                  "endColumn": 121,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 105,
                  "endLine": 1469,
                  "endColumn": 111,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 92,
                  "endLine": 1469,
                  "endColumn": 99,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 82,
                  "endLine": 1469,
                  "endColumn": 88,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 71,
                  "endLine": 1469,
                  "endColumn": 77,
                  "snippet": {
                    "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                    "rendered": {
                      "text": "\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n",
                      "markdown": "`\n# check mapped libraries\nlibcheck() {\n  IFS=\" \" read -r -a libs <<< \"$(awk '{ print $6 }' \"/proc/${1}/maps\" | grep '/' | sort -u | xargs file | grep ELF | awk '{ print $1 }' | sed 's/:/ /')\"\n  echo_message \"\\n* Loaded libraries (file information, # of mapped files: ${#libs[@]}):\\n\\n\" \"\" \"\" \"\\\"libs\\\": {\"\n\n  for ((element = 0; element < ${#libs[@]}; element++)); do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1431,
                  "startColumn": 17,
                  "endLine": 1431,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n  echo_message \"* SELinux:                                \" \"\" \"\" \"\"\n  if ${kconfig} | grep -qi 'CONFIG_SECURITY_SELINUX=y'; then\n    getsestatus\n    sestatus=$?\n    if [[ ${sestatus} == 0 ]]; then\n",
                    "rendered": {
                      "text": "\n  echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n  echo_message \"* SELinux:                                \" \"\" \"\" \"\"\n  if ${kconfig} | grep -qi 'CONFIG_SECURITY_SELINUX=y'; then\n    getsestatus\n    sestatus=$?\n    if [[ ${sestatus} == 0 ]]; then\n",
                      "markdown": "`\n  echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n  echo_message \"* SELinux:                                \" \"\" \"\" \"\"\n  if ${kconfig} | grep -qi 'CONFIG_SECURITY_SELINUX=y'; then\n    getsestatus\n    sestatus=$?\n    if [[ ${sestatus} == 0 ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1419,
                  "startColumn": 21,
                  "endLine": 1419,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_module_region_full='no'\" ', \"randomize_module_region_full\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_module_region_full='no'\" ', \"randomize_module_region_full\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_module_region_full='no'\" ', \"randomize_module_region_full\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 19,
                  "endLine": 1417,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL'; then\n      echo_message \"  Randomize module region over 4GB:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_MODULE_REGION_FULL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_module_region_full='yes'\" ', \"randomize_module_region_full\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1410,
                  "startColumn": 21,
                  "endLine": 1410,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_kernel_address='no'\" ', \"randomize_kernel_address\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_kernel_address='no'\" ', \"randomize_kernel_address\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" randomize_kernel_address='no'\" ', \"randomize_kernel_address\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1408,
                  "startColumn": 19,
                  "endLine": 1408,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE'; then\n      echo_message \"  Randomize address of kernel image:      \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" randomize_kernel_address='yes'\" ', \"randomize_kernel_address\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1401,
                  "startColumn": 21,
                  "endLine": 1401,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" emulate_privileged_access_never='no'\" ', \"emulate_privileged_access_never\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" emulate_privileged_access_never='no'\" ', \"emulate_privileged_access_never\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" emulate_privileged_access_never='no'\" ', \"emulate_privileged_access_never\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 19,
                  "endLine": 1399,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN'; then\n      echo_message \"  Emulate privileged access never:        \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SW_TTBR0_PAN=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" emulate_privileged_access_never='yes'\" ', \"emulate_privileged_access_never\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1392,
                  "startColumn": 21,
                  "endLine": 1392,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" speculative_store_bypass_disable='no'\" ', \"speculative_store_bypass_disable\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" speculative_store_bypass_disable='no'\" ', \"speculative_store_bypass_disable\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" speculative_store_bypass_disable='no'\" ', \"speculative_store_bypass_disable\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1390,
                  "startColumn": 19,
                  "endLine": 1390,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD'; then\n      echo_message \"  Speculative store bypass disable:       \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM64_SSBD=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" speculative_store_bypass_disable='yes'\" ', \"speculative_store_bypass_disable\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1383,
                  "startColumn": 21,
                  "endLine": 1383,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_el2_vector_mapping='no'\" ', \"harden_el2_vector_mapping\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_el2_vector_mapping='no'\" ', \"harden_el2_vector_mapping\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_el2_vector_mapping='no'\" ', \"harden_el2_vector_mapping\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1381,
                  "startColumn": 19,
                  "endLine": 1381,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS'; then\n      echo_message \"  Harden EL2 vector mapping:              \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_EL2_VECTORS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_el2_vector_mapping='yes'\" ', \"harden_el2_vector_mapping\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1374,
                  "startColumn": 21,
                  "endLine": 1374,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_branch_predictor='no'\" ', \"harden_branch_predictor\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_branch_predictor='no'\" ', \"harden_branch_predictor\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" harden_branch_predictor='no'\" ', \"harden_branch_predictor\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1372,
                  "startColumn": 19,
                  "endLine": 1372,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR'; then\n      echo_message \"  Harden branch predictor:                \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_HARDEN_BRANCH_PREDICTOR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" harden_branch_predictor='yes'\" ', \"harden_branch_predictor\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1365,
                  "startColumn": 21,
                  "endLine": 1365,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" unmap_kernel_in_userspace='no'\" ', \"unmap_kernel_in_userspace\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" unmap_kernel_in_userspace='no'\" ', \"unmap_kernel_in_userspace\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" unmap_kernel_in_userspace='no'\" ', \"unmap_kernel_in_userspace\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1363,
                  "startColumn": 19,
                  "endLine": 1363,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM64 only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM64 only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM64 only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0'; then\n      echo_message \"  Unmap kernel in userspace (KAISER):     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_UNMAP_KERNEL_AT_EL0=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" unmap_kernel_in_userspace='yes'\" ', \"unmap_kernel_in_userspace\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1349,
                  "startColumn": 21,
                  "endLine": 1349,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_strict_rodata='no'\" ', \"arm_strict_rodata\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_strict_rodata='no'\" ', \"arm_strict_rodata\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_strict_rodata='no'\" ', \"arm_strict_rodata\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1347,
                  "startColumn": 19,
                  "endLine": 1347,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA'; then\n      echo_message \"  Make rodata strictly non-excutable:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_ALIGN_RODATA=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_strict_rodata='yes'\" ', \"arm_strict_rodata\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1340,
                  "startColumn": 21,
                  "endLine": 1340,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_kernmem_perms='no'\" ', \"arm_kernmem_perms\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_kernmem_perms='no'\" ', \"arm_kernmem_perms\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" arm_kernmem_perms='no'\" ', \"arm_kernmem_perms\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1338,
                  "startColumn": 19,
                  "endLine": 1338,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\n\" \"\\n\" \"\\n\" \"\"\n    echo_message \"* ARM only:            \\n\" \"\" \"\" \"\"\n\n    if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS'; then\n      echo_message \"  Restrict kernel memory permissions:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_ARM_KERNMEM_PERMS=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" arm_kernmem_perms='yes'\" ', \"arm_kernmem_perms\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1325,
                  "startColumn": 72,
                  "endLine": 1325,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1325,
                  "startColumn": 21,
                  "endLine": 1325,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                    "rendered": {
                      "text": "\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n",
                      "markdown": "`\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n      else\n        echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" random_address_space_layout='no'\" ', \"random_address_space_layout\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1323,
                  "startColumn": 68,
                  "endLine": 1323,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1323,
                  "startColumn": 19,
                  "endLine": 1323,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                    "rendered": {
                      "text": "      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n",
                      "markdown": "`      fi\n    fi\n\n    if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR'; then\n      echo_message \"  Address space layout randomization:     \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_RANDOMIZE_BASE=y' || ${kconfig} | grep -qi 'CONFIG_PAX_ASLR=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" random_address_space_layout='yes'\" ', \"random_address_space_layout\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1315,
                  "startColumn": 23,
                  "endLine": 1315,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" strict_user_copy_check='no'\" ', \"strict_user_copy_check\":\"no\"'\n",
                    "rendered": {
                      "text": "    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" strict_user_copy_check='no'\" ', \"strict_user_copy_check\":\"no\"'\n",
                      "markdown": "`    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" strict_user_copy_check='no'\" ', \"strict_user_copy_check\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1313,
                  "startColumn": 21,
                  "endLine": 1313,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n",
                      "markdown": "`    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" strict_user_copy_check='yes'\" ', \"strict_user_copy_check\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1312,
                  "startColumn": 21,
                  "endLine": 1312,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    echo_message \"\\n\" \"\\n\" \"\" \"\"\n    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n",
                    "rendered": {
                      "text": "    echo_message \"\\n\" \"\\n\" \"\" \"\"\n    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n",
                      "markdown": "`    echo_message \"\\n\" \"\\n\" \"\" \"\"\n    echo_message \"* X86 only:            \\n\" \"\" \"\" \"\"\n\n    if ! ${kconfig} | grep -qi 'CONFIG_PAX_SIZE_OVERFLOW=y'; then\n      if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS'; then\n        echo_message \"  Strict user copy checks:                \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_DEBUG_STRICT_USER_COPY_CHECKS=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1300,
                  "startColumn": 19,
                  "endLine": 1300,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n    else\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_kmem_access='yes'\" ', \"restrict_dev_kmem_access\":\"yes\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n    else\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_kmem_access='yes'\" ', \"restrict_dev_kmem_access\":\"yes\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n    else\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_kmem_access='yes'\" ', \"restrict_dev_kmem_access\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1298,
                  "startColumn": 17,
                  "endLine": 1298,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_DEVKMEM'; then\n    echo_message \"  Restrict /dev/kmem access:              \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_DEVKMEM=y'; then\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_kmem_access='no'\" ', \"restrict_dev_kmem_access\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 19,
                  "endLine": 1291,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" fortify_source='no'\" ', \"fortify_source\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" fortify_source='no'\" ', \"fortify_source\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" fortify_source='no'\" ', \"fortify_source\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1289,
                  "startColumn": 17,
                  "endLine": 1289,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE'; then\n    echo_message \"  Harden str/mem functions:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_FORTIFY_SOURCE=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" fortify_source='yes'\" ', \"fortify_source\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1282,
                  "startColumn": 19,
                  "endLine": 1282,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" hardened_usercopy='no'\" ', \"hardened_usercopy\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" hardened_usercopy='no'\" ', \"hardened_usercopy\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" hardened_usercopy='no'\" ', \"hardened_usercopy\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1280,
                  "startColumn": 17,
                  "endLine": 1280,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    echo_message \"\\033[32mActive\\033[m\\n\\n\" \"Active,\" \" yama_ptrace_scope='active'\" ', \"yama_ptrace_scope\":\"active\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\033[32mActive\\033[m\\n\\n\" \"Active,\" \" yama_ptrace_scope='active'\" ', \"yama_ptrace_scope\":\"active\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\033[32mActive\\033[m\\n\\n\" \"Active,\" \" yama_ptrace_scope='active'\" ', \"yama_ptrace_scope\":\"active\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY'; then\n    echo_message \"  Hardened Usercopy:                      \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_HARDENED_USERCOPY=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" hardened_usercopy='yes'\" ', \"hardened_usercopy\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 19,
                  "endLine": 1253,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" full_refcount_validation='no'\" ', \"full_refcount_validation\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" full_refcount_validation='no'\" ', \"full_refcount_validation\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" full_refcount_validation='no'\" ', \"full_refcount_validation\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1251,
                  "startColumn": 17,
                  "endLine": 1251,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL'; then\n    echo_message \"  Full reference count validation:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_REFCOUNT_FULL=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" full_refcount_validation='yes'\" ', \"full_refcount_validation\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1244,
                  "startColumn": 19,
                  "endLine": 1244,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_io_dev_mem_access='no'\" ', \"restrict_io_dev_mem_access\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_io_dev_mem_access='no'\" ', \"restrict_io_dev_mem_access\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_io_dev_mem_access='no'\" ', \"restrict_io_dev_mem_access\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 17,
                  "endLine": 1242,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM'; then\n    echo_message \"  Restrict I/O access to /dev/mem:        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_IO_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_io_dev_mem_access='yes'\" ', \"restrict_io_dev_mem_access\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1235,
                  "startColumn": 19,
                  "endLine": 1235,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_mem_access='no'\" ', \"restrict_dev_mem_access\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_mem_access='no'\" ', \"restrict_dev_mem_access\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" restrict_dev_mem_access='no'\" ', \"restrict_dev_mem_access\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1233,
                  "startColumn": 17,
                  "endLine": 1233,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM'; then\n    echo_message \"  Restrict /dev/mem access:               \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_STRICT_DEVMEM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" restrict_dev_mem_access='yes'\" ', \"restrict_dev_mem_access\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1226,
                  "startColumn": 19,
                  "endLine": 1226,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" virtually_mapped_stack='no'\" ', \"virtually_mapped_stack\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" virtually_mapped_stack='no'\" ', \"virtually_mapped_stack\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" virtually_mapped_stack='no'\" ', \"virtually_mapped_stack\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1224,
                  "startColumn": 17,
                  "endLine": 1224,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK'; then\n    echo_message \"  Virtually-mapped kernel stack:          \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_VMAP_STACK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" virtually_mapped_stack='yes'\" ', \"virtually_mapped_stack\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1217,
                  "startColumn": 19,
                  "endLine": 1217,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" cpu_sw_domain='no'\" ', \"cpu_sw_domain\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" cpu_sw_domain='no'\" ', \"cpu_sw_domain\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" cpu_sw_domain='no'\" ', \"cpu_sw_domain\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 17,
                  "endLine": 1215,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n    echo_message \"  Use CPU domains:                        \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CPU_SW_DOMAIN_PAN=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" cpu_sw_domain'yes'\" ', \"cpu_sw_domain\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1208,
                  "startColumn": 19,
                  "endLine": 1208,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" slab_freelist_randomization='no'\" ', \"slab_freelist_randomization\":\"no\"'\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" slab_freelist_randomization='no'\" ', \"slab_freelist_randomization\":\"no\"'\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n    else\n      echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" slab_freelist_randomization='no'\" ', \"slab_freelist_randomization\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1206,
                  "startColumn": 17,
                  "endLine": 1206,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM'; then\n    echo_message \"  SLAB freelist randomization:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_SLAB_FREELIST_RANDOM=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" slab_freelist_randomization='yes'\" ', \"slab_freelist_randomization\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1196,
                  "startColumn": 21,
                  "endLine": 1196,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='yes'\" ', \"gcc_structleak_byref\":\"yes\"'\n      else\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='no'\" ', \"gcc_structleak_byref\":\"no\"'\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='yes'\" ', \"gcc_structleak_byref\":\"yes\"'\n      else\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='no'\" ', \"gcc_structleak_byref\":\"no\"'\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='yes'\" ', \"gcc_structleak_byref\":\"yes\"'\n      else\n        echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak_byref='no'\" ', \"gcc_structleak_byref\":\"no\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1193,
                  "startColumn": 19,
                  "endLine": 1193,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n      echo_message \"  GCC structleak by ref plugin:           \" \"\" \"\" \"\"\n      if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1191,
                  "startColumn": 17,
                  "endLine": 1191,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n",
                    "rendered": {
                      "text": "    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n",
                      "markdown": "`    fi\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK'; then\n    echo_message \"  GCC structleak plugin:                  \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_GCC_PLUGIN_STRUCTLEAK=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_structleak='yes'\" ', \"gcc_structleak\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1180,
                  "startColumn": 84,
                  "endLine": 1180,
                  "endColumn": 90,
                  "snippet": {
                    "text": "ctor\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" gcc_stack_protector_strong='no'\" ', \"gcc_stac",
                    "rendered": {
                      "text": "ctor\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" gcc_stack_protector_strong='no'\" ', \"gcc_stac",
                      "markdown": "`ctor\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" gcc_stack_protector_strong='no'\" ', \"gcc_stac`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1180,
                  "startColumn": 23,
                  "endLine": 1180,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n",
                    "rendered": {
                      "text": "\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n",
                      "markdown": "`\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector_strong='yes'\" ', \"gcc_stack_protector_strong\":\"yes\"'\n        else\n          echo_message \"\\033[31mDisabled\\033[m\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 80,
                  "endLine": 1178,
                  "endColumn": 86,
                  "snippet": {
                    "text": "fig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"E",
                    "rendered": {
                      "text": "fig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"E",
                      "markdown": "`fig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y'; then\n          echo_message \"\\033[32mEnabled\\033[m\\n\" \"E`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 21,
                  "endLine": 1178,
                  "endColumn": 27,
                  "snippet": {
                    "text": "tack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y",
                    "rendered": {
                      "text": "tack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y",
                      "markdown": "`tack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n        echo_message \"  GCC stack protector strong:             \" \"\" \"\" \"\"\n        if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG=y`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1175,
                  "startColumn": 73,
                  "endLine": 1175,
                  "endColumn": 79,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1175,
                  "startColumn": 19,
                  "endLine": 1175,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                    "rendered": {
                      "text": "\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n",
                      "markdown": "`\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n\n      if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR_STRONG' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR_STRONG'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 69,
                  "endLine": 1173,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1173,
                  "startColumn": 17,
                  "endLine": 1173,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                    "rendered": {
                      "text": "    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n",
                      "markdown": "`    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n  fi\n\n  if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR' || ${kconfig} | grep -qa 'CONFIG_STACKPROTECTOR'; then\n    echo_message \"  GCC stack protector support:            \" \"\" \"\" \"\"\n    if ${kconfig} | grep -qi 'CONFIG_CC_STACKPROTECTOR=y' || ${kconfig} | grep -qi 'CONFIG_STACKPROTECTOR=y'; then\n      echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" gcc_stack_protector='yes'\" ', \"gcc_stack_protector\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1167,
                  "startColumn": 17,
                  "endLine": 1167,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n  echo_message \"  Kernel heap randomization:              \" \"\" \"\" \"\"\n  # NOTE: y means it turns off kernel heap randomization for backwards compatability (libc5)\n  if ${kconfig} | grep -qi 'CONFIG_COMPAT_BRK=y'; then\n    echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" kernel_heap_randomization='no'\" ', \"kernel_heap_randomization\":\"no\"'\n  else\n    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n",
                    "rendered": {
                      "text": "\n  echo_message \"  Kernel heap randomization:              \" \"\" \"\" \"\"\n  # NOTE: y means it turns off kernel heap randomization for backwards compatability (libc5)\n  if ${kconfig} | grep -qi 'CONFIG_COMPAT_BRK=y'; then\n    echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" kernel_heap_randomization='no'\" ', \"kernel_heap_randomization\":\"no\"'\n  else\n    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n",
                      "markdown": "`\n  echo_message \"  Kernel heap randomization:              \" \"\" \"\" \"\"\n  # NOTE: y means it turns off kernel heap randomization for backwards compatability (libc5)\n  if ${kconfig} | grep -qi 'CONFIG_COMPAT_BRK=y'; then\n    echo_message \"\\033[31mDisabled\\033[m\\n\" \"Disabled,\" \" kernel_heap_randomization='no'\" ', \"kernel_heap_randomization\":\"no\"'\n  else\n    echo_message \"\\033[32mEnabled\\033[m\\n\" \"Enabled,\" \" kernel_heap_randomization='yes'\" ', \"kernel_heap_randomization\":\"yes\"'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 43,
                  "endLine": 1105,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n  if [ -n \"$nx_protection\" ]; then\n    if [[ \"${nx_protection}\" == \"NX (Execute Disable) protection: active\" ]]; then\n",
                    "rendered": {
                      "text": "  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n  if [ -n \"$nx_protection\" ]; then\n    if [[ \"${nx_protection}\" == \"NX (Execute Disable) protection: active\" ]]; then\n",
                      "markdown": "`  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n  if [ -n \"$nx_protection\" ]; then\n    if [[ \"${nx_protection}\" == \"NX (Execute Disable) protection: active\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1103,
                  "startColumn": 57,
                  "endLine": 1103,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                    "rendered": {
                      "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                      "markdown": "`\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1103,
                  "startColumn": 43,
                  "endLine": 1103,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                    "rendered": {
                      "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                      "markdown": "`\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1103,
                  "startColumn": 37,
                  "endLine": 1103,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                    "rendered": {
                      "text": "\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n",
                      "markdown": "`\n  echo_message \"  NX protection:                          \" \"\" \"\" \"\"\n  if (command_exists journalctl); then\n    nx_protection=$(journalctl -kb -o cat | grep -Fw NX | head -n 1)\n  elif (command_exists dmesg) && (root_privs); then\n    nx_protection=$(dmesg -t 2> /dev/null | grep -Fw NX)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1071,
                  "startColumn": 19,
                  "endLine": 1071,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n      arch=\"32\"\n    fi\n  elif [[ -f /proc/config.gz ]]; then\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n      arch=\"32\"\n    fi\n  elif [[ -f /proc/config.gz ]]; then\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n      arch=\"32\"\n    fi\n  elif [[ -f /proc/config.gz ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1068,
                  "startColumn": 19,
                  "endLine": 1068,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n      arch=\"64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_32=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1065,
                  "startColumn": 19,
                  "endLine": 1065,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n",
                    "rendered": {
                      "text": "    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n",
                      "markdown": "`    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n      arch=\"aarch64\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_X86_64=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1062,
                  "startColumn": 19,
                  "endLine": 1062,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n",
                    "rendered": {
                      "text": "    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n",
                      "markdown": "`    kconfig=\"cat ${1}\"\n    echo_message \"  Warning: The config ${1} on disk may not represent running kernel config!\\n\\n\" \"${1}\" \"<kernel config=\\\"${1}\\\"\" \"{ \\\"KernelConfig\\\":\\\"${1}\\\"\"\n    # update the architecture based on the config rather than the system\n    if ${kconfig} | grep -qi 'CONFIG_ARM=y\\|CONFIG_ARM=y'; then\n      arch=\"arm\"\n    fi\n    if ${kconfig} | grep -qi 'CONFIG_ARM64=y'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1039,
                  "startColumn": 45,
                  "endLine": 1039,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                    "rendered": {
                      "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                      "markdown": "`    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1039,
                  "startColumn": 28,
                  "endLine": 1039,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                    "rendered": {
                      "text": "    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n",
                      "markdown": "`    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n      sestatus2=$(sestatus | grep \"Current\" | awk '{ print $3}')\n      if [[ \"${sestatus2}\" == \"permissive\" ]]; then\n        status=1\n      elif [[ \"${sestatus2}\" == \"enforcing\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 49,
                  "endLine": 1035,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                    "rendered": {
                      "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                      "markdown": "`      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1035,
                  "startColumn": 25,
                  "endLine": 1035,
                  "endColumn": 31,
                  "snippet": {
                    "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                    "rendered": {
                      "text": "      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n",
                      "markdown": "`      status=2\n    fi\n  elif (command_exists sestatus); then\n    sestatus=$(sestatus | grep \"SELinux status\" | awk '{ print $3}')\n    if [[ \"${sestatus}\" == \"disabled\" ]]; then\n      status=0\n    elif [[ \"${sestatus}\" == \"enabled\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 961,
                  "startColumn": 13,
                  "endLine": 961,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n# check if input is numeric\nisNumeric() {\n  echo \"$@\" | grep -q -v \"[^0-9]\"\n}\n\n# help\n",
                    "rendered": {
                      "text": "\n# check if input is numeric\nisNumeric() {\n  echo \"$@\" | grep -q -v \"[^0-9]\"\n}\n\n# help\n",
                      "markdown": "`\n# check if input is numeric\nisNumeric() {\n  echo \"$@\" | grep -q -v \"[^0-9]\"\n}\n\n# help\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 86,
                  "endLine": 835,
                  "endColumn": 91,
                  "snippet": {
                    "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                    "rendered": {
                      "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                      "markdown": "`  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 65,
                  "endLine": 835,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                    "rendered": {
                      "text": "  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n",
                      "markdown": "`  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_unchecked=$(grep -cFxf <(sort -u <<< \"${FS_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n  FS_cnt_total=$((FS_cnt_unchecked + FS_cnt_checked))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 84,
                  "endLine": 833,
                  "endColumn": 89,
                  "snippet": {
                    "text": "  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n",
                    "rendered": {
                      "text": "  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n",
                      "markdown": "`  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n  FS_func_libc=\"${FS_filechk_func_libc//_chk/}\"\n  FS_func=\"$(${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | awk '{ print $8 }' | sed -e 's/_*//' -e 's/@.*//' -e '/^$/d')\"\n  FS_cnt_checked=$(grep -cFxf <(sort -u <<< \"${FS_filechk_func_libc}\") <(sort -u <<< \"${FS_func}\"))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 56,
                  "endLine": 830,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 40,
                  "endLine": 830,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                    "rendered": {
                      "text": "\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n",
                      "markdown": "`\n  search_libc\n  libc_found=\"false\"\n  if ${readelf} -d \"${1}\" 2> /dev/null | grep 'NEEDED' | grep -q 'libc\\.so'; then\n    libc_found=\"true\"\n  fi\n  FS_filechk_func_libc=\"$(${readelf} -s \"${use_dynamic}\" \"${FS_libc}\" 2> /dev/null | sed -ne 's/.*__\\(.*_chk\\)@@.*/\\1/p')\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 47,
                  "endLine": 822,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n    echo_message '\\033[32mNo Symbols\\t\\033[m' 'No Symbols,' ' symbols=\"no\"' '\"symbols\":\"no\",'\n",
                    "rendered": {
                      "text": "\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n    echo_message '\\033[32mNo Symbols\\t\\033[m' 'No Symbols,' ' symbols=\"no\"' '\"symbols\":\"no\",'\n",
                      "markdown": "`\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n    echo_message '\\033[32mNo Symbols\\t\\033[m' 'No Symbols,' ' symbols=\"no\"' '\"symbols\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 112,
                  "endLine": 821,
                  "endColumn": 117,
                  "snippet": {
                    "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                      "markdown": "`  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 96,
                  "endLine": 821,
                  "endColumn": 101,
                  "snippet": {
                    "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                      "markdown": "`  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 821,
                  "startColumn": 78,
                  "endLine": 821,
                  "endColumn": 84,
                  "snippet": {
                    "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n",
                      "markdown": "`  fi\n\n  # check for stripped symbols in the binary\n  IFS=\" \" read -r -a SYM_cnt <<< \"$(${readelf} --symbols \"${1}\" 2> /dev/null | grep '\\.symtab' | cut -d' ' -f5 | cut -d: -f1)\"\n  if ${readelf} --symbols \"${1}\" 2> /dev/null | grep -q '\\.symtab'; then\n    echo_message \"\\033[31m${SYM_cnt[0]} Symbols\\t\\033[m\" 'Symbols,' ' symbols=\"yes\"' '\"symbols\":\"yes\",'\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 66,
                  "endLine": 810,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 8,
                  "endLine": 810,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRUNPATH   \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 77,
                  "endLine": 808,
                  "endColumn": 82,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m  ' 'N/A,' ' runpath=\"n/a\"' '\"runpath\":\"n/a\",'\n  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m  ' 'N/A,' ' runpath=\"n/a\"' '\"runpath\":\"n/a\",'\n  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m  ' 'N/A,' ' runpath=\"n/a\"' '\"runpath\":\"n/a\",'\n  else\n    IFS=: read -r -a runpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RUNPATH/ {print $2}')\"\n    if [[ \"${#runpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${runpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RUNPATH \\033[m  ' 'RUNPATH,' ' runpath=\"yes\"' '\"runpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 64,
                  "endLine": 794,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 8,
                  "endLine": 794,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                      "markdown": "`  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n      else\n        echo_message '\\033[31mRPATH   \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 75,
                  "endLine": 792,
                  "endColumn": 80,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A      \\033[m  ' 'N/A,' ' rpath=\"n/a\"' '\"rpath\":\"n/a\",'\n  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A      \\033[m  ' 'N/A,' ' rpath=\"n/a\"' '\"rpath\":\"n/a\",'\n  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -d \"${1}\" 2> /dev/null) =~ \"no dynamic section\" ]]; then\n    echo_message '\\033[32mN/A      \\033[m  ' 'N/A,' ' rpath=\"n/a\"' '\"rpath\":\"n/a\",'\n  else\n    IFS=: read -r -a rpath_array <<< \"$(${readelf} -d \"${1}\" 2> /dev/null | awk -F'[][]' '/RPATH/ {print $2}')\"\n    if [[ \"${#rpath_array[@]}\" -gt 0 ]]; then\n      if xargs stat -c %A <<< \"${rpath_array[*]}\" 2> /dev/null | grep -q 'rw'; then\n        echo_message '\\033[31mRW-RPATH \\033[m  ' 'RPATH,' ' rpath=\"yes\"' '\"rpath\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 55,
                  "endLine": 779,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    fi\n\n    # check if compiled with Clang SafeStack\n    if $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                    "rendered": {
                      "text": "    fi\n\n    # check if compiled with Clang SafeStack\n    if $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n",
                      "markdown": "`    fi\n\n    # check if compiled with Clang SafeStack\n    if $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -Eq '__safestack_init'; then\n      echo_message '\\033[32mSafeStack found   \\033[m   ' 'with SafeStack,' ' safestack=\"yes\"' '\"safestack\":\"yes\",'\n    else\n      echo_message '\\033[31mNo SafeStack found\\033[m   ' 'without SafeStack,' ' safestack=\"no\"' '\"safestack\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 76,
                  "endLine": 772,
                  "endColumn": 82,
                  "snippet": {
                    "text": "    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                    "rendered": {
                      "text": "    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n",
                      "markdown": "`    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n    else\n      echo_message '\\033[31mNo Clang CFI found\\033[m   ' 'without CFI,' ' clangcfi=\"no\"' '\"clangcfi\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 92,
                  "endLine": 770,
                  "endColumn": 97,
                  "snippet": {
                    "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                      "markdown": "`  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 77,
                  "endLine": 770,
                  "endColumn": 83,
                  "snippet": {
                    "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n",
                      "markdown": "`  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n      echo_message '\\033[32mClang CFI found   \\033[m   ' 'with CFI,' ' clangcfi=\"yes\"' '\"clangcfi\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 769,
                  "startColumn": 38,
                  "endLine": 769,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check if compiled with Clang CFI\n    #if $readelf -s \"$1\" 2>/dev/null | grep -Eq '\\.cfi'; then\n    read -r cfifunc <<< \"$($readelf -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep '\\.cfi' | awk '{ print $8 }')\"\n    func=${cfifunc/.cfi/}\n    if [ -n \"$cfifunc\" ] && $readelf -s \"${use_dynamic}\" \"$1\" 2> /dev/null | grep -q \"$func$\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 60,
                  "endLine": 760,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 42,
                  "endLine": 760,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                    "rendered": {
                      "text": "\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n",
                      "markdown": "`\n  if ${extended_checks}; then\n    # check for selfrando support\n    if ${readelf} -S \"${1}\" 2> /dev/null | grep -c 'txtrp' | grep -q '1'; then\n      echo_message '\\033[32mSelfrando enabled  \\033[m   '\n    else\n      echo_message '\\033[31mNo Selfrando       \\033[m   '\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 42,
                  "endLine": 752,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n    fi\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*REL'; then\n    echo_message '\\033[33mREL          \\033[m   ' 'REL,' ' pie=\"rel\"' '\"pie\":\"rel\",'\n  else\n    echo_message '\\033[33mNot an ELF file\\033[m   ' 'Not an ELF file,' ' pie=\"not_elf\"' '\"pie\":\"not_elf\",'\n",
                    "rendered": {
                      "text": "    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n    fi\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*REL'; then\n    echo_message '\\033[33mREL          \\033[m   ' 'REL,' ' pie=\"rel\"' '\"pie\":\"rel\",'\n  else\n    echo_message '\\033[33mNot an ELF file\\033[m   ' 'Not an ELF file,' ' pie=\"not_elf\"' '\"pie\":\"not_elf\",'\n",
                      "markdown": "`    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n    fi\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*REL'; then\n    echo_message '\\033[33mREL          \\033[m   ' 'REL,' ' pie=\"rel\"' '\"pie\":\"rel\",'\n  else\n    echo_message '\\033[33mNot an ELF file\\033[m   ' 'Not an ELF file,' ' pie=\"not_elf\"' '\"pie\":\"not_elf\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 747,
                  "startColumn": 42,
                  "endLine": 747,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                    "rendered": {
                      "text": "  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n",
                      "markdown": "`  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n      echo_message '\\033[33mDSO          \\033[m   ' 'DSO,' ' pie=\"dso\"' '\"pie\":\"dso\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 42,
                  "endLine": 746,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                    "rendered": {
                      "text": "  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n",
                      "markdown": "`  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n      echo_message '\\033[32mPIE enabled  \\033[m   ' 'PIE enabled,' ' pie=\"yes\"' '\"pie\":\"yes\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 40,
                  "endLine": 744,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n",
                      "markdown": "`  fi\n\n  # check for PIE support\n  if ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*EXEC'; then\n    echo_message '\\033[31mNo PIE       \\033[m   ' 'No PIE,' ' pie=\"no\"' '\"pie\":\"no\",'\n  elif ${readelf} -h \"${1}\" 2> /dev/null | grep -q 'Type:[[:space:]]*DYN'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'DEBUG'; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 108,
                  "endLine": 734,
                  "endColumn": 114,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 96,
                  "endLine": 734,
                  "endColumn": 102,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 66,
                  "endLine": 734,
                  "endColumn": 72,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 47,
                  "endLine": 734,
                  "endColumn": 53,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n      echo_message '\\033[32mNX enabled \\033[m   ' 'NX enabled,' ' nx=\"yes\"' '\"nx\":\"yes\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 733,
                  "startColumn": 42,
                  "endLine": 733,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # shellcheck disable=SC2126\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n",
                    "rendered": {
                      "text": "  # shellcheck disable=SC2126\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n",
                      "markdown": "`  # shellcheck disable=SC2126\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A        \\033[m   ' 'N/A,' ' nx=\"n/a\"' '\"nx\":\"n/a\",'\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_STACK'; then\n    if [[ $(${readelf} -l \"${1}\" 2> /dev/null | grep 'GNU_STACK' | grep -oP '(?<=0x).*(?=RW )' | grep -o . | sort -u | tr -d '\\n') != \" 0x\" ]]; then\n      echo_message '\\033[31mNX disabled\\033[m   ' 'NX disabled,' ' nx=\"no\"' '\"nx\":\"no\",'\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 72,
                  "endLine": 723,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 57,
                  "endLine": 723,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                    "rendered": {
                      "text": "  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n",
                      "markdown": "`  fi\n\n  # check for stack canary support\n  if ${readelf} -s \"${use_dynamic}\" \"${1}\" 2> /dev/null | grep \" UND \" | grep -Eq '__stack_chk_fail|__stack_chk_guard|__intel_security_cookie'; then\n    echo_message '\\033[32mCanary found   \\033[m   ' 'Canary found,' ' canary=\"yes\"' '\"canary\":\"yes\",'\n  else\n    echo_message '\\033[31mNo canary found\\033[m   ' 'No Canary found,' ' canary=\"no\"' '\"canary\":\"no\",'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 102,
                  "endLine": 707,
                  "endColumn": 108,
                  "snippet": {
                    "text": "headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"partial\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"partial\\\",\"\n    fi\n  else\n  ",
                    "rendered": {
                      "text": "headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"partial\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"partial\\\",\"\n    fi\n  else\n  ",
                      "markdown": "`headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"partial\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"partial\\\",\"\n    fi\n  else\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 42,
                  "endLine": 707,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"part",
                    "rendered": {
                      "text": "  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"part",
                      "markdown": "`  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n      echo_message '\\033[33mPartial RELRO\\033[m   ' 'Partial RELRO,' '<file relro=\"part`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 42,
                  "endLine": 706,
                  "endColumn": 48,
                  "snippet": {
                    "text": "  # check for RELRO support\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n",
                    "rendered": {
                      "text": "  # check for RELRO support\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n",
                      "markdown": "`  # check for RELRO support\n  if [[ $(${readelf} -l \"${1}\" 2> /dev/null) =~ \"no program headers\" ]]; then\n    echo_message '\\033[32mN/A          \\033[m   ' 'N/A,' '<file relro=\"n/a\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"n/a\\\",\"\n  elif ${readelf} -l \"${1}\" 2> /dev/null | grep -q 'GNU_RELRO'; then\n    if ${readelf} -d \"${1}\" 2> /dev/null | grep -q 'BIND_NOW' || ! ${readelf} -l \"${1}\" 2> /dev/null | grep -q '\\.got\\.plt'; then\n      echo_message '\\033[32mFull RELRO   \\033[m   ' 'Full RELRO,' '<file relro=\"full\"' \" \\\"${1}\\\": { \\\"relro\\\":\\\"full\\\",\"\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 23,
                  "endLine": 691,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        file \"${path}\"\n      fi\n    else\n      echo \"*** can not find command ${command}\"\n      failed=true\n    fi\n  done\n",
                    "rendered": {
                      "text": "        file \"${path}\"\n      fi\n    else\n      echo \"*** can not find command ${command}\"\n      failed=true\n    fi\n  done\n",
                      "markdown": "`        file \"${path}\"\n      fi\n    else\n      echo \"*** can not find command ${command}\"\n      failed=true\n    fi\n  done\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 129,
                  "endLine": 679,
                  "endColumn": 138,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 119,
                  "endLine": 679,
                  "endColumn": 125,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 79,
                  "endLine": 679,
                  "endColumn": 85,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 56,
                  "endLine": 679,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 31,
                  "endLine": 679,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 16,
                  "endLine": 679,
                  "endColumn": 21,
                  "snippet": {
                    "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                    "rendered": {
                      "text": "  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n",
                      "markdown": "`  echo \"OS=${OS}\"\n  echo \"VER=${VER}\"\n\n  for command in cat awk sysctl sed uname objdump mktemp openssl grep stat file find head ps readlink basename id which wget curl readelf eu-readelf; do\n    path=\"$(command -v ${command})\"\n    if [[ -e \"${path}\" ]]; then\n      ls -l \"${path}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 11,
                  "endLine": 667,
                  "endColumn": 16,
                  "snippet": {
                    "text": "    OS=$(cat /etc/SuSe-release)\n    VER=$(uname -r)\n  elif [[ -f /etc/redhat-release ]]; then\n    # Older Red Hat, CentOS, etc.\n    OS=$(cat /etc/redhat-release)\n    VER=$(uname -r)\n  else\n",
                    "rendered": {
                      "text": "    OS=$(cat /etc/SuSe-release)\n    VER=$(uname -r)\n  elif [[ -f /etc/redhat-release ]]; then\n    # Older Red Hat, CentOS, etc.\n    OS=$(cat /etc/redhat-release)\n    VER=$(uname -r)\n  else\n",
                      "markdown": "`    OS=$(cat /etc/SuSe-release)\n    VER=$(uname -r)\n  elif [[ -f /etc/redhat-release ]]; then\n    # Older Red Hat, CentOS, etc.\n    OS=$(cat /etc/redhat-release)\n    VER=$(uname -r)\n  else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 34,
                  "endLine": 584,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  fi\n  N=${CHK_PROC_LIBS}\n  if [[ -d \"${N}\" ]]; then\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    if [[ \"${format}\" == \"cli\" ]]; then\n      printf \"%16s\" \"${name}\"\n      printf \"%7d \" \"${N}\"\n",
                    "rendered": {
                      "text": "  fi\n  N=${CHK_PROC_LIBS}\n  if [[ -d \"${N}\" ]]; then\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    if [[ \"${format}\" == \"cli\" ]]; then\n      printf \"%16s\" \"${name}\"\n      printf \"%7d \" \"${N}\"\n",
                      "markdown": "`  fi\n  N=${CHK_PROC_LIBS}\n  if [[ -d \"${N}\" ]]; then\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    if [[ \"${format}\" == \"cli\" ]]; then\n      printf \"%16s\" \"${name}\"\n      printf \"%7d \" \"${N}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 36,
                  "endLine": 532,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  last=${fpids[$pos]}\n  for N in \"${fpids[@]}\"; do\n    if [[ -d \"${N}\" ]]; then\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                    "rendered": {
                      "text": "  last=${fpids[$pos]}\n  for N in \"${fpids[@]}\"; do\n    if [[ -d \"${N}\" ]]; then\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                      "markdown": "`  last=${fpids[$pos]}\n  for N in \"${fpids[@]}\"; do\n    if [[ -d \"${N}\" ]]; then\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 63,
                  "endLine": 496,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n      echo_message \"      Too see all processes, please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n    fi\n  fi\n}\n",
                    "rendered": {
                      "text": "  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n      echo_message \"      Too see all processes, please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n    fi\n  fi\n}\n",
                      "markdown": "`  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n      echo_message \"      Too see all processes, please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n    fi\n  fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 66,
                  "endLine": 492,
                  "endColumn": 74,
                  "snippet": {
                    "text": "  echo_message \"\" \"\" \"</procs>\" \" }\\n\"\n  if [[ ! -e /usr/bin/id ]]; then\n    echo_message \"\\n\\033[33mNote: If you are running 'checksec.sh' as an unprivileged user, you\\n\" \"\" \"\" \"\"\n    echo_message \"      will not see all processes. Please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n",
                    "rendered": {
                      "text": "  echo_message \"\" \"\" \"</procs>\" \" }\\n\"\n  if [[ ! -e /usr/bin/id ]]; then\n    echo_message \"\\n\\033[33mNote: If you are running 'checksec.sh' as an unprivileged user, you\\n\" \"\" \"\" \"\"\n    echo_message \"      will not see all processes. Please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n",
                      "markdown": "`  echo_message \"\" \"\" \"</procs>\" \" }\\n\"\n  if [[ ! -e /usr/bin/id ]]; then\n    echo_message \"\\n\\033[33mNote: If you are running 'checksec.sh' as an unprivileged user, you\\n\" \"\" \"\" \"\"\n    echo_message \"      will not see all processes. Please run the script as root.\\033[m\\n\\n\" \"\" \"\" \"\\n\"\n  else\n    if ! (root_privs); then\n      echo_message \"\\n\\033[33mNote: You are running 'checksec.sh' as an unprivileged user.\\n\" \"\" \"\" \"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 36,
                  "endLine": 473,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  for N in [1-9]*; do\n    if [[ \"${N}\" != \"$$\" ]] && readlink -q \"${N}\"/exe > /dev/null; then\n      ((currpid++))\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                    "rendered": {
                      "text": "  for N in [1-9]*; do\n    if [[ \"${N}\" != \"$$\" ]] && readlink -q \"${N}\"/exe > /dev/null; then\n      ((currpid++))\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n",
                      "markdown": "`  for N in [1-9]*; do\n    if [[ \"${N}\" != \"$$\" ]] && readlink -q \"${N}\"/exe > /dev/null; then\n      ((currpid++))\n      name=$(head -1 \"${N}\"/status | cut -b 7-)\n      if [[ $format == \"cli\" ]]; then\n        printf \"%16s\" \"${name}\"\n        printf \"%7d \" \"${N}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 177,
                  "endLine": 440,
                  "endColumn": 183,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 158,
                  "endLine": 440,
                  "endColumn": 163,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 143,
                  "endLine": 440,
                  "endColumn": 148,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 122,
                  "endLine": 440,
                  "endColumn": 127,
                  "snippet": {
                    "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                    "rendered": {
                      "text": "    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n",
                      "markdown": "`    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n    FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 183,
                  "endLine": 439,
                  "endColumn": 189,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 160,
                  "endLine": 439,
                  "endColumn": 165,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 148,
                  "endLine": 439,
                  "endColumn": 153,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 127,
                  "endLine": 439,
                  "endColumn": 132,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 113,
                  "endLine": 439,
                  "endColumn": 119,
                  "snippet": {
                    "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                    "rendered": {
                      "text": "\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n",
                      "markdown": "`\n    FS_chk_func_libc=()\n    FS_functions=()\n    while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n    while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_PROC}/exe\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n    echo_message \"\" \"\" \"<fortify-test name='${name}' pid='${N}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${name}\\\", \\\"pid\\\":\\\"${N}\\\" \"\n    FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 34,
                  "endLine": 432,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      fi\n      exit 1\n    fi\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    echo_message \"* Process name (PID)                         : ${name} (${N})\\n\" \"\" \"\" \"\"\n\n    search_libc\n",
                    "rendered": {
                      "text": "      fi\n      exit 1\n    fi\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    echo_message \"* Process name (PID)                         : ${name} (${N})\\n\" \"\" \"\" \"\"\n\n    search_libc\n",
                      "markdown": "`      fi\n      exit 1\n    fi\n    name=$(head -1 \"${N}/status\" | cut -b 7-)\n    echo_message \"* Process name (PID)                         : ${name} (${N})\\n\" \"\" \"\" \"\"\n\n    search_libc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 171,
                  "endLine": 399,
                  "endColumn": 177,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 152,
                  "endLine": 399,
                  "endColumn": 157,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 137,
                  "endLine": 399,
                  "endColumn": 142,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 116,
                  "endLine": 399,
                  "endColumn": 121,
                  "snippet": {
                    "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                    "rendered": {
                      "text": "  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n",
                      "markdown": "`  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n  FS_binary_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 181,
                  "endLine": 398,
                  "endColumn": 187,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 158,
                  "endLine": 398,
                  "endColumn": 163,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 146,
                  "endLine": 398,
                  "endColumn": 151,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 125,
                  "endLine": 398,
                  "endColumn": 130,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 111,
                  "endLine": 398,
                  "endColumn": 117,
                  "snippet": {
                    "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                    "rendered": {
                      "text": "\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n",
                      "markdown": "`\n  FS_chk_func_libc=()\n  FS_functions=()\n  while IFS='' read -r line; do FS_chk_func_libc+=(\"$line\"); done < <(${readelf} -s \"${FS_libc}\" 2> /dev/null | grep _chk@@ | awk '{ print $8 }' | cut -c 3- | sed -e 's/_chk@.*//' | sort -u)\n  while IFS='' read -r line; do FS_functions+=(\"$line\"); done < <(${readelf} -s \"${CHK_FORTIFY_FILE}\" 2> /dev/null | awk '{ print $8 }' | sed 's/_*//' | sed -e 's/@.*//' | sort -u)\n  echo_message \"\" \"\" \"<fortify-test name='${CHK_FORTIFY_FILE}' \" \"{ \\\"fortify-test\\\": { \\\"name\\\":\\\"${CHK_FORTIFY_FILE}\\\" \"\n  FS_libc_check\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 31,
                  "endLine": 212,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    CHK_DIR=$(readlink -f \"${CHK_DIR}\")\n  fi\n  # remove trailing slashes\n  tempdir=$(echo \"${CHK_DIR}\" | sed -e \"s/\\/*$//\")\n  if [[ ! -d \"${tempdir}\" ]]; then\n    printf \"\\033[31mError: The directory '%s' does not exist.\\033[m\\n\\n\" \"${tempdir}\"\n    exit 1\n",
                    "rendered": {
                      "text": "    CHK_DIR=$(readlink -f \"${CHK_DIR}\")\n  fi\n  # remove trailing slashes\n  tempdir=$(echo \"${CHK_DIR}\" | sed -e \"s/\\/*$//\")\n  if [[ ! -d \"${tempdir}\" ]]; then\n    printf \"\\033[31mError: The directory '%s' does not exist.\\033[m\\n\\n\" \"${tempdir}\"\n    exit 1\n",
                      "markdown": "`    CHK_DIR=$(readlink -f \"${CHK_DIR}\")\n  fi\n  # remove trailing slashes\n  tempdir=$(echo \"${CHK_DIR}\" | sed -e \"s/\\/*$//\")\n  if [[ ! -d \"${tempdir}\" ]]; then\n    printf \"\\033[31mError: The directory '%s' does not exist.\\033[m\\n\\n\" \"${tempdir}\"\n    exit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 33,
                  "endLine": 193,
                  "endColumn": 39,
                  "snippet": {
                    "text": "      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to random \\n\" '' '' ''\n      echo_message \"  addresses. Also for PIE-linked binaries, the location of code start is randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 0'; then\n      echo_message '\\033[31mNone (Setting: 0)\\033[m\\n' '' '' ''\n    else\n      echo_message '\\033[31mNot supported\\033[m\\n' '' '' ''\n",
                    "rendered": {
                      "text": "      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to random \\n\" '' '' ''\n      echo_message \"  addresses. Also for PIE-linked binaries, the location of code start is randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 0'; then\n      echo_message '\\033[31mNone (Setting: 0)\\033[m\\n' '' '' ''\n    else\n      echo_message '\\033[31mNot supported\\033[m\\n' '' '' ''\n",
                      "markdown": "`      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to random \\n\" '' '' ''\n      echo_message \"  addresses. Also for PIE-linked binaries, the location of code start is randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 0'; then\n      echo_message '\\033[31mNone (Setting: 0)\\033[m\\n' '' '' ''\n    else\n      echo_message '\\033[31mNot supported\\033[m\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 33,
                  "endLine": 188,
                  "endColumn": 39,
                  "snippet": {
                    "text": " things, implies that shared libraries will be loaded to \\n\" '' '' ''\n      echo_message \"  random addresses. Also for PIE-linked binaries, the location of code start\\n\" '' '' ''\n      echo_message \"  is randomized. Heap addresses are *not* randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 2'; then\n      echo_message '\\033[32mFull (Setting: 2)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libra",
                    "rendered": {
                      "text": " things, implies that shared libraries will be loaded to \\n\" '' '' ''\n      echo_message \"  random addresses. Also for PIE-linked binaries, the location of code start\\n\" '' '' ''\n      echo_message \"  is randomized. Heap addresses are *not* randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 2'; then\n      echo_message '\\033[32mFull (Setting: 2)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libra",
                      "markdown": "` things, implies that shared libraries will be loaded to \\n\" '' '' ''\n      echo_message \"  random addresses. Also for PIE-linked binaries, the location of code start\\n\" '' '' ''\n      echo_message \"  is randomized. Heap addresses are *not* randomized.\\n\\n\" '' '' ''\n    elif sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 2'; then\n      echo_message '\\033[32mFull (Setting: 2)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, heap, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libra`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 31,
                  "endLine": 182,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    # standard Linux 'kernel.randomize_va_space' ASLR support\n    # (see the kernel file 'Documentation/admin-guide/sysctl/kernel.rst' for a detailed description)\n    echo_message \" (kernel.randomize_va_space): \" '' '' ''\n    if sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 1'; then\n      echo_message '\\033[33mPartial (Setting: 1)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to \\n\" '' '' ''\n",
                    "rendered": {
                      "text": "    # standard Linux 'kernel.randomize_va_space' ASLR support\n    # (see the kernel file 'Documentation/admin-guide/sysctl/kernel.rst' for a detailed description)\n    echo_message \" (kernel.randomize_va_space): \" '' '' ''\n    if sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 1'; then\n      echo_message '\\033[33mPartial (Setting: 1)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to \\n\" '' '' ''\n",
                      "markdown": "`    # standard Linux 'kernel.randomize_va_space' ASLR support\n    # (see the kernel file 'Documentation/admin-guide/sysctl/kernel.rst' for a detailed description)\n    echo_message \" (kernel.randomize_va_space): \" '' '' ''\n    if sysctl -a 2> /dev/null | grep -q 'kernel\\.randomize_va_space = 1'; then\n      echo_message '\\033[33mPartial (Setting: 1)\\033[m\\n\\n' '' '' ''\n      echo_message \"  Description - Make the addresses of mmap base, stack and VDSO page randomized.\\n\" '' '' ''\n      echo_message \"  This, among other things, implies that shared libraries will be loaded to \\n\" '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 51,
                  "endLine": 173,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                    "rendered": {
                      "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                      "markdown": "`  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 6,
                  "endLine": 173,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                    "rendered": {
                      "text": "  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n",
                      "markdown": "`  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n      echo_message '\\033[31mPaX ASLR disabled\\033[m\\n\\n' '' '' ''\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 4,
                  "endLine": 172,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    echo_message '  Fallback to standard Linux ASLR check' '' '' ''\n  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n",
                    "rendered": {
                      "text": "    echo_message '  Fallback to standard Linux ASLR check' '' '' ''\n  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n",
                      "markdown": "`    echo_message '  Fallback to standard Linux ASLR check' '' '' ''\n  fi\n\n  if grep -q 'PaX:' /proc/1/status 2> /dev/null; then\n    if grep -q 'PaX:' /proc/1/status 2> /dev/null | grep -q 'R'; then\n      echo_message '\\033[32mPaX ASLR enabled\\033[m\\n\\n' '' '' ''\n    else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 25,
                  "endLine": 149,
                  "endColumn": 34,
                  "snippet": {
                    "text": "done\n\nif [[ -z ${readelf} ]]; then\n  echo -e \"\\n\\e[31mERROR: readelf is a required tool for almost all tests. Aborting...\\e[0m\\n\"\n  exit\nfi\n\n",
                    "rendered": {
                      "text": "done\n\nif [[ -z ${readelf} ]]; then\n  echo -e \"\\n\\e[31mERROR: readelf is a required tool for almost all tests. Aborting...\\e[0m\\n\"\n  exit\nfi\n\n",
                      "markdown": "`done\n\nif [[ -z ${readelf} ]]; then\n  echo -e \"\\n\\e[31mERROR: readelf is a required tool for almost all tests. Aborting...\\e[0m\\n\"\n  exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 14,
                  "endLine": 141,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  fi\n}\n\nfor command in readelf eu-readelf greadelf; do\n  if (command_exists ${command}); then\n    readelf=\"${command} -W\"\n    break\n",
                    "rendered": {
                      "text": "  fi\n}\n\nfor command in readelf eu-readelf greadelf; do\n  if (command_exists ${command}); then\n    readelf=\"${command} -W\"\n    break\n",
                      "markdown": "`  fi\n}\n\nfor command in readelf eu-readelf greadelf; do\n  if (command_exists ${command}); then\n    readelf=\"${command} -W\"\n    break\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 10,
                  "endLine": 125,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n        FS_libc=$(find \"${LIBC_SEARCH_PATH}\" \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      # if ldconfig failed, then as a last resort search for libc in \"/lib/\", \"/lib64/\" and \"/\"\n      else\n        FS_libc=$(find /lib/ /lib64/ / \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      fi\n",
                    "rendered": {
                      "text": "      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n        FS_libc=$(find \"${LIBC_SEARCH_PATH}\" \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      # if ldconfig failed, then as a last resort search for libc in \"/lib/\", \"/lib64/\" and \"/\"\n      else\n        FS_libc=$(find /lib/ /lib64/ / \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      fi\n",
                      "markdown": "`      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n        FS_libc=$(find \"${LIBC_SEARCH_PATH}\" \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      # if ldconfig failed, then as a last resort search for libc in \"/lib/\", \"/lib64/\" and \"/\"\n      else\n        FS_libc=$(find /lib/ /lib64/ / \\( -name \"libc.so.6\" -o -name \"libc.so.7\" -o -name \"libc.so\" \\) -print -quit 2> /dev/null)\n      fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 35,
                  "endLine": 120,
                  "endColumn": 45,
                  "snippet": {
                    "text": "      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n    if [[ -z ${FS_libc} ]]; then\n      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n",
                    "rendered": {
                      "text": "      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n    if [[ -z ${FS_libc} ]]; then\n      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n",
                      "markdown": "`      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n    if [[ -z ${FS_libc} ]]; then\n      # if a search path was specified, look for libc in LIBC_SEARCH_PATH\n      if [[ -n \"${LIBC_SEARCH_PATH}\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 66,
                  "endLine": 117,
                  "endColumn": 72,
                  "snippet": {
                    "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                    "rendered": {
                      "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                      "markdown": "`      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 47,
                  "endLine": 117,
                  "endColumn": 52,
                  "snippet": {
                    "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                    "rendered": {
                      "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                      "markdown": "`      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 29,
                  "endLine": 117,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                    "rendered": {
                      "text": "      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n",
                      "markdown": "`      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n    # if a search path was given or ldconfig failed we need to search for libc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 67,
                  "endLine": 116,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                    "rendered": {
                      "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                      "markdown": "`        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 48,
                  "endLine": 116,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                    "rendered": {
                      "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                      "markdown": "`        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 30,
                  "endLine": 116,
                  "endColumn": 36,
                  "snippet": {
                    "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                    "rendered": {
                      "text": "        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n",
                      "markdown": "`        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "endLine": 115,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      elif [[ -d \"${LIBC_FILE}\" ]]; then\n        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n",
                    "rendered": {
                      "text": "      elif [[ -d \"${LIBC_FILE}\" ]]; then\n        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n",
                      "markdown": "`      elif [[ -d \"${LIBC_FILE}\" ]]; then\n        LIBC_SEARCH_PATH=${LIBC_FILE}\n      fi\n    # otherwise use ldconfig to get the libc location\n    elif [[ -f $(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1) ]]; then\n      FS_libc=$(ldconfig -p | grep 'libc\\.so' | awk '{print $4}' | head -n 1)\n    fi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 122,
                  "endLine": 92,
                  "endColumn": 129,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 87,
                  "endLine": 92,
                  "endColumn": 93,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 77,
                  "endLine": 92,
                  "endColumn": 83,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 54,
                  "endLine": 92,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 22,
                  "endLine": 92,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 14,
                  "endLine": 92,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                    "rendered": {
                      "text": "  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n",
                      "markdown": "`  type \"${1}\" > /dev/null 2>&1\n}\n\nfor command in cat awk sed sysctl objdump uname mktemp openssl grep stat file find sort head ps readlink basename id which xargs ldconfig tr; do\n  if ! (command_exists ${command}); then\n    echo >&2 -e \"\\e[31mWARNING: '${command}' not found! It's required for most checks.\\e[0m\"\n    commandsmissing=true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 16,
                  "snippet": {
                    "text": "PATH=${PATH}:/sbin/:/usr/sbin/:/usr/bin/:/bin/\n\n# sanitize the environment before run\n[[ \"$(env | sed -r -e '/^(PWD|SHLVL|_)=/d')\" ]] && exec -c \"$0\" \"$@\"\n\nexport PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n\n",
                    "rendered": {
                      "text": "PATH=${PATH}:/sbin/:/usr/sbin/:/usr/bin/:/bin/\n\n# sanitize the environment before run\n[[ \"$(env | sed -r -e '/^(PWD|SHLVL|_)=/d')\" ]] && exec -c \"$0\" \"$@\"\n\nexport PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n\n",
                      "markdown": "`PATH=${PATH}:/sbin/:/usr/sbin/:/usr/bin/:/bin/\n\n# sanitize the environment before run\n[[ \"$(env | sed -r -e '/^(PWD|SHLVL|_)=/d')\" ]] && exec -c \"$0\" \"$@\"\n\nexport PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n\n# --- Modified Version ---\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n\n# --- Modified Version ---\n",
                      "markdown": "`#!/usr/bin/env bash\n# Do not edit this file directly, this file is generated from the files\n# in the src directory. Any updates to this file will be overwritten when generated\n\n# --- Modified Version ---\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 28,
                  "endLine": 29,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    echo \"File not Found. Keep checksec in same directory and run the script again.\"\n    exit 1\n  else\n    ./checksec --file=\"$i\" | tee -a \"$2\"\n  fi\ndone < <(cat linux_executables.txt)\n",
                    "rendered": {
                      "text": "    echo \"File not Found. Keep checksec in same directory and run the script again.\"\n    exit 1\n  else\n    ./checksec --file=\"$i\" | tee -a \"$2\"\n  fi\ndone < <(cat linux_executables.txt)\n",
                      "markdown": "`    echo \"File not Found. Keep checksec in same directory and run the script again.\"\n    exit 1\n  else\n    ./checksec --file=\"$i\" | tee -a \"$2\"\n  fi\ndone < <(cat linux_executables.txt)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 69,
                  "endLine": 26,
                  "endColumn": 77,
                  "snippet": {
                    "text": "while read -r i; do\n  ./checksec &> /dev/null\n  if [ \"$?\" -eq 127 ]; then\n    echo \"File not Found. Keep checksec in same directory and run the script again.\"\n    exit 1\n  else\n    ./checksec --file=\"$i\" | tee -a \"$2\"\n",
                    "rendered": {
                      "text": "while read -r i; do\n  ./checksec &> /dev/null\n  if [ \"$?\" -eq 127 ]; then\n    echo \"File not Found. Keep checksec in same directory and run the script again.\"\n    exit 1\n  else\n    ./checksec --file=\"$i\" | tee -a \"$2\"\n",
                      "markdown": "`while read -r i; do\n  ./checksec &> /dev/null\n  if [ \"$?\" -eq 127 ]; then\n    echo \"File not Found. Keep checksec in same directory and run the script again.\"\n    exit 1\n  else\n    ./checksec --file=\"$i\" | tee -a \"$2\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 24,
                  "endLine": 21,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\nwhile read -r i; do\n  ./checksec &> /dev/null\n",
                    "rendered": {
                      "text": "\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\nwhile read -r i; do\n  ./checksec &> /dev/null\n",
                      "markdown": "`\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\nwhile read -r i; do\n  ./checksec &> /dev/null\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 212,
                  "endLine": 19,
                  "endColumn": 217,
                  "snippet": {
                    "text": "  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                    "rendered": {
                      "text": "  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                      "markdown": "`  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 201,
                  "endLine": 19,
                  "endColumn": 206,
                  "snippet": {
                    "text": "  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                    "rendered": {
                      "text": "  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                      "markdown": "`  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 53,
                  "endLine": 19,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                    "rendered": {
                      "text": "  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                      "markdown": "`  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 19,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  help\n  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                    "rendered": {
                      "text": "  help\n  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n",
                      "markdown": "`  help\n  exit 1\nfi\n\nfind \"$1\" -type f -executable -exec file -i '{}' \\; | grep -e 'application/x-sharedlib; charset=binary' -e 'application/x-pie-executable; charset=binary' -e 'application/x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\necho \"Checksec Output\" | tee \"$2\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 106,
                  "endLine": 5,
                  "endColumn": 111,
                  "snippet": {
                    "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                    "rendered": {
                      "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                      "markdown": "`\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 95,
                  "endLine": 5,
                  "endColumn": 100,
                  "snippet": {
                    "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                    "rendered": {
                      "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                      "markdown": "`\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 57,
                  "endLine": 5,
                  "endColumn": 63,
                  "snippet": {
                    "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                    "rendered": {
                      "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                      "markdown": "`\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 5,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                    "rendered": {
                      "text": "\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n",
                      "markdown": "`\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n\n#tree -fi $1 > linux_executables.txt\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/checksec_automator.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n",
                      "markdown": "`#!/usr/bin/env bash\n\n# keep checksec executable and checksec_automation file in same directory.\n\n#sudo find $1 -type f -executable -exec file -i '{}' \\; | grep 'x-executable; charset=binary' | cut -c1- | cut -d ':' -f1 > linux_executables.txt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 215,
                  "endLine": 147,
                  "endColumn": 219,
                  "snippet": {
                    "text": "guration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be prese",
                    "rendered": {
                      "text": "guration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be prese",
                      "markdown": "`guration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be prese`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "endLine": 31,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  - [ ] Add ProcLibs\n  - [ ] Add selinux checks\n  - [ ] Add additional kernel flag checks\n  - [ ] Update and Validate all current tests\n  - [ ] Enable golint validation\n\nFor OSX\n",
                    "rendered": {
                      "text": "  - [ ] Add ProcLibs\n  - [ ] Add selinux checks\n  - [ ] Add additional kernel flag checks\n  - [ ] Update and Validate all current tests\n  - [ ] Enable golint validation\n\nFor OSX\n",
                      "markdown": "`  - [ ] Add ProcLibs\n  - [ ] Add selinux checks\n  - [ ] Add additional kernel flag checks\n  - [ ] Update and Validate all current tests\n  - [ ] Enable golint validation\n\nFor OSX\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "endLine": 16,
                  "endColumn": 37,
                  "snippet": {
                    "text": "is has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless containers, and cross platform checks.\n  - Feature partial between the bash version and the golang version will be mostly supported.\n    - Adding support for yaml output\n    - Removing support for CSV\n    - JSON and XML will still both be supported\n  - Much faster results. When checking 694 files in a directory\n      - bash: real  0m10.348s\n      - golang: real    0m0.691s\n",
                    "rendered": {
                      "text": "is has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless containers, and cross platform checks.\n  - Feature partial between the bash version and the golang version will be mostly supported.\n    - Adding support for yaml output\n    - Removing support for CSV\n    - JSON and XML will still both be supported\n  - Much faster results. When checking 694 files in a directory\n      - bash: real  0m10.348s\n      - golang: real    0m0.691s\n",
                      "markdown": "`is has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless containers, and cross platform checks.\n  - Feature partial between the bash version and the golang version will be mostly supported.\n    - Adding support for yaml output\n    - Removing support for CSV\n    - JSON and XML will still both be supported\n  - Much faster results. When checking 694 files in a directory\n      - bash: real  0m10.348s\n      - golang: real    0m0.691s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 60,
                  "endLine": 13,
                  "snippet": {
                    "text": "to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more d",
                    "rendered": {
                      "text": "to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more d",
                      "markdown": "`to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more d`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 13,
                  "endLine": 6,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\n",
                    "rendered": {
                      "text": "\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\n",
                      "markdown": "`\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2,
                  "endLine": 4,
                  "endColumn": 8,
                  "snippet": {
                    "text": "checksec\n========\n\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n",
                    "rendered": {
                      "text": "checksec\n========\n\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n",
                      "markdown": "`checksec\n========\n\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 68,
                  "endLine": 151,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n",
                    "rendered": {
                      "text": "\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n",
                      "markdown": "`\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 226,
                  "endLine": 149,
                  "endColumn": 234,
                  "snippet": {
                    "text": "ave this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n",
                    "rendered": {
                      "text": "ave this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n",
                      "markdown": "`ave this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 158,
                  "endLine": 149,
                  "endColumn": 167,
                  "snippet": {
                    "text": "und this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n",
                    "rendered": {
                      "text": "und this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n",
                      "markdown": "`und this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will work.\n\nEven with those limitations, the amount of valuable information this script provides, still makes it a valuable tool for checking offline file-systems.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 270,
                  "endLine": 147,
                  "endColumn": 278,
                  "snippet": {
                    "text": " kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will wor",
                    "rendered": {
                      "text": " kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will wor",
                      "markdown": "` kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the running system's libraries vs those in the offline file-system. There are ways to workaround this (chroot) but at the moment, the ideal configuration would have this script executing on the running system when checking the files.\n\nThe checksec tool's normal use case is for runtime checking of the systems configuration.  If the system is an embedded target, the native binutils tools like readelf may not be present.  This would restrict which parts of the script will wor`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 43,
                  "endLine": 145,
                  "endColumn": 51,
                  "snippet": {
                    "text": "ess\":\"yes\",\"restrict_dev_kmem_access\":\"no\" },{ \"kernheap_config\":\"no\" } }\n\nUsing with Cross-compiled Systems\n---------------------------------------\nThe checksec tool can be used against cross-compiled target file-systems offline.  Key limitations to note:\n* Kernel tests - require you to execute the script on the running system you'd like to check as they directly access kernel resources to identify system configuration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the run",
                    "rendered": {
                      "text": "ess\":\"yes\",\"restrict_dev_kmem_access\":\"no\" },{ \"kernheap_config\":\"no\" } }\n\nUsing with Cross-compiled Systems\n---------------------------------------\nThe checksec tool can be used against cross-compiled target file-systems offline.  Key limitations to note:\n* Kernel tests - require you to execute the script on the running system you'd like to check as they directly access kernel resources to identify system configuration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the run",
                      "markdown": "`ess\":\"yes\",\"restrict_dev_kmem_access\":\"no\" },{ \"kernheap_config\":\"no\" } }\n\nUsing with Cross-compiled Systems\n---------------------------------------\nThe checksec tool can be used against cross-compiled target file-systems offline.  Key limitations to note:\n* Kernel tests - require you to execute the script on the running system you'd like to check as they directly access kernel resources to identify system configuration/state. You can specify the config file for the kernel after the -k option.\n\n* File check -  the offline testing works for all the checks but the Fortify feature.  Fortify, uses the run`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 27,
                  "endLine": 43,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\n`cosign verify-blob --signature checksec_new.sig --certificate checksec_new.pub checksec --certificate-identity=slimm609@gmail.com --certificate-oidc-issuer=https://github.com/login/oauth`\n\n**Openssl Verify Checksec**\nOpenssl verification is being deprecated in favor of Cosign Verification, which is backed by a hardware security module and provides a greater level of intergrity.\n\n`openssl dgst -sha256 -verify checksec.pub -signature checksec.sig checksec`\n\n",
                    "rendered": {
                      "text": "\n`cosign verify-blob --signature checksec_new.sig --certificate checksec_new.pub checksec --certificate-identity=slimm609@gmail.com --certificate-oidc-issuer=https://github.com/login/oauth`\n\n**Openssl Verify Checksec**\nOpenssl verification is being deprecated in favor of Cosign Verification, which is backed by a hardware security module and provides a greater level of intergrity.\n\n`openssl dgst -sha256 -verify checksec.pub -signature checksec.sig checksec`\n\n",
                      "markdown": "`\n`cosign verify-blob --signature checksec_new.sig --certificate checksec_new.pub checksec --certificate-identity=slimm609@gmail.com --certificate-oidc-issuer=https://github.com/login/oauth`\n\n**Openssl Verify Checksec**\nOpenssl verification is being deprecated in favor of Cosign Verification, which is backed by a hardware security module and provides a greater level of intergrity.\n\n`openssl dgst -sha256 -verify checksec.pub -signature checksec.sig checksec`\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 31,
                  "endLine": 16,
                  "endColumn": 37,
                  "snippet": {
                    "text": "is has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless containers, and cross platform checks.\n  - Feature partial between the bash version and the golang version will be mostly supported.\n    - Adding support for yaml output\n    - Removing support for CSV\n    - JSON and XML will still both be supported\n  - Much faster results. When checking 694 files in a directory\n      - bash: real  0m10.348s\n      - golang: real    0m0.691s\n",
                    "rendered": {
                      "text": "is has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless containers, and cross platform checks.\n  - Feature partial between the bash version and the golang version will be mostly supported.\n    - Adding support for yaml output\n    - Removing support for CSV\n    - JSON and XML will still both be supported\n  - Much faster results. When checking 694 files in a directory\n      - bash: real  0m10.348s\n      - golang: real    0m0.691s\n",
                      "markdown": "`is has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless containers, and cross platform checks.\n  - Feature partial between the bash version and the golang version will be mostly supported.\n    - Adding support for yaml output\n    - Removing support for CSV\n    - JSON and XML will still both be supported\n  - Much faster results. When checking 694 files in a directory\n      - bash: real  0m10.348s\n      - golang: real    0m0.691s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 145,
                  "endLine": 15,
                  "endColumn": 151,
                  "snippet": {
                    "text": "hecksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless ",
                    "rendered": {
                      "text": "hecksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless ",
                      "markdown": "`hecksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more dependencies into checksec. Adding more and more dependenies to be able to check the security flags of files, it not an ideal solution for systems with minor dependencies including embedded systems, distroless `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 60,
                  "endLine": 13,
                  "snippet": {
                    "text": "to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more d",
                    "rendered": {
                      "text": "to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more d",
                      "markdown": "`to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\nUpdates\n-------\n  ** Version 2.7.x should be the last version of checksec in bash\n\n  Version 3.x will be released as a golang static binary\n  Checksec was originally released with 1.0 in early 2009 and has been used for validating binary checks of Linux systems for over a decade. Over time as more checks were supported and Linux distributions have changed, this has brought more d`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 13,
                  "endLine": 6,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\n",
                    "rendered": {
                      "text": "\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\n",
                      "markdown": "`\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/upstream_repos/checksec.zip/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2,
                  "endLine": 4,
                  "endColumn": 8,
                  "snippet": {
                    "text": "checksec\n========\n\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n",
                    "rendered": {
                      "text": "checksec\n========\n\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n",
                      "markdown": "`checksec\n========\n\n## Bash version entering feature freeze\n\nChecksec is a bash script to check the properties of executables (like PIE, RELRO, Canaries, ASLR, Fortify Source).\nIt has been originally written by Tobias Klein and the original source is available here: http://www.trapkit.de/tools/checksec.html\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}